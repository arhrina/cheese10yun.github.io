<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yun Blog</title>
  <icon>https://www.gravatar.com/avatar/d313a2c442931458ed624a3999d75011</icon>
  <subtitle>기술 블로그</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://cheese10yun.github.io/"/>
  <updated>2019-11-19T16:04:43.494Z</updated>
  <id>https://cheese10yun.github.io/</id>
  
  <author>
    <name>Yun</name>
    <email>cheese10yun@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Immutable으로 Properties 설정하기</title>
    <link href="https://cheese10yun.github.io/immutable-properties/"/>
    <id>https://cheese10yun.github.io/immutable-properties/</id>
    <published>2019-11-19T15:00:00.000Z</published>
    <updated>2019-11-19T16:04:43.494Z</updated>
    
    <content type="html"><![CDATA[<p><strong>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/kotlin-junit5" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에 공개되어 있습니다.</strong></p><p>Spring Boot 2.2 버전에서부터는 Immutable으로 Properties 설정을 할 수 있습니다. 커스텀 하게 설정한 값들은 Properties 객체로 관리하는 것이 좋습니다. 해당 내용은 <a href="https://github.com/cheese10yun/spring-jpa-best-practices/blob/master/doc/step-10.md" rel="external nofollow noopener noreferrer" target="_blank">Properties 설정값 가져오기</a>를 참조하시면 됩니다. 기존 Properties의 단점은 Mutable이라는 점입니다. 아래 예제 코드에서 설명드리겠습니다.</p><h2><span id="기존-mutable-properties-방법">기존 Mutable Properties 방법</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"user"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleProperties</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String nickname;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> auth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// getter, setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>기존 방식은 위처럼 setter 기반으로 바인딩 되기 때문에 해당 Properties 설정은 언제든지 변경될 가능성이 있습니다.</strong> 이런 단점을 스프링 부트 2.2에서는 생성자 바인딩을 지원해서 해결했습니다.</p><h2><span id="immutable-properties-방법">Immutable Properties 방법</span></h2><p>해당 예제는 Kotlin <code>data class</code> 기준으로 작성했습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConstructorBinding</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = <span class="meta-string">"user"</span>)</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">UserProperties</span></span>(</span><br><span class="line">        <span class="meta">@field:Email</span></span><br><span class="line">        <span class="keyword">val</span> email: String,</span><br><span class="line"></span><br><span class="line">        <span class="meta">@field:NotEmpty</span></span><br><span class="line">        <span class="keyword">val</span> nickname: String,</span><br><span class="line"></span><br><span class="line">        <span class="meta">@field:Min</span>(<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">val</span> age: <span class="built_in">Int</span>,</span><br><span class="line"></span><br><span class="line">        <span class="meta">@field:NotNull</span></span><br><span class="line">        <span class="keyword">val</span> auth: <span class="built_in">Boolean</span>,</span><br><span class="line"></span><br><span class="line">        <span class="meta">@field:Min</span>(<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">val</span> amount: <span class="built_in">Double</span>,</span><br><span class="line"></span><br><span class="line">        <span class="meta">@DateTimeFormat(pattern = <span class="meta-string">"yyyy-MM-dd"</span>)</span></span><br><span class="line">        <span class="meta">@field:NotNull</span></span><br><span class="line">        <span class="keyword">val</span> date: LocalDate</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>사용법은 간단합니다. <code>@ConstructorBinding</code>을 추가하고 <code>data class</code>으로 넘겨받을 값을 생성자로 지정합니다. 위처럼 작성하면 객체는 Immutable 상태가 됩니다. <strong>스프링 부트 2.2.1 버전부터는 <code>@ConfigurationProperties</code> scanning 방식이 disabled 되면서 <code>@EnableConfigurationProperties</code>을 따로 지정해야 합니다. 자세한 내용은 <a href="https://github.com/spring-projects/spring-boot/issues/18674" rel="external nofollow noopener noreferrer" target="_blank">여기</a>를 참고하세요.</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(UserProperties::class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KotlinJunit5Application</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    runApplication&lt;KotlinJunit5Application&gt;(*args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2.1 버전 부터는 <code>@EnableConfigurationProperties</code>으로 클래스를 지정해야합니다. <code>@Validated</code> 어노테이션으로 properteis에 대한 검증도 가능합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user:</span></span><br><span class="line"><span class="attr">  email:</span> <span class="string">"yuntest.com"</span></span><br><span class="line"><span class="attr">  nickname:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">9</span></span><br><span class="line"><span class="attr">  auth:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  amount:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">  date:</span> <span class="string">"2019-10-10"</span></span><br></pre></td></tr></table></figure><p>위 처럼 유효하지 않은 값들에 대해서 아래 화면처럼 검증할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/kotlin-junit5//img/error-img.png" alt=""></p><p>스프링 부트가 구동될 때 해당 값에 대한 유효성 검사를 어노테이션 기반으로 쉽게 검증할 수 있습니다. <strong>해당 값이 유효하지 않은 경우 스프링이 구동되지 않기 때문에 장점이 있습니다.</strong></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user:</span></span><br><span class="line"><span class="attr">  email:</span> <span class="string">"yun@test.com"</span></span><br><span class="line"><span class="attr">  nickname:</span> <span class="string">"yun"</span></span><br><span class="line"><span class="attr">  age:</span> <span class="number">28</span></span><br><span class="line"><span class="attr">  auth:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">  amount:</span> <span class="number">101</span></span><br><span class="line"><span class="attr">  date:</span> <span class="string">"2019-10-10"</span></span><br></pre></td></tr></table></figure><p>위 <code>yml</code> 처럼 유효한 값을 입력하면 정상적으로 동작하는 것을 확인할 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppRunner</span></span>(<span class="keyword">private</span> <span class="keyword">val</span> userProperties: UserProperties) :ApplicationRunner&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">run</span><span class="params">(args: <span class="type">ApplicationArguments</span>?)</span></span> &#123;</span><br><span class="line">        println(<span class="string">"====================="</span>)</span><br><span class="line">        println(userProperties.toString())</span><br><span class="line">        println(<span class="string">"====================="</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/kotlin-junit5//img/properteis-result.png" alt=""><br>값들이 유요한 경우 객체에 바인딩 되는 것을 학인할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/kotlin-junit5&quot; rel=&quot;external nofollow noopener noreferrer&quot;
      
    
    </summary>
    
    
      <category term="properties" scheme="https://cheese10yun.github.io/tags/properties/"/>
    
  </entry>
  
  <entry>
    <title>Junit5 with Spring boot</title>
    <link href="https://cheese10yun.github.io/junit5-in-spring/"/>
    <id>https://cheese10yun.github.io/junit5-in-spring/</id>
    <published>2019-11-03T09:11:20.000Z</published>
    <updated>2019-11-04T12:56:30.804Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/kotlin-junit5" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><p>Spring boot 2.2 버전부터는 Junit5 디펜던시를 기본으로 포함하고 있습니다. Junit5 주요 테스트 어노테이션과 Spring boot에서 활용법을 정리해보았습니다.</p><h2><span id="valuesource">@ValueSource</span></h2><p><code>@ValueSource</code>어노테이션을 사용하면 배열을 값을 테스트 메서드로 손쉽게 전달할 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@ValueSource(strings = [<span class="meta-string">""</span>, <span class="meta-string">" "</span>])</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `isBlank `<span class="params">(value: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    print(<span class="string">"value: <span class="variable">$value</span> "</span>) <span class="comment">// value:  value:</span></span><br><span class="line">    assertThat(value.isBlank()).isTrue()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@ValueSource(ints = [1, 2, 3, 4])</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `ints values`<span class="params">(value: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    print(<span class="string">"value: <span class="variable">$value</span> "</span>) <span class="comment">// value: 1 value: 2 value: 3 value: 4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Int, String 이 이외에도 기본형 데이터 타입을 지원하고 있습니다.</p><h2><span id="enumsource">EnumSource</span></h2><p><code>@EnumSource</code> 어노테이션을 통해서 Enum을 효율적으로 테스트 할 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Quarter</span></span>(<span class="keyword">val</span> value: <span class="built_in">Int</span>, <span class="keyword">val</span> description: String) &#123;</span><br><span class="line">    Q1(<span class="number">1</span>, <span class="string">"1분기"</span>),</span><br><span class="line">    Q2(<span class="number">2</span>, <span class="string">"2분기"</span>),</span><br><span class="line">    Q3(<span class="number">3</span>, <span class="string">"3분기"</span>),</span><br><span class="line">    Q4(<span class="number">4</span>, <span class="string">"4분기"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>각 분기를 뜻하는 Enum을 위와 같이 정리했습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@EnumSource(Quarter::class)</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `분기의  value 값은 1 ~ 4 값이다`<span class="params">(quarter: <span class="type">Quarter</span>)</span></span> &#123;</span><br><span class="line">    println(quarter.name) <span class="comment">// quarter: Q1 quarter: Q2 quarter: Q3 quarter: Q4</span></span><br><span class="line">    assertThat(quarter.value <span class="keyword">in</span> <span class="number">1.</span><span class="number">.4</span>).isTrue()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>enum에 정의된 모든 값들을 출력하는 것을 확인할 수 있습니다. <code>@EnumSource</code>을 사용하면 모든 enum을 iterator 하기 편리합니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@EnumSource(value = Quarter::class, names = [<span class="meta-string">"Q1"</span>, <span class="meta-string">"Q2"</span>])</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `names을 통해서 특정 <span class="keyword">enum</span> 값만 가져올 수 있다`<span class="params">(quarter: <span class="type">Quarter</span>)</span></span> &#123;</span><br><span class="line">    print(<span class="string">"<span class="subst">$&#123;quarter.name&#125;</span> "</span>) <span class="comment">// quarter: Q1 quarter: Q2</span></span><br><span class="line">    assertThat(quarter.value <span class="keyword">in</span> <span class="number">1.</span><span class="number">.2</span>).isTrue()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>특정 enum을 지정해서 가져오고 싶은 경우 <code>names = [&quot;Q1&quot;, &quot;Q2&quot;]</code>을 사용하면 됩니다.</p><h2><span id="csvsource">@CsvSource</span></h2><p><code>@CsvSource</code> 어노테이션을 통해서 CSV 포멧으로 테스팅을 편리하게 진행 할 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@CsvSource(</span></span><br><span class="line"><span class="meta">        <span class="meta-string">"010-1234-1234,01012341234"</span>,</span></span><br><span class="line"><span class="meta">        <span class="meta-string">"010-2333-2333,01023332333"</span>,</span></span><br><span class="line"><span class="meta">        <span class="meta-string">"02-223-1232,022231232"</span></span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `전화번호는 '-'를 제거한다`<span class="params">(value: <span class="type">String</span>, expected: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> valueReplace = value.replace(<span class="string">"-"</span>, <span class="string">""</span>)</span><br><span class="line">    assertThat(valueReplace).isEqualTo(expected)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>,</code> 단위로 테스트 메서드의 매개변수로 값을 넘길 수 있습니다.</p><h2><span id="methodsource">@MethodSource</span></h2><p><code>@MethodSource</code> 어노테이션을 통해서 복잡한 객체를 보다 쉽게 생성하고 테스트할 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Amount</span></span>(</span><br><span class="line">        <span class="keyword">val</span> price: <span class="built_in">Int</span>,</span><br><span class="line">        <span class="keyword">val</span> ea: <span class="built_in">Int</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> totalPrice: <span class="built_in">Int</span></span><br><span class="line">        <span class="keyword">get</span>() = price * ea</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>가격과 수량을 입력하면 totalPrice 계산하는 단순한 객체 입니다. 해당 객체를 <code>@MethodSource</code>를 통해서 테스트를 진행해 보겠습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ParameterizedTest</span></span><br><span class="line"><span class="meta">@MethodSource(<span class="meta-string">"providerAmount"</span>)</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `amount total price 테스트 `<span class="params">(amount: <span class="type">Amount</span>, expectedTotalPrice: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">    assertThat(amount.totalPrice).isEqualTo(expectedTotalPrice)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    <span class="meta">@JvmStatic</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">providerAmount</span><span class="params">()</span></span> = listOf(</span><br><span class="line">            Arguments.of(Amount(<span class="number">1000</span>, <span class="number">2</span>), <span class="number">2000</span>),</span><br><span class="line">            Arguments.of(Amount(<span class="number">2000</span>, <span class="number">5</span>), <span class="number">10000</span>),</span><br><span class="line">            Arguments.of(Amount(<span class="number">4000</span>, <span class="number">5</span>), <span class="number">20000</span>),</span><br><span class="line">            Arguments.of(Amount(<span class="number">5000</span>, <span class="number">3</span>), <span class="number">15000</span>)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@MethodSource()</code>에 입력하는 문자열과,  값을 지정하는 static 메서드명과 일치해야 합니다. 테스트 하고자 하는 객체와, 예상되는 값을 넘겨받아 다양한 객체의 경우를 쉽게 테스트할 수 있습니다.</p><h2><span id="spring-boot">Spring Boot</span></h2><p>Junit5 관련된 내용은 아니지만 Junit5와 Spring Boot 관련 테스트할때 좋은 패턴을 정리했습니다.</p><h3><span id="생성자-주입">생성자 주입</span></h3><p><code>@TestConstructor(autowireMode = TestConstructor.AutowireMode.ALL)</code> 어노테이션을 통해서 테스트 코드에서도 생성자 주입이 가능해 졌습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TestConstructor(autowireMode = TestConstructor.AutowireMode.ALL)</span></span><br><span class="line"><span class="meta">@ActiveProfiles(<span class="meta-string">"test"</span>)</span></span><br><span class="line"><span class="meta">@DataJpaTest</span></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberRepositoryTest</span></span>(<span class="keyword">val</span> memberRepository: MemberRepository) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `members 조회 테스트`<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//given</span></span><br><span class="line">        <span class="keyword">val</span> email = <span class="string">"asd@asd.com"</span></span><br><span class="line">        <span class="keyword">val</span> name = <span class="string">"name"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//when</span></span><br><span class="line">        <span class="keyword">val</span> member = memberRepository.save(Member(email, name))</span><br><span class="line"></span><br><span class="line">        <span class="comment">//then</span></span><br><span class="line">        assertThat(member.email).isEqualTo(email)</span><br><span class="line">        assertThat(member.name).isEqualTo(name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="dsl-지원">DSL 지원</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@TestConstructor(autowireMode = TestConstructor.AutowireMode.ALL)</span></span><br><span class="line"><span class="meta">@ActiveProfiles(<span class="meta-string">"test"</span>)</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberApiTest</span></span>(</span><br><span class="line">        <span class="keyword">val</span> memberRepository: MemberRepository,</span><br><span class="line">        <span class="keyword">val</span> mockMvc: MockMvc</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `test`<span class="params">()</span></span> &#123;</span><br><span class="line">        memberRepository.saveAll(listOf(</span><br><span class="line">                Member(<span class="string">"email1@asd.com"</span>, <span class="string">"jin"</span>),</span><br><span class="line">                Member(<span class="string">"email2@asd.com"</span>, <span class="string">"yun"</span>),</span><br><span class="line">                Member(<span class="string">"email3@asd.com"</span>, <span class="string">"wan"</span>),</span><br><span class="line">                Member(<span class="string">"email4@asd.com"</span>, <span class="string">"kong"</span>),</span><br><span class="line">                Member(<span class="string">"email5@asd.com"</span>, <span class="string">"joo"</span>)</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line">        mockMvc.<span class="keyword">get</span>(<span class="string">"/members"</span>) &#123;</span><br><span class="line">            accept = MediaType.APPLICATION_JSON</span><br><span class="line">        &#125;.andExpect &#123;</span><br><span class="line">            content &#123; contentType(MediaType.APPLICATION_JSON) &#125;</span><br><span class="line">            jsonPath(<span class="string">"$[0].name"</span>) &#123; value(<span class="string">"jin"</span>) &#125;</span><br><span class="line">            jsonPath(<span class="string">"$[1].name"</span>) &#123; value(<span class="string">"yun"</span>) &#125;</span><br><span class="line">            jsonPath(<span class="string">"$[2].name"</span>) &#123; value(<span class="string">"wan"</span>) &#125;</span><br><span class="line">            jsonPath(<span class="string">"$[3].name"</span>) &#123; value(<span class="string">"kong"</span>) &#125;</span><br><span class="line">            jsonPath(<span class="string">"$[4].name"</span>) &#123; value(<span class="string">"joo"</span>) &#125;</span><br><span class="line">        &#125;.andDo &#123;</span><br><span class="line">            print()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebMvc에서도 DSL 사용을 할 수 있습니다. Web 관련 테스트 코드를 작성하기 더욱 편리해졌습니다.</p><h3><span id="sql-손쉽게-data-set-up">@Sql 손쉽게 Data Set up</span></h3><p><code>*.sql</code> 파일로 손쉽게 데이터를 Set up할 수 있습니다. JPA를 사용중이라면 Given절로 JPA를 만들기가 어렵고 불편한 경우 사용하면 좋을거 같습니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># member-data-setup.sql</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">member</span> (<span class="string">`email`</span>, <span class="string">`name`</span>, <span class="string">`created_at`</span>, <span class="string">`updated_at`</span>)</span><br><span class="line"><span class="keyword">values</span></span><br><span class="line">(<span class="string">'sample1@asd.com'</span>, <span class="string">'name'</span>, <span class="keyword">now</span>(), <span class="keyword">now</span>()),</span><br><span class="line">(<span class="string">'sample2@asd.com'</span>, <span class="string">'name'</span>, <span class="keyword">now</span>(), <span class="keyword">now</span>()),</span><br><span class="line">(<span class="string">'sample3@asd.com'</span>, <span class="string">'name'</span>, <span class="keyword">now</span>(), <span class="keyword">now</span>()),</span><br><span class="line">(<span class="string">'sample4@asd.com'</span>, <span class="string">'name'</span>, <span class="keyword">now</span>(), <span class="keyword">now</span>()),</span><br><span class="line">(<span class="string">'sample5@asd.com'</span>, <span class="string">'name'</span>, <span class="keyword">now</span>(), <span class="keyword">now</span>()),</span><br><span class="line">(<span class="string">'sample6@asd.com'</span>, <span class="string">'name'</span>, <span class="keyword">now</span>(), <span class="keyword">now</span>()),</span><br><span class="line">(<span class="string">'sample15@asd.com'</span>, <span class="string">'name'</span>, <span class="keyword">now</span>(), <span class="keyword">now</span>());</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└── test</span><br><span class="line">    ├── kotlin</span><br><span class="line">    │   └── com</span><br><span class="line">    └── resources</span><br><span class="line">        └── member-data-setup.sql</span><br></pre></td></tr></table></figure><p>위에서 작성한  <code>*.sql</code> 파일을 <code>test/resources</code> 디렉토리에 위치시킵니다</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Sql(<span class="meta-string">"/member-data-setup.sql"</span>)</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">name</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> members = memberRepository.findAll()</span><br><span class="line"></span><br><span class="line">    then(members).anySatisfy &#123;</span><br><span class="line">        then(it.name).isEqualTo(<span class="string">"name"</span>)</span><br><span class="line">        then(it.email).contains(<span class="string">"@"</span>)</span><br><span class="line">                .startsWith(<span class="string">"sample"</span>)</span><br><span class="line">                .endsWith(<span class="string">"com"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Sql</code> 어노테이션을 통헤서 해당 디렉터리의 위치와 파일 이름을 작성합니다. 기본적인 디렉터리를 <code>test/resources</code>을 바라보기 때문에 위와 같은 경우 파일명만 작성합니다.</p><h2><span id="assertj">AssertJ</span></h2><p>Junit5의 관련된 내용은 아니지만 이번 Spring Boot 2.2 Release에서 AssertJ 관련된 내용이 있어 AssertJ의 사용과 간략한 팁을 정리했습니다.</p><p><code>AssertJ</code>는 개인적으로 선호하는 Test Matcher입니다. static 메서드로 동작하기 때문에 자동 완성으로 Matcher 기능들을 손쉽게 사용할 수 있고, Matcher에서 지원해주는 기능도 막강합니다. AssertJ에서는 BDD 스타일의 BDDAssertion을 제공해주고 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `member save test`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//given</span></span><br><span class="line">    <span class="keyword">val</span> email = <span class="string">"asd@asd.com"</span></span><br><span class="line">    <span class="keyword">val</span> name = <span class="string">"name"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//when</span></span><br><span class="line">    <span class="keyword">val</span> member = memberRepository.save(Member(email, name))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 기존 사용법 assertThat </span></span><br><span class="line">    assertThat(member.email).isEqualTo(email)</span><br><span class="line">    assertThat(member.name).isEqualTo(name)</span><br><span class="line">    assertThat(member.createdAt).isBeforeOrEqualTo(LocalDateTime.now())</span><br><span class="line">    assertThat(member.updatedAt).isBeforeOrEqualTo(LocalDateTime.now())</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// BDD 사용법</span></span><br><span class="line">    then(member.email).isEqualTo(email)</span><br><span class="line">    then(member.name).isEqualTo(name)</span><br><span class="line">    then(member.createdAt).isBeforeOrEqualTo(LocalDateTime.now())</span><br><span class="line">    then(member.updatedAt).isBeforeOrEqualTo(LocalDateTime.now())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>assertThat</code> -&gt; <code>then</code> 으로 대체되었습니다. 코드도 적어지고 더 직관적으로 되어서 좋아졌습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `문장 검사`<span class="params">()</span></span> &#123;</span><br><span class="line">    then(<span class="string">"AssertJ is best matcher"</span>).isNotNull()</span><br><span class="line">            .startsWith(<span class="string">"AssertJ"</span>)</span><br><span class="line">            .contains(<span class="string">" "</span>)</span><br><span class="line">            .endsWith(<span class="string">"matcher"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같은 형식으로 코드를 연결해서 테스트할 수도 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `findByName test`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//given</span></span><br><span class="line">    memberRepository.saveAll(listOf(</span><br><span class="line">            Member(<span class="string">"email1@asd.com"</span>, <span class="string">"kim"</span>),</span><br><span class="line">            Member(<span class="string">"email2@asd.com"</span>, <span class="string">"kim"</span>),</span><br><span class="line">            Member(<span class="string">"email3@asd.com"</span>, <span class="string">"kim"</span>),</span><br><span class="line">            Member(<span class="string">"email4@asd.com"</span>, <span class="string">"name"</span>),</span><br><span class="line">            Member(<span class="string">"email5@asd.com"</span>, <span class="string">"name"</span>)</span><br><span class="line">    ))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//when</span></span><br><span class="line">    <span class="keyword">val</span> members = memberRepository.findByName(<span class="string">"kim"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then</span></span><br><span class="line">    then(members).anySatisfy &#123;</span><br><span class="line">        then(it.name).isEqualTo(<span class="string">"kim"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>anySatisfy</code> 람다 표현식으로 members를 iterator 돌리면서 해당 <code>kim</code>과 일치하는지 편리하게 확인할 수 있습니다. 이 밖에도 다양한 것들을 제공하고 있고 계속 발전하고 있는 AssertJ를 추천드립니다.</p><h3><span id="thenthrownby">thenThrownBy</span></h3><p>thenThrownBy을 통해서 Exception 테스트를 쉽게 진행할 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">validateBeforeSave</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">validate</span><span class="params">(value: <span class="type">String</span>, fieldName: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (value.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">throw</span> IllegalArgumentException(<span class="string">"<span class="variable">$id</span> empty <span class="variable">$fieldName</span>"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        validate(email, <span class="string">"email"</span>)</span><br><span class="line">        validate(name, <span class="string">"name"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>빈 문자열인 경우 <code>IllegalArgumentException</code> 예외를 발생시키는 로직을 아래 처럼 테스트할 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `member 실패`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> member = Member(<span class="string">""</span>, <span class="string">""</span>)</span><br><span class="line">    thenThrownBy &#123; member.validateBeforeSave() &#125;</span><br><span class="line">            .isExactlyInstanceOf(IllegalArgumentException::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line">            .hasMessageContaining(<span class="string">"empty"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>특정 예외가 발생하는지, 예외 메시지의 특정한 값이 존재하는지 간단하게 확인할 수 있습니다.</p><h2><span id="참고">참고</span></h2><ul><li><a href="https://www.baeldung.com/parameterized-tests-junit-5" rel="external nofollow noopener noreferrer" target="_blank">Guide to JUnit 5 Parameterized Tests</a></li><li><a href="http://wonwoo.ml/index.php/post/category/kotlin" rel="external nofollow noopener noreferrer" target="_blank">머루의개발블로그 : Spring 5.2 와 Spring boot 2.2 추가된 Test 기능들</a></li><li><a href="https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-2.2-Release-Notes" rel="external nofollow noopener noreferrer" target="_blank">Spring Boot 2.2 Release Notes</a></li><li><a href="https://www.baeldung.com/parameterized-tests-junit-5" rel="external nofollow noopener noreferrer" target="_blank">Baeldung : Guide to JUnit 5 Parameterized Tests</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/kotlin-junit5&quot; rel=&quot;external nofollow noopener norefe
      
    
    </summary>
    
    
      <category term="Junit5" scheme="https://cheese10yun.github.io/tags/Junit5/"/>
    
      <category term="Test" scheme="https://cheese10yun.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>JPA N+1 발생원인과 해결방법</title>
    <link href="https://cheese10yun.github.io/jpa-nplus-1/"/>
    <id>https://cheese10yun.github.io/jpa-nplus-1/</id>
    <published>2019-10-27T09:16:27.000Z</published>
    <updated>2019-10-27T16:19:13.900Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/jpa-n-plus-1" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인할 수 있습니다.</p></blockquote><p>JPA를 사용하다면 보면 N+1문제를 많이 만나게 됩니다. 그에 따른 발생 원인과 해결법을 정리해보았습니다</p><h2><span id="erd">ERD</span></h2><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/jpa-n-plus-1/images/jpa-erd.png" alt=""></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"member"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"member"</span>, fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="keyword">var</span> orders: Set&lt;Order&gt; = emptySet()</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"orders"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>() &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"member_id"</span>, nullable = false, updatable = false)</span></span><br><span class="line">    <span class="keyword">lateinit</span> <span class="keyword">var</span> member: Member</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span></span><br></pre></td></tr></table></figure><p>위 엔티티 처럼 멤버 &lt;-&gt; 주문 관계를 기준으로 살명드리겠습니다.</p><h2><span id="발생-케이스">발생 케이스</span></h2><h3><span id="즉시로딩-n1">즉시로딩 N+1</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `지연 로딩 n+1`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// fetch = FetchType.EAGER 의 경우</span></span><br><span class="line">    <span class="keyword">val</span> members = memberRepository.findAll()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/jpa-n-plus-1/images/jpa-lazy-3.png" alt=""></p><p><strong><code>fetch = FetchType.EAGER</code> 전략을 즉시 로딩으로 가져가면 N+1 문제가 발생합니다.</strong></p><h3><span id="지연로딩과-n1">지연로딩과 N+1</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `지연 로딩 n+1`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// fetch = FetchType.LAZY 의 경우</span></span><br><span class="line">    <span class="keyword">val</span> members = memberRepository.findAll()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/jpa-n-plus-1/images/jpa-lay-1.png" alt=""></p><p><code>fetch = FetchType.LAZY</code> 설정으로 LAZY 로딩을 하면 N+1 문제는 발생하지 않습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `지연로딩인 n+1`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> members = memberRepository.findAll()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 회원 한명에 대한 조회는 문제가 없다</span></span><br><span class="line">    <span class="keyword">val</span> firstMember = members[<span class="number">0</span>]</span><br><span class="line">    println(firstMember.orders.size)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/jpa-n-plus-1/images/jpa-lazy-2.png" alt=""></p><p>위처럼 한 명의 member를 조회했기 때문에 해당 memeber의 order를 위 와 같은 SQL로 조회합니다. <strong>하지만 아래 코드처럼 모은 Member에 대해서 주문을 조회하는 경우 N+1문제가 발생합니다.</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `지연로딩인 n+1`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> members = memberRepository.findAll()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 회원 한명에 대한 조회는 문제가 없다</span></span><br><span class="line">    <span class="keyword">val</span> firstMember = members[<span class="number">0</span>]</span><br><span class="line">    println(<span class="string">"order size : <span class="subst">$&#123;firstMember.orders.size&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 조회한 모든 회원에 대해서 조회하는 경우 문제 발생</span></span><br><span class="line">    <span class="keyword">for</span>(member <span class="keyword">in</span> members)&#123;</span><br><span class="line">        println(<span class="string">"order size: <span class="subst">$&#123;member.orders.size&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/jpa-n-plus-1/images/jpa-lazy-3.png" alt=""></p><p><strong>결국 지연 로딩에서도 N+1 문제는 발생합니다.</strong></p><h2><span id="원인">원인</span></h2><p>그렇다면 왜 문제가 발생하는 것일까요? JPQL을 실행하면 JPA는 이것을 분석해서 SQL을 생성합니다. <strong>JPQL 입장에서는 즉시 로딩, 지연 로딩과 같은 글로벌 패치 전략을 무시하고 JPQL만 사용해서 SQL을 생성합니다.</strong></p><p><img src="https://github.com/cheese10yun/TIL/blob/master/assets/jpa-n+1.png?raw=true" alt=""></p><p>JPQL 특징이 있습니다… <code>findById()</code> 같은 경우에는 엔티티를 영속성 컨텍스트에서 먼저 찾고 영속성 컨텍스트에 없는 경우에 데이터베이스에 찾는 <strong>반면 JPQL은 항상 데이터베이스에 SQL을 실행해서 결과를 조회합니다.</strong> 그리고 아래와 같은 작업을 진행하게 됩니다.</p><ol><li>JPQL을 호출하면 데이터베이스에 우선 적으로 조회한다.</li><li>조회한 값을 영속성 컨텍스트에 저장한다.</li><li>영속성 컨텍스트에 조회할 때 이미 존재하는 데이터가 있다면(같은 영속성 컨텍스트에서 이미 조회한 유저가 있는 경우) 데이터를 버린다.</li></ol><p><strong>JPQL의 동작 순서는 위와 같고 그렇다면 왜 N+1이 발생하는 것일까요? JPQL에서는 글로벌 패치 전략을 완전히 무시하고 SQL을 생성합니다.</strong> <code>findAll()</code>메서드를 호출하게 되면 아래와 같은 SQL이 실행됩니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> *<span class="keyword">from</span> <span class="keyword">member</span> // findAll()의 <span class="keyword">SQL</span></span><br></pre></td></tr></table></figure><h3><span id="즉시-로딩인-경우">즉시 로딩인 경우</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> members = memberRepository.findAll()</span><br></pre></td></tr></table></figure><p>JPQL에서 동작한 쿼리를 통해서 members에 데이터가 바인딩 됩니다. <strong>그 이후 JPA에서는 글로벌 패치 전략(즉시 로딩)을 받아들여 해당 member 대해서 추가적인 레이지 로딩으로 N+1을 발생시킵니다.</strong></p><h3><span id="지연-로딩인-경우">지연 로딩인 경우</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> members = memberRepository.findAll()</span><br></pre></td></tr></table></figure><p>동일하게 members에 데이터가 바인 딩되지만 <strong>JPA가 글로벌 패치 전략을 받아들이지만 지연 로딩이기 때문에 추가적인 SQL을 발생시키지 않습니다.</strong> 하지만 위에서 본 예제처럼 레이지로 딩으로 추가적인 작업을 진행하게되면 결국 N+1 문제가 발생하게 됩니다.</p><h2><span id="해결-방법">해결 방법</span></h2><h3><span id="batch-szie">Batch Szie</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"member"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>() &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BatchSize(size = 5)</span> <span class="comment">// Batch size를 지정한다</span></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"member"</span>, fetch = FetchType.EAGER)</span> <span class="comment">// 즉시 로딩으로 설정</span></span><br><span class="line">    <span class="keyword">var</span> orders: List&lt;Order&gt; = emptyList()</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/jpa-n-plus-1/images/jpa-batch-size.png" alt=""></p><p><code>@BatchSize(size = 5)</code> 에노테이션을 통해서 설정한 size 만큼 데이터를 미리 로딩 한다. 즉 연관된 엔티티를 조회할때 size 만큼 <code>where in</code> 쿼리를 통해서 조회하게되고 size를 넘어가게 되면 추가로 <code>where in</code> 쿼리를 진행합니다. 하지만 <strong>글로벌 패치전략을 변경해야 하며, 정해진 Batch size 만큼 조회되는 것도 고정되기 때문에 권장 드리는 방법은 아닙니다.</strong></p><h3><span id="페치-조인-사용">페치 조인 사용</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MemberRepository</span> : <span class="type">JpaRepository</span>&lt;<span class="type">Member, Long</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Query(</span></span><br><span class="line"><span class="meta">            <span class="meta-string">"select m from Member m left join fetch m.orders"</span></span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findAllWithFetch</span><span class="params">()</span></span>: List&lt;Member&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `페치 조인 사용`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> members = memberRepository.findAllWithFetch()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 조회한 모든 회원에 대해서 조회하는 경우에도 N+1 문제가 발생하지 않음</span></span><br><span class="line">    <span class="keyword">for</span> (member <span class="keyword">in</span> members) &#123;</span><br><span class="line">        println(<span class="string">"order size: <span class="subst">$&#123;member.orders.size&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>가장 많이 사용하는 방법인 <code>fetch</code>을 통해서 조인 쿼리를 진행하는 것입니다. <code>fetch</code> 키워드를 사용하게 되면 연관된 엔티티나 컬렉션을 한 번에 같이 조회할 수 있습니다. <strong>즉 페치 조인을 사용하게 되면 연관된 엔티티는 프록시가 아닌 실제 엔티티를 조회하게 되므로 연관관계 객체까지 한 번의 쿼리로 가져올 수 있습니다.</strong></p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/jpa-n-plus-1/images/jpa-fetch-join.png" alt=""></p><p>위 로그를 보면 SQL을 통해서 한 번에 데이터를 가져 온다. <strong><code>Order Size: 10</code>을 보면 N+1이 발생하지 않고 있다.</strong> 그렇다면 <code>fetch</code> 키워드를 제거하면 어떻게 될까요?</p><h4><span id="페치-조인과-일반-조인-차이">페치 조인과 일반 조인 차이</span></h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MemberRepository</span> : <span class="type">JpaRepository</span>&lt;<span class="type">Member, Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Query(</span></span><br><span class="line"><span class="meta">            <span class="meta-string">"select m from Member m join m.orders"</span></span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findAllWithFetch</span><span class="params">()</span></span>: List&lt;Member&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `페치 조인 키워드 제거`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> members = memberRepository.findAllWithFetch() <span class="comment">// 패치 타입 Lazy 경우</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 패치 조인하지 않은 상태에서는 N+1 문제 발생</span></span><br><span class="line">    <span class="keyword">for</span> (member <span class="keyword">in</span> members) &#123;</span><br><span class="line">        println(<span class="string">"order size: <span class="subst">$&#123;member.orders.size&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/jpa-n-plus-1/images/jpa-fetch-join-2.png" alt=""></p><p>출력되는 SQL을 보면 조인을 통해서 연관관계 컬렉션까지 함께 조회되는 것으로 생각할 수 있습니다. <strong>하지만 JPQL은 결과를 반환할 때 연관관계까지 고려하지 않고 select 절에 지정한 엔티티만 조회하게 됩니다.</strong> 따라서 컬렉션은 초기화하지 않은 컬렉션 레퍼를 반환하게 되고 컬렉션이 없기 때문에 Lazy 로딩이 발생하게 되고 <strong>결과적으로 N+1 문제가 발생하게 됩니다.</strong></p><h2><span id="페치-조인의-한계">페치 조인의 한계</span></h2><p>그렇다면 Fetch 조인이 만능일까요? 아쉽지만 Fetch 조인은 몇가지의 한계가 있습니다.</p><h3><span id="컬렉션을-페치-조인하면-페이징-api를-사용할-수-없다">컬렉션을 페치 조인하면 페이징 API를 사용할 수 없다.</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">MemberRepository</span> : <span class="type">JpaRepository</span>&lt;<span class="type">Member, Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Query(</span></span><br><span class="line"><span class="meta">            value = <span class="meta-string">"select m from Member m left join fetch m.orders"</span>,</span></span><br><span class="line"><span class="meta">            countQuery = <span class="meta-string">"select count(m) from Member m"</span></span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">findAllWithFetchPaging</span><span class="params">(pageable: <span class="type">Pageable</span>)</span></span>: Page&lt;Member&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `컬렉션을 페치 조인하면 페이징 API를 사용할 수 없다`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> page = PageRequest.of(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">val</span> members = memberRepository.findAllWithFetchPaging(page)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 조회한 모든 회원에 대해서 조회하는 경우에도 N+1 문제가 발생하지 않음</span></span><br><span class="line">    <span class="keyword">for</span> (member <span class="keyword">in</span> members) &#123;</span><br><span class="line">        println(<span class="string">"order size: <span class="subst">$&#123;member.orders.size&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/jpa-n-plus-1/images/jpa-paging.png" alt=""></p><p>이전에 <a href="https://github.com/cheese10yun/blog-sample/tree/master/jpa-fetch-join" rel="external nofollow noopener noreferrer" target="_blank">Paging 처리 Fetch Join 적용 시 limit 동작하지 않는 이슈</a>에서도 다룬 적있습니다. 해당 쿼리에서는 limit offset 관련된 쿼리문이 없습니다. <strong>하이버네이트에서 컬렉션을 페치 조인하고 페지이 API를 사용하면 메모리에서 페이징 처리를 진행합니다.</strong> 즉 데이터베이스에서는 FULL Scan 한 이후 모든 데이터를 메모리에 올린 이후 limit에 맞게 데이터를 만들게 됩니다. 우선 데이터베이스에 Full Sacn 하는 것도 문제지만 그것을 메모리에 올리기 때문에 메모리를 심하게 잡아먹게 됩니다. <strong>컬렉션이 아닌 단일 값 연관 필드의 경우에는 패치 조인을 사용해도 페이징 API를 사용할 수 있습니다.</strong></p><h3><span id="둘-이상-컬렉션을-페치할-수-없다">둘 이상 컬렉션을 페치할 수 없다.</span></h3><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/jpa-n-plus-1/images/jpa-erd2.png" alt=""></p><p>위 ERD 처럼 member가 orders, copons를 갖는 테이블 구조인</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"member"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>() &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"member"</span>, fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="keyword">var</span> orders: List&lt;Order&gt; = emptyList()</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"member"</span>, fetch = FetchType.LAZY)</span> <span class="comment">// 새로운 컬렉션 쿠폰 추가</span></span><br><span class="line">    <span class="keyword">var</span> coupons: List&lt;Coupon&gt; = emptyList()</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query(</span></span><br><span class="line"><span class="meta">        value = <span class="meta-string">"select m from Member m left join fetch m.orders left join fetch m.coupons"</span>,</span></span><br><span class="line"><span class="meta">        countQuery = <span class="meta-string">"select count(m) from Member m"</span></span></span><br><span class="line"><span class="meta">    )</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">findAllWithFetchPaging2</span><span class="params">(pageable: <span class="type">Pageable</span>)</span></span>: Page&lt;Member&gt;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `둘 이상 컬렉션을 페치할 수 없다`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> page = PageRequest.of(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">val</span> members = memberRepository.findAllWithFetchPaging2(page)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 조회한 모든 회원에 대해서 조회하는 경우에도 N+1 문제가 발생하지 않음</span></span><br><span class="line">    <span class="keyword">for</span> (member <span class="keyword">in</span> members) &#123;</span><br><span class="line">        println(<span class="string">"order size: <span class="subst">$&#123;member.orders.size&#125;</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/jpa-n-plus-1/images/jpa-fetch-muliple.png" alt=""></p><p>컬렉션의 카테시안 곱이 만들어지므로 하이버네이트는 주의해야 합니다. 하이버네이트는 <code>annot simultaneously fetch multiple bag</code> 예외가 발생하게 됩니다. 가장 쉬운 해결 방법으로는 자료형을 List -&gt; Set으로 변경하는 것입니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"member"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>() &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"member"</span>, fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="keyword">var</span> orders: Set&lt;Order&gt; = emptySet()</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(mappedBy = <span class="meta-string">"member"</span>, fetch = FetchType.LAZY)</span></span><br><span class="line">    <span class="keyword">var</span> coupons: Set&lt;Coupon&gt; = emptySet()</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">set</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>아래 코드처럼 변경하고 테스트 코드를 다시 실행하면 아래와 같은 결과를 확인할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/jpa-n-plus-1/images/jpa-fetch-muliple-2.png" alt=""></p><p><strong>하지만 이 방법도 권장 드리지 않습니다. 특정 에러를 해결하기 위해서 자료형을 바꾸는 것 자체가 좋은 해결법이 아니며 도메인 레이어는 아주 중요한 레이어이기 때문에 더 권장 드리지 않습니다.</strong></p><h2><span id="참고">참고</span></h2><ul><li><a href="http://www.acornpub.co.kr/book/jpa-programmig" rel="external nofollow noopener noreferrer" target="_blank">자바 ORM 표준 JPA 프로그래밍</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/jpa-n-plus-1&quot; rel=&quot;external nofollow noopener norefer
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="N+1" scheme="https://cheese10yun.github.io/tags/N-1/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ Execute Gradle task로 Gradle를 쉽게 사용하자</title>
    <link href="https://cheese10yun.github.io/intellij-execute-gradle-task/"/>
    <id>https://cheese10yun.github.io/intellij-execute-gradle-task/</id>
    <published>2019-10-16T15:16:46.000Z</published>
    <updated>2019-10-16T15:16:06.322Z</updated>
    
    <content type="html"><![CDATA[<p>IntellIj를 이용하면 Gradle Task의 명령어 assistant 해주는 기능을 통해서 보다 쉽게 Gradle을 사용할 수 있습니다.</p><h2><span id="설정-방법">설정 방법</span></h2><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/execute-gradle-task.png" alt=""></p><p>Find Action에서 <code>Execute Gradle Task</code>을 열어 볼 수 있습니다.</p><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/gradle-tasks-hot-key.png" alt=""></p><p>단축키를 지정해서 사용하는 것을 권장드립니다. <code>Keymap</code> -&gt; <code>Execute Gradle Task</code> -&gt; <code>Hot Key</code> 지정<br>저같은 경우에는 <code>CMD + 0</code>으로 지정해서 사용하고 있습니다.</p><h2><span id="사용법">사용법</span></h2><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/gradle-task-run-1.gif" alt=""></p><p><code>Execute Gradle Task</code>를 실행하면 위 화면 처럼 해당 Gradle 명령어를 assistant 해줍니다.</p><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/costom-build.png" alt=""></p><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/gradle-task-run-2.gif" alt=""><br>위 그림처럼 커스텀하게 등록한 task도 assistant 해줍니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IntellIj를 이용하면 Gradle Task의 명령어 assistant 해주는 기능을 통해서 보다 쉽게 Gradle을 사용할 수 있습니다.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;설정-방법&quot;&gt;설정 방법&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;h
      
    
    </summary>
    
    
      <category term="Gradle" scheme="https://cheese10yun.github.io/tags/Gradle/"/>
    
      <category term="IntelliJ" scheme="https://cheese10yun.github.io/tags/IntelliJ/"/>
    
  </entry>
  
  <entry>
    <title>Mysql Explain</title>
    <link href="https://cheese10yun.github.io/mysql-explian/"/>
    <id>https://cheese10yun.github.io/mysql-explian/</id>
    <published>2019-10-13T04:55:28.000Z</published>
    <updated>2019-10-16T15:21:06.915Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 글은 <a href="http://www.yes24.com/Product/Goods/72270172?" rel="external nofollow noopener noreferrer" target="_blank">MySQL 5.7 완벽 분석</a>을 정리한 내용입니다.</p></blockquote><h2><span id="mysql-옵티마이저-구조">MySQL 옵티마이저 구조</span></h2><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/mysql-sql-executor-flow.png" alt=""></p><p>MySQL 옵티마이저는 비용 기반으로 어떤 실행 계획으로 쿼리를 실행했을 때 비용이 얼마나 발생하는지를 계산해하여 비용이 가장 적은 것을 택하게 됩니다. 어디까지나 추정 값이므로 정확한 비용은 실행 전까지 정확하게는 알 수 없습니다.</p><h2><span id="explain">EXPLAIN</span></h2><p>EXPLAIN은 MySQL 서버가 어떠한 쿼리를 실행할 것인가, <strong>즉 실행 계획이 무엇인지 알고 싶을 때 사용하는 기본적인 명령어이다.</strong> 5.6 부터는 JSON 형식의 출력도할 수 있게 되었다. MySQL Workbench와의 결합으로 시각화할 수도 있습니다. 이 부분은 아래에서 다루겠습니다.</p><h2><span id="테이블-구조">테이블 구조</span></h2><p><img src="https://github.com/cheese10yun/TIL/blob/master/assets/smaple-erd.png?raw=true" alt=""></p><p><code>EXPLAIN</code>을 살펴 보기 이전 ERD를 살펴보겠습니다. member는 회원 정보이고, orders는 주문 목록, transaction은 해당 주문의 거래 정보입니다.</p><h2><span id="explain-결과">EXPLAIN 결과</span></h2><p>EXPLAIN은 MySQL 서버가 어떠한 쿼리를 실행할 것인가, 즉 실행 계획이 무엇인지 알고 싶을 때 사용하는 기본적인 명령어이다. 5.6 부터는 JSON 형식의 출력도할 수 있게 되었다</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span></span><br><span class="line"><span class="keyword">select</span> m.*, o.*, t.* <span class="keyword">from</span> <span class="keyword">member</span>  m</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> orders o <span class="keyword">on</span> m.id = o.member_id</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">transaction</span> t <span class="keyword">on</span> o.transaction_id = t.id</span><br><span class="line"><span class="keyword">where</span> m.id <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">33</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>partitions</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>filtered</th><th>Extra</th></tr></thead><tbody><tr><td>‘1’</td><td>‘SIMPLE’</td><td>‘m’</td><td>NULL</td><td>‘range’</td><td>‘PRIMARY’</td><td>‘PRIMARY’</td><td>‘8’</td><td>NULL</td><td>‘3’</td><td>‘100.00’</td><td>‘Using where’</td></tr><tr><td>‘1’</td><td>‘SIMPLE’</td><td>‘o’</td><td>NULL</td><td>‘ref’</td><td>‘FKpktxw…’</td><td>‘FKpktxw…’</td><td>‘8’</td><td>‘<a href="http://sample.m.id" rel="external nofollow noopener noreferrer" target="_blank">sample.m.id</a>’</td><td>‘90’</td><td>‘100.00’</td><td>NULL</td></tr><tr><td>‘1’</td><td>‘SIMPLE’</td><td>‘t’</td><td>NULL</td><td>‘eq_ref’</td><td>‘PRIMARY’</td><td>‘PRIMARY’</td><td>‘8’</td><td>‘sample.o.transaction_id’</td><td>‘1’</td><td>‘100.00’</td><td>NULL</td></tr></tbody></table><h3><span id="table">table</span></h3><p>어떤 테이블에 대한 접근을 표시하고 있는지는 table 필드에 표시되어있다.</p><h3><span id="id">id</span></h3><p>id는 SELECT에 붙은 번호를 말한다. MySQL은 조인을 하나의 단위로 실행하기 때문에 id는 그 쿼리에 실행 단위를 식별하는 것이다. 따라서 조인만 수행하는 쿼리에서는 id는 항상 1이 된다.</p><h3><span id="select_type">select_type</span></h3><p>select_type은 항상 SIMPLE 이된다. 복잡한 조인을 해도 SIMPLE이 된다. 서브쿼리나 UNION이 있으면 id와 select_type이 변한다.</p><h3><span id="partitions">partitions</span></h3><p>partitions는 파티셔닝이 되어 있는 경우에 사용되는 필드이다. 이 쿼리에서 사용된 테이블을 모두 파티셔닝이 되어 있지 않기 때문에 이 필드가 모두 NULL로 출력되았다. 파티셔닝 되어 있는 경우는 반드시 이 필드를 확인하자</p><h3><span id="type">type</span></h3><p>type은 접근 방식을 표시하는 필드다. 접근 방식은 테이블에서 어떻게 행데이터를 가져올것인가를 가리킨다. 위 EXPLAIN에서는 ALL, eq_ref, ref가 있는데 ALL, eq_ref는 조인시 기본 키나 고유키를 사용하여 하나의 값으로 접근(최대 1행만을 정확하게 패치), ref는 여러 개의 행을 패치할 가능성이 있는 접근을 의미한다. <strong>접근 방식은 대상 테이블로의 접근이 효율적일지 여부를 판단하는 데 아주 중요한 항목이다.</strong></p><p>이들 접근 방식 가운데도 주의가 필요한 것은 ALL, index, ref_or_null이다. <strong>ALL, index 두 가지는 테이블 또는 특정 인덱스가 전체 행에 접근하기 때문에 테이블 크기가 크면 효율이 떨어진다. ref_or_null의 경우 NUL이 들어있는 행은 인덱스의 맨 앞에 모아서 저장하지만 그 건수가 많으면 MySQL 서버의 작업량이 방대해진다. 다시 말해서 ALL 이외의 접근 방식은 모두 인덱스를 사용한다.</strong></p><p>접근 방식이 ALL 또는 index인 경우는 그 쿼리로 사용할 수 있는 적절한 인덱스가 없다는 의미일 수도 있다. 위 쿼리에서 Country 테이블에 대한 접근은 ALL이지만 이는 WHERE 구의 조건을 지정하지 않았기 때문이다. 그러한 쿼리에서 드라이빙 테이블에 접근한다면 전체 행을 스캔 할수 밖에 없다.</p><table><thead><tr><th>접근 방식</th><th>설명</th></tr></thead><tbody><tr><td>const</td><td>기본 키 또는 고유키에 의한 loockup(등가비교), 조인이 아닌 가장 외부의 테이블에 접근 하는 방식, 결과는 항상 1행이다. 단 기본 키, 고유 키를 사용하고 있으므로 범위 검색으로 지정하는 경우 const가 되지 않는다</td></tr><tr><td>system</td><td>테이블에 1행밖에 없는 경우의 특수한 접근 방식</td></tr><tr><td>ALL</td><td>전체 행 스캔, 테이블의 데이터 전체에 잡근한다.</td></tr><tr><td>index</td><td>인덱스 스캔, 테이블의 특정 인덱스의 전체 엔트리에 접근한다.</td></tr><tr><td>eq_ref</td><td>조인이 내부 테이블로 접근할 때 기본키 또는 공유 키에 의한 lookup이 일어난다. const와 비슷하지만 조인의 내부 테이블에 접근한다는 점이 다르다</td></tr><tr><td>ref</td><td>고유 키가아닌 인덱스에 대한 등가비교, 여러 개 행에 접근할 가능성이 있다.</td></tr><tr><td>ref_or_null</td><td>ref와 마찬가지로 인덱스 접근 시 맨 앞에 저장되어 있는 NULL의 엔트리를 검색한다.</td></tr><tr><td>range</td><td>인덱스 특정 범위의 행에 접근한다</td></tr><tr><td>fulltext</td><td>fulltext 인덱스를 사용한 검색</td></tr><tr><td>index_merge</td><td>여러 개인스턴스를 사용해 행을 가져오고 그 결과를 통합한다.</td></tr><tr><td>unique_subquery</td><td>IN 서브쿼리 접근에서 기본 키 또는 고유 키를 사용한다. 이 방식은 쓸데 없는 오버헤드를 줄여 상당히 빠르다.</td></tr><tr><td>index_subquery</td><td>unique_sunquery와 거의 비슷하지만 고유한 인덱스를 사용하지 않는 점이 다르다. 이 접근 방식도 상당히 빠르다</td></tr></tbody></table><h3><span id="possible_keys">possible_keys</span></h3><p>possible_keys 필드는 이용 가능성있는 인덱스의 목록이다.</p><h3><span id="key">key</span></h3><p>possible_keys 필드는 이용 가능성있는 인덱스의 목록 중에서 실제로 옵티마이저가 선택한 인덱스가 key가 된다. 위 EXPLAN 에서는 County 테이블(첫 번째 행)의 <strong>Key는 NULL 인데 이는 행 데이터를 가져오기 위해 인덱스를 사용할 수 없다는 의미이다.</strong></p><h3><span id="key_len">key_len</span></h3><p>key_len 필드는 선택된 인덱스의 길이를 의미한다. 중요한 필드는 아니지만 인덱스가 너무 긴 것도 비효율적이므로 기억해두자.</p><h3><span id="rows">rows</span></h3><p>rows는 이 접근 방식을 사용해 몇 행을 가져왔는가를 표시한다. 최초에 접근하는 테이블에 대해서 쿼리 전체에 의해 접근하는 행 수, 그 이후에 테이블에 대해서는 1행의 조인으로 평균 몇 행에 접근했는가를 표시한다. 단 어디까지나 통계 값으로 계산한 값이므로 실제 행 수와 반드시 일치하지 않는다.</p><h3><span id="filtered">filtered</span></h3><p>filtered는 행 데이터를 가져와 거이에서 WHERE 구의 검색 조건이 적용되면 몇행이 남는지를 표시한다. 이 값도 통계 값 바탕으로 계산한 값이므로 현실의 값과 반드시 일치하지 않는다.</p><h3><span id="extra">extra</span></h3><p>Extra 필드는 옵티마이저가 동작하는데 대해서 우리에게 알려주는 힌트다. 이 필드는 EXPLAN을 사용해 옵티마이저의 행동을 파악할때 아주 중요하다.</p><h2><span id="json-형식-explain">JSON 형식 EXPLAIN</span></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">explain</span> <span class="keyword">format</span> = <span class="keyword">json</span></span><br><span class="line"><span class="keyword">select</span> m.*, o.*, t.* <span class="keyword">from</span> <span class="keyword">member</span>  m</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> orders o <span class="keyword">on</span> m.id = o.member_id</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> <span class="keyword">transaction</span> t <span class="keyword">on</span> o.transaction_id = t.id</span><br><span class="line"><span class="keyword">where</span> m.id <span class="keyword">in</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">33</span>)</span><br></pre></td></tr></table></figure><p>JSON 형식의 EXPLAIN은 기존의 표 형식 보다 출력되는 정보가 많다. 5.7 부터는 비용에 관한 정보를 부여주어서 표 형식에 비해 편리하다. JOSN 형식의 EXPLAIN에는 Extra 필드에서 Using WHERE 라고만 출력되는 것이 attacged_condition로 나와서 구체적으러 어떤 조건이 적용되는지 알 수 있다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"query_block"</span>: &#123;</span><br><span class="line">    <span class="attr">"select_id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"cost_info"</span>: &#123;</span><br><span class="line">      <span class="attr">"query_cost"</span>: <span class="string">"449.03"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"nested_loop"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"table"</span>: &#123;</span><br><span class="line">          <span class="attr">"table_name"</span>: <span class="string">"m"</span>,</span><br><span class="line">          <span class="attr">"access_type"</span>: <span class="string">"range"</span>,</span><br><span class="line">          <span class="attr">"possible_keys"</span>: [</span><br><span class="line">            <span class="string">"PRIMARY"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"PRIMARY"</span>,</span><br><span class="line">          <span class="attr">"used_key_parts"</span>: [</span><br><span class="line">            <span class="string">"id"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"key_length"</span>: <span class="string">"8"</span>,</span><br><span class="line">          <span class="attr">"rows_examined_per_scan"</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">"rows_produced_per_join"</span>: <span class="number">3</span>,</span><br><span class="line">          <span class="attr">"filtered"</span>: <span class="string">"100.00"</span>,</span><br><span class="line">          <span class="attr">"cost_info"</span>: &#123;</span><br><span class="line">            <span class="attr">"read_cost"</span>: <span class="string">"3.61"</span>,</span><br><span class="line">            <span class="attr">"eval_cost"</span>: <span class="string">"0.60"</span>,</span><br><span class="line">            <span class="attr">"prefix_cost"</span>: <span class="string">"4.21"</span>,</span><br><span class="line">            <span class="attr">"data_read_per_join"</span>: <span class="string">"6K"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"used_columns"</span>: [</span><br><span class="line">            <span class="string">"id"</span>,</span><br><span class="line">            <span class="string">"email"</span>,</span><br><span class="line">            <span class="string">"name"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"attached_condition"</span>: <span class="string">"(`sample`.`m`.`id` in (1,2,33))"</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"table"</span>: &#123;</span><br><span class="line">          <span class="attr">"table_name"</span>: <span class="string">"o"</span>,</span><br><span class="line">          <span class="attr">"access_type"</span>: <span class="string">"ref"</span>,</span><br><span class="line">          <span class="attr">"possible_keys"</span>: [</span><br><span class="line">            <span class="string">"FKpktxwhj3x9m4gth5ff6bkqgeb"</span>,</span><br><span class="line">            <span class="string">"FKrylnffj7sn97iepyqadlfnsg0"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"FKpktxwhj3x9m4gth5ff6bkqgeb"</span>,</span><br><span class="line">          <span class="attr">"used_key_parts"</span>: [</span><br><span class="line">            <span class="string">"member_id"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"key_length"</span>: <span class="string">"8"</span>,</span><br><span class="line">          <span class="attr">"ref"</span>: [</span><br><span class="line">            <span class="string">"sample.m.id"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"rows_examined_per_scan"</span>: <span class="number">90</span>,</span><br><span class="line">          <span class="attr">"rows_produced_per_join"</span>: <span class="number">272</span>,</span><br><span class="line">          <span class="attr">"filtered"</span>: <span class="string">"100.00"</span>,</span><br><span class="line">          <span class="attr">"cost_info"</span>: &#123;</span><br><span class="line">            <span class="attr">"read_cost"</span>: <span class="string">"63.00"</span>,</span><br><span class="line">            <span class="attr">"eval_cost"</span>: <span class="string">"54.55"</span>,</span><br><span class="line">            <span class="attr">"prefix_cost"</span>: <span class="string">"121.76"</span>,</span><br><span class="line">            <span class="attr">"data_read_per_join"</span>: <span class="string">"279K"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"used_columns"</span>: [</span><br><span class="line">            <span class="string">"id"</span>,</span><br><span class="line">            <span class="string">"order_number"</span>,</span><br><span class="line">            <span class="string">"member_id"</span>,</span><br><span class="line">            <span class="string">"transaction_id"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"table"</span>: &#123;</span><br><span class="line">          <span class="attr">"table_name"</span>: <span class="string">"t"</span>,</span><br><span class="line">          <span class="attr">"access_type"</span>: <span class="string">"eq_ref"</span>,</span><br><span class="line">          <span class="attr">"possible_keys"</span>: [</span><br><span class="line">            <span class="string">"PRIMARY"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"key"</span>: <span class="string">"PRIMARY"</span>,</span><br><span class="line">          <span class="attr">"used_key_parts"</span>: [</span><br><span class="line">            <span class="string">"id"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"key_length"</span>: <span class="string">"8"</span>,</span><br><span class="line">          <span class="attr">"ref"</span>: [</span><br><span class="line">            <span class="string">"sample.o.transaction_id"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"rows_examined_per_scan"</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">"rows_produced_per_join"</span>: <span class="number">272</span>,</span><br><span class="line">          <span class="attr">"filtered"</span>: <span class="string">"100.00"</span>,</span><br><span class="line">          <span class="attr">"cost_info"</span>: &#123;</span><br><span class="line">            <span class="attr">"read_cost"</span>: <span class="string">"272.73"</span>,</span><br><span class="line">            <span class="attr">"eval_cost"</span>: <span class="string">"54.55"</span>,</span><br><span class="line">            <span class="attr">"prefix_cost"</span>: <span class="string">"449.03"</span>,</span><br><span class="line">            <span class="attr">"data_read_per_join"</span>: <span class="string">"820K"</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">"used_columns"</span>: [</span><br><span class="line">            <span class="string">"id"</span>,</span><br><span class="line">            <span class="string">"code"</span>,</span><br><span class="line">            <span class="string">"partner_transaction_id"</span>,</span><br><span class="line">            <span class="string">"payment_method_type"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="visual-explain">Visual Explain</span></h2><p><img src="https://github.com/cheese10yun/TIL/blob/master/assets/mysql-visual-explain.gif?raw=true" alt=""></p><p>MySQL Workbench을 사용하면 Visual Explain를 활용할 수 있습니다. 가장 직관적으로 Explain을 확인할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/TIL/blob/master/assets/mysql-explain.png?raw=true" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 글은 &lt;a href=&quot;http://www.yes24.com/Product/Goods/72270172?&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;MyS
      
    
    </summary>
    
    
      <category term="explain" scheme="https://cheese10yun.github.io/tags/explain/"/>
    
  </entry>
  
  <entry>
    <title>ConstraintValidator을 이용해서 효과적인 검증</title>
    <link href="https://cheese10yun.github.io/ConstraintValidator/"/>
    <id>https://cheese10yun.github.io/ConstraintValidator/</id>
    <published>2019-09-21T15:00:00.000Z</published>
    <updated>2019-09-22T12:13:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/cheese10yun/blog-sample/tree/master/custom-validation" rel="external nofollow noopener noreferrer" target="_blank">코드는 Github</a>에 공개 되어있습니다.</p></blockquote><p>스프링에서는 JSR 303 기반 어노테이션 기반으로 일관성 있는 Validation을 진행할 수 있습니다. 하지만 <code>@NotNull</code>, <code>@NotEmpty</code>, <code>@Email</code>과 같은 검증은 가능하지만 비즈니스적에 맞는 Validation은 별도로 진행해야 합니다.</p><p>예를 들어 주문에 대한 결제 정보를 받는 경우 카드 결제 시에는 카드 정보, 무통장 결제에는 계좌 정보를 입력받아야 합니다. 해당 요청을 JSON으로 표현하면 아래와 같습니다.</p><h2><span id="무통장-결제">무통장 결제</span></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"price"</span>: <span class="number">100.00</span>,</span><br><span class="line">  <span class="attr">"payment"</span>: &#123;</span><br><span class="line">    <span class="attr">"paymentMethod"</span>: <span class="string">"BANK_TRANSFER"</span>,</span><br><span class="line">    <span class="attr">"account"</span>: &#123;</span><br><span class="line">      <span class="attr">"number"</span>: <span class="string">"110-202034-2234"</span>,</span><br><span class="line">      <span class="attr">"bankCode"</span>: <span class="string">"2003"</span>,</span><br><span class="line">      <span class="attr">"holder"</span> : <span class="string">"홍길동"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"address"</span>: &#123;</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"NOWON-GU"</span>,</span><br><span class="line">    <span class="attr">"state"</span>: <span class="string">"SEOUL"</span>,</span><br><span class="line">    <span class="attr">"zipCode"</span>: <span class="string">"09876?"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="카드-결제">카드 결제</span></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"price"</span>: <span class="number">100.00</span>,</span><br><span class="line">  <span class="attr">"payment"</span>: &#123;</span><br><span class="line">    <span class="attr">"paymentMethod"</span>: <span class="string">"CARD"</span>,</span><br><span class="line">    <span class="attr">"card"</span>: &#123;</span><br><span class="line">      <span class="attr">"number"</span>: <span class="string">"25523-22394"</span>,</span><br><span class="line">      <span class="attr">"brand"</span>: <span class="string">"323"</span>,</span><br><span class="line">      <span class="attr">"csv"</span> : <span class="string">"삼성카드"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"address"</span>: &#123;</span><br><span class="line">    <span class="attr">"city"</span>: <span class="string">"NOWON-GU"</span>,</span><br><span class="line">    <span class="attr">"state"</span>: <span class="string">"SEOUL"</span>,</span><br><span class="line">    <span class="attr">"zipCode"</span>: <span class="string">"09876?"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 JSON 같이 <code>account</code>, <code>card</code> 값은 <code>paymentMethod</code>에 따라 선택적으로 필수 값이 변경되니 단순하게 <code>@NotNull</code>, <code>@NotEmpty</code> 어노테이션으로 검증하기가 어렵습니다. 이러한 경우 ConstraintValidator을 직접 구현해야 합니다.</p><h2><span id="constraintvalidator의-장점">ConstraintValidator의 장점</span></h2><p>ConstraintValidator을 직접 구현하지 않고도 다양한 방법으로 해당 Validation을 진행할 수 있지만 ConstraintValidator 기반으로 검증하는 게 다음과 같은 장점이 있다고 생각합니다.</p><h3><span id="일관성-있는-validation-처리-방법">일관성 있는 Validation 처리 방법</span></h3><p>검증을 진행하는 방법과 시점이 매우 다양하다 보니 많은 개발자들이 만들어가는 프로젝트인 경우에 전체적인 코드의 통일성이 떨어지게 됩니다. Validation을 사용하면 검증 방법과, 검증 시점(어느 레이어에서 진행되는지)을 통일성 있게 가져갈 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderSheetRequest <span class="title">order</span><span class="params">(@RequestBody @Valid <span class="keyword">final</span> OrderSheetRequest dto)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (dto.getPayment().getPaymentMethod() == PaymentMethod.BANK_TRANSFER)) &#123;</span><br><span class="line">            <span class="comment">// 계좌정보가 제대로 넘어 왔는지 검증</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>((dto.getPayment().getPaymentMethod() == PaymentMethod.CARD))&#123;</span><br><span class="line">            <span class="comment">// 카드 정보 제대로 넘어 왔는지 검증</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dto;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>위와 같은 식으로 Controller 코드에서 검증을 진행하는 것도 방법이지만 이렇게 되면 다른 컨트롤러에서 위와 같은 중복 코드가 발생할 수 있고 이러한 중복 코드로 코드의 응집력이 떨어지게 되면 변경이 발생했을 때 해당 코드를 찾아가서 직접 수정해야 합니다. 직접 수정하는 것이 큰 리소스가 들지 않더라도 이는 실수하기 좋은 환경입니다.</p><p>이러한 컨트롤러에서의 중복 코드를 제거하기 위해서는 <strong>컨트롤러 진입 직전 Interceptor에서 검증하는 것이 바람직합니다.</strong> <code>ConstraintValidator</code> 기반으로 유효성 검증을 진행하면 검증 시점의(Interceptor에서 진행) 통일성을 갖습니다.</p><h3><span id="일관성-있는-errorresponse">일관성 있는 ErrorResponse</span></h3><p><a href="https://github.com/cheese10yun/spring-guide/blob/master/docs/exception-guide.md#%ED%86%B5%EC%9D%BC%EB%90%9C-error-response-%EA%B0%9D%EC%B2%B4" rel="external nofollow noopener noreferrer" target="_blank">스프링 가이드 - 통일된 Error Response 객체</a>에서 이야기했듯이 ErrorReponse는 항상 동일한 포맷으로 나 갸야 합니다. <code>ConstraintValidator</code>을 사용해서 <code>@Valid</code>을 기반으로 검증을 하면 <code>MethodArgumentNotValidException</code>이 발생하고 이 예외를 <a href="https://github.com/cheese10yun/spring-guide/blob/master/docs/exception-guide.md#controlleradvice%EB%A1%9C-%EB%AA%A8%EB%93%A0-%EC%98%88%EC%99%B8%EB%A5%BC-%ED%95%B8%EB%93%A4%EB%A7%81" rel="external nofollow noopener noreferrer" target="_blank">@ControllerAdvice로 모든 예외를 핸들링</a>에서 정리한 것처럼 통일성 있는 ErrorResponse 포맷으로 처리할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">POST http://127.0.0.1:8080/order</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;price&quot;: 100.00,</span><br><span class="line">  &quot;payment&quot;: &#123;</span><br><span class="line">    &quot;paymentMethod&quot;: &quot;BANK_TRANSFER&quot;,</span><br><span class="line">    &quot;account&quot;: &#123;</span><br><span class="line">      &quot;holder&quot;: &quot;&quot;,</span><br><span class="line">      &quot;number&quot;: &quot;&quot;,</span><br><span class="line">      &quot;bankCode&quot;: &quot;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;address&quot;: &#123;</span><br><span class="line">    &quot;city&quot;: &quot;NOWON-GU&quot;,</span><br><span class="line">    &quot;state&quot;: &quot;SEOUL&quot;,</span><br><span class="line">    &quot;zipCode&quot;: &quot;09876?&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 요청을 보냈을 경우 아래처럼 Error Response를 갖습니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"입력값이 올바르지 않습니다."</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">400</span>,</span><br><span class="line">  <span class="attr">"errors"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"field"</span>: <span class="string">"payment.account.bankCode"</span>,</span><br><span class="line">      <span class="attr">"value"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"reason"</span>: <span class="string">"은행코드는 필수입니다."</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"field"</span>: <span class="string">"payment.account.number"</span>,</span><br><span class="line">      <span class="attr">"value"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"reason"</span>: <span class="string">"계좌번호는 필수값입니다."</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"field"</span>: <span class="string">"payment.account.holder"</span>,</span><br><span class="line">      <span class="attr">"value"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"reason"</span>: <span class="string">"계좌주는 값은 필수 입니다."</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"code"</span>: <span class="string">"C001"</span>,</span><br><span class="line">  <span class="attr">"timestamp"</span>: <span class="string">"2019-09-21T23:21:26.006"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ConstraintValidator</code>를 통해서 errors 배열로 올바르지 않은 필드에 대해서 리스트로 내려줌으로써 더 구체적인 에러를 응답하게할 수 있습니다.</p><h2><span id="constraintvalidator-사용법">ConstraintValidator 사용법</span></h2><h3><span id="annotation-생성">Annotation 생성</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Constraint</span>(validatedBy = OrderSheetFormValidator.class)</span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> OrderSheetForm &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "Order sheet form is invalid"</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="검증-로직이-있는-ordersheetformvalidator-생성">검증 로직이 있는 OrderSheetFormValidator 생성</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderSheetFormValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">OrderSheetForm</span>, <span class="title">OrderSheetRequest</span>&gt; </span>&#123; <span class="comment">// (1)</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(OrderSheetForm constraintAnnotation)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(OrderSheetRequest value, ConstraintValidatorContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> invalidCount = <span class="number">0</span>; <span class="comment">// (2)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value.getPayment().hasPaymentInfo()) &#123;</span><br><span class="line">            addConstraintViolation(context, <span class="string">"카드 정보 혹은 계좌정보는 필수입니다."</span>, <span class="string">"payment"</span>); <span class="comment">// (3)</span></span><br><span class="line">            invalidCount += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (value.getPayment().getPaymentMethod() == PaymentMethod.CARD) &#123;</span><br><span class="line">            <span class="keyword">final</span> Card card = value.getPayment().getCard();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (card == <span class="keyword">null</span>) &#123;</span><br><span class="line">                addConstraintViolation(context, <span class="string">"카드 필수입니다."</span>, <span class="string">"payment"</span>, <span class="string">"card"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isEmpty(card.getBrand())) &#123;</span><br><span class="line">                    addConstraintViolation(context, <span class="string">"카드 브렌드는 필수입니다."</span>, <span class="string">"payment"</span>, <span class="string">"card"</span>, <span class="string">"brand"</span>);</span><br><span class="line">                    invalidCount += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isEmpty(card.getCsv())) &#123;</span><br><span class="line">                    addConstraintViolation(context, <span class="string">"CSV 값은 필수 입니다."</span>, <span class="string">"payment"</span>, <span class="string">"card"</span>, <span class="string">"csv"</span>);</span><br><span class="line">                    invalidCount += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isEmpty(card.getNumber())) &#123;</span><br><span class="line">                    addConstraintViolation(context, <span class="string">"카드 번호는 필수 입니다."</span>, <span class="string">"payment"</span>, <span class="string">"card"</span>, <span class="string">"number"</span>);</span><br><span class="line">                    invalidCount += <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> invalidCount == <span class="number">0</span>; <span class="comment">// (6)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addConstraintViolation</span><span class="params">(ConstraintValidatorContext context, String errorMessage,</span></span></span><br><span class="line"><span class="function"><span class="params">        String firstNode, String secondNode, String thirdNode)</span> </span>&#123;</span><br><span class="line">        context.disableDefaultConstraintViolation(); <span class="comment">// (4)</span></span><br><span class="line">        context.buildConstraintViolationWithTemplate(errorMessage) <span class="comment">// (5)</span></span><br><span class="line">            .addPropertyNode(firstNode)</span><br><span class="line">            .addPropertyNode(secondNode)</span><br><span class="line">            .addPropertyNode(thirdNode)</span><br><span class="line">            .addConstraintViolation();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>(1) ConstraintValidator&lt;OrderSheetForm, OrderSheetRequest&gt;를 상속받습니다. <code>OrderSheetForm</code> 작성한 위에서 생성한 어노테이션, <code>OrderSheetRequest</code>는 <code>@RequestBody</code>으로 받는 객체입니다.</li><li>(2) <code>invalidCount</code>는 검증이 실패할 때마다 증가할 카운트 변수입니다.</li><li>(3) <code>addConstraintViolation</code> 메서드를 통해서 에러 메시지와 검증한 node key 값을 넘겨줍니다. 해당 node는 ErrorResponse의 <code>errors[].field</code>에 바인딩 됩니다.</li><li>(4) 해당 메서드로 <code>@OrderSheetForm</code>의 <code>default &quot;Order sheet form is invalid&quot;;</code> 값을 disable 시킵니다.</li><li>(5) 해당 메서드로 검증에 대한 Violation 을 추가합니다.</li><li>(6) <code>invalidCount == 0</code> 아닌 경우에는 <code>false</code></li></ul><h3><span id="ordersheetrequest">OrderSheetRequest</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PRIVATE)</span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@OrderSheetForm</span> <span class="comment">// (1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderSheetRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Valid</span> <span class="comment">// (2)</span></span><br><span class="line">    <span class="keyword">private</span> Payment payment;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span></span><br><span class="line">    <span class="meta">@Valid</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PRIVATE)</span><br><span class="line">    <span class="meta">@Getter</span></span><br><span class="line">    <span class="meta">@ToString</span> <span class="comment">// (3)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Payment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@NotNull</span></span><br><span class="line">        <span class="keyword">private</span> PaymentMethod paymentMethod;</span><br><span class="line">        <span class="keyword">private</span> Account account;</span><br><span class="line">        <span class="keyword">private</span> Card card;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@JsonIgnore</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPaymentInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> account != <span class="keyword">null</span> &amp;&amp; card != <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>(1) <code>@OrderSheetForm</code>을 추가해서 <code>OrderSheetFormValidator</code>가 동작하게 합니다.</li><li>(2) <code>@Valid</code>을 추가해서 각 클래스의 <code>JSR-303</code> 기반 어노테이션이 동작하게 합니다. <code>@Valid</code>이 없는 경우 payment.PaymentMethod의 <code>@NotNull</code> 동작하지 않습니다.</li><li>(3) Error[].value 값이 객체인 경우에 해당 객체의 정보를 출력하기 위해서 <code>@ToString</code>을 추가합니다.</li></ul><h3><span id="contoller">Contoller</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OrderSheetRequest <span class="title">order</span><span class="params">(@RequestBody @Valid <span class="keyword">final</span> OrderSheetRequest dto)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dto;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Valid</code> 어노테이션으로 검증을 진행합니다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/custom-validation&quot; rel=&quot;external nofollow noopener noreferre
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Utterances 적용하기</title>
    <link href="https://cheese10yun.github.io/utterances/"/>
    <id>https://cheese10yun.github.io/utterances/</id>
    <published>2019-08-30T15:00:00.000Z</published>
    <updated>2019-08-31T15:30:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="utterances-소개">Utterances 소개</span></h2><p><a href="https://utteranc.es" rel="external nofollow noopener noreferrer" target="_blank">Utterances</a>는 GitHub Issue 기반으로 Comment를 작성할 수 있게 해줍니다.</p><p>Utterances의 장점</p><ul><li>GitHub Issue 기반이기 때문에 블로그 플랫폼을 이전해도 기존 Comment을 그대로 가져갈 수 있음</li><li>개발 블로그 라면 Github 계정으로 댓글을 작성할 수 있기 때문에 사용성이 용이함</li><li><strong>뭔가 있어 보임, 유명한 블로그는 이거 쓰는 거 같음</strong></li></ul><h2><span id="utterances-적용하기">Utterances 적용하기</span></h2><p><a href="https://utteranc.es" rel="external nofollow noopener noreferrer" target="_blank">Utterances</a>는 정말 간단하게 적용할 수 있습니다. <a href="https://utteranc.es" rel="external nofollow noopener noreferrer" target="_blank">(https://utteranc.es)</a> 으로 이동합니다.</p><p><img src="https://github.com/cheese10yun/cheese10yun.github.io/blob/master/utterances/utterances-repo.png?raw=true" alt=""><br>위 문서대로 진행하면 됩니다.</p><p><code>repo</code> 설정은 <code>owner/repo</code> 형식 그대로  <code>cheese10yun/blog-comment</code> 처럼 사용하면 됩니다.</p><p><code>Blog Post ↔️ Issue Mapping</code> 설정은 자신의 블로그 플랫폼에 맞게 설정합니다.</p><p><img src="https://raw.githubusercontent.com/cheese10yun/cheese10yun.github.io/master/utterances/utterances-copy-button.png" alt=""></p><p>최종적으로 <code>Copy</code>을 누르면</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://utteranc.es/client.js"</span></span><br><span class="line">        repo=<span class="string">"cheese10yun/blog-comment"</span></span><br><span class="line">        issue-term=<span class="string">"pathname"</span></span><br><span class="line">        theme=<span class="string">"github-light"</span></span><br><span class="line">        crossorigin=<span class="string">"anonymous"</span></span><br><span class="line">        <span class="keyword">async</span>&gt;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>위 같은 코드가 복사되는 것을 확인할 수 있습니다. 이제 사용 중인 블로그 플랫폼에 해당 코드를 적용하면 됩니다. 저는 Hexo Blog을 사용하고 있어 Hexo 기준으로 설명드리겠습니다.</p><h2><span id="hexo에-utterances-적용">Hexo에 Utterances 적용</span></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line"><span class="attr">utterances:</span></span><br><span class="line"><span class="attr">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">cheese10yun/blog-comment</span></span><br><span class="line"><span class="attr">  issue_term:</span> <span class="string">title</span></span><br><span class="line"><span class="attr">  theme:</span> <span class="string">github-light</span></span><br></pre></td></tr></table></figure><p>위에서 생성된 코드의 값들을 설정 파일로 분리 시켰습니다. 이제 설정값 기반으로 컴포넌트를 만들면 됩니다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># /themes/beantech/layout/comment.ejs</span><br><span class="line">&lt;!--  utteranc comment --&gt;</span><br><span class="line">&lt;% if (config.utterances.enable == true) &#123; %&gt;</span><br><span class="line">&lt;script src=&quot;https://utteranc.es/client.js&quot;</span><br><span class="line">        repo=&quot;&lt;%= config.utterances.repo %&gt;&quot;</span><br><span class="line">        issue-term=&quot;&lt;%= config.utterances.issue_term %&gt;&quot;</span><br><span class="line">        label=&quot;Comment&quot;</span><br><span class="line">        theme=&quot;&lt;%= config.utterances.theme %&gt;&quot;</span><br><span class="line">        crossorigin=&quot;anonymous&quot;</span><br><span class="line">        async&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>Comment 컴포넌트를 만들었으면 Post Layout에 Comment 컴포넌트를 추가하겠습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># /themes/beantech/layout/post.ejs</span><br><span class="line">...</span><br><span class="line">&lt;!-- Comment --&gt;</span><br><span class="line">&lt;%- partial(&apos;comment&apos;) %&gt;</span><br></pre></td></tr></table></figure><p><code>post.ejs</code>에 위의 코드를 입력합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server --watch --draft</span><br></pre></td></tr></table></figure><p>hexo를 실행하면</p><p><img src="https://raw.githubusercontent.com/cheese10yun/cheese10yun.github.io/master/utterances/utterances-view.png" alt=""><br>적용된것을 확인 확인할 수있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;utterances-소개&quot;&gt;Utterances 소개&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://utteranc.es&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;
      
    
    </summary>
    
    
      <category term="Utterances" scheme="https://cheese10yun.github.io/tags/Utterances/"/>
    
  </entry>
  
  <entry>
    <title>생산성 향상 - 비기는 없다</title>
    <link href="https://cheese10yun.github.io/productivity/"/>
    <id>https://cheese10yun.github.io/productivity/</id>
    <published>2019-07-21T08:40:00.000Z</published>
    <updated>2019-10-27T14:36:51.710Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="들어가기-앞서">들어가기 앞서</span></h2><p>생산성에 대해서 더 정확히는 생산성을 위해서 많은 것들을 도입하는데 왜 다 실패하는 것인지에 대해서 이야기해보고 싶다. 나는 2016.05 년부터 사회에 나와서 이제 3년 2개월 정도 프로그래밍 경험이 있다. 이런 짧은 경험으로 생산성과 프로세스에 대해서 논하는 게 조금은 부끄럽지만 내 생각을 한번 글로 정리해보고 싶어 이렇게 포스팅을 하려고 한다. 이 글의 전반적인 내용은 나의 실패의 연대기다. 그래서 지극히 주관적이고 개발자 입장에서 생각한 내용이니 충분히 비판적인 시각으로 글을 읽어줬으면 한다. 뻔한 문구겠지만 그래도 이런 실패를 통해서 나는 프로그래밍 능력은 많이 향상되었다. 거짓말 조금 보태서 한 달 단위로 성장하는 느낌을 받았다. <s>지난 일들은 추억 보정이 되기 때문인지도 모르겠다.</s></p><h2><span id="나의-연대기">나의 연대기</span></h2><p>3년 2개월 경력 치고는 5번의 이직의 경험이 있다. 작은 스타트업에서부터 조금 큰 규모의 스타트업 등 다양하다. 작은 스타트업을 다닐 때 그때 그 당시의 나에게도 해당 기업의 프로세스는 납득하기 힘들었다. 물론 스타트업 초기에서 제대로 된 프로세스를 갖기는 힘들다고 하지만 그래도 프로세스는 납득하기 어려웠다. 그래서 내가 속한 개발팀부터라도 조금씩 프로세스를 가지려 많이 노력을 했었다. 세상에는 코드 리뷰, 테스 코드 도입, 객체지향 프로그래밍, 도메인 주도 개발, 애자일 등등 세상에는 많은 비기가 있었다.</p><h2><span id="비기는-없다">비기는 없다</span></h2><p><strong>하지만 비기는 없었다.</strong> 물론 내 개인적인 경험에 국한되는 이야기지만 나에게는 비기는 없었고 여러분에게도 높은 확률로 비기는 없을 것이다. <strong>일단 냉정하게 비기가 왜 필요한지부터 점검해야 한다. 비기가 필요한 시점부터 무언가가 크게 잘못되었다는 것이다.</strong> 그것은 대부분 종합적인 문제일 것이다. 프로세스, 개개인의 역량, 해당 분야의 전문성, 커뮤니케이션 등등 이런 것을 다 무시한 체 이 어려운 문제를 구원해줄 구원자를 찾는 것이다. <strong>구원을 찾는 거 자체가 이미 구원자(비기) 말고는 답이 없다는 현 상황을 반증하는 것이다.</strong></p><h3><span id="그게-싫은-것이다">그게 싫은 것이다.</span></h3><p>냉정하게 지금 우리 팀, 우리 회사에 문제점을 정말 냉철하게 봐야 한다. <strong>하지만 그것은 어렵다.</strong> 누군가를 비난해야 할 때도 있고, 누군가가 실력적으로 형편이 없어 프로젝트 딜레이가 되는 문제일 수도 있다. 구성원들 간의 커뮤니케이션이 문제일 수도 있다. 이런 것들은 불편하고 어렵다 보니 냉정하게 진단하기 싫은 것이다. 이런 모든 문제를 일단 가리고 <strong>외부에서 구원을 찾는다. 그 비기가 우리의 모든 문제를 해결해 줄 것이라 믿고</strong> 이렇게 되면 이런 비기의 유혹은 뿌리치기 힘들다. 그리고 같은 실수를 반복한다.</p><h3><span id="냉정">냉정</span></h3><p>냉정해져야 한다. 지금 프로젝트가 엉망인 것은 단순히 프로세스만의 문제가 아니다. <strong>무슨 문제가 있다. 그것을 프로세스 문제로 퉁치고 다른 비기를 찾으려 하면 안 된다. 냉정하게 현상태를 분석하고 판단해야 한다.</strong></p><p>예를 들어보자 자바 서블릿을 직접 구현해서 웹 프로젝트를 진행하고 있는 팀은 스프링 부트라는 프레임워크를 알게 되었고 이것을 이용하면 웹 프로그래밍이 더 효율적으로 할 수 있다고 판단해서 스프링 부트를 도입했다. 이것은 맞는 말이다 누가 봐도 자바라는 언어 기반으로 웹 프로젝트를 한다면 스프링 기반으로 프로젝트를 안 할 이유가 없다. 하지만 저 팀이 프로젝트를 성공적으로 마칠 수 있을까? <strong>도입하려는 것이 그렇게 좋은 것이라면 왜 우리는 그동안 그것을 도입하지 않았는지를 점검해봐야 한다.</strong></p><h3><span id="결국엔-비기는-없다">결국엔 비기는 없다.</span></h3><p>저 팀에서는 스프링이라는 것이 비기로 느껴질 것이다. 실제로 스프링은 정말 좋은 프레임워크다. 하지만 단순히 스프링 도입으로 이 문제는 해결되지 않는다. 우선 그들은 서블릿을 직접 구현할 정도로 현지 이 생태계를 이해하지 못한다. 절대적인 실력 부족이다. 이게 이 팀의 냉정한 현주소다.(물론 이게 문제가 아니라 다른 것이 문제일 수도 있다 그만큼 본질적인 문제를 찾기는 힘들다.) <strong>이것을 보려 하지 않고 단순하게 비기(스프링)을 도입하려 해서 이 문제를 해결하겠다는 것 자체가 문제이다. 자신과 현재 자신의 팀의 현주소를 냉정하게 판단해보라</strong> 이런 상황에서 스프링을 도입해도 결과는 달라지지 않을 것이다. 스프링이란 것 외에 다른 것들을 대입해봐도 마찬가지다. Jira를 통한 이슈 트래킹, Confluence를 통한 문서화, 코드 리뷰를 통한 코드 품질 향상, 데일리 미팅을 통한 업무 공유, 세부 기획을 통한 일감 상세화 등등 이런 것들을 도입하려고 할 때 왜 그동안에 그것을 도입하지 않았나에 대한 회고부터 해야 한다. 그리고 이런 프로세스의 도입 하나로 현재의 문제를 하려는 태도 자체가 지나치게 비양심적인 것이다.</p><h3><span id="정답은-이거야">정답은 이거야</span></h3><p>그동안 어렴풋이 느껴왔던 문제들을 어렵게 수면 위로 올리고 <strong>정답은 이거야</strong>를 외치고 특정 프로세스를 도입하는 경우가 많다. 나 또한 이 실수를 수없이 반복했다. 어렵게 수면 위로 올려진 문제들을 프로세스 도입 하나로 모두 해결될 것이라는 행복 회로를 돌리기 시작한다. <strong>이 이슈들은 Back Log에 남지도 않고 이미 완료됐다고 Done 처리하듯이 우리의 사고 속에서 없어지고 다시 수면 아래로 잠든다.</strong> 새로운 무언가의 도입으로 우리들의 문제는 해결되지 않는다. 그저 다시 수면 아래로 내려갈 뿐이다.</p><h2><span id="패배감">패배감…</span></h2><p>자꾸 진실을 마주하지 않고 비기를 찾고 비기를 연습해서 도입해보고 그것이 또 실패로 찾아오면 개인은 너무 힘들다… 나 또한 많은 것을 노력했지만 진실을 마주하지 않고 비기만을 찾았고 그 결과 수많은 패배를 했다. <strong>개인의 경험은 개인에게는 절대적이다.</strong> 이런 패배감을 반복적으로 느끼면 개인은 더 이상 노력하기 힘들다. <strong>이런 패배감 때문에 프로젝트에서 떠나고 싶어진다.</strong></p><h2><span id="그럼에도-불과하고">그럼에도 불과하고…</span></h2><p><strong>그럼에도 불과하고 개인은 성장해야 한다.</strong> 위 같은 상황일지라도 스프링을 도입하고 패배감을 맛보고 성장해야 한다. 어쩔 수 없다. 포기할 수는 없지 않은가. <strong>해당 조직에 있을 때 최대한 많은 노력을 하고 그것으로 발판 삼아 성장해야 한다.</strong> 아이러니하게도 이렇게 패배를 통해서 성장했던 것이 내 프로그래밍 실력을 단기간 안에 많은 것을 향상시키기도 했다.</p><p>그대가 속한 조직이 패배감을 느끼고 계속 도전할 가치가 있다면, 함께 일하는 동료와 해당 서비스가 매력적이라면, 그래도 조금씩이라도 성장하고 쟁취한다는 피드백이 있다면 <strong>그럼에도 불과하고 개인은 기꺼이 비기에 도전한다. 그리고 쟁취할 수 있다고 믿는다.</strong></p><h2><span id="이직-고려">이직 고려</span></h2><p>그대가 주니어라면 조직을 바꾸는 것은 어렵도 힘든 일이다. 하지만 어렵고 힘들 일이니 하지 도전하지 말라는 소리는 절대 아니다. <strong>냉정하게 내가 그 어려운 도전을 할만한 가치 있는 매력적인 회사, 팀, 동료, 서비스 인가 판단해보라.</strong> 그것이 아니라면 이직하는 게 맞는다고 본다.</p><h2><span id="맺는말">맺는말</span></h2><p>이 글을 쓰기 조심스러운 이유 중 하나는 내가 속했던 회사 중에 위에서 언급한 부분에 해당되지 않은 회사도 있었고 그곳까지 비판하는 거 같아 조심스럽다.</p><p>또 다른 하나는 외부에서 나는 무언가를 깨달은 것처럼 통찰력 있는 사람, 혹은 그런 척하는 사람으로 느껴지는 것들이 부담스럽다. <strong>나는 평범한 주니어 개발자고 지금도 똑같은 문제로 고민하고 좌절한다.</strong><br>그래도 성장한 게 있다면 <strong>비기는 없고 구원이라는 것은 외부에서 찾지 말고 내부에서 찾아야 한다.</strong> 라는 것이다.</p><p>그리고 또 내가 도입하려는 것이 대부분 옳은 것이고 그것을 받아들이지 못한 회사, 팀의 문제인 것처럼 보이는 것도 부담스럽다. <strong>확실히 이야기 하지만 나도 무턱대고 비기를 도입하려 했었고 그래서 실패한 것이다. 일차적으로 내 역량의 문제인 것이다.</strong></p><p>반복해서 이야기하는 것이지만 중요한 것은 <strong>내가 이런 역경과 고난을 해쳐갈만한 가치 있는</strong> 회사, 팀, 서비스 인지가 중요하다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;들어가기-앞서&quot;&gt;들어가기 앞서&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;생산성에 대해서 더 정확히는 생산성을 위해서 많은 것들을 도입하는데 왜 다 실패하는 것인지에 대해서 이야기해보고 싶다. 나는 2016.05 년부터 사회에 나와서 이제 3
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>테스트 코드 작성에 대한 나름의 고찰</title>
    <link href="https://cheese10yun.github.io/spring-about-test/"/>
    <id>https://cheese10yun.github.io/spring-about-test/</id>
    <published>2019-07-21T05:00:01.000Z</published>
    <updated>2019-07-22T18:32:28.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/test-code" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><p>스프링 기반으로 많은 테스트 코드를 작성하면서 느꼈던 나름의 고찰과 어려움을 정리하는 포스팅입니다. 사실은 테스트 코드 작성 시 효율적인 방법을 소개하는 포스팅을 진행하려 했으나 이런저런 고민들 때문에 명확한 결론이 나지 않아서 이런 고민들을 정리한 포스팅입니다.</p><h2><span id="pojo-테스트는-언제나-옳다">POJO 테스트는 언제나 옳다</span></h2><p>이전에 포스팅한 <a href="https://github.com/cheese10yun/spring-guide/blob/master/docs/test-guide.md" rel="external nofollow noopener noreferrer" target="_blank">Test 전략 가이드</a>, <a href="https://github.com/cheese10yun/spring-guide/blob/master/docs/test-guide.md" rel="external nofollow noopener noreferrer" target="_blank">Spring Boot 테스트 종류</a> 등 스프링에서는 매우 다양한 테스트 방법을 제공해주고 있습니다. 이런 Slice 테스트 지원으로 테스트 하고자 하는 레이어를 부분적으로 빠르게 테스트할 수 있습니다.</p><p><strong>이런 강력한 기능들 때문에 POJO에 대한 테스팅은 상대적으로 관심도가 낮다 보니 POJO에 대한 테스트 코드 작성에도 관심이 부족한 거 같습니다.</strong></p><p>POJO 테스트의 장점</p><ul><li>POJO 객체를 테스트하는 것이라서 빠르다.</li><li>디펜더시가 상대적으로 적어서 테스트 코드 작성이 편하다.</li><li>단위 테스트하기 가장 이상적이다.</li></ul><p>POJO 테스트의 대표적인 항목들은 Util 객체, Domain 객체 등이 있습니다. <strong>특히 ORM을 사용하고 있다면 도메인 객체들의 테스트 코드는 해당 프로젝트의 도메인 지식을 설명해주는 아주 좋은 문서 역할을 해줍니다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CouponTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>(expected = CouponExpireException.class)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 만료일이지난_쿠폰_사용_불가() &#123;</span><br><span class="line">        <span class="keyword">final</span> Coupon coupon = CouponBuilder.build(LocalDate.now().minusDays(<span class="number">1</span>));</span><br><span class="line">        coupon.use();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>(expected = CouponAlreadyUseException.class)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 이미_사용한_쿠폰은_쿠폰_사용_불가() &#123;</span><br><span class="line">        <span class="keyword">final</span> Coupon coupon = CouponBuilder.build(LocalDate.now().plusDays(<span class="number">3</span>));</span><br><span class="line">        coupon.use();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 이미 사용한 쿠폰을 다시 한번 사용했을 다시 사용</span></span><br><span class="line">        coupon.use();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 사용가능_쿠폰_사용시_used_is_true() &#123;</span><br><span class="line">        <span class="keyword">final</span> Coupon coupon = CouponBuilder.build(LocalDate.now().plusDays(<span class="number">1</span>));</span><br><span class="line">        coupon.use();</span><br><span class="line">        assertThat(coupon.isUsed()).isTrue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>쿠폰 테스트 코드를 통해서 쿠폰 도메인의 비즈니스 요구 사항 나타내는 도큐먼트로 볼 수 있습니다.</p><h2><span id="matchers는-assertj가-좋다">Matchers는 AssertJ가 좋다.</span></h2><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/test-code/images/CoreMatchers.png" alt=""></p><p>위 그림은 assertThat은 <code>import static org.junit.Assert.assertThat;</code>에서 가져온 assertThat입니다. 해당 Matchers는 자동완성 기능을 제공해주지 않아 무슨 메서드가 있는지 일단 외우고 있어야 합니다. 다른 Matchers들도 어느 정도 추천 자동 완성 기능을 제공해주고 있지만 매개변수로 넘기는 방식입니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/test-code/images/AssertJ.png" alt=""><br>반면 <code>AssertJ</code>는 사용법은 매개변수를 넘기는 방식이 아닙니다. <code>assertThat(coupon.isUsed())</code> 코드 뒤에 <code>.</code>을 붙여 사용하는 방식이라서 해당 함수가 무엇이 있는지 명확하게 알려줍니다. 그리고 AssertJ는 다른 Matchers에 비해 테스트하기 편리한 메서드들을 제공해줍니다. <strong>JUnit을 사용하고 있다면 Matchers는 AssertJ를 적극 추천합니다.</strong></p><h2><span id="테스트만을-위한-코드">테스트만을 위한 코드</span></h2><p>테스트 코드를 작성하기 위해서 테스트 코드에서 사용하는 코드를 작성할 때가 있습니다. 테스트에만 사용하는 코드는 객체 간의 협력관계에는 참여하지 않지만 코드로만 존재하기 때문에 그 존자 자체가 저는 부정적으로 생각합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MemberRepository memberRepository;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Member <span class="title">create</span><span class="params">(@RequestBody MemberSingUpRequest dto)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> memberRepository.save(<span class="keyword">new</span> Member(dto.getEmail(), dto.getName()));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberSingUpRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NotEmpty</span> <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Email</span> <span class="keyword">private</span> String email;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같은 API가 있을 경우 아래처럼 테스트 코드를 작성할 수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberApiTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> MockMvc mvc;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">protected</span> ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> 회원가입테스트() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//given</span></span><br><span class="line">    <span class="keyword">final</span> MemberSingUpRequest dto = <span class="keyword">new</span> MemberSingUpRequest(<span class="string">"yun"</span>, <span class="string">"yun@asd.com"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//when</span></span><br><span class="line">    <span class="keyword">final</span> ResultActions resultActions = mvc.perform(post(<span class="string">"/members"</span>)</span><br><span class="line">        .contentType(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">        .content(objectMapper.writeValueAsString(dto)))</span><br><span class="line">        .andDo(print());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then</span></span><br><span class="line">    resultActions</span><br><span class="line">        .andExpect(status().isOk());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여기서 중요한 것은 Given 절에서 Request Body가 받을 DTO를 만들어야 하는 점인데. 실제 값 바인딩은 리플렉션 기반으로 처리되니 별다른 생성자를 만들 필요가 없습니다. 하지만 테스트 코드에서는 json 값을 넘겨줘야 하기 때문에 테스 코드 작성을 위 헤서 아래와 같은 생성자를 만들어야 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MemberSingUpRequest</span><span class="params">(<span class="keyword">final</span> String name, <span class="keyword">final</span> String email)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.email = email;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>Validation을 어노테이션들이 동작하지 않습니다. 내가 의도하지 않은 객체 생성이 이루어지는 가능성이 있고 무엇보다 해당 코드는 테스트 코드에서만 사용되는 코드인 점입니다.</p><h3><span id="json-기반으로-테스트">JSON 기반으로 테스트</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span>,</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"yun@asd.com"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberApiTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> json_파일로테스트() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//given</span></span><br><span class="line">    <span class="keyword">final</span> String requestBody = readJson(<span class="string">"classpath:member-singup.json"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//when</span></span><br><span class="line">    <span class="keyword">final</span> ResultActions resultActions = mvc.perform(post(<span class="string">"/members"</span>)</span><br><span class="line">        .contentType(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">        .content(requestBody))</span><br><span class="line">        .andDo(print());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then</span></span><br><span class="line">    resultActions</span><br><span class="line">        .andExpect(status().isOk());</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>json 파일을 읽어 들여 String으로 값을 전달하게 되면 위에서 작성한 생성자 코드를 사용하지 않아도 됩니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"orderer"</span>: &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"yun"</span>,</span><br><span class="line">    <span class="attr">"email"</span>: <span class="string">"yun@asd.com"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"product"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"양말"</span>,</span><br><span class="line">      <span class="attr">"price"</span>: <span class="number">123233</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"바자"</span>,</span><br><span class="line">      <span class="attr">"price"</span>: <span class="number">1000</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"치마"</span>,</span><br><span class="line">      <span class="attr">"price"</span>: <span class="number">1120</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"coupon"</span>: &#123;</span><br><span class="line">    <span class="attr">"code"</span>: <span class="string">"xx2sd292kd"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"address"</span>: &#123;</span><br><span class="line">    <span class="attr">"address1"</span>: <span class="string">"서울블라브라..."</span></span><br><span class="line">    <span class="string">"address2"</span>: <span class="string">"어디 동..."</span>,</span><br><span class="line">    <span class="attr">"zip"</span>: <span class="string">"123-2332"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>특히 위처럼 json이 복잡한 경우에는 객체 기반으로 생성하는 것이 많이 번거롭습니다. 이런 경우에는 json으로 관리하는 것이 효율적일 수 있습니다.</p><p>단점도 있습니다. 유효성 검사 등 다양한 값을 넣기 위해서는 그만큼 json 파일을 만들어야 하는 단점도 있습니다. 객체 생성으로 만들면 파라미터를 통해서 값만 변경할 수 있지만 json 파일로 만들게 되는 경우는 여러 json 만들어서 테스트해야 합니다.</p><h3><span id="default-접근-제어-지시자를-통한-객체-생성">Default 접근 제어 지시자를 통한 객체 생성</span></h3><p>Default 접근 제어 지시자를 사용하면 동일 패키지 내에서는 접근할 수가 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PRIVATE)</span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberSingUpRequest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@NotEmpty</span></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Email</span></span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">  MemberSingUpRequest(<span class="keyword">final</span> String name, <span class="keyword">final</span> String email) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.email = email;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 해당 클래스는 test 디렉토리에 위치합니다.</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberSignUpRequestBuilder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MemberSingUpRequest <span class="title">build</span><span class="params">(String name, String email)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> MemberSingUpRequest(name, email);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/test-code/images/default-access.png" alt=""></p><p><code>test</code> 디렉터리에 경로가 동일하다면 <code>Default</code> 접근 제어 지시자로 되있는 생성자로 접근이 가능합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> default_접근지시자_를이용한_테스트() <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="comment">//given</span></span><br><span class="line">  <span class="keyword">final</span> MemberSingUpRequest dto = MemberSignUpRequestBuilder.build(<span class="string">"yun"</span>, <span class="string">"yun@asd.com"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//when</span></span><br><span class="line">  <span class="keyword">final</span> ResultActions resultActions = mvc.perform(post(<span class="string">"/members"</span>)</span><br><span class="line">      .contentType(MediaType.APPLICATION_JSON_UTF8)</span><br><span class="line">      .content(objectMapper.writeValueAsString(dto)))</span><br><span class="line">      .andDo(print());</span><br><span class="line"></span><br><span class="line">  <span class="comment">//then</span></span><br><span class="line">  resultActions</span><br><span class="line">      .andExpect(status().isOk());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이런 식으로 테스트를 진행하면 동일 패키지에서 밖에 접근하지 못하는 코드이므로 테스트 코드만을 위한 코드이지만 영향을 최소한으로 할 수 있습니다.</p><p>주의해야 할 점은 생성자가 추가됐기 때문에 반드시 기본 생성자를 하나 만들어야 합니다. 이때 접근 제어 지시자는 <code>private</code> 접근 지시자를 통해서 최소한으로 만들어 줍니다. <strong>항상 접근 제어 지시자는 되도록 낮은 것을 사용하는 습관을 갖는 것이 좋습니다.</strong></p><p>Setter를 추가하는 방법도 있겠지만 Setter는 Request, Response 객체 같은 경우에는 최대한 지양하는 것이 좋습니다. 이런 방식은 코드 양이 많기도 하고 애초에 default 생성자라도 있는 것이기 때문에 <strong>현재는 RequestBody 객체가 복잡하면 JSON 기반 테스트를 진행하고 그렇지 않은 경우에는 그냥 public 생서자 or Builder를 이용해서 Given 절을 작성하고 있습니다.</strong></p><h2><span id="setter의-유혹">Setter의 유혹</span></h2><p><a href="https://github.com/cheese10yun/spring-jpa-best-practices/blob/master/doc/step-06.md" rel="external nofollow noopener noreferrer" target="_blank">step-06: Setter 사용하지 않기</a> 및 많은 포스팅에서 Setter 메서드를 지양해야 한다고 말해왔습니다. 하지만 테스트 코드 작성 시 Setter 메서드는 너무 달콤한 유욕이 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> OrderStep &#123;</span><br><span class="line">  AWAITING_DEPOSITED, <span class="comment">//  결지 미완료</span></span><br><span class="line">  PAID, <span class="comment">// 지불 완료</span></span><br><span class="line">  REAMDY, <span class="comment">// 배송 준비</span></span><br><span class="line">  SHIPPING, <span class="comment">// 배송중</span></span><br><span class="line">  COMPLETED <span class="comment">// 완료</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeStepToCompleted</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.step != OrderStep.SHIPPING) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>.step = OrderStep.COMPLETED;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>주문의 상태가 있고 배송 완료로 변경하기 위해서는 현재 Step이 SHIPPING 이어야 한다는 로직입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> setter_메서드의_유혹() &#123;</span><br><span class="line">  <span class="comment">//given</span></span><br><span class="line">  <span class="keyword">final</span> List&lt;Product&gt; products = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  products.add(<span class="keyword">new</span> Product(<span class="string">"양말"</span>));</span><br><span class="line">  products.add(<span class="keyword">new</span> Product(<span class="string">"모자"</span>));</span><br><span class="line">  products.add(<span class="keyword">new</span> Product(<span class="string">"바지"</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> Order order = Order.order(<span class="string">"yun"</span>, products);</span><br><span class="line">  <span class="comment">// order.setStep(OrderStep.SHIPPING); Setter 메서드가 간절하다.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//when</span></span><br><span class="line">  order.changeStepToCompleted();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//then</span></span><br><span class="line">  assertThat(order.getStep()).isEqualTo(OrderStep.COMPLETED);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Order 객체를 테스트하기 위해서는 Order 객체를 만들어야 합니다. 그리고 Order 객체는 시간에 따라서 데이터들이 달라집니다. 주문 신청부터 주문 완료까지 Order 객체는 계속해서 변경됩니다.</p><p>적절하게 단위 테스트하기 위해서는 데이터를 특정 시점처럼 만들어야 합니다. 위 테스트도 주문 완료를 테스트하기 위해서 주문 생성 -&gt; 주문 배송 중으로 변경해야 합니다. 이럴 경우 Setter를 쓰면 모든 비니지스 로직을 무시하고 데이터를 특정 시점으로 변경시킬 수 있습니다.</p><p>위 도메인은 상당히 간단한 편이지만 주문, 환불, 주문 부분 취소, 주문 전체 취소 등 다양한 도메인들을 테스트하기 위해서는 특정 시점으로 변경하기 어렵습니다. 위처럼 방어적 로직이 있어 모든 조건이 만족할 때만 데이터를 변경하도록 하기 때문입니다.</p><p>그래서 나름의 <strong>결론은 @Setter를 사용하고 test 코드 작성 시에만 Setter를 사용한다 정도입니다.</strong> 객체지향 관점에서 아무 로직 없는 Setter는 객체 간의 협력관계에서 객체의 자율성을 심하게 훼손시킵니다. 테스트 코드 이외에는 Setter를 사용하지 않아야 한다는 것이 지금의 결론입니다.</p><p><strong>그래도 명확한 가이드가 없는 건 사실입니다. test 디렉터리에서만 Setter 메서드를 사용하지 않는다</strong>라는 팀 차원의 공유만 있을 뿐 그것을 강제할 방법은 없습니다.</p><h2><span id="통합-테스트의-어려움">통합 테스트의 어려움</span></h2><p>통합 테스트에서 어려운 점들이 Given 작성하는 것입니다. 페이징 및 필터 관련된 API를 테스트한다고 했을 경우 데이터를 Set up 해주기가 어렵습니다.</p><p>만약 주문 생성 API를 테스트하기 위해서는</p><ul><li>회원</li><li>상품</li><li>상품 카테고리</li><li>해당 상품의 입점사 정보</li><li>쿠폰 (만약 쿠폰을 사용했을 때 필요)</li></ul><p>아무리 간단하게 생각해도 최소한 이 정도의 데이터를 Set up 해야 합니다. 실제 오픈 커머스 같은 경우에는 주문 한 번을 하기 위해서 수십 개의 테이블들을 Set up 해야 합니다.<br>테스트를 위해서 객체를 만들고 JPA로 데이터를 Set up 한다면 차라리 저는 테스트를 포기하겠습니다.</p><h3><span id="import를-이용한-데이터-set-up">Import를 이용한 데이터 Set up</span></h3><p>스프링이 로드될 때 <code>data.sql</code>을 읽어 들여 Given을 만드는 방식입니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># data.sql</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span></span><br><span class="line">    <span class="string">`member`</span> (<span class="string">`id`</span>, <span class="string">`email`</span>, <span class="string">`name`</span>)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'yun@asd.com'</span>, <span class="string">'yun'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'wan@asd.com'</span>, <span class="string">'wan'</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'jin@asd.com'</span>, <span class="string">'jin'</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'ck@asd.com'</span>, <span class="string">'ck'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">member_page_test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="comment">//given</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//when</span></span><br><span class="line">  <span class="keyword">final</span> ResultActions resultActions = mvc.perform(get(<span class="string">"/members"</span>)</span><br><span class="line">      .contentType(MediaType.APPLICATION_JSON_UTF8))</span><br><span class="line">      .andDo(print());</span><br><span class="line"></span><br><span class="line">  <span class="comment">//then</span></span><br><span class="line">  resultActions</span><br><span class="line">      .andExpect(status().isOk())</span><br><span class="line">      .andExpect(jsonPath(<span class="string">"content"</span>).exists())</span><br><span class="line">      .andExpect(jsonPath(<span class="string">"pageable"</span>).exists())</span><br><span class="line">      .andExpect(jsonPath(<span class="string">"pageable"</span>).exists())</span><br><span class="line">      .andExpect(jsonPath(<span class="string">"numberOfElements"</span>).value(<span class="string">"4"</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>SQL</code>로 given을 구성하게 되면 테스트하고자 하는 부분의 when, then 구절은 어렵지 않게 작성할 수 있습니다. 또 비즈니스 로직과 상관없이 데이터를 특정 시점으로 만들 수 있습니다.</p><p>하지만 단점도 있습니다. 칼럼의 변경 및 확장 시 테스트 코드의 지속적인 관리가 어렵다는 점이 있습니다. 또 누군가의 <code>member</code> insert를 추가적으로 하면 <code>.andExpect(jsonPath(&quot;numberOfElements&quot;).value(&quot;4&quot;))</code> 테스트 코드는 실패하게 됩니다. <strong>모든 작업자들이 <code>data.sql</code>을 추가 및 변경하다 보면 문제가 계속 생기게 됩니다.</strong></p><h3><span id="나름의-해결-방법">나름의 해결 방법</span></h3><p>위에서도 말했듯이 <code>data.sql</code>을 모든 작업자가 공동으로 사용하게 되니 문제가 발생한다면 테스트 단위로 <code>data-{xxx-test}.sql</code>을 관리하면 좋을 거 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">member_page_test</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  <span class="comment">//given</span></span><br><span class="line">  dataSetUp(<span class="string">"classpath:member_page_test.sql"</span>); <span class="comment">// 로직은 구현하지 않았습니다.</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//when</span></span><br><span class="line">  <span class="keyword">final</span> ResultActions resultActions = mvc.perform(get(<span class="string">"/members"</span>)</span><br><span class="line">      .contentType(MediaType.APPLICATION_JSON_UTF8))</span><br><span class="line">      .andDo(print());</span><br><span class="line"></span><br><span class="line">  <span class="comment">//then</span></span><br><span class="line">  resultActions</span><br><span class="line">      .andExpect(status().isOk())</span><br><span class="line">      .andExpect(jsonPath(<span class="string">"content"</span>).exists())</span><br><span class="line">      .andExpect(jsonPath(<span class="string">"pageable"</span>).exists())</span><br><span class="line">      .andExpect(jsonPath(<span class="string">"pageable"</span>).exists())</span><br><span class="line">      .andExpect(jsonPath(<span class="string">"numberOfElements"</span>).value(<span class="string">"4"</span>));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JSON 기반으로 테스트처럼 객체로 생성하기 어려운 Given을 JSON에서는 json 파일로 했고 여기에서는 SQL 파일로 진행합니다. 이 방식으로는 실제 실무에서 사용해본 경험은 없어 다른 문제들이 발생할지는 모르겠습니다.</p><h2><span id="결론">결론</span></h2><p>결론이라고 말하기는 어렵지만 테스트 코드를 작성할 때 Given을 만들기 위해서 많은 어려운 점이 있습니다. 지금의 제 결론은 Given을 최대한 편리하게 작성하는 방법과 의존도를 낮게 코딩해서 최대한 단위 테스트를 하기 쉽게 의도적으로 설계하고 코딩하는 편이 좋다고 생각합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/test-code&quot; rel=&quot;external nofollow noopener noreferrer
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Test" scheme="https://cheese10yun.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>JPA Fetch Join 적용시 limit 동작하지 않는 이슈</title>
    <link href="https://cheese10yun.github.io/jpa-fetch-paging/"/>
    <id>https://cheese10yun.github.io/jpa-fetch-paging/</id>
    <published>2019-07-08T15:00:00.000Z</published>
    <updated>2019-07-08T17:11:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>결론부터 말씀드리면 Pagealge + Fetct Join을 이용해서 페이징 처리 시 특정 조건의 경우 limit이 발생하지 않아 <strong>테이블 FULL Scan 진행해서 애플리케이션 단에서 limit을 조정하는 경우가 있습니다.</strong> 성능에 막대한 영향을 주기 때문에 조심해야 합니다.</p><h2><span id="조건">조건</span></h2><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/jpa-fetch-join/images/table.png" alt=""></p><p>주문 1 : 제품 N OneToMany 관계에 대해서 Pageagle 객체를 이용한 fetch join 사용 시 문제가 발생합니다. 아래는 연관관계의 코드입니다.</p><h2><span id="limit-확인">limit 확인</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"orders"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(name = <span class="string">"orderer"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">  <span class="keyword">private</span> String orderer;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"order"</span>, cascade = CascadeType.ALL)</span><br><span class="line">  <span class="keyword">private</span> List&lt;Product&gt; products = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"product"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Id</span> <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(name = <span class="string">"name"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@ManyToOne</span></span><br><span class="line">  <span class="meta">@JoinColumn</span>(name = <span class="string">"order_id"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">  <span class="keyword">private</span> Order order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Pageable 객체를 이용한 fetch join 쿼리 입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Order</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Query</span>(</span><br><span class="line">      value = <span class="string">"select  o from Order o "</span></span><br><span class="line">          + <span class="string">"inner join fetch o.products "</span>,</span><br><span class="line">      countQuery = <span class="string">"select count(o) from Order o"</span></span><br><span class="line">  )</span><br><span class="line">  <span class="function">Page&lt;Order&gt; <span class="title">findByPageWithProducts</span><span class="params">(Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>findByPageWithProducts 메서드에 대한 SQL입니다.<br><img src="https://github.com/cheese10yun/blog-sample/raw/master/jpa-fetch-join/images/fetch-join-sql.png" alt=""></p><p><strong>limit 키워드가 없는 것을 확인할 수 있습니다. 그렇기 때문에 orde 전체를 Full Scan 한 이후에 Pageable size 만큼 애플리케이션 단에서 조절하는 것으로 보입니다.</strong></p><p>그렇다면 JpaRepository에서 제공해주는 findAll + Pageable을 이용한 방식에서는 어떻게 동작하는지 확인해 보겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Order&gt; <span class="title">getOrderAll</span><span class="params">(Pageable pageable)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> orderRepository.findAll(pageable);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/jpa-fetch-join/images/limit-query.png" alt=""></p><p>limit이 정상적으로 동작하는 것을 확인할 수 있습니다. 하지만 N + 1 fetch join 이 제거해서 n +1 문제가 발생하는 합니다.</p><p>fetch join을 제거한 쿼리도 limit이 동작하는지 확인해 보겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Query</span>(</span><br><span class="line">    value = <span class="string">"select  o from Order o "</span>,</span><br><span class="line">    countQuery = <span class="string">"select count(o) from Order o"</span></span><br><span class="line">)</span><br><span class="line"><span class="function">Page&lt;Order&gt; <span class="title">findByPageWithProducts</span><span class="params">(Pageable pageable)</span></span>;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/jpa-fetch-join/images/limt2.png" alt=""></p><p>JpaRepository에서 제공해주는 이외의 메서드에서도 limit이 제대로 동작합니다.</p><h2><span id="limit이-결정되는-시점">limit이 결정되는 시점</span></h2><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/jpa-fetch-join/images/limit-point.png" alt=""></p><p>PagedExecution에서 doExecute 메서드 동작시 orders select 쿼리가 출력되는 것을 보아 저 시점에서 limit 여부가 결정되는 포인트인 거 같습니다. N + 1 문제를 해결하면서 limit이 동작하게 하는 방법은 아직 못 찾았습니다.</p><h2><span id="결론">결론</span></h2><p>Full Scan 해서 애플리케이션 레벨에서 해당 작업을 진행하는 것보다 N + 1 문제가 발생하더라도 fetch join을 제거하는 것이 현재로서는 그나마 적당한 방법인 거 같습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;결론부터 말씀드리면 Pagealge + Fetct Join을 이용해서 페이징 처리 시 특정 조건의 경우 limit이 발생하지 않아 &lt;strong&gt;테이블 FULL Scan 진행해서 애플리케이션 단에서 limit을 조정하는 경우가 있습니다.&lt;/str
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Fetch Join" scheme="https://cheese10yun.github.io/tags/Fetch-Join/"/>
    
  </entry>
  
  <entry>
    <title>Spring Actuator 기초 설정</title>
    <link href="https://cheese10yun.github.io/spring-actuator/"/>
    <id>https://cheese10yun.github.io/spring-actuator/</id>
    <published>2019-07-03T17:27:00.000Z</published>
    <updated>2019-07-07T05:36:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/actuator" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에 공개되어 있습니다.</strong></p><p>스프링은 Actuator를 이용해서 애플리케이션 상태를 종합적으로 모니터링할 수 있습니다.</p><h2><span id="의존성-주입">의존성 주입</span></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-actuator'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="actuator-호출">actuator 호출</span></h2><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/actuator/images/postman-api-call.png" alt=""></p><p><code>http://localhost:8890/actuator</code>를 호출하면 위와 같은 Response를 받을 수 있습니다. 기본 설정으로는 모든 endpoint가 노출돼있지는 않습니다. 모든 endpoint를 노출하도록 설정해보겠습니다.</p><h2><span id="endpoints-전체-노출">endpoints 전체 노출</span></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.yml</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span> <span class="string">"*"</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code> 설정을 변경하고 다시 <code>/actuator</code> 호출하면 아래 Response와 같습니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"_links"</span>: &#123;</span><br><span class="line">        <span class="attr">"self"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"auditevents"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/auditevents"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"beans"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/beans"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"caches-cache"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/caches/&#123;cache&#125;"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"caches"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/caches"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"health"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/health"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"health-component"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/health/&#123;component&#125;"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"health-component-instance"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/health/&#123;component&#125;/&#123;instance&#125;"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"conditions"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/conditions"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"configprops"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/configprops"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"env"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/env"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"env-toMatch"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/env/&#123;toMatch&#125;"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"info"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/info"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"loggers"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/loggers"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"loggers-name"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/loggers/&#123;name&#125;"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"heapdump"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/heapdump"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"threaddump"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/threaddump"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"metrics-requiredMetricName"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/metrics/&#123;requiredMetricName&#125;"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"metrics"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/metrics"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"scheduledtasks"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/scheduledtasks"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"httptrace"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/httptrace"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"mappings"</span>: &#123;</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/mappings"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>경로</th><th>설명</th></tr></thead><tbody><tr><td>/beans</td><td>초기화된 모든 스프링 빈의 목록을 표시</td></tr><tr><td>/env</td><td>스프링 설정 가능한 환경 속성 목록욜 표시, OS 환경 변수 및 컨피규레이션 파일의 속성 목록</td></tr><tr><td>/health</td><td>애플리케이션 상태 정보 표시</td></tr><tr><td>/info</td><td>애플리케이션의 임의 정보 표시 properties 등</td></tr><tr><td>/loggers</td><td>로거 컨피규레이션 정보를 표시하고 수정</td></tr><tr><td>/metrics</td><td>매트릭스 정보를 표시(메모리, 실행중인 스레드 수, REST 메서드 응답 시간)</td></tr><tr><td>/trace</td><td>트레이스 정뵤 표시(기본적으로 마지막 100개의 HTTP Request)</td></tr></tbody></table><p>다양한 정보들이 포함되어 있습니다. 필요한 정보들을 확인한 후 아래와 같이 필요한 정보들만 노출할 수 있습니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">"info"</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">"health"</span></span><br><span class="line"><span class="bullet">          -</span> <span class="string">"httptrace"</span></span><br></pre></td></tr></table></figure><p><code>application.yml</code> 변경이후 다시 <code>/actuator</code>을 호출하면 <code>include</code>에 포함시킨 endpoint만 Response 받게 됩니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"_links"</span>: &#123;</span><br><span class="line">    <span class="attr">"self"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"health"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/health"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"health-component"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/health/&#123;component&#125;"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"health-component-instance"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/health/&#123;component&#125;/&#123;instance&#125;"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"info"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/info"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"httptrace"</span>: &#123;</span><br><span class="line">      <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/httptrace"</span>,</span><br><span class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="info-git-info-노출하기">Info Git Info 노출하기</span></h2><p>기본 설정에서 <code>actuator/info</code> 호출시 아무 정보도 Response를 하지 않습니다. plugin을 이용하면 git에 대한 정보를 쉽게 노출할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ...</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        ...</span><br><span class="line">        classpath &quot;gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.0.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">apply plugin: &quot;com.gorylenko.gradle-git-properties&quot;</span><br></pre></td></tr></table></figure><p>필요한 디펜던시를 추가합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"><span class="attr">  info:</span></span><br><span class="line"><span class="attr">    git:</span></span><br><span class="line"><span class="attr">      mode:</span> <span class="string">SIMPLE</span> <span class="comment"># FULL or SIMPLE</span></span><br></pre></td></tr></table></figure><p>git 정보에 대한 mode를 SMPLE, FULL을 지정할 수 있습니다. 이후에 서버를 실행시키면 아래 그림처럼 <code>git.properties</code> 파일에 Git에 대한 정보가 담겨있습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/actuator/images/actuator-info-git-file.png" alt=""></p><h3><span id="simple-mode">SIMPLE Mode</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"git"</span>: &#123;</span><br><span class="line">    <span class="attr">"commit"</span>: &#123;</span><br><span class="line">      <span class="attr">"time"</span>: <span class="string">"2019-07-02T16:31:35Z"</span>,</span><br><span class="line">      <span class="attr">"id"</span>: <span class="string">"293e840"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"branch"</span>: <span class="string">"master"</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3><span id="full-mode">FULL Mode</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"git"</span>: &#123;</span><br><span class="line">    <span class="attr">"build"</span>: &#123;</span><br><span class="line">      <span class="attr">"host"</span>: <span class="string">"yun"</span>,</span><br><span class="line">      <span class="attr">"version"</span>: <span class="string">"0.0.1-SNAPSHOT"</span>,</span><br><span class="line">      <span class="attr">"time"</span>: <span class="string">"2019-07-03T16:49:41Z"</span>,</span><br><span class="line">      <span class="attr">"user"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Yun"</span>,</span><br><span class="line">        <span class="attr">"email"</span>: <span class="string">"cheese10yun@gmail.com"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"branch"</span>: <span class="string">"master"</span>,</span><br><span class="line">    <span class="attr">"commit"</span>: &#123;</span><br><span class="line">      <span class="attr">"message"</span>: &#123;</span><br><span class="line">        <span class="attr">"short"</span>: <span class="string">"오타 수정"</span>,</span><br><span class="line">        <span class="attr">"full"</span>: <span class="string">"오타 수정\n"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"id"</span>: &#123;</span><br><span class="line">        <span class="attr">"describe"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"abbrev"</span>: <span class="string">"293e840"</span>,</span><br><span class="line">        <span class="attr">"full"</span>: <span class="string">"293e840b752531eafb1be55e9cec78113743dd8d"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"time"</span>: <span class="string">"2019-07-02T16:31:35Z"</span>,</span><br><span class="line">      <span class="attr">"user"</span>: &#123;</span><br><span class="line">        <span class="attr">"email"</span>: <span class="string">"cheese10yun@gmail.com"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"Yun"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"closest"</span>: &#123;</span><br><span class="line">      <span class="attr">"tag"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"commit"</span>: &#123;</span><br><span class="line">          <span class="attr">"count"</span>: <span class="string">""</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"dirty"</span>: <span class="string">"true"</span>,</span><br><span class="line">    <span class="attr">"remote"</span>: &#123;</span><br><span class="line">      <span class="attr">"origin"</span>: &#123;</span><br><span class="line">        <span class="attr">"url"</span>: <span class="string">"https://github.com/cheese10yun/blog-sample.git"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"tags"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"total"</span>: &#123;</span><br><span class="line">      <span class="attr">"commit"</span>: &#123;</span><br><span class="line">        <span class="attr">"count"</span>: <span class="string">"212"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mode</code>에 따라서 출력되는 정보가 다릅니다.</p><h2><span id="health-database">Health Database</span></h2><p>기본 설정에서 <code>/actuator/health</code>를 호출하면 아래와 같은 응답 정보를 받을 수 있습니다. (데이터베이스 정보를 표시하기 위해서 H2 의존성을 추가했습니다.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;status&quot;: &quot;UP&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>데이터베이스에 대한 정보를 추가적으로 확인하기 위해서는 <code>application.yml</code>을 추가적으로 설정하면 됩니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="string">...</span></span><br><span class="line"><span class="attr">  endpoint:</span></span><br><span class="line"><span class="attr">    health:</span></span><br><span class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      show-details:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><p>위 설정을 추가하시고 <code>/actuator/health</code>를 다시 호출하면 아래와 같은 Response를 확인할 수 있습니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">  <span class="attr">"details"</span>: &#123;</span><br><span class="line">    <span class="attr">"db"</span>: &#123;</span><br><span class="line">      <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">      <span class="attr">"details"</span>: &#123;</span><br><span class="line">        <span class="attr">"database"</span>: <span class="string">"H2"</span>,</span><br><span class="line">        <span class="attr">"hello"</span>: <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"diskSpace"</span>: &#123;</span><br><span class="line">      <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">      <span class="attr">"details"</span>: &#123;</span><br><span class="line">        <span class="attr">"total"</span>: <span class="number">500068036608</span>,</span><br><span class="line">        <span class="attr">"free"</span>: <span class="number">389070479360</span>,</span><br><span class="line">        <span class="attr">"threshold"</span>: <span class="number">10485760</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="base-path-변경하기">Base Path 변경하기</span></h2><p>기본으로 제공해주는 URL 정보는 변경해서 사용하는 것이 바람직합니다. <code>base-path</code> 속성을 이용하면 endpoint base path를 변경할 수 있습니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      base-path:</span> <span class="string">"/system"</span></span><br></pre></td></tr></table></figure><p><code>base-path</code>을 변경하면 아래와 같이 endpoint base path가 변경되는 것을 확인할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/actuator/images/actuator-base-path.png" alt=""></p><h2><span id="intellij-endpint">IntelliJ Endpint</span></h2><p>IntelliJ를 이용하면 Actuator를 더욱 잘 활용할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/actuator/images/endpoint-mapping.png" alt=""></p><p>Run/Debug Tab에서 Endpoints에서는 전체 Request Mapping를 볼 수 있습니다. 실제 <code>Run HTTP Request</code>를 이용하면 요청을 보낼 수 있습니다.</p><p>우 클릭 이후 Edit을 활용하면 실제 매핑된 Controller 코드로 이동되어 컨트롤러에 있는 특정 Request Mapping 정보를 쉽게 찾을 수 있습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/actuator/images/endpoints-beans.png" alt=""></p><p><code>Beans</code> Tab에서는 등록돼있는 Bean들을 볼 수 있습니다. 스프링 부트에서는 특정 빈의 유무에 따라서 설정들이 변경되는 일이 많기 때문에 디버깅 시 유용하게 사용할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/actuator/images/endpoints-heath.png" alt=""></p><p><code>Health</code> Tab에서는 위에서 확인한 heath 정보도 확인할 수 있습니다. Http 요청을 보내서 확인하는 것보다는 인텔리 제이에서 확인하는 것이 개인적으로는 편리한 거 같습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/actuator/images/intellij-api-call.gif" alt=""></p><p>Controller에서 HTTP Call을 위 그림처럼 진행할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/actuator&quot; rel=&quot;external nofollow noopener noreferrer&quot; targ
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Actuator" scheme="https://cheese10yun.github.io/tags/Actuator/"/>
    
  </entry>
  
  <entry>
    <title>인텔리제이 Spring Boot Run Gradle에게 위임하기</title>
    <link href="https://cheese10yun.github.io/intellij-delegate-gradle/"/>
    <id>https://cheese10yun.github.io/intellij-delegate-gradle/</id>
    <published>2019-07-02T16:05:00.000Z</published>
    <updated>2019-07-03T15:49:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/out-dir.png" alt=""></p><p>인텔리제이에서 Gradle Spring Boot Run을 실행시킬 경우 out 디렉토리가 생성됩니다. Gradle 플러그들이나 Task 작업에 추가적인 것들이 <code>out</code> 디렉토리에 반영이 되지 않습니다. 인텔리제이에서는 Sprong Boot Run 작업을 Gradle에게 위임하는 옵션이 있습니다. 이 옵션으로 인텔리제이에서 Gradle을 사용하여 Run을 동작시킬수 있습니다.</p><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/intellij-delegate-build.png" alt=""></p><p>preference -&gt; Gradle -&gt; Runner -&gt; Delegate IDE … CheckBox를 선택</p><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/non-out-dir.png" alt=""></p><p>이제 인텔리제이를 실행하더라도 <code>out</code> 디렉토리가 생성되지 않은것을 확인할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://github.com/cheese10yun/IntelliJ/raw/master/assets/out-dir.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;인텔리제이에서 Gradle Spring Boot Run을 실행시킬 경우 o
      
    
    </summary>
    
    
      <category term="Gradle" scheme="https://cheese10yun.github.io/tags/Gradle/"/>
    
      <category term="IntelliJ" scheme="https://cheese10yun.github.io/tags/IntelliJ/"/>
    
      <category term="Tip" scheme="https://cheese10yun.github.io/tags/Tip/"/>
    
  </entry>
  
  <entry>
    <title>Spring Guide - Directory</title>
    <link href="https://cheese10yun.github.io/spring-guide-directory/"/>
    <id>https://cheese10yun.github.io/spring-guide-directory/</id>
    <published>2019-06-15T15:45:00.000Z</published>
    <updated>2019-08-28T14:41:54.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/spring-guide" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><p>패키지 구성은 크게 레이어 계층형, 도메인형 이렇게 2 가지 유형이 있다고 생각합니다. 각 유형별로 간단하게 설명하고 제 개인적인 Best Practices를 설명하겠습니다.</p><h2><span id="계층형">계층형</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   │   └── com</span><br><span class="line">    │   │       └── example</span><br><span class="line">    │   │           └── demo</span><br><span class="line">    │   │               ├── DemoApplication.java</span><br><span class="line">    │   │               ├── config</span><br><span class="line">    │   │               ├── controller</span><br><span class="line">    │   │               ├── dao</span><br><span class="line">    │   │               ├── domain</span><br><span class="line">    │   │               ├── exception</span><br><span class="line">    │   │               └── service</span><br><span class="line">    │   └── resources</span><br><span class="line">    │       └── application.properties</span><br></pre></td></tr></table></figure><p>계층형 구조는 각 계층을 대표하는 디렉터리를 기준으로 코드들이 구성됩니다. 계층형 구조의 장점은 해당 프로젝트에 이해가 상대적으로 낮아도 전체적인 구조를 빠르게 파악할 수 있는 장점이 있습니다. 단점으로는 디렉터리에 클래스들이 너무 많이 모이게 되는 점입니다.</p><h2><span id="도메인형">도메인형</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   │   └── com</span><br><span class="line">    │   │       └── example</span><br><span class="line">    │   │           └── demo</span><br><span class="line">    │   │               ├── DemoApplication.java</span><br><span class="line">    │   │               ├── coupon</span><br><span class="line">    │   │               │   ├── controller</span><br><span class="line">    │   │               │   ├── domain</span><br><span class="line">    │   │               │   ├── exception</span><br><span class="line">    │   │               │   ├── repository</span><br><span class="line">    │   │               │   └── service</span><br><span class="line">    │   │               ├── member</span><br><span class="line">    │   │               │   ├── controller</span><br><span class="line">    │   │               │   ├── domain</span><br><span class="line">    │   │               │   ├── exception</span><br><span class="line">    │   │               │   ├── repository</span><br><span class="line">    │   │               │   └── service</span><br><span class="line">    │   │               └── order</span><br><span class="line">    │   │                   ├── controller</span><br><span class="line">    │   │                   ├── domain</span><br><span class="line">    │   │                   ├── exception</span><br><span class="line">    │   │                   ├── repository</span><br><span class="line">    │   │                   └── service</span><br><span class="line">    │   └── resources</span><br><span class="line">    │       └── application.properties</span><br></pre></td></tr></table></figure><p>도메인 디렉터리 기준으로 코드를 구성합니다. 도메인형의 장점은 관련된 코드들이 응집해 있는 장점이 있습니다. 단점으로는 프로젝트에 대한 이해도가 낮을 경우 전체적인 구조를 파악하기 어려운 점이 있습니다.</p><h2><span id="개인적인-best-practices">개인적인 Best Practices</span></h2><p><strong>저는 도메인형이 더 좋은 구조라고 생각합니다.</strong> 이전부터 도메인형을 선호했었지만 이러한 디렉터리 구조는 어느 정도 취향 차이라고 생각해 왔었습니다. <strong>하지만 최근 들어 취향 차이를 넘어 도메인형 디렉터리 구조가 더 효과적</strong>이라고 확신이 들어 이 주제로 포스팅을 해야겠다는 생각을 했습니다.</p><h3><span id="너무-많은-클래스">너무 많은 클래스</span></h3><p>계층형 같은 경우 Controller, Service 등에 너무 많은 클래스들이 밀집하게 됩니다. 많게는 30 ~ 40의 클래스들이 xxxxController, xxxxService 같은 패턴으로 길게 나열되어 프로젝트 전체적인 구조는 상단 디렉터리 몇 개로 빠르게 파악할 수 있지만 그 이후로는 파악하기가 더 힘들어지게 됩니다.</p><h3><span id="관련-코드의-응집">관련 코드의 응집</span></h3><p>관련된 코드들이 응집해 있으면 자연스럽게 연관돼 있는 자연스럽게 코드 스타일, 변수, 클래스 이름 등을 참고하게 되고 비슷한 코드 스타일과 패턴으로 개발할 수 있게 될 환경이 자연스럽게 마련된다고 생각합니다.</p><p>계층형 구조일 경우 수신자에 대한 클래스명을 Receiver로 지정했다면, 너무 많은 클래스들로 Receiver에 대한 클래스가 자연스럽게 인식하지 않게 되고 Recipient 같은 클래스 명이나 네이밍을 사용하게 됩니다. 반변 도메인형은 관련된 코드들이 응집해있기 때문에 자연스럽게 기존 코드를 닮아갈 수 있다고 생각합니다.</p><p>또 해당 디렉터리가 컨텍스트를 제공해줍니다. order라는 디렉터리에 Receiver 클래스가 있는 경우 주문을 배송받는 수취인이라는 컨텍스트를 제공해줄 수 있습니다. (물론 OrderReceiver라고 더 구체적으로 명명하는 게 더 좋은 네이밍이라고 생각합니다.)</p><h3><span id="최근-기술-동향">최근 기술 동향</span></h3><p>도메인 주도 개발, ORM, 객체지향 프로그래밍 등에서 도메인형 구조가 더 적합하다고 생각합니다. 도메인 주도 개발에서 Root Aggregate 같은 표현은 계층형보다 도메인형으로 표현했을 경우 훨씬 더 직관적이며 해당 도메인을 이해하는 것에도 효율적입니다.</p><h2><span id="도메인형-디렉토리-구조">도메인형 디렉토리 구조</span></h2><p>도메인 계층으로 디렉터리 구조를 몇몇 프로젝트에서 진행해 보았지만 그때마다 더 좋은 구조를 찾게 되기 조금 더 발전시키는 가정이다 보니 아직은 아주 명확한 근거를 기반으로 하지는 못하고 있습니다. 약간 코에 걸면 코걸이 느낌이 있습니다.</p><h3><span id="전체적인-구조">전체적인 구조</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   ├── java</span><br><span class="line">    │   │   └── com</span><br><span class="line">    │   │       └── spring</span><br><span class="line">    │   │           └── guide</span><br><span class="line">    │   │               ├── ApiApp.java</span><br><span class="line">    │   │               ├── SampleApi.java</span><br><span class="line">    │   │               ├── domain</span><br><span class="line">    │   │               │   ├── coupon</span><br><span class="line">    │   │               │   │   ├── api</span><br><span class="line">    │   │               │   │   ├── application</span><br><span class="line">    │   │               │   │   ├── dao</span><br><span class="line">    │   │               │   │   ├── domain</span><br><span class="line">    │   │               │   │   ├── dto</span><br><span class="line">    │   │               │   │   └── exception</span><br><span class="line">    │   │               │   ├── member</span><br><span class="line">    │   │               │   │   ├── api</span><br><span class="line">    │   │               │   │   ├── application</span><br><span class="line">    │   │               │   │   ├── dao</span><br><span class="line">    │   │               │   │   ├── domain</span><br><span class="line">    │   │               │   │   ├── dto</span><br><span class="line">    │   │               │   │   └── exception</span><br><span class="line">    │   │               │   └── model</span><br><span class="line">    │   │               │       ├── Address.java</span><br><span class="line">    │   │               │       ├── Email.java</span><br><span class="line">    │   │               │       └── Name.java</span><br><span class="line">    │   │               ├── global</span><br><span class="line">    │   │               │   ├── common</span><br><span class="line">    │   │               │   │   ├── request</span><br><span class="line">    │   │               │   │   └── response</span><br><span class="line">    │   │               │   ├── config</span><br><span class="line">    │   │               │   │   ├── SwaggerConfig.java</span><br><span class="line">    │   │               │   │   ├── properties</span><br><span class="line">    │   │               │   │   ├── resttemplate</span><br><span class="line">    │   │               │   │   └── security</span><br><span class="line">    │   │               │   ├── error</span><br><span class="line">    │   │               │   │   ├── ErrorResponse.java</span><br><span class="line">    │   │               │   │   ├── GlobalExceptionHandler.java</span><br><span class="line">    │   │               │   │   └── exception</span><br><span class="line">    │   │               │   └── util</span><br><span class="line">    │   │               └── infra</span><br><span class="line">    │   │                   ├── email</span><br><span class="line">    │   │                   └── sms</span><br><span class="line">    │   │                       ├── AmazonSmsClient.java</span><br><span class="line">    │   │                       ├── SmsClient.java</span><br><span class="line">    │   │                       └── dto</span><br><span class="line">    │   └── resources</span><br><span class="line">    │       ├── application-dev.yml</span><br><span class="line">    │       ├── application-local.yml</span><br><span class="line">    │       ├── application-prod.yml</span><br><span class="line">    │       └── application.yml</span><br></pre></td></tr></table></figure><p>전체적인 구조는 도메인을 담당하는 디렉터리 domain, 전체적인 설정을 관리하는 global, 외부 인프라스트럭처를 관리하는 infra를 기준으로 설명을 드리겠습니다.</p><h3><span id="domain">Domain</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">├── domain</span><br><span class="line">│   ├── member</span><br><span class="line">│   │   ├── api</span><br><span class="line">│   │   │   └── MemberApi.java</span><br><span class="line">│   │   ├── application</span><br><span class="line">│   │   │   ├── MemberProfileService.java</span><br><span class="line">│   │   │   ├── MemberSearchService.java</span><br><span class="line">│   │   │   ├── MemberSignUpRestService.java</span><br><span class="line">│   │   │   └── MemberSignUpService.java</span><br><span class="line">│   │   ├── dao</span><br><span class="line">│   │   │   ├── MemberFindDao.java</span><br><span class="line">│   │   │   ├── MemberPredicateExecutor.java</span><br><span class="line">│   │   │   ├── MemberRepository.java</span><br><span class="line">│   │   │   ├── MemberSupportRepository.java</span><br><span class="line">│   │   │   └── MemberSupportRepositoryImpl.java</span><br><span class="line">│   │   ├── domain</span><br><span class="line">│   │   │   ├── Member.java</span><br><span class="line">│   │   │   └── ReferralCode.java</span><br><span class="line">│   │   ├── dto</span><br><span class="line">│   │   │   ├── MemberExistenceType.java</span><br><span class="line">│   │   │   ├── MemberProfileUpdate.java</span><br><span class="line">│   │   │   ├── MemberResponse.java</span><br><span class="line">│   │   │   └── SignUpRequest.java</span><br><span class="line">│   │   └── exception</span><br><span class="line">│   │       ├── EmailDuplicateException.java</span><br><span class="line">│   │       ├── EmailNotFoundException.java</span><br><span class="line">│   │       └── MemberNotFoundException.java</span><br><span class="line">│   └── model</span><br><span class="line">│       ├── Address.java</span><br><span class="line">│       ├── Email.java</span><br><span class="line">│       └── Name.java</span><br></pre></td></tr></table></figure><p><code>model</code> 디렉터리는 Domain Entity 객체들이 공통적으로 사용할 객체들로 구성됩니다. 대표적으로 <code>Embeddable</code> 객체, <code>Enum</code> 객체 등이 있습니다.</p><p><code>member</code> 디렉터리는 간단한 것들부터 설명하겠습니다.</p><ul><li>api : 컨트롤러 클래스들이 존재합니다. 외부 rest api로 프로젝트를 구성하는 경우가 많으니 api라고 지칭했습니다. Controller 같은 경우에는 ModelAndView를 리턴하는 느낌이 있어서 명시적으로 api라고 하는 게 더 직관적인 거 같습니다.</li><li>domain : 도메인 엔티티에 대한 클래스로 구성됩니다. 특정 도메인에만 속하는 <code>Embeddable</code>, <code>Enum</code> 같은 클래스도 구성됩니다.</li><li>dto : 주로 Request, Response 객체들로 구성됩니다.</li><li>exception : 해당 도메인이 발생시키는 Exception으로 구성됩니다.</li></ul><h4><span id="application">application</span></h4><p>application 디렉터리는 도메인 객체와 외부 영역을 연결해주는 파사드와 같은 역할을 주로 담당하는 클래스로 구성됩니다. 대표적으로 데이터베이스 트랜잭션을 처리를 진행합니다. service 계층과 유사합니다. 디렉터리 이름을 service로 하지 않은 이유는 service로 했을 경우 xxxxService로 클래스 네임을 해야 한다는 강박관념이 생기기 때문에 application이라고 명명했습니다.</p><h4><span id="dao">dao</span></h4><p>repository 와 비슷합니다. repository로 하지 않은 이유는 조회 전용 구현체들이 작성 많이 작성되는데 이러한 객체들은 DAO라는 표현이 더 직관적이라고 판단했습니다. <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Querydsl를 이용해서 Repository 확장하기(1), (2)</a>처럼 Reopsitory를 DAO처럼 확장하기 때문에 dao 디렉터리 명이 더 직관적이라고 생각합니다.</p><h3><span id="global">global</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">├── global</span><br><span class="line">│   ├── common</span><br><span class="line">│   │   ├── request</span><br><span class="line">│   │   └── response</span><br><span class="line">│   │       └── Existence.java</span><br><span class="line">│   ├── config</span><br><span class="line">│   │   ├── SwaggerConfig.java</span><br><span class="line">│   │   ├── properties</span><br><span class="line">│   │   ├── resttemplate</span><br><span class="line">│   │   │   ├── RestTemplateClientHttpRequestInterceptor.java</span><br><span class="line">│   │   │   ├── RestTemplateConfig.java</span><br><span class="line">│   │   │   └── RestTemplateErrorHandler.java</span><br><span class="line">│   │   └── security</span><br><span class="line">│   ├── error</span><br><span class="line">│   │   ├── ErrorResponse.java</span><br><span class="line">│   │   ├── GlobalExceptionHandler.java</span><br><span class="line">│   │   └── exception</span><br><span class="line">│   │       ├── BusinessException.java</span><br><span class="line">│   │       ├── EntityNotFoundException.java</span><br><span class="line">│   │       ├── ErrorCode.java</span><br><span class="line">│   │       └── InvalidValueException.java</span><br><span class="line">│   └── util</span><br></pre></td></tr></table></figure><p>global은 프로젝트 전방위적으로 사용되는 객체들로 구성됩니다. global로 지정한 이유는 common, util, config 등 프로젝트 전체에서 사용되는 클래스들이 global이라는 디렉터리에 모여 있는 것이 좋다고 생각했습니다.</p><ul><li>common : 공통으로 사용되는 Value 객체들로 구성됩니다. 페이징 처리를 위한 Request, 공통된 응답을 주는 Response 객체들이 있습니다.</li><li>config : 스프링 각종 설정들로 구성됩니다.</li><li>error : 예외 핸들링을 담당하는 클래스로 구성됩니다. <a href="https://github.com/cheese10yun/spring-guide/blob/master/docs/exception-guide.md" rel="external nofollow noopener noreferrer" target="_blank">Exception Guide</a>에서 설명했던 코드들이 있습니다.</li><li>util : 유틸성 클래스들이 위치합니다.</li></ul><p>그 밖에도 global 하게 설정하는 것들을 global 디렉터리에 위치 시키면 될 거 같습니다.</p><h3><span id="infra">infra</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">└── infra</span><br><span class="line">    ├── email</span><br><span class="line">    └── sms</span><br><span class="line">        ├── AmazonSmsClient.java</span><br><span class="line">        ├── KtSmsClient.java</span><br><span class="line">        ├── SmsClient.java</span><br><span class="line">        └── dto</span><br><span class="line">            └── SmsRequest.java</span><br></pre></td></tr></table></figure><p>infra 디렉터리는 인프라스트럭처 관련된 코드들로 구성됩니다. 인프라스트럭처는 대표적으로 이메일 알림, SMS 알림 등 외부 서비스에 대한 코드들이 존재합니다. 그렇기 때문에 domain, global에 속하지 않습니다. global로 볼 수는 있지만 이 계층도 잘 관리해야 하는 대상이기에 별도의 디렉터리 했습니다.</p><p>인프라스트럭처는 대체성을 강하게 갔습니다. SMS 메시지를 보내는 클라이언트를 국내 사용자에게는 KT SMS, 해외 사용자에게는 Amazon SMS 클라이언트를 이용해서 보낼 수 있습니다.</p><p>만약 국내 서비스만 취급한다고 하더라도 언제 다른 플랫폼으로 변경될지 모르니 이런 인프라스트럭처는 기계적으로 인터페이스를 두고 개발하는 것이 좋습니다. 이런 측면에서 infra 디렉터리로 분리 시켜 관련 코드들을 모았습니다.</p><h2><span id="결론">결론</span></h2><p>도메인형 기준으로 디렉터리를 구성하디보니 도메인 디렉터리에 속하지 않은 config, util, error, common, infra 등을 어느 디렉터리에 위치시켜야 할지 고민을 했었고 global, infra로 분리해서 도메인에 속하지 않은 코드들을 위치 시켰습니다. 그러기 때문에 도메인형이라는 큰 틀에서는 어느 정도 자유롭게 구성을 하는 것이 좋습니다.</p><p>특히 DDD의 Root Aggregate 기준으로 디렉터리들이 위치하는 경우 디렉터리 위치만으로도 개발자에게 많은 컨텍스트를 전달해줄 수 있다고 생각합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-guide&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Git
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Guide" scheme="https://cheese10yun.github.io/tags/Guide/"/>
    
      <category term="Directory" scheme="https://cheese10yun.github.io/tags/Directory/"/>
    
  </entry>
  
  <entry>
    <title>Spring-JPA Best Practices step-16 - Querydsl를 이용해서 Repository 확장하기 (2)</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-16/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-16/</id>
    <published>2019-06-12T16:30:00.000Z</published>
    <updated>2019-06-13T13:16:52.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><p>JpaRepository의 쿼리 메서드를 통해서 간단한 쿼리들을 아래 예제 처럼 쉽게 만들수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Account</span>, <span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">existsByEmail</span><span class="params">(Email email)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">exsistByxxx</span><span class="params">(...)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="keyword">long</span> <span class="title">countByEmail</span><span class="params">(Email email)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">long</span> <span class="title">countByxxx</span><span class="params">(...)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><p>유사한 쿼리가 필요해지면 쿼리 메서드를 지속적으로 추가해야 하는 단점이 있습니다. 이런 경우에 <code>QuerydslPredicateExecutor</code>를 사용하면 매우 효과적입니다.</p><h2><span id="querydslpredicateexecutor">QuerydslPredicateExecutor</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuerydslPredicateExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  ....</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">(Predicate predicate)</span></span>;            </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(Predicate predicate)</span></span>;        </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>QuerydslPredicateExecutor</code> 코드의 일부입니다. <code>Predicate</code>를 매개변수로 받고 있기 때문에 Predicate를 통해서 새로운 쿼리를 만들수 있습니다.</p><h2><span id="accountrepository-적용하기">AccountRepository 적용하기</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Account</span>, <span class="title">Long</span>&gt;, <span class="title">AccountSupportRepository</span>,</span></span><br><span class="line"><span class="class">    <span class="title">QuerydslPredicateExecutor</span>&lt;<span class="title">Account</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>AccountSupportRepository</code>는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices/blob/master/doc/step-15.md" rel="external nofollow noopener noreferrer" target="_blank">step-15: Querydsl를 이용해서 Repository 확장하기(1)</a> 에서 추가한 코드이고 <code>QuerydslPredicateExecutor&lt;Account&gt;</code> 코드만 추가하면 완료 됩니다.</p><h2><span id="querydslpredicateexecutor-사용하기">QuerydslPredicateExecutor 사용하기</span></h2><p><img src="https://github.com/cheese10yun/spring-jpa-best-practices/raw/master/images/AccountRepository2.png" alt=""></p><p><code>AccountRepository</code>는 <code>QuerydslPredicateExecutor</code>를 구현하고 있음으로 별다른 코드 없이 우리는 <code>AccountRepository</code>를 통해서 <code>QuerydslPredicateExecutor</code>의 메서드를 사용할 수 있습니다. 이것은 우리가 <code>AccountRepository</code>가 아무 메서드가 없어도 <code>JpaRepository</code>에 있는 findById, findAll 같은 메서드를 사용할 수 있는 이유와 동일합니다.</p><h3><span id="test-code">Test Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DataJpaTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRepositoryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> AccountRepository accountRepository;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> QAccount qAccount = QAccount.account;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">predicate_test_001</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//given</span></span><br><span class="line">    <span class="keyword">final</span> Predicate predicate = qAccount.email.eq(Email.of(<span class="string">"test001@test.com"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//when</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> exists = accountRepository.exists(predicate);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then</span></span><br><span class="line">    assertThat(exists).isTrue();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">predicate_test_002</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//given</span></span><br><span class="line">    <span class="keyword">final</span> Predicate predicate = qAccount.firstName.eq(<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//when</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> exists = accountRepository.exists(predicate);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then</span></span><br><span class="line">    assertThat(exists).isFalse();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">predicate_test_003</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//given</span></span><br><span class="line">    <span class="keyword">final</span> Predicate predicate = qAccount.email.value.like(<span class="string">"test%"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//when</span></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> count = accountRepository.count(predicate);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then</span></span><br><span class="line">    assertThat(count).isGreaterThan(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Predicate 객체 생성을 통해서 쿼리메서드 코드 추가 없이 다양한 쿼리들을 쉽게 만들 수 있습니다.</p><p><img src="https://github.com/cheese10yun/spring-jpa-best-practices/raw/master/images/test-result.png" alt=""></p><p><code>predicate_test_001</code> 테스트 코드에 대한 실제 쿼리 내용입니다. 해당 쿼리가 어떻게 출력되는지 직접 눈으로 확인하는 습관을 갖는 것이 좋습니다.</p><h2><span id="결론">결론</span></h2><p>조회용 쿼리를 만드는 것은 실제 현업에서 많은 업무 비중을 차지하다 보니 작업자들은 다양한 조회 전용 구현체들을 우후죽순처럼 만들게 됩니다. 이렇게 되면 중복 코드가 많이 발생하게 되고, 구현체가 늘어나는 만큼 의존 관계도 자연스게 높아지게 됩니다.</p><p>이러한 문제를 위와 같이 객체지향 관점으로 풀어내어 <code>AccountRepository</code> 인터페이스를 통해서 DAO가 재공되고 세부 구현들을 숨길 수 있게 설계하는 것이 바람직하다고 생각합니다.</p><p><strong>단순하게 JPA를 잘 활용하는 것보다 위에서 언급한 내용을 조금 더 깊게 생각해보는 것이 이 포스팅에 취지입니다.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-jpa-best-practices&quot; rel=&quot;external nofollow noopener noreferrer&quot; target
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
      <category term="QueryDsl" scheme="https://cheese10yun.github.io/tags/QueryDsl/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 기반 멀티 모듈 구성하기</title>
    <link href="https://cheese10yun.github.io/gradle-multi-module/"/>
    <id>https://cheese10yun.github.io/gradle-multi-module/</id>
    <published>2019-06-10T15:32:00.000Z</published>
    <updated>2019-06-10T15:33:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>전체 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/multi-module" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에서 확인할 수 있습니다.</p><h2><span id="멀티-모듈-구성">멀티 모듈 구성</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── admin-api</span><br><span class="line">│   ├── out</span><br><span class="line">│   └── src</span><br><span class="line">├── api</span><br><span class="line">│   ├── out</span><br><span class="line">│   └── src</span><br><span class="line">├── build.gradle</span><br><span class="line">├── core</span><br><span class="line">│   ├── build</span><br><span class="line">│   ├── out</span><br><span class="line">│   └── src</span><br><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">├── gradlew</span><br><span class="line">├── gradlew.bat</span><br><span class="line">└── settings.gradle</span><br></pre></td></tr></table></figure><ul><li>admin-api : admin 관련 API</li><li>api : 일반 유저 api</li><li>core : domain 및 공통 모듈</li></ul><h2><span id="buildgradle-스프링-디펜던시-정의">build.gradle : 스프링 디펜던시 정의</span></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    ext &#123;</span><br><span class="line">        springBootVersion = <span class="string">'2.1.5.RELEASE'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span>(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;"</span>)</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">"io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본적인 스프링 디펜던시를 정의 합니다.</p><h2><span id="settingsgradle">settings.gradle</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pluginManagement &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        gradlePluginPortal()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">rootProject.name = &apos;multi&apos;</span><br><span class="line"></span><br><span class="line">include &apos;core&apos;</span><br><span class="line">include &apos;api&apos;</span><br><span class="line">include &apos;admin-api&apos;</span><br></pre></td></tr></table></figure><p>추가할 서브모듈을 include 합니다.</p><h2><span id="buildgradle-subprojects-project-정의">build.gradle : subprojects, project 정의</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">subprojects &#123;</span><br><span class="line">    apply plugin: &apos;java&apos;</span><br><span class="line">    apply plugin: &apos;eclipse&apos;</span><br><span class="line">    apply plugin: &apos;org.springframework.boot&apos;</span><br><span class="line">    apply plugin: &apos;io.spring.dependency-management&apos;</span><br><span class="line"></span><br><span class="line">    group = &apos;com.module&apos;</span><br><span class="line">    version = &apos;0.0.1-SNAPSHOT&apos;</span><br><span class="line">    sourceCompatibility = &apos;1.8&apos;</span><br><span class="line"></span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 서브 모듈에 공통으로 의존성을 추가 시킬 디펜던시를 정의합니다.</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        compileOnly &apos;org.projectlombok:lombok&apos;</span><br><span class="line">        annotationProcessor &apos;org.projectlombok:lombok&apos;</span><br><span class="line">        implementation &apos;org.springframework.boot:spring-boot-starter-actuator&apos;</span><br><span class="line">        implementation &apos;org.springframework.boot:spring-boot-starter-data-jpa&apos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   // 해당 task로 서브 모듈 추가시 기초적인 디렉토리를 자동으로 생성해줍니다.</span><br><span class="line">    task initSourceFolders &#123;</span><br><span class="line">        sourceSets*.java.srcDirs*.each &#123;</span><br><span class="line">            if (!it.exists()) &#123;</span><br><span class="line">                it.mkdirs()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sourceSets*.resources.srcDirs*.each &#123;</span><br><span class="line">            if (!it.exists()) &#123;</span><br><span class="line">                it.mkdirs()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// project를 정의합니다. 공통으로 사용되는 core 모듈을 추가해 줍니다.</span><br><span class="line">project(&apos;:core&apos;) &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        compile(&apos;com.h2database:h2&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">project(&apos;:api&apos;) &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        compile project(&apos;:core&apos;)</span><br><span class="line">        implementation &apos;org.springframework.boot:spring-boot-starter-web&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">project(&apos;:admin-api&apos;) &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        compile project(&apos;:core&apos;)</span><br><span class="line">        implementation &apos;org.springframework.boot:spring-boot-starter-web&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 gradle 파일을 작성하면 <a href="#gradle-%EA%B8%B0%EB%B0%98-%EB%A9%80%ED%8B%B0-%EB%AA%A8%EB%93%88">Gradle 기반 멀티 모듈</a> 처럼 자동으로 디렉토리가 생성됩니다.</p><h2><span id="core-module">Core Module</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"member"</span>)</span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Id</span></span><br><span class="line">  <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Column</span>(name = <span class="string">"name"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Member</span>, <span class="title">Long</span>&gt; </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>간단한 Entity, Repository를 만듭니다.</p><h2><span id="api-module">Api Module</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/members"</span>)</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberApi</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MemberRepository memberRepository;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Member <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Member member = <span class="keyword">new</span> Member(<span class="string">"test"</span>);</span><br><span class="line">    <span class="keyword">return</span> memberRepository.save(member);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Member&gt; <span class="title">getMembers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> memberRepository.findAll();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/blob/master/multi-module/imags/create-member.png?raw=true" alt=""><br><img src="https://github.com/cheese10yun/blog-sample/blob/master/multi-module/imags/get-members.png?raw=true" alt=""></p><p>Member 생성, 조회가 제대로 동작하는 것을 보아 Core 모듈에 있는 MemberRepository가 제대로 동작하는 것을 확인할 수 있습니다.</p><h2><span id="admin-module">Admin Module</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/members"</span>)</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MemberRepository memberRepository;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Member&gt; <span class="title">getMembers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> memberRepository.findAll();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostMapping</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Member <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Member member = <span class="keyword">new</span> Member(<span class="string">"test"</span>);</span><br><span class="line">    <span class="keyword">return</span> memberRepository.save(member);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cheese10yun/blog-sample/master/multi-module/imags/admin-member.png" alt=""></p><p>Admin 모듈도 동일하게 API 구성하고 테스트 하여도 동일합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;전체 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/multi-module&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Gradle" scheme="https://cheese10yun.github.io/tags/Gradle/"/>
    
      <category term="Module" scheme="https://cheese10yun.github.io/tags/Module/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 여러 서버 실행 하기</title>
    <link href="https://cheese10yun.github.io/intellij-boot-run-config/"/>
    <id>https://cheese10yun.github.io/intellij-boot-run-config/</id>
    <published>2019-05-26T10:25:00.000Z</published>
    <updated>2019-05-26T10:23:44.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>(IntelliJ 사용법 Tip 전체 보기[<a href="https://github.com/cheese10yun/IntelliJ" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/cheese10yun/IntelliJ</a>]</p></blockquote><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/configuration-run.png" alt=""></p><ol><li>단축키 cmd + F11로 <code>edit configuration</code> 검색합니다.</li><li>해당 <code>edit configuration</code> 으로 들어갑니다.</li></ol><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/configruration-run-setting.png" alt=""></p><ol><li>왼쪽 상단의 <code>+</code> 버튼을 클릭합니다.</li><li><code>Spring Boot</code>을 선택합니다.</li><li>상단의 <code>Name</code> 이름을 지정합니다.</li><li><code>VM options</code>에 <code>-Dserver.port=8081</code>을 지정합니다.</li><li>동일한 방법으로 다른 Port도 등록합니다.</li></ol><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/spring-boot-run.png" alt=""></p><ol><li>ctrl + alt + r 단축키로 Run을 실행합니다.</li><li>위에서 등록한 2개의 Application을 선택합니다.</li></ol><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/spring-boot-run-result.png" alt=""><br>위에서 등록한 Application 2개가 실행되는것을 확인할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;(IntelliJ 사용법 Tip 전체 보기[&lt;a href=&quot;https://github.com/cheese10yun/IntelliJ&quot; rel=&quot;external nofollow noopener noreferrer&quot; target
      
    
    </summary>
    
    
      <category term="IntelliJ" scheme="https://cheese10yun.github.io/tags/IntelliJ/"/>
    
      <category term="Tip" scheme="https://cheese10yun.github.io/tags/Tip/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Config 살펴보기</title>
    <link href="https://cheese10yun.github.io/spring-cloud-config/"/>
    <id>https://cheese10yun.github.io/spring-cloud-config/</id>
    <published>2019-05-25T14:40:00.000Z</published>
    <updated>2019-05-25T14:46:26.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://acornpub.co.kr/book/mastering-spring-5.0" rel="external nofollow noopener noreferrer" target="_blank">스프링 5.0 마스터</a>를보고 정리한 자료 입니다. 전체 코드는 <a href="https://github.com/cheese10yun/msa-study-sample/blob/master/docs/config.md" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에서 확인할 수 있습니다.</p></blockquote><p>스프링 클라우드 컨피그는 중앙 집중식 마이크로서비스 구성을 지원한다. 여기서 두 가지 중요한 구성 요소의 조합이다.</p><ul><li>스프링 클라우드 컨피그 서버 : 버전 관리 리포지토리로 백업된 중앙 집중식 구성 노출을 지원한다.</li><li>스프링 클라우드 컨피그 클라이언트 : 애플리케이션이 스프링 클라우드 컨피그 서버에 연결하도록 지원한다.</li></ul><p><img src="https://github.com/cheese10yun/spring-msa-demo/raw/master/assets/msa-config-server.png" alt=""></p><h2><span id="github-repository-연결">GitHub Repository 연결</span></h2><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/github-img.png" alt=""></p><p>GitHub Repository에</p><ul><li>micoroservice-a-default.yml</li><li>micoroservice-a-dev.yml</li></ul><p>아래 처럼 작성합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">application:</span></span><br><span class="line"><span class="attr">  message:</span> <span class="string">"Message From &#123;ENV&#125; Local Git Repository"</span></span><br></pre></td></tr></table></figure><p><code>{ENV}</code>에 ddefault, dev 환경에 맞는 값을 작성합니다.</p><h2><span id="config-server">Config Server</span></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'org.springframework.cloud:spring-cloud-config-server'</span></span><br><span class="line">implementation <span class="string">'org.springframework.boot:spring-boot-starter-actuator'</span></span><br></pre></td></tr></table></figure><p>config server 의존 성을 추가합니다. actuator도 편의를 위해서 추가합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"config-server"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="string">"https://github.com/cheese10yun/msa-study-sample"</span></span><br></pre></td></tr></table></figure><p>config server는 8888 port를 사용하는 관례가 있어 port를 8888로 지정합니다. Github Repository URI 주소를 입력합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(ConfigServerApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@EnableConfigServer</code> 어노테이션을 추가만 하면 별다른 설정없이 Config Server가 설정됩니다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/intellj-actuator.png" alt=""><br>actuator 의존성이 있으면 IntellJ Endpoints -&gt; Mappings에서 현재 서버의 API mapping 정보를 쉽게 확인할 수 있습니다.</p><p>마우스 왼쪽 클릭을 한 이후에 Open In Http Request…를 클릭하면 쉽게 HTTP 콜을 할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/http-call.png" alt=""></p><p>URL 형식은 /{appliation-name}/{profile}/{label}입니다. 위에서 등록한 <code>micoroservice-a-default.yml</code>을 확인해보기 위해서 <code>http://localhost:8888/microservice-a/default</code>을 호출합니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"microservice-a"</span>,</span><br><span class="line">  <span class="attr">"profiles"</span>: [</span><br><span class="line">    <span class="string">"default"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"label"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"c03eecc5d8eabefc4b2a8f085789f42bd5317366"</span>,</span><br><span class="line">  <span class="attr">"state"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"propertySources"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"https://github.com/cheese10yun/msa-study-sample/microservice-a-default.yml"</span>,</span><br><span class="line">      <span class="attr">"source"</span>: &#123;</span><br><span class="line">        <span class="attr">"application.message"</span>: <span class="string">"Message From Default Local Git Repository"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>응답 값을 보면 해당 properties를 잘 읽어 오는 것을 확인할 수 있습니다.</p><p><code>http://localhost:8888/microservice-a/dev</code>을 호출하면 <code>micoroservice-a-dev.yml</code>의 값을 제대로 읽어 오는지 확인할 수 있습니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"microservice-a"</span>,</span><br><span class="line">  <span class="attr">"profiles"</span>: [</span><br><span class="line">    <span class="string">"dev"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"label"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"c03eecc5d8eabefc4b2a8f085789f42bd5317366"</span>,</span><br><span class="line">  <span class="attr">"state"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"propertySources"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"https://github.com/cheese10yun/msa-study-sample/microservice-a-dev.yml"</span>,</span><br><span class="line">      <span class="attr">"source"</span>: &#123;</span><br><span class="line">        <span class="attr">"application.message"</span>: <span class="string">"Message From Default Dev Git Repository"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="client">Client</span></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.cloud:spring-cloud-config-client'</span></span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-actuator'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>필요한 의존성을 추가합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"application"</span>)</span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>프로퍼티를 읽을 ConfigurationProperties 객체를 만듭니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ApplicationConfiguration applicationConfiguration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/message"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">welcome</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"message"</span>, applicationConfiguration.getMessage());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 메시지를 확인할 수 있는 컨트롤러를 만듭니다. <code>getMessage()</code> 메시지는 각 환경마다 다른 메시지를 출력합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">&#123;ENV&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://localhost:8888</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">microservice-a</span></span><br></pre></td></tr></table></figure><p>파일명은 <code>bootstrap.yml</code>으로 지정합니다. <code>active</code>는 각 환경마다 지정합니다. dev으로 지정하고 <code>http://127.0.0.1:8080/message</code> API를 호출해보겠습니다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/message-call.png" alt=""></p><p>이것도 인텔리제이를 이용해서 호출하면 간편합니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"Message From Default Dev Git Repository"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Dev</code> 메시지가 출력되는 것을 확인 할 수 있습니다. <code>profiles</code>을 <code>default</code> 으로 지정하면 메시지에는 local 이라는 문자가 출력됩니다.</p><h2><span id="refresh">Refresh</span></h2><p>마이크로서비스 A의 properties의 변경이 생겼을 경우 Refresh API를 호출해서 설정을 변경할 수 있다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/json-1.png" alt=""></p><p>message API를 호출하면 기존 메시지가 그대로 출력된다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># microservice-a-default.yml</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line"><span class="attr">  message:</span> <span class="string">"Message From Default Local Git Repository (Properties update...)"</span></span><br></pre></td></tr></table></figure><p><code>microservice-a-default.yml</code> 메시지를 위와 같이 변경한 이후에</p><p>POST <a href="http://127.0.0.1:8080/actuator/refresh%EC%9D%84" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/actuator/refresh을</a> 호출하면</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;config.client.version&quot;,</span><br><span class="line">  &quot;application.message&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Response으로 application.message의 변경을 알려준다. 이후 message api를 호출하면 아래 그림처럼 변경된 Response를 확인 할 수 있다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/json-2.png" alt=""></p><h2><span id="결론">결론</span></h2><p>Github Repository와 같은 버전 관리 리포지토리로 백업된 중앙 집중 구성으로 properties를 제공해줍니다. 또 Properties 설정 및 단순한 설정으로 클라이언트 애플리케이션이 스프링 클라우드 컨피그 서버에 쉽게 연결되도록 지원해줍니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://acornpub.co.kr/book/mastering-spring-5.0&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;스프링 5.
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Cloud" scheme="https://cheese10yun.github.io/tags/Cloud/"/>
    
      <category term="Config" scheme="https://cheese10yun.github.io/tags/Config/"/>
    
      <category term="MSA" scheme="https://cheese10yun.github.io/tags/MSA/"/>
    
  </entry>
  
  <entry>
    <title>Rabbit MQ 기초 사용법</title>
    <link href="https://cheese10yun.github.io/spring-rabbitmq/"/>
    <id>https://cheese10yun.github.io/spring-rabbitmq/</id>
    <published>2019-05-17T13:50:00.000Z</published>
    <updated>2019-06-20T16:39:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/rabbitmq-sample" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에 공개되어 있습니다.</p></blockquote><h2><span id="rabbmit-mq란">Rabbmit MQ란 ?</span></h2><p>래빗MQ는 오픈소스 AMQP 브로커다. AMQP는 유선을 통해 전송되는 메시지 형식을 포함하는 개발형 프로토컬이며, JMS와 같은 다른 메시징 솔루션에 비해 인기가 높다.</p><p>JMS는  API, AMQP는 프로토콜이다. JMS는 메시지의 형식이 아닌 브로커와 통신하는 방법을 정의한다. 또한 자바 애플리케이션에만 국한돼 있다. AMQP는 브로커와 통신하는 방법에 대해서 논하지 않지만. 메시지가 유선을 통해 큐에 어떻게 넣고 꺼내지는지에 대해 정의한다.</p><p>서로 다른 두 가지 애플리케이션을 생각해보자, 둘 다 자바면 JVMS를 통해 통신할 수 있지만 이중에 하나가 루비라면 JMS는 사용하지 못할것이다.</p><p>JMS 발송 브로커는 매시지 전송을 위해 AMQP를 사용할 수 있어 JMS와 AMQP의 차이점을 더 확연하게 해준다.</p><h2><span id="amqp-기본사항">AMQP 기본사항</span></h2><p>AMQP-기반 생상자는 큐에 직접 게시하지 않고 익스체인지에 게시한다. 큐가 선언되면 익스체인지에 바인딩돼야 한다. 여러 큐를 동일한 익스체인지에 바인딩해 토픽 개념을 애쿨레이션 할 수 있다.</p><p>토픽 익스체인지를 통해 라우팅 키는 <code>comment.*</code>와 같은 와일드 카드를 사용할 수 있다. 이 상황은 사용자가 조건을 제공할 때 까지 실제 라우팅 키를 알 수 없는 클라이언트에 가장 적합하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</span><br><span class="line">    value = <span class="meta">@Queue</span>,</span><br><span class="line">    exchange = <span class="meta">@Exchange</span>(value = <span class="string">"learning-spring-boot"</span>),</span><br><span class="line">    key = <span class="string">"comments.new"</span></span><br><span class="line">))</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Comment comment)</span></span>&#123;</span><br><span class="line">    commentRepository.save(comment)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@RabbitListener</code> 어노테이션은 메시지를 사용하는 방법을 등록하는 가장 쉬운 방법이다.</li><li><code>@QueueBinding</code> 어노테이션은 큐와 익스체인지를 즉시 선언하는 가장 쉬운 방법이다. 이 경우 이 메서드에 대한 익명 큐를 생성하고 leaning-spring-boot 익스체인지에 바인딩한다.</li><li>이 메서드는 라우팅 키는 <code>comments.new</code>이며, 이는 leanirng-spring-boot 익스체인지에 게시된 메시지가 이 메서드를 호출하게 한다는 것을 의미한다.</li><li><code>@RabbitListener</code> 메서드는 스프링 AMQP Message 스프링 메시징 Message 다양한 메시지 헤더, 평범하고 오래된 자바 객체를 받을 수 있다.</li><li>메서드 자체는 <code>CommentWriterRepository</code>를 호출해서 실제로 데이터 저장소에 코멘드틀 저장한다.</li></ul><p>래빗MQ를 사용하려면 일반적으로 @EnableRabbit이 필요하지만 스프링 부트 덕분에 Spring-boot-stater-amqp가 클래스 패스에 있으면 자동으로 활성화된다.</p><p>@RabbitListener를 사용하면 운영에 필요한 모든 익스체인지와 큐를 동적으로 생성할 수 있다는 점이다.</p><p>스프링 AMQP 메시지 객체를 제공하기 위해 메서드 시그니처를 선언했다면 바이트 배열을 풀수 있을 것이다. <strong>그러나 스프링 AMQP는 도메인 객체를 직렬화하는 기능이 제한돼 있다. 아무런 노력을 기울리지 않고도 간단한 문자열과 직렬화 처리할 수 있다.</strong></p><h2><span id="rabbitmq와-amqp">RabbitMQ와 AMQP</span></h2><blockquote><p>출처 <a href="http://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220419853534&amp;parentCategoryNo=&amp;categoryNo=6&amp;viewDate=&amp;isShowPopularPosts=false&amp;from=postView" rel="external nofollow noopener noreferrer" target="_blank">티몬의 개발이야기 RabbitMQ와 Spring AMQP를 이용한 간단한 작업 큐 만들기</a></p></blockquote><h3><span id="amqp">AMQP</span></h3><p>프로그래밍에서 MQ는 프로세스 또는 프로그램 인스턴스가 데이터를 서로 교환할 때 사용하는 방법을 말한다. 이러한 MQ를 오픈소스에 기반한 표준 프로토콜이 AMQP이다. AMQP 자체가 프로토콜을 의미하기 때문에 이 프로토콜을 구현한 MQ 제품들은 여러가지가 있으며 그 중하나가 RabbitMQ이다.</p><h3><span id="amqp의-구성요소와-라우팅-알고리즘">AMQP의 구성요소와 라우팅 알고리즘</span></h3><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/rabbitmq.png" alt=""></p><ul><li>AMQP의 라우팅 모델은 Exchange, Queue, Binding으로 구성된다.</li></ul><table><thead><tr><th>이름</th><th>설명</th></tr></thead><tbody><tr><td>Exchange</td><td>Publisher(Producer)로부터 수신한 메시지를 큐에 분배하는 라우터 역할</td></tr><tr><td>Queue</td><td>메시지를 메모리나 디스크에 저장했다가 Cusomer에게 메시지를 전달하는 역할</td></tr><tr><td>Binding</td><td>Exchange와 Queue의 관계를 정의한 것</td></tr></tbody></table><h3><span id="exchagne-type">Exchagne Type</span></h3><p>Exchagne Type은 메시지를 어떤 방법으로 라우팅할지 결정하는 일종의 알고리즘 말하며 AMQP에서는 다음과 같은 Exchange Type을 정의하고 있다.</p><table><thead><tr><th>Exchagne Type</th><th>정의</th></tr></thead><tbody><tr><td>Direct exchagne</td><td>Exchagne에 바인된 Queue중에 메시지의 라우팅 키와 매핑되어 있는 Queue로 메시지를 전달한다. 1:1 관계로 Unicast 방식에 접합하며, 주로 라운드 로빈 방식으로 여러 workers(Cusumer)간 Task를 분리에 사용된다.</td></tr><tr><td>Fanout Exchagne</td><td>메시지의 라우팅 키를 무시하고 Exchagne에 바인딩된 모든 Queue에 메시지를 전달한다. 1:N 관계로 메시지를 브로드캐스트하는 용도로 사용된다.</td></tr><tr><td>Topic Exchagne</td><td>Exchagne에 바인딩 된 Queue 중에서 메시지의 라우팅 키가 패턴에 맞는 Queue에세 모두 메시지를 전달한다. Mulicast 방섹에 접합하다.</td></tr><tr><td>Headers Exchagne</td><td>라우팅 키 대신에 메시지 헤더에 여러 속성들을 더해 속성들이 매칭되는 큐에 메시지를 전달한다.</td></tr></tbody></table><h2><span id="rabbit-mq">Rabbit MQ</span></h2><p>RabbitMQ는 AMQP를 구현한 오픈소스 메시지 소프트웨어 Pulisher(Producer)로부터 메시지를 받아 Cunsumer에게 라우트하는 것이 주된 역할이다.</p><blockquote><p>출처 <a href="%5Bhttp://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220419853534&amp;parentCategoryNo=&amp;categoryNo=6&amp;viewDate=&amp;isShowPopularPosts=false&amp;from=postView%5D(http://www.rabbitmq.com/getstarted.htm)">RabibitMQ Tutorials</a></p></blockquote><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/rabbitmq-turorial.png" alt=""></p><h3><span id="rabbit-mq-exchagne-type">Rabbit MQ Exchagne Type</span></h3><table><thead><tr><th>이름</th><th>RabbitMQ 이름</th></tr></thead><tbody><tr><td>Direct Exchange</td><td>(Empty string) and amq.direct</td></tr><tr><td>Fanout Exchange</td><td>anq.fanout</td></tr><tr><td>Topic Exchange</td><td>amq.topic</td></tr><tr><td>Header Exchange</td><td>amq.match(and amq.headers in RabbitMQ)</td></tr></tbody></table><h2><span id="sample-code">Sample Code</span></h2><blockquote><p>전체 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/rabbitmq-sample" rel="external nofollow noopener noreferrer" target="_blank">Blog-Sample Code</a>를 참고하세요</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RabbitMqEvent</span> </span>&#123;</span><br><span class="line">  String MEMBER_SIGNUPED_EVENT = <span class="string">"signuped.event"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>이벤트 이름을 작성하는 객체입니다. 인터페이스로 관리하는게 효율적으로 보여짐</li></ul><h3><span id="publisher-rabbittemplate">Publisher : RabbitTemplate</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">amqpTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  RabbitTemplate rabbitTemplate = <span class="keyword">new</span> RabbitTemplate();</span><br><span class="line">  rabbitTemplate.setConnectionFactory(connectionFactory);</span><br><span class="line">  rabbitTemplate.setMandatory(<span class="keyword">true</span>);</span><br><span class="line">  rabbitTemplate.setChannelTransacted(<span class="keyword">true</span>);</span><br><span class="line">  rabbitTemplate.setReplyTimeout(<span class="number">60000</span>);</span><br><span class="line">  rabbitTemplate.setMessageConverter(queueMessageConverter());</span><br><span class="line">  <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>이벤트를 Publisher하는 template를 생성합니다.</li><li>ConnectionFactory 의존성 주입을 받아 생성합니다.</li><li>message conveter를 등록시킵니다. 다른 예제들은 Bean으로 등록시는데 딱히 Bean으로 등록시킬 필요는 없어 보입니다.</li><li><code>setChannelTransacted</code> 플래극 값은 Transaction 으로 생성하게 해줍니다. (<code>@Transcational</code> 이 붙은 것처럼 처리됩니다. 만약 데이터베이스의 트랜잭션과 연결된다면 트랜잭션이 전위 된다고 이해했습니다.)</li><li><code>setReplyTimeout</code> amqpTemplate의 timeout을 지정합니다.</li></ul><h3><span id="comsumer-simplerabbitlistenercontainerfactory">Comsumer : SimpleRabbitListenerContainerFactory</span></h3><blockquote><p><a href="https://docs.spring.io/spring-amqp/api/org/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer.html#setDefaultRequeueRejected-boolean-" rel="external nofollow noopener noreferrer" target="_blank">spring-amqp Document</a>을 참고했습니다. 제가 이해한 부분으로 설명하는 것이라 틀린 부분이 있을 수 있습니다.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> SimpleRabbitListenerContainerFactory <span class="title">rabbitListenerContainerFactory</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">      ConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">    factory.setConnectionFactory(connectionFactory);</span><br><span class="line">    factory.setDefaultRequeueRejected(<span class="keyword">false</span>);</span><br><span class="line">    factory.setMessageConverter(queueMessageConverter());</span><br><span class="line">    factory.setChannelTransacted(<span class="keyword">true</span>);</span><br><span class="line">    factory.setAdviceChain(RetryInterceptorBuilder</span><br><span class="line">        .stateless()</span><br><span class="line">        .maxAttempts(MAX_TRY_COUNT)</span><br><span class="line">        .recoverer(<span class="keyword">new</span> RabbitMqExceptionHandler())</span><br><span class="line">        .backOffOptions(INITIAL_INTERVAL, MULTIPLIER, MAX_INTERVAL)</span><br><span class="line">        .build());</span><br><span class="line">    <span class="keyword">return</span> factory;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><code>setDefaultRequeueRejected</code> true일 경우 리서너에서 예외가 발생시에 다시 큐에 쌓이게 됩니다. 예외 상황을 해제하기 전까지 무한 반복할 거같아 기본 설정이 false이고 true 변경할 일이 거의 없어 보입니다.</li><li><code>setChannelTransacted</code> 위 설정과 동일합니다.</li><li><code>recoverer</code> 예외를 핸들링할 수 있는 객체를 지정해서 핸들링 할 수 있습니다. 에러 로그, 에러 알림 정도 설정하면 좋을거 같음</li><li><code>maxAttempts</code> 예외가 발생 했을 경우 몇번을 더 재시도 할 횟수를 지정합니다.</li><li><code>backOffOptions</code> 재시도 횟수에 대한 옵션을 지정합니다. <code>3000, 3, 10000</code> 인자값을 지정 했다면 3초 간격으로 3으로 곱해서 최대 10초 까지 재시도 하라는 것입니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">doSignUp</span><span class="params">(<span class="keyword">final</span> SignUpRequest dto)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Member member = memberRepository.save(dto.toEnttiy());</span><br><span class="line">    amqpTemplate.convertAndSend(RabbitMqEvent.MEMBER_SIGNUPED_EVENT, SignUpedEvent.of(member));</span><br><span class="line">    <span class="keyword">return</span> member;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li><code>convertAndSend</code> 위에서 등록한 template 기반으로 이벤트를 발생시킵니다.</li><li>첫 번째 인자는 이벤트의 이름(스트링 벨류), 이벤트 처리시에 넘겨줄 객체를 바인딩 시킵니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener</span>(queues = RabbitMqEvent.MEMBER_SIGNUPED_EVENT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleSignUpEvent</span><span class="params">(<span class="keyword">final</span> SignUpedEvent event)</span> </span>&#123;</span><br><span class="line">  log.error(event.toString());</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@RabbitListener</code> 어노테이션으로 리슨할 이벤트 이름을 지정합니다.</li><li><code>convertAndSend</code>에서 넘겨준 객체 <code>SignUpedEvent</code>를 매게변수를 받습니다.</li><li><code>IllegalArgumentException();</code> 설정을 통해서 예외를 발생시킵니다. 위에서 설정한 3번의 일정한 반복이 진행되는지 확인 해 봅니다.</li></ul><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/rabbitmq-retry.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">2019-03-03 20:43:57.459 ERROR 58190 --- [cTaskExecutor-1] y.b.rabbitmqsample.event.SignUpListener  : SignUpedEvent(id=1, email=asdasd@asdsad.com, name=asdasd)</span><br><span class="line">2019-03-03 20:44:00.466 ERROR 58190 --- [cTaskExecutor-1] y.b.rabbitmqsample.event.SignUpListener  : SignUpedEvent(id=1, email=asdasd@asdsad.com, name=asdasd)</span><br><span class="line">2019-03-03 20:44:09.470 ERROR 58190 --- [cTaskExecutor-1] y.b.rabbitmqsample.event.SignUpListener  : SignUpedEvent(id=1, email=asdasd@asdsad.com, name=asdasd)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"> Retries exhausted for message (Body:&apos;&#123;&quot;id&quot;:1,&quot;email&quot;:&quot;asdasd@asdsad.com&quot;,&quot;name&quot;:&quot;asdasd&quot;&#125;&apos; MessageProperties [headers=&#123;__TypeId__=yun.blog.rabbitmqsample.event.SignUpedEvent&#125;, contentType=application/json, contentEncoding=UTF-8, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, redelivered=false, receivedExchange=, receivedRoutingKey=signuped.event, deliveryTag=1, consumerTag=amq.ctag-XBOTLdkMvnhT6vypyy7HTQ, consumerQueue=signuped.event])</span><br></pre></td></tr></table></figure><ul><li>3번의 재시도가 시도됨</li><li>등록된 예외 핸들러 <code>RabbitMqExceptionHandler</code> 객체에서 로깅 출력</li></ul><h2><span id="참고">참고</span></h2><ul><li><a href="http://acornpub.co.kr/book/spring-boot-2.0-2e" rel="external nofollow noopener noreferrer" target="_blank">스프링 부트 2.0 마이크로서비스와 리액티브 프로그래밍</a></li><li><a href="https://www.rabbitmq.com/" rel="external nofollow noopener noreferrer" target="_blank">Rabbitmq</a></li><li><a href="http://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220419853534&amp;parentCategoryNo=&amp;categoryNo=6&amp;viewDate=&amp;isShowPopularPosts=false&amp;from=postView" rel="external nofollow noopener noreferrer" target="_blank">티몬의 개발이야기 RabbitMQ와 Spring AMQP를 이용한 간단한 작업 큐 만들기</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/rabbitmq-sample&quot; rel=&quot;external nofollow noopener norefer
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="RabbitMQ" scheme="https://cheese10yun.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Checked Exception을 대하는 자세</title>
    <link href="https://cheese10yun.github.io/checked-exception/"/>
    <id>https://cheese10yun.github.io/checked-exception/</id>
    <published>2019-05-16T16:28:00.000Z</published>
    <updated>2019-06-20T16:39:02.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/exception" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에 공개되어 있습니다.</p></blockquote><p>Checked Exception을 처리하는 전략과 그것에 유의해야 할 점들에 대해서 포스팅을 진행해보겠습니다. 자바에서는 대표적으로 Checked Exception 과 Unchecked Exception이 있습니다. 먼저 이 둘의 차이를 살펴보겠습니다.</p><h2><span id="checkedunchecked-exception-차이">Checked,Unchecked <em>Exception</em> 차이</span></h2><p><img src="https://github.com/cheese10yun/TIL/blob/master/assets/excpetion-class-diagram.png?raw=true" alt=""></p><p>Error는 시스템이 비정상적인 상황에서 발생하다. 이 수준의 Error는 시스템 레벨에서 발생하는 심각한 수준의 오류이기 때문에 개발자가 미리 예측할 수도 없고 처리할 수 있는 방법도 없다. 애플리케이션 반에서는 Error에 대한 처리를 신경 쓰지 않아도 된다. OutOfMemoryError이나 ThreadDeath 같은 에러는 try catch으로 잡아도 할 수 있는 것이 없기 때문이다.</p><p>그러기 때문에 어플리케이션단 에서는 Checked,Unchecked Exception에 대한 처리가 상대적으로 중요합니다.</p><table><thead><tr><th>.</th><th>Checked Exception</th><th>Unchecked Exception</th></tr></thead><tbody><tr><td><strong>처리 여부</strong></td><td>반드시 예외 처리 해야함</td><td>예외 처리 하지 않아도됨</td></tr><tr><td><strong>트랜잭션 Rollback 여부</strong></td><td>Rollback 안됨</td><td>Rollback 진행</td></tr><tr><td><strong>대표 Exception</strong></td><td>IOException, SQLException</td><td>NullPointerException, IllegalArgumentException</td></tr></tbody></table><p>Checked, Unchecked은 개발자들이 만든 애플리케이션 코드에서 예외가 발생했을 경우에 사용하게 됩니다.</p><p>위 상속 구조를 처럼 <strong>Unchecked Exception는 RuntimeException을 상속하고 Checked Exception는 RuntimeException을 상속하지 않습니다.</strong> 이것으로 두 <strong>Exception을 구분하는 중요한 포인트입니다.</strong></p><h3><span id="unchecked-exception">Unchecked Exception</span></h3><p>명시적인 예외 처리를 강제하지 않는 특징이 있기 때문에 Unchecked Exception이라 하며, catch로 잡거나 throw로 호출한 메서드로 예외를 던지지 않아도 상관이 없습니다.</p><h3><span id="checked-exception">Checked Exception</span></h3><p>반드시 명시적으로 처리해야 하기 때문에 Checked Exception이라고 하며, try catch를 해서 에러를 잡든 throws를 통해서 호출한 메서드로 예외를 던져야 합니다.</p><h3><span id="code-예외-처리-여부">Code : 예외 처리 여부</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> throws_던지기() <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">  <span class="keyword">final</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">  <span class="keyword">final</span> Member member = <span class="keyword">new</span> Member(<span class="string">"yun"</span>);</span><br><span class="line">  <span class="keyword">final</span> String valueAsString = objectMapper.writeValueAsString(member);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> try_catch_감싸기() &#123;</span><br><span class="line">  <span class="keyword">final</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">  <span class="keyword">final</span> Member member = <span class="keyword">new</span> Member(<span class="string">"yun"</span>);</span><br><span class="line">  <span class="keyword">final</span> String valueAsString;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    valueAsString = objectMapper.writeValueAsString(member);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 JsonProcessingException는 IOException Exception을 상속하는 Checked Exception이다. <strong>그러기 때문에 throws로 상위 메서드로 넘기든 자신이 try catch 해서 throw를 던지든 해야 한다.</strong> 이것은 문법적인 강제 선택이다. 그에 반해 <strong>Unchecked Exception은 명시적인 예외 처리를 하지 않아도 된다.</strong></p><h3><span id="code-rollback-여부">Code : Rollback 여부</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MemberRepository memberRepository;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// (1) RuntimeException 예외 발생</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Member <span class="title">createUncheckedException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Member member = memberRepository.save(<span class="keyword">new</span> Member(<span class="string">"yun"</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> member;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// (2) IOException 예외 발생</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Member <span class="title">createCheckedException</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Member member = memberRepository.save(<span class="keyword">new</span> Member(<span class="string">"wan"</span>));</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> member;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(1) RuntimeException 예외 발생 발생시키면 yun이라는 member는 rollback이 진행됩니다. 하지만 (2) IOException 예외 발생이 되더라도 wan은 <strong>rollback이 되지 않고 트랜잭션이 commit까지 완료됩니다.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">--- Ynu Log</span><br><span class="line">Hibernate: </span><br><span class="line">    /* insert yun.blog.exception.member.Member</span><br><span class="line">        */ insert </span><br><span class="line">        into</span><br><span class="line">            member</span><br><span class="line">            (id, name) </span><br><span class="line">        values</span><br><span class="line">            (null, ?)</span><br><span class="line">2019-05-16 00:55:16.117 TRACE 49422 --- [nio-8080-exec-2] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [yun]</span><br><span class="line">2019-05-16 00:55:16.120 ERROR 49422 --- [nio-8080-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.RuntimeException] with root cause</span><br><span class="line"></span><br><span class="line">java.lang.RuntimeException: null</span><br><span class="line"></span><br><span class="line">--- Wan Log</span><br><span class="line">Hibernate: </span><br><span class="line">    /* insert yun.blog.exception.member.Member</span><br><span class="line">        */ insert </span><br><span class="line">        into</span><br><span class="line">            member</span><br><span class="line">            (id, name) </span><br><span class="line">        values</span><br><span class="line">            (null, ?)</span><br><span class="line">2019-05-16 00:55:43.931 TRACE 49422 --- [nio-8080-exec-4] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [wan]</span><br><span class="line">2019-05-16 00:55:43.935 ERROR 49422 --- [nio-8080-exec-4] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception</span><br><span class="line"></span><br><span class="line">java.io.IOException: null</span><br><span class="line">at yun.blog.exception.member.MemberService.createCheckedException(MemberService.java:27) ~[classes/:na]</span><br></pre></td></tr></table></figure><p>로그 메시지를 보면 member yun, wan 모두 insert 쿼리는 보이지만 <strong>yun rollback이 진행되고 wan은 rollback이 되지 않고 commit까지 됩니다.</strong></p><h3><span id="왜-checked-exception은-rollback되지-않는-것일까">왜 Checked Exception은 Rollback되지 않는 것일까?</span></h3><p>기본적으로 Checked Exception는 복구가 가능하다는 메커니즘을 가지고 있다. 예를 들어서 특정 이미지 파일을 찾아서 전송해주는 함수에서 이미지를 찾지 못했을 경우 기본 이미지를 전송한다. 복구 전략을 가질 수 있게 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendFile</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    File file;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        file = FileFindService.find(fileName);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e)&#123; <span class="comment">// FileNotFoundException은 IOException으로 checked exception이다.</span></span><br><span class="line">        <span class="comment">// 파일을 못찾았으니 기본 파일을 찾아서 전송 한다</span></span><br><span class="line">        file = FileFindService.find(<span class="string">"default.png"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    send(file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본적으로 복구가 가능하니 네가 복구를 작업을 진행했을 수 있으니까 Rollback은 진행하지 않을게라는 의미가 있다고 생각합니다. (주관적인 생각입니다.)</p><p>하지만 이런 식의 예외는 복구하는 것이 아니라 일반적인 코드의 흐름으로 제어해야 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendFile</span><span class="params">(String fileName)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(FileFindService.existed(filename))&#123;</span><br><span class="line">        <span class="comment">// 파일이 있는 경우 해당 파일을 찾아서 전송</span></span><br><span class="line">        send(FileFindService.find(fileName));    </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">// 파일이 있는 없는 경우 기본 이미지 전송</span></span><br><span class="line">        send(FileFindService.find(<span class="string">"default.png"</span>));    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="하지만-현실은">하지만 현실은…</span></h3><p>하지만 우리가 일반적으로 Checked Exception 예외가 발생했을 경우 복구 전략을 갖고 그것을 복구할 수 있는 경우는 그렇게 많지 않습니다.</p><p>유니크해야 하는 이메일 값이 중복돼서 SQLException이 발생하는 경우 어떻게 복구 전략을 가질 수 있을까요? 유저가 압력을 가했던 이메일 + 난수를 입력해서 insert 시키면 가능은 하겠지만 현실에서는 그냥 RuntimeException을 발생시키고 입력을 다시 유도하는 것이 현실적입니다.</p><p><strong>여기서 중요한 것은 해당 Exception을 발생시킬 때 명확하게 어떤 예외가 발생해서 Exception이 발생했는지 정보를 전달해주는 것입니다. 위 같은 경우에는 DuplicateEmailException (Unchecked Exception)을 발생 시는 것이 바람직합니다.</strong></p><p>Checked Exception을 만나면 더 구체적인 Unchecked Exception을 발생시켜 정확한 정보를 전달하고 로직의 흐름을 끊어야 합니다. 우리는 JPA에 구현체를 가져다 사용하더라도 Checked Exception을 직접 처리하지 않고 있는 이유도 다 적절한 RuntimeException으로 예외를 던져주고 있기 때문입니다.</p><h2><span id="checked-exception-처리-전략">Checked Exception 처리 전략</span></h2><h3><span id="code">Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectMapperUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 예외처리를 throws를 통해서 위임하고 있습니다.</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">writeValueAsString</span><span class="params">(Object object)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> objectMapper.writeValueAsString(object);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 예외처리를 throws를 통해서 위임하고 있습니다.</span></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">readValue</span><span class="params">(String json, Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> objectMapper.readValue(json, clazz);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>writeValueAsString, readValue 메서드는 Checked Exception을 발생시키는 메서드입니다. 반드시 예외를 처리를 진행해야 합니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/exception/images/ckecked-exception.png" alt=""></p><p>해당 메서드의 테스트 코드입니다. 예외 처리를 상위로 던져버리기 때문에 메서드를 상용하는 곳에서 다시 throw를 하던지 예외를 try catch 하든지 해야 합니다. 이렇게 <strong>무의하고 반복적인 예외를 던지는 것은 좋지 않습니다.</strong></p><h3><span id="더-구체적인-unckecked-exception-발생-시켜라">더 구체적인 Unckecked Exception 발생 시켜라</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">writeValueAsString</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> objectMapper.writeValueAsString(object);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> JsonSerializeFailed(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">readValue</span><span class="params">(String json, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> objectMapper.readValue(json, clazz);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> JsonDeserializeFailed(e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/cheese10yun/spring-guide/blob/master/docs/exception-guide.md" rel="external nofollow noopener noreferrer" target="_blank">Spring Exception Guide</a>에서 정리한 Try Catch 전략과 비슷합니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/exception/images/ckecked-exception2.png" alt=""></p><p><strong>Checked Exception을 Unckecekd Exception으로 던지고 있기 때문에 메서드를 사용하는 곳에서는 아무런 예외처리를 진행하지 않아도 됩니다.</strong></p><p>물론 해당 예러가 왜 발생했는지에 대해서 에러 메시지 뿐만이 아니라 더욱 구체적인 정보를 전달해주는것이 더 좋습니다.</p><h2><span id="결론">결론</span></h2><p>예외 복구 전략이 명확하고 그것이 가능하다면 Checked Exceptio을 try catch로 잡고 해당 복구를 하는 것이 좋습니다.</p><p><strong>하지만 그러한 경우는 흔하지 않으며 Checked Exception이 발생하면 더 구체적인 Unchecked Exception을 발생시키고 예외에 대한 메시지를 명확하게 전달하는 것이 효과적입니다.</strong></p><p>무책임하게 상위 메서드로 throw를 던지는 행위는 하지 않는 것이 좋습니다. 상위 메서드들의 책임이 그만큼 증가하기 때문입니다. Checked Exception은 기본 트랜잭션에 속성에서는 rollback을 진행하지 않는 점도 알고 있어야 실수를 방지할 수 있습니다.</p><h2><span id="참고">참고</span></h2><ul><li><a href="http://www.nextree.co.kr/p3239/" rel="external nofollow noopener noreferrer" target="_blank">Java 예외(<em>Exception</em>) 처리에 대한 작은 생각</a></li><li><a href="http://www.yes24.com/Product/goods/7516721" rel="external nofollow noopener noreferrer" target="_blank">토비의 스프링</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/exception&quot; rel=&quot;external nofollow noopener noreferrer&quot; t
      
    
    </summary>
    
    
      <category term="Transaction" scheme="https://cheese10yun.github.io/tags/Transaction/"/>
    
      <category term="Lock" scheme="https://cheese10yun.github.io/tags/Lock/"/>
    
  </entry>
  
  <entry>
    <title>트랜잭션 잠금</title>
    <link href="https://cheese10yun.github.io/transaction-lcok/"/>
    <id>https://cheese10yun.github.io/transaction-lcok/</id>
    <published>2019-05-11T17:57:00.000Z</published>
    <updated>2019-08-28T15:33:30.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 자료는 DDD <a href="http://www.yes24.com/Product/Goods/27750871?scode=029" rel="external nofollow noopener noreferrer" target="_blank">Start</a>를 보고 정리한 자료입니다. 정말 추천드리는 책입니다.</p></blockquote><p>한 주문 애그리거트에 대해 운영자는 배송 준비 상태로 변경할 때 사용자는 배송지 주소를 변경하면 어떻게 될까? 아래 그림은 운영자와 고객이 동시에 한 주문 애그리거트를 수정하는 과정을 보여준다. (배송 상태로 변경되면 더 이상 배송지 변경은 할 수 없다.)</p><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/transaction-thread.png" alt=""></p><p>운영자 스레드와 고객 스레드는 같은 주문 애그리거트를 나타내는 다른 객체를 구하게 된다 (트랜잭션 마다 리포지토리라는 새로운 애그리거트를 생성한다.) 운영자 스레드와 고객 스레드는 개념적으로 동일한 애그리거트이지만 물리적으로 서로 다른 애그리거트 객체를 사용한다.</p><p>때문에 운영자 스레드가 주문 애그리거트 객체 배송 상태로 변경하더라도 고객 스레드가 사용하는 주문 애그리거트 객체에는 영향을 주지 않는다. 고객 스레드 입장에서 주문 애그리거트 객체는 아직 배송 상태 전이므로 배송지 정보를 변경할 수 있다.</p><p>이 상황에서 두 스레드는 각각 트랜잭션을 커밋할 때 수정한 내용을 DBMS에 반영한다. 즉 배송 상태로 바뀌고 배송지 정보로 바뀌게 된다. 이 순서의 문제점은 운영자는 기존 배송지 정보를 이용해서 배송 상태로 변경했는데 그 사이 고객은 배송지 정보를 변경했다는 점이다. 즉 애그리거트의 일관성이 깨지는 것이다.</p><p>이런 문제가 발생하지 않도록 하려면 다음 두 가지 중 하나를 해야한다.</p><ul><li>운영자 배송지 정보를 조회하고 상태를 변경하는 동안 고객이 애그리거트를 수정하지 못하게 막는다. (수정하지 못하는 것보다 조회까지 막아야 된다고 생각함)</li><li>운영자가 배송지 정보를 조회한 이후 고객이 배송지 정보를 변경하면 운영자가 애그리거트를 다시 조회한 뒤 수정하도록 한다.</li></ul><p>이 두 가지는 애그리거트 자체의 트랜잭션과 관련이 있다. DBMS가 지원하는 트랜잭션과 함께 애그리거트를 위한 추가적인 트랜잭션 처리 기법이 필요하다. <strong>애그리거트에 대해 사용할 수 있는 대표적인 트랜잭션 처리 방식에는 선점 잠금과 비선점 잠금의 두 가지 방식이 있다.</strong></p><h2><span id="isolation-repeatable_read-으로-해결-못하는-이유">Isolation REPEATABLE_READ 으로 해결 못하는 이유</span></h2><p>REPEATABLE_READ은 트랜잭션이 지속되는 동안 다른 트랜잭션이 해당 필드를 변경할 수 없는 격리 레벨이다. <strong>이것으로 위의 문제를 해결할 수 있지는 않다.</strong></p><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/transaction-thread.png" alt=""></p><ol><li>운영자 스레드가 주문 애그리거트를 구함 (배송 이전 상태)</li><li>고객 스레드가 주문 애그리거트를 구함 (배송 이전 상태) REPEATABLE_READ 속성이므로 select 트랜잭션이 진행중에 있더라도 select는 진행됨</li><li>운영자 스레드가 주문의 상태를 배송 상태로 변경</li><li>고객 스레드가 배송지를 변경</li><li>운영 스레드 트랜잭션 커밋</li><li>고객 스레드는 REPEATABLE_READ 격리 레벨임으로 트랜잭션 임으로 운영 스레드 트랜잭션 커밋 이후 커밋 됨</li></ol><p>운영자는 배송 상태로 변경하고, 고객은 배송지를 변경이 모두 데이터베이스에 반영된다는 것이다. <strong>2번 고객 스레드가 주문 애그리거트를 구하는것을 Lock 해야 이 문제를 해결 할 수 있다.</strong></p><h2><span id="선점-잠금">선점 잠금</span></h2><p>선점 잠금은 먼저 애그리거트를 구한 스레드가 애그리거트 사용이 끝날 때까지 다른 스레드가 해당 애그리거트를 수정하는 것을 막는 방식이다.</p><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/transaction-thread2.png" alt=""></p><p>스레드1 선점 잠금방식으로 애그리거트를 구한 뒤 이에서 스레드2가 같은 애그리거트를 구하고 있는데, 이 경우 스레드2는 스레드1이 애그리거트에대한 잠금을 해제할 때 까지 블로킹된다.</p><p>스레드1이 애그리거트를 수정하고 트랜잭션을 커밋하면 잠금을 해제한다. 이 순간 대기하고 있던 스레드2가 애그리거트에 접근하게 된다. 스레드1이 트랜잭션을 커밋 뒤에 스레드2가 애그리거트를 구하게 되므로 스레드2는 스레드1이 수정한 애그리거트의 내용을 보게된다.</p><p>한 스레드가 애그리거트를 구하고 수정하는 동안 다른 스레드가 수정할 수 없음으로로 동시에 애그리거트를 수정할 때 발생하는 데이터 충돌 문제를 해소할 수 있다.</p><h3><span id="선점-잠금-적용">선점 잠금 적용</span></h3><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/transaction-thread3.png" alt=""></p><ol><li>운영자 스레드가 먼저 선점 잠금 방식으로 주문 애그리거트를 구함</li><li>고객 스레드는 운영자 스레드가 잠금을 해제할 때까지 고객 스레드는 대기 상태</li><li>운영자 스레드가 배송 상태로 변경한 뒤에 트랜잭션을 커밋하면 잠금을 해제한다.</li><li>잠금이 해제된 시점에 고객 스레드가 구하는 주문 애그리거트는 운영자 스레드가 수정한 배송 상태의 주문 애그리거트이다. 배송 상태이므로 주문 애그리거트는 배송지 변경 시 에러를 발생하거 트랜잭션이 실피패한다.</li><li>고객은 <code>이미 배송이 시작되어 배송지를 변경할 수 없습니다.</code>와 같은 안내 문구를 받게 됨</li></ol><p>선점 잠금은 보통 DBMS가 제공하는 행 단위 잠금을 사용해서 구현한다. 오라클을 비롯한 다수 DBMS가 for update와 같은 쿼리를 사용해서 특정 레코드에 한 사용자만 접근할 수 있는 잠금 장치를 제공한다.</p><p>JPA의 EntityManager는 LockModeType을 인자로 받는 <code>find()</code> 메서드를 제공하는데, <code>LockModeType.PESSIMISTIC_WRITE</code>를 값으로 전달하면 해당 엔티티와 매핑된 테이블을 이용해서 선점 잠금 방식을 적용할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Order order = entityManager.find(Order.class, orderNo, LockModeType.PESSIMISTIC_WRITE)</span><br></pre></td></tr></table></figure><p>JPA 프로바이더와 DBMS에 따라 잠금 모드의 구현이 다른데, 하이버네티으의 경우 <code>PESSIMISTIC_WRITE</code>를 잠금 모드로 사용하면 <code>for update</code> 쿼리를 사용해서 선점 잠금을 구현한다.</p><h2><span id="선점-잠금과-교착상태">선점 잠금과 교착상태</span></h2><p>선점 잠금 기능을 사용할 때는 잠금 순서에 따른 교착 상태가 발생하지 않도록 주의해야 한다. 예를 들어, 다음과 같은 순서로 두 스레드가 선점 잠금을 시도를 한다고 해보자</p><ol><li>스레드 1: A 애그리거트에 대한 선점 잠금 구함</li><li>스레드 2: B 애그리거트에 대한 선점 잠금 구함</li><li>스레드 1: B 애그리거트에 대한 선점 잠금 시도</li><li>스레드 2 : A 애그리거트에 대한 선점 잠금 시도</li></ol><p>이 두 스레드는 상대방 스레드가 먼저 선점한 잠금을 구할수 없어 더 이상 다음 단계를 진행하지 못하게 된다. <strong>즉 스레드 1과 스레드 2는 교착상태에 빠지게 된다.</strong></p><p>선점 잠그에 따른 교착 상태는 상대적으로 사용자 수가 많을 때 발생할 가능성이 높고, 사용자 수가 많아지면 교착 상태에 빠지는 스레드가 더 빠르게 증가하게 된다. 더 많은 스레드가 교착 상태에 빠질수록 시스템은 점점 아무것도 할 수 없는 상황에 이르게 된다.</p><p>이런 문제가 발생하지 않도록 하려면 잠금을 구할 때 최대 대기 시간을 지정해야한다. JPA에서 선점 잠금을 시도할 때 최대 대기 시간을 지정하려면 다음과 같이 힌트를 사용하면 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; hints = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">hints.put(<span class="string">"javax.persistence.lock.timeout"</span>, <span class="number">2000</span>);</span><br><span class="line">Order order = entityManager.find(Order.class, orderNo, LockModeType.PESSIMISTIC_WRITE, hints);</span><br></pre></td></tr></table></figure><p>JPA의 <code>javax.persistence.lock.timeout</code> 힌트는 잠금을 구하는 대기 시간을 밀리초 단위로 지정한다. 지정한 시간이내에 잠금을 구하지 못하면 익셉션을 발생 시킨다. 이 힌트를 사용할 때 주의할 점은 DBMS에 따라 힌트가 적용되지 않는 다는 점이다. 이 힌트를 이용할 때에는 사용중인 DBMS가 관련 기능을 지원하는지 확인해야 한다.</p><h2><span id="비선점-잠금">비선점 잠금</span></h2><p>선점 잠금이 강력해 보이긴 하지만 선점 잠금으로 모든 트랜잭션 충돌 문제가 해결되는 것은 아니다.</p><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/transacion-thread-desc.png" alt=""></p><ol><li>운영자는 배송을 위해 주문 정보를 조회한다.</li><li>고객이 배송지 변경을 위해 변경 폼을 요청한다. 시스템은 변경 폼을 제공한다.</li><li>고객이 새로운 배송지를 입력하고 폼을 전송해서 배송지를 변경한다.</li><li>운영자가 1번에서 조회한 주문 정보를 기준으로 배송지를 정하고 배송 상태 변경을 요청한다.</li></ol><p>여기서 문제는 운영자가 배송지 정보를 조회하고 배송 상태로 변경하는 사이에 고객이 배송지를 변경한다는 것이다. 운영자는 고객이 변경하기 전에 배송지 정보를 이용해서 배송 준비를 한 뒤에 배송 상태로 변경하게 된다.</p><p><strong>즉 배송 상태 변경 전에 배송지를 한 번 더 확인 하지 않으면 운영자는 다른 배송지로 물건을 발송하게 되고, 고객은 배송지를 변경했음에도 불구하고 엉뚱한 곳으로 주문한 물건을 받는 상황이 발생한다.</strong></p><p>이 문제는 선점 잠금 방식으로 해결 할 수 없는데, 이 때 필요한 것이 비선점 잠금이다. 비선점 잠금 방식은 잠금 을 해서 동시에 접근하는 것을 막는 대신 <strong>변경한 데이터를 실제 DBMS에서 반영하는 시점에 변경 가능 여부를 확인하는 방식이다.</strong></p><p>비선점 잠금을 구현하려면 애그리거트에 버전으로 사용할 숫자 타입의 프로퍼티를 추가해야한다. 애그리거트를 수정할 때마다 버전으로 사용할 프로피터 값이 1씩 증가하는데, 이때 다음과 같은 쿼리를 사용한다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> aggrable <span class="keyword">SET</span> <span class="keyword">version</span> = <span class="keyword">version</span> +<span class="number">1</span>, colx = ?, coly =?</span><br><span class="line"><span class="keyword">WHERE</span> aggid =? <span class="keyword">and</span> <span class="keyword">version</span> = 현재 버전</span><br></pre></td></tr></table></figure><p>이 쿼리는 수정할 애그리거트와 매핑되는 테이블의 버전 값이 현재 애그리거트의 버전과 동일한 경우에만 데이터를 수정한다. 그리고 수정에 성공하면 버전 값을 1증가 시킨다. 따라서, <strong>다른 트랜잭션이 먼저 데이터를 수정해서 버전 값이 바뀌면 데이터 수정에 실패하게 된다.</strong></p><h3><span id="비선점-잠금을-이용한-트랜잭션-충돌-방지">비선점 잠금을 이용한 트랜잭션 충돌 방지</span></h3><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/transacion-thread4.png" alt=""></p><ol><li>스레드 1 애그리거트 조회</li><li>스레드 2 애그리거트 조회</li><li>스레드 1 애그리거트 수정 시도 (스레드 2 보다 먼저 시도한다), 수정에 성공하고 버전은 6이 된다.</li><li>스레드 2 애그리거트 수정 시도, 이미 애그리거트 버전이 6이므로 스레드2는 데이터 수정에 실패하게 된다.</li></ol><p>JPA는 버전을 이용한 비선점 잠금을 기능을 지원한다. 다음과 같이 버전으로 사용할 필드에 <code>@Version</code> 애노테이션을 붙이거 매핑되는 테이블 버전을 지정한 칼럼을 추가하기만 하면된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"purchase_order"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Version</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> version;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>JPA는 엔티티가 변경되어 UPDATE 쿼리를 실행할 때 <code>@Version</code>에 명시한 필드를 이용해서 비선점 잠금 쿼리를 실행한다. 즉 애그리거트 객체의 버전 10이면 UP-DATE 쿼리를 실행할 때 당므과 같은 쿼리를 사용해서 버전 일치하는 경우에만 데이터를 수정한다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> purchase_order <span class="keyword">SET</span> ..., <span class="keyword">version</span> = <span class="keyword">version</span> + <span class="number">1</span></span><br><span class="line"><span class="keyword">where</span> <span class="built_in">number</span> ? <span class="keyword">and</span> <span class="keyword">version</span> = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>응용 서비스 버전에 대해 알 필요가 없다. 리포티터리에 필요한 애그리거트를 구현하고 알맞은 기능을 실행하면 된다. 기능을 실행하는 과정에서 애그리거트의 데이터가 변경되면 JPA트랜잭션 종료 시점에 비선점 잠금을 위한 쿼리를 실행 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ChangeShppingService changeShippingService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/shpping"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">changeShipping</span><span class="params">(ChangeShippingsRequest changeReq)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            changeShppingService.changeShpping(changeReq);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"changeShppingSuccess"</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (OptimistickLockingFailureException ex)&#123;</span><br><span class="line">            <span class="comment">// 누군가 먼저 같은 주문 애그리거트를 수정 했음으로</span></span><br><span class="line">            <span class="comment">// 트랜잭션 충돌이 일어났다는 메시지를 보여준다.</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">"changeShppingTxConflict"</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="비선점-트랜잭션-충돌-문제-해결-flow">비선점 트랜잭션 충돌 문제 해결 Flow</span></h3><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/transacion-thread-desc2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 자료는 DDD &lt;a href=&quot;http://www.yes24.com/Product/Goods/27750871?scode=029&quot; rel=&quot;external nofollow noopener noreferrer&quot; targe
      
    
    </summary>
    
    
      <category term="Transaction" scheme="https://cheese10yun.github.io/tags/Transaction/"/>
    
      <category term="Lock" scheme="https://cheese10yun.github.io/tags/Lock/"/>
    
  </entry>
  
</feed>
