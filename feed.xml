<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yun Blog</title>
  <icon>https://www.gravatar.com/avatar/d313a2c442931458ed624a3999d75011</icon>
  <subtitle>기술 블로그</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://cheese10yun.github.io/"/>
  <updated>2021-02-28T03:50:00.553Z</updated>
  <id>https://cheese10yun.github.io/</id>
  
  <author>
    <name>Yun</name>
    <email>cheese10yun@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Batch Insert 성능 향상기 2편 - 성능 측정</title>
    <link href="https://cheese10yun.github.io/spring-batch-batch-insert/"/>
    <id>https://cheese10yun.github.io/spring-batch-batch-insert/</id>
    <published>2021-02-26T15:00:00.000Z</published>
    <updated>2021-02-28T03:50:00.553Z</updated>
    
    <content type="html"><![CDATA[<p>JPA + MySQL + GenerationType.IDENTITY 조합으로는 Batch Insert를 사용할 수 없습니다. 자세한 내용은 <a href="https://cheese10yun.github.io/jpa-batch-insert/">Batch Insert 성능 향상기 1편 - With JPA</a>에서 자세하게 정리했습니다.</p><p>JPA의 단일 insert와, batch insert의 성능적인 차이가 얼마나 발생하는지 측정해보고 batch insert를 지원하는 새로운 솔루션을 찾아 성능 측정을 진행한 포스팅입니다.</p><h2><span id="다른-솔루션-찾기">다른 솔루션 찾기</span></h2><h3><span id="솔루션에-대한-요구사항">솔루션에 대한 요구사항</span></h3><ul><li>SQL 관련 작업들을 문자열로 처리하지 하지 않고 DSL 표현하며 DSL 표현이 풍부할 것</li><li>Batch Insert 외에도 조회 작업 등에도 사용이 용이할 것</li><li>JDBC <code>addBatch()</code> 직접 호출하는 코드와 성능적인 차이가 거의 없을 것</li></ul><h3><span id="exposed">Exposed</span></h3><p>결론부터 말씀드리면 <a href="https://github.com/JetBrains/Exposed" rel="external nofollow noopener noreferrer" target="_blank">Exposed</a>라는 도구를 선택했습니다. Batch Insert를 지원하며 DSL을 잘 지원해 JPA에서 사용 못 하는 쿼리를 진행할 수 있는 장점이 있습니다. Exposed에 대한 소개는 다음 포스팅에 진행해 보겠습니다.</p><h3><span id="batch-code">Batch Code</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line">const <span class="keyword">val</span> GLOBAL_CHUNK_SIZE = <span class="number">1</span>_000</span><br><span class="line">const <span class="keyword">val</span> DATA_SET_UP_SIZE = <span class="number">5</span>_000_000</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BulkInsertJobConfiguration</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> jobBuilderFactory: JobBuilderFactory,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> jobDataSetUpListener: JobDataSetUpListener,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> dataSource: DataSource,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> exposedDataBase: Database,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> paymentBackJpaRepository: PaymentBackJpaRepository,</span><br><span class="line">    entityManagerFactory: EntityManagerFactory</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bulkInsertJob</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        jdbcTemplateInsertStep: <span class="type">Step</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: Job =</span><br><span class="line">        jobBuilderFactory[<span class="string">"bulkInsertJob"</span>]</span><br><span class="line">            .incrementer(RunIdIncrementer())</span><br><span class="line">            .listener(jobDataSetUpListener) <span class="comment">// payment 데이터 setup</span></span><br><span class="line">            .start(jdbcTemplateInsertStep)</span><br><span class="line">            .build()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@JobScope</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bulkInsertStep</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        stepBuilderFactory: <span class="type">StepBuilderFactory</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        bulkInsertReader: <span class="type">JpaCursorItemReader</span>&lt;<span class="type">Payment</span>&gt;</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: Step =</span><br><span class="line">        stepBuilderFactory[<span class="string">"bulkInsertStep"</span>]</span><br><span class="line">            .chunk&lt;Payment, Payment&gt;(GLOBAL_CHUNK_SIZE)</span><br><span class="line">            .reader(bulkInsertReader) <span class="comment">// Reader는 JpaCursorItemReader 기반으로 조회</span></span><br><span class="line"><span class="comment">//            .writer(writerWithStatement) // Statement addBatch() 기반 저장 </span></span><br><span class="line">            .writer(writerWithExposed) <span class="comment">// Exposed 기반 저장</span></span><br><span class="line"><span class="comment">//            .writer(writerWithJpa) // JPA 기반 저장</span></span><br><span class="line">            .build()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@StepScope</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">bulkInsertReader</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        entityManagerFactory: <span class="type">EntityManagerFactory</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> = JpaCursorItemReaderBuilder&lt;Payment&gt;()</span><br><span class="line">        .name(<span class="string">"bulkInsertReader"</span>)</span><br><span class="line">        .entityManagerFactory(entityManagerFactory)</span><br><span class="line">        .queryString(<span class="string">"SELECT p FROM Payment p"</span>)</span><br><span class="line">        .build()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> writerWithStatement: ItemWriter&lt;Payment&gt; = ItemWriter &#123; payments -&gt;</span><br><span class="line">        <span class="keyword">val</span> sql = <span class="string">"insert into payment_back (amount, order_id) values (?, ?)"</span></span><br><span class="line">        <span class="keyword">val</span> connection = dataSource.connection</span><br><span class="line">        <span class="keyword">val</span> statement = connection.prepareStatement(sql)!!</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (payment <span class="keyword">in</span> payments) &#123;</span><br><span class="line">                statement.apply &#123;</span><br><span class="line">                    <span class="keyword">this</span>.setBigDecimal(<span class="number">1</span>, payment.amount)</span><br><span class="line">                    <span class="keyword">this</span>.setLong(<span class="number">2</span>, payment.orderId)</span><br><span class="line">                    <span class="keyword">this</span>.addBatch()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            statement.executeBatch()</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (statement.isClosed.not()) &#123;</span><br><span class="line">                statement.close()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (connection.isClosed.not()) &#123;</span><br><span class="line">                connection.close()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> writerWithJpa: ItemWriter&lt;Payment&gt; =</span><br><span class="line">        ItemWriter &#123; payments -&gt;</span><br><span class="line">            payments.map &#123; payment -&gt;</span><br><span class="line">                PaymentBackJpa(</span><br><span class="line">                    amount = payment.amount,</span><br><span class="line">                    orderId = payment.orderId</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">                .also &#123;</span><br><span class="line">                    paymentBackJpaRepository.saveAll(it)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> writerWithExposed: ItemWriter&lt;Payment&gt; = ItemWriter &#123; payments -&gt;</span><br><span class="line">        transaction(</span><br><span class="line">            exposedDataBase</span><br><span class="line">        ) &#123;</span><br><span class="line">            PaymentBack.batchInsert(</span><br><span class="line">                <span class="keyword">data</span> = payments,</span><br><span class="line">                shouldReturnGeneratedValues = <span class="literal">false</span></span><br><span class="line">            ) &#123; payment -&gt;</span><br><span class="line">                <span class="keyword">this</span>[PaymentBack.orderId] = payment.orderId</span><br><span class="line">                <span class="keyword">this</span>[PaymentBack.amount] = payment.amount</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> PaymentBack : LongIdTable(name = <span class="string">"payment_back"</span>) &#123;</span><br><span class="line">    <span class="keyword">val</span> amount = decimal(<span class="string">"amount"</span>, <span class="number">19</span>, <span class="number">4</span>)</span><br><span class="line">    <span class="keyword">val</span> orderId = long(<span class="string">"order_id"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring Batch 기반으로 <code>payment</code> 테이블을 N 개 읽어서 <code>payment_back</code> 테이블로 저장하는 흐름입니다. Reader는 JpaCursorItemReader 기반으로 <code>payment</code> 테이블을 조회합니다. 그리고 각 저장하는 <code>wirter</code> 코드들이 있습니다. <code>writerWithExposed()</code> 메서드는 <code>Exposed</code> 라이브러리에서 지원하는 <code>batchInsert()</code>메서드를 이용해서 insert를 진행하고 있습니다.</p><h3><span id="exposed-batch-insert">Exposed Batch Insert</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">transaction(</span><br><span class="line">    exposedDataBase</span><br><span class="line">) &#123;</span><br><span class="line">    PaymentBack.batchInsert(</span><br><span class="line">        <span class="keyword">data</span> = payments,</span><br><span class="line">        shouldReturnGeneratedValues = <span class="literal">false</span></span><br><span class="line">    ) &#123; payment -&gt;</span><br><span class="line">        <span class="keyword">this</span>[PaymentBack.orderId] = payment.orderId</span><br><span class="line">        <span class="keyword">this</span>[PaymentBack.amount] = payment.amount</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Exposed</code>는 <code>batchInsert()</code> 메서드를 지원하기 때문에 쉽게 batch insert를 진행할 수 있습니다. Mysql의 경우 JDBC 드라이버에 <code>rewriteBatchedStatements=true</code> 속성을 반드시 입력해야 batch insert가 가능합니다. <code>shouldReturnGeneratedValues</code> 값을 <code>false</code>로 지정하면 <code>auto_increment</code>으로 증가된 ID 값을 가져오지 않기에 성능이 향상될 수 있습니다.</p><h2><span id="insert-성능-측정">Insert 성능 측정</span></h2><p>Insert에 대한 성능 측정은 JPA, Statement, Exposed 3가지 라이브러리로 진행하겠습니다. JPA는 단건으로 저장하며, Statement는 문자열 기반으로 <code>addBatch()</code>를 직접 호출, Exposed는 자체적으로 지원하는 Batch Insert를 진행합니다.</p><p><strong>해당 속도 측정은 JpaCursorItemReader 기반으로 조회하는 시간까지 포함된 시간입니다.</strong> 수백수만 데이터를 한 번에 저장하는 경우는 보다 페이징 처리를 진행해서 저장하는 것이 일반적이기도 하고 모두 동일한 Reader를 사용했기 때문에 비율은 동일하게 측정됩니다. 측정 단위는 모두 <code>ms</code>입니다.</p><h4><span id="chunk-size-1000">chunk size = 1,000</span></h4><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/batch-study/docs/img/chunk_size_1000.png" alt=""></p><table><thead><tr><th>rows</th><th>JPA</th><th>Statement</th><th>Exposed</th></tr></thead><tbody><tr><td>10,000</td><td>9278</td><td>577</td><td>890</td></tr><tr><td>50,000</td><td>53330</td><td>2632</td><td>3119</td></tr><tr><td>100,000</td><td>108460(1.8 min)</td><td>3470</td><td>4820</td></tr><tr><td>500,000</td><td>561756(9.3 min)</td><td>14693</td><td>21154</td></tr><tr><td>1,000,000</td><td>1163130(19.3 min)</td><td>28633</td><td>46533</td></tr><tr><td>5,000,000</td><td>5452635(90.8 min)</td><td>140117(2.3 min)</td><td>227203(3.7 min)</td></tr><tr><td>10,000,000</td><td>x</td><td>282603(4.7 min)</td><td>438349(7.3 min)</td></tr></tbody></table><p><strong>rows <code>10,000,000</code> 측정은 너무 오래 걸려 진행하지 못했습니다.</strong> <code>5,000,000</code> 보다 약 2배 정도 <code>10905270 ms (181 min)</code> 정도 예상됩니다. JPA 성능 측정은 더 이상 의미가 없을 거 같아서 Statement, Exposed를 chunk size 기준으로 진행하겠습니다.</p><h4><span id="chunk-size-5000">chunk size = 5,000</span></h4><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/batch-study/docs/img/chunk_size_5000.png" alt=""></p><table><thead><tr><th>rows</th><th>Statement</th><th>Exposed</th></tr></thead><tbody><tr><td>10,000</td><td>415</td><td>787</td></tr><tr><td>50,000</td><td>1454</td><td>2569</td></tr><tr><td>100,000</td><td>2681</td><td>3777</td></tr><tr><td>500,000</td><td>10607</td><td>17911</td></tr><tr><td>1,000,000</td><td>22378</td><td>33637</td></tr><tr><td>5,000,000</td><td>105275</td><td>165472</td></tr><tr><td>10,000,000</td><td>215456</td><td>311385</td></tr></tbody></table><h4><span id="chunk-size-10000">chunk size = 10,000</span></h4><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/batch-study/docs/img/chunk_size_100000.png" alt=""></p><table><thead><tr><th>rows</th><th>Statement</th><th>Exposed</th></tr></thead><tbody><tr><td>10,000</td><td>421</td><td>879</td></tr><tr><td>50,000</td><td>1713</td><td>2582</td></tr><tr><td>100,000</td><td>2636</td><td>4101</td></tr><tr><td>500,000</td><td>10959</td><td>15479</td></tr><tr><td>1,000,000</td><td>21159</td><td>33711</td></tr><tr><td>5,000,000</td><td>105478</td><td>150009</td></tr><tr><td>10,000,000</td><td>205380</td><td>308874</td></tr></tbody></table><h3><span id="정리">정리</span></h3><p>JPA(단일 insert)와 성능은 비교 자체가 되지 않으며, 자바 코드와, 데이터베이스가 동일하지 않은 네트워크 환경에서는 IO 작업이 더 많이 발생하기 때문에 위 성능 측정보다 안 좋은 결과가 예상됩니다.</p><p><code>Exposed</code>도 내부적으로 <code>addBatch()</code>를 사용해서 batch insert를 진행하는데도 불과하고 대략 <code>30%</code>성능의 차이를 보였습니다. <code>Statement</code> 보다 느린 부분은 사실이지만 절대적인 성능 자체가 둘 모두 빠르기에 (<code>10,000,000</code> 기준 1분 40초 차이) 속도적인 측면보다는 개발 및 유지 보수 측면에서 <code>Exposed</code>가 더 좋다고 판단했습니다.</p><p>그리고 chunk size <code>5,000</code>, <code>10,000</code> 각각 측정해 본 결과 <code>Exposed</code>가 조금 더 효율적으로 성능이 향상되었습니다. 물론 모든 측정은 로컬 환경에서 진행한 것이니 절대적인 수치보다는 각 rows 별 <code>JPA</code>, <code>Statement</code>, <code>Exposed</code>의 비율을 보는 게 더 바람직합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JPA + MySQL + GenerationType.IDENTITY 조합으로는 Batch Insert를 사용할 수 없습니다. 자세한 내용은 &lt;a href=&quot;https://cheese10yun.github.io/jpa-batch-insert/&quot;&gt;B
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Batch Insert" scheme="https://cheese10yun.github.io/tags/Batch-Insert/"/>
    
      <category term="Exposed" scheme="https://cheese10yun.github.io/tags/Exposed/"/>
    
  </entry>
  
  <entry>
    <title>Batch Insert 성능 향상기 1편 - With JPA</title>
    <link href="https://cheese10yun.github.io/jpa-batch-insert/"/>
    <id>https://cheese10yun.github.io/jpa-batch-insert/</id>
    <published>2021-02-21T15:00:00.000Z</published>
    <updated>2021-03-02T14:12:49.443Z</updated>
    
    <content type="html"><![CDATA[<p>성능 향상을 위해서 Batch Insert를 도입하는 과정 중 JPA, Mysql 환경에서의 Batch Insert에 대한 방법과 제약사항들에 대해서 정리했습니다. 결과적으로는 다른 프레임워크를 도입해서 해결했으며 본 포스팅은 JPA Batch Insert의 정리와, 왜 다른 프레임워크를 도입을 했는지에 대해한 내용입니다.</p><h2><span id="batch-insert-란">Batch Insert 란 ?</span></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 단건 insert</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> payment_back (amount, order_id) <span class="keyword">values</span> (?, ?)</span><br><span class="line"></span><br><span class="line"># 멀티 <span class="keyword">insert</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> payment_back (amount, order_id)</span><br><span class="line"><span class="keyword">values</span> </span><br><span class="line">       (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">       (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">       (<span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">       (<span class="number">1</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>insert rows 여러 개 연결해서 한 번에 입력하는 것을 Batch Insert라고 말합니다. 당연한 이야기이지만 Batch Insert는 하나의 트랜잭션으로 묶이게 됩니다.</p><h2><span id="batch-insert-with-jpa">Batch Insert With JPA</span></h2><p>위 Batch Insert SQL이 간단해 보이지만 실제 로직으로 작성하려면 코드가 복잡해지고 실수하기 좋은 포인트들이 있어 유지 보수하기 어려운 코드가 되기 쉽습니다. 해당 포인트들은 아래 주석으로 작성했습니다. <strong>JPA를 사용하면 이러한 문제들을 정말 쉽게 해결이 가능합니다.</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 문자열로 기반으로 SQL을 관리하기 때문에 변경 및 유지 보수에 좋지 않음</span></span><br><span class="line"><span class="keyword">val</span> sql = <span class="string">"insert into payment_back (id, amount, order_id) values (?, ?, ?)"</span></span><br><span class="line"><span class="keyword">val</span> statement = connection.prepareStatement(sql)!!</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">addBatch</span><span class="params">(payment: <span class="type">Payment</span>)</span></span> = statement.apply &#123;</span><br><span class="line">    <span class="comment">// code 바인딩 순서에 따라 오동작 가능성이 높음</span></span><br><span class="line">    <span class="comment">// 매번 자료형을 지정해서 값을 입력해야 함</span></span><br><span class="line">    <span class="keyword">this</span>.setLong(<span class="number">1</span>, payment.id!!)</span><br><span class="line">    <span class="keyword">this</span>.setBigDecimal(<span class="number">2</span>, payment.amount)</span><br><span class="line">    <span class="keyword">this</span>.setLong(<span class="number">3</span>, payment.orderId)</span><br><span class="line">    <span class="keyword">this</span>.addBatch()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// connection &amp; statement 객체를 직접 close 진행, 하지 않을 경우 문제 발생 가능성이 있음</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">close</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (statement.isClosed.not())</span><br><span class="line">        statement.close()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="쓰기-지연-sql-지원-이란">쓰기 지연 SQL 지원 이란 ?</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">EntityMaanger em  = emf.createEnttiyManager();</span><br><span class="line">ENtityTranscation transaction = em.getTransaction();</span><br><span class="line"><span class="comment">// 엔티티 매니저는 데이터 변경 시 트랜잭션을 시작해야 한다.</span></span><br><span class="line"></span><br><span class="line">transaction.begin();</span><br><span class="line"></span><br><span class="line">em.persist(memberA);</span><br><span class="line">em.persist(memberB);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 여기까지 Insert SQL을 데이터베이스에 보내지 않는다.</span></span><br><span class="line"><span class="comment">// Commit을 하는 순간 데이터베이스에 Insert SQL을 보낸다</span></span><br><span class="line">transaction.commit();</span><br></pre></td></tr></table></figure><p>엔티티 매니저는 트랜잭션을 커밋 하기 직전까지 데이터베이스에 엔티티를 저장하지 않고 내부 쿼리 저장소에 INSERT SQL을 모아둔다. 그리고 트랜잭션을 커밋 할 때 모아둔 쿼리를 데이터베이스에 보내는데 이것을 트랜잭션을 지원하는 쓰기 지연이라 한다.</p><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/jpa-insert-persistent.png" alt=""></p><p>회원 A를 영속화했다. 영속성 컨텍스트는 1차 캐시에 회원 엔티티를 저장하면서 동시에 회원 엔티티 정보로 등록 쿼리를 만든다. 그리고 만들어진 등록 쿼리를 쓰기 지연 SQL 저장소에 보관한다.</p><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/jpa-insert-persistent-2.png" alt=""><br>다음으로 회원 B를 영속화했다. 마찬가지로 회원 엔티티 정보로 등록 쿼리를 생성해서 쓰지 지연 SQL 저장소에 보관한다. 현재 쓰기 지연 SQL 저장소에는 등록 쿼리가 2건이 저장되어 있다.</p><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/jpa-insert-persistent-3.png" alt=""></p><p>마지막으로 트랜잭션을 커밋 했다. 트랜잭션을 커밋 하면 엔티티 매니저는 우선 영속성 컨텍스트를 플러시 한다. 플러시는 영속성 컨텍스트의 변경 내용을 데이터베이스에 동기화하는 작업인데 이때 등록, 수정, 삭제한 엔티티를 데이터베이스에 반영한다. <strong>이러한 부분은 JPA 내부적으로 이루어지기 때문에 사용하는 코드에서는 코드의 변경 없이 이러한 작업들이 가능하다.</strong></p><h3><span id="jpa-with-batch-insert-code">JPA With Batch Insert Code</span></h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    jpa:</span></span><br><span class="line"><span class="attr">        database:</span> <span class="string">mysql</span></span><br><span class="line"><span class="attr">        properties:</span></span><br><span class="line">            <span class="string">hibernate.jdbc.batch_size:</span> <span class="number">50</span></span><br><span class="line">            <span class="string">hibernate.order_inserts:</span> <span class="literal">true</span></span><br><span class="line">            <span class="string">hibernate.order_updates:</span> <span class="literal">true</span></span><br><span class="line">            <span class="string">hibernate.dialect:</span> <span class="string">org.hibernate.dialect.MySQL5InnoDBDialect</span></span><br><span class="line">            <span class="string">hibernate.show_sql:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    datasource:</span></span><br><span class="line"><span class="attr">        url:</span> <span class="attr">jdbc:mysql://localhost:3366/batch_study?useSSL=false&amp;serverTimezone=UTC&amp;autoReconnect=true&amp;rewriteBatchedStatements=true</span></span><br><span class="line"><span class="attr">        driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p>addBatch 구분을 사용하기 위해서는 <code>rewriteBatchedStatements=true</code> 속성을 지정해야 합니다. 기본 설정은 <code>false</code>이며, 해당 설정이 없으면 Batch Insert는 동작하지 않습니다. 정확한 내용은 공식 문서를 참고해 주세요.</p><blockquote><p><a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-connp-props-performance-extensions.html" rel="external nofollow noopener noreferrer" target="_blank">MySQL Connector/J 8.0 Developer Guide : 6.3.13 Performance Extensions</a><br>Stops checking if every INSERT statement contains the “ON DUPLICATE KEY UPDATE” clause. As a side effect, obtaining the statement’s generated keys information will return a list where normally it wouldn’t. Also be aware that, in this case, the list of generated keys returned may not be accurate. The effect of this property is canceled if set simultaneously with ‘rewriteBatchedStatements=true’.</p></blockquote><p><code>hibernate.jdbc.batch_size: 50</code> Batch Insert의 size를 지정합니다. 해당 크기에 따라서 한 번에 insert 되는 rows가 결정됩니다. 자세한 내용은 아래에서 설명드리겠습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"payment_back"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentBackJpa</span></span>(</span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"amount"</span>, nullable = false)</span></span><br><span class="line">    <span class="keyword">var</span> amount: BigDecimal,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"order_id"</span>, nullable = false, updatable = false)</span></span><br><span class="line">    <span class="keyword">val</span> orderId: <span class="built_in">Long</span></span><br><span class="line">)&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"id"</span>, updatable = false)</span> <span class="comment">// @GeneratedValue를 지정하지 않았음</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PaymentBackJpaRepository</span>: <span class="type">JpaRepository</span>&lt;<span class="type">PaymentBackJpa, Long</span>&gt;</span></span><br></pre></td></tr></table></figure><p>엔티티 클래스는 간단합니다. 중요한 부분은 <code>@GeneratedValue</code>을 지정하지 않은 부분입니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@TestConstructor(autowireMode = TestConstructor.AutowireMode.ALL)</span></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">BulkInsertJobConfigurationTest</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> paymentBackJpaRepository: PaymentBackJpaRepository</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `jpa 기반 bulk insert`<span class="params">()</span></span> &#123;</span><br><span class="line">        (<span class="number">1.</span><span class="number">.100</span>).map &#123;</span><br><span class="line">            PaymentBackJpa(</span><br><span class="line">                amount = it.toBigDecimal(),</span><br><span class="line">                orderId = it.toLong()</span><br><span class="line">            )</span><br><span class="line">                .apply &#123;</span><br><span class="line">                    <span class="keyword">this</span>.id = it.toLong() <span class="comment">// ID를 직접 지정</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;.also &#123;</span><br><span class="line">            paymentBackJpaRepository.saveAll(it)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>paymentBackJpaRepository.saveAll()</code>를 이용해서 batch inset를 진행합니다. JPA 기반으로 Batch Insert를 진행할 때 별다른 코드가 필요 없습니다. 컬렉션 객체를 <code>saveAll()</code>으로 저장하는 것이 전부입니다. <code>hibernate.show_sql: true</code>으로 로킹 결고를 확인해보겠습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/batch-study/docs/img/sql-batch-1.png" alt=""></p><p>로그상으로는 Batch Insert가 진행되지 않은 것처럼 보입니다. 결론부터 말씀드리면 실제로는 Batch Insert가 진행됐지만 <code>hibernate.show_sql: true</code> 기반 로그에는 제대로 표시가 되지 않습니다. Mysql의 실제 로그로 확인해보겠습니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show variables like 'general_log%'; # general_log 획인</span><br><span class="line">set global general_log = 'ON'; # `OFF` 경우 `ON` 으로 변경</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/batch-study/docs/img/sql-general.png" alt=""></p><p><strong>해당 로그 설정은 성능에 지장을 줄 수 있기 때문에 테스트, 개발 환경에서만 지정하는 것을 권장합니다.</strong> 해당 기능은 실시간으로 변경 가능하기 때문에 설정 완료 이후 <code>/var/lib/mysql/0a651fe44d20.log</code> 파일에 로그를 확인할 수 있습니다.</p><h3><span id="batch-size">batch size</span></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Query<span class="keyword">SELECT</span> @@session.transaction_read_only</span><br><span class="line"><span class="keyword">Query</span><span class="keyword">insert</span> <span class="keyword">into</span> payment_back (amount, order_id, <span class="keyword">id</span>) <span class="keyword">values</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>),(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>),(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>),(<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>),(<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>),(<span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>),(<span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>),(<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>),(<span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>),(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>),(<span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>),(<span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>),(<span class="number">13</span>, <span class="number">13</span>, <span class="number">13</span>),(<span class="number">14</span>, <span class="number">14</span>, <span class="number">14</span>),(<span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>),(<span class="number">16</span>, <span class="number">16</span>, <span class="number">16</span>),(<span class="number">17</span>, <span class="number">17</span>, <span class="number">17</span>),(<span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>),(<span class="number">19</span>, <span class="number">19</span>, <span class="number">19</span>),(<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>),(<span class="number">21</span>, <span class="number">21</span>, <span class="number">21</span>),(<span class="number">22</span>, <span class="number">22</span>, <span class="number">22</span>),(<span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>),(<span class="number">24</span>, <span class="number">24</span>, <span class="number">24</span>),(<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>),(<span class="number">26</span>, <span class="number">26</span>, <span class="number">26</span>),(<span class="number">27</span>, <span class="number">27</span>, <span class="number">27</span>),(<span class="number">28</span>, <span class="number">28</span>, <span class="number">28</span>),(<span class="number">29</span>, <span class="number">29</span>, <span class="number">29</span>),(<span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>),(<span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>),(<span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>),(<span class="number">33</span>, <span class="number">33</span>, <span class="number">33</span>),(<span class="number">34</span>, <span class="number">34</span>, <span class="number">34</span>),(<span class="number">35</span>, <span class="number">35</span>, <span class="number">35</span>),(<span class="number">36</span>, <span class="number">36</span>, <span class="number">36</span>),(<span class="number">37</span>, <span class="number">37</span>, <span class="number">37</span>),(<span class="number">38</span>, <span class="number">38</span>, <span class="number">38</span>),(<span class="number">39</span>, <span class="number">39</span>, <span class="number">39</span>),(<span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>),(<span class="number">41</span>, <span class="number">41</span>, <span class="number">41</span>),(<span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>),(<span class="number">43</span>, <span class="number">43</span>, <span class="number">43</span>),(<span class="number">44</span>, <span class="number">44</span>, <span class="number">44</span>),(<span class="number">45</span>, <span class="number">45</span>, <span class="number">45</span>),(<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>),(<span class="number">47</span>, <span class="number">47</span>, <span class="number">47</span>),(<span class="number">48</span>, <span class="number">48</span>, <span class="number">48</span>),(<span class="number">49</span>, <span class="number">49</span>, <span class="number">49</span>),(<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>)</span><br><span class="line"><span class="keyword">Query</span><span class="keyword">SELECT</span> @@session.transaction_read_only</span><br><span class="line"><span class="keyword">Query</span><span class="keyword">insert</span> <span class="keyword">into</span> payment_back (amount, order_id, <span class="keyword">id</span>) <span class="keyword">values</span> (<span class="number">51</span>, <span class="number">51</span>, <span class="number">51</span>),(<span class="number">52</span>, <span class="number">52</span>, <span class="number">52</span>),(<span class="number">53</span>, <span class="number">53</span>, <span class="number">53</span>),(<span class="number">54</span>, <span class="number">54</span>, <span class="number">54</span>),(<span class="number">55</span>, <span class="number">55</span>, <span class="number">55</span>),(<span class="number">56</span>, <span class="number">56</span>, <span class="number">56</span>),(<span class="number">57</span>, <span class="number">57</span>, <span class="number">57</span>),(<span class="number">58</span>, <span class="number">58</span>, <span class="number">58</span>),(<span class="number">59</span>, <span class="number">59</span>, <span class="number">59</span>),(<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>),(<span class="number">61</span>, <span class="number">61</span>, <span class="number">61</span>),(<span class="number">62</span>, <span class="number">62</span>, <span class="number">62</span>),(<span class="number">63</span>, <span class="number">63</span>, <span class="number">63</span>),(<span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>),(<span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>),(<span class="number">66</span>, <span class="number">66</span>, <span class="number">66</span>),(<span class="number">67</span>, <span class="number">67</span>, <span class="number">67</span>),(<span class="number">68</span>, <span class="number">68</span>, <span class="number">68</span>),(<span class="number">69</span>, <span class="number">69</span>, <span class="number">69</span>),(<span class="number">70</span>, <span class="number">70</span>, <span class="number">70</span>),(<span class="number">71</span>, <span class="number">71</span>, <span class="number">71</span>),(<span class="number">72</span>, <span class="number">72</span>, <span class="number">72</span>),(<span class="number">73</span>, <span class="number">73</span>, <span class="number">73</span>),(<span class="number">74</span>, <span class="number">74</span>, <span class="number">74</span>),(<span class="number">75</span>, <span class="number">75</span>, <span class="number">75</span>),(<span class="number">76</span>, <span class="number">76</span>, <span class="number">76</span>),(<span class="number">77</span>, <span class="number">77</span>, <span class="number">77</span>),(<span class="number">78</span>, <span class="number">78</span>, <span class="number">78</span>),(<span class="number">79</span>, <span class="number">79</span>, <span class="number">79</span>),(<span class="number">80</span>, <span class="number">80</span>, <span class="number">80</span>),(<span class="number">81</span>, <span class="number">81</span>, <span class="number">81</span>),(<span class="number">82</span>, <span class="number">82</span>, <span class="number">82</span>),(<span class="number">83</span>, <span class="number">83</span>, <span class="number">83</span>),(<span class="number">84</span>, <span class="number">84</span>, <span class="number">84</span>),(<span class="number">85</span>, <span class="number">85</span>, <span class="number">85</span>),(<span class="number">86</span>, <span class="number">86</span>, <span class="number">86</span>),(<span class="number">87</span>, <span class="number">87</span>, <span class="number">87</span>),(<span class="number">88</span>, <span class="number">88</span>, <span class="number">88</span>),(<span class="number">89</span>, <span class="number">89</span>, <span class="number">89</span>),(<span class="number">90</span>, <span class="number">90</span>, <span class="number">90</span>),(<span class="number">91</span>, <span class="number">91</span>, <span class="number">91</span>),(<span class="number">92</span>, <span class="number">92</span>, <span class="number">92</span>),(<span class="number">93</span>, <span class="number">93</span>, <span class="number">93</span>),(<span class="number">94</span>, <span class="number">94</span>, <span class="number">94</span>),(<span class="number">95</span>, <span class="number">95</span>, <span class="number">95</span>),(<span class="number">96</span>, <span class="number">96</span>, <span class="number">96</span>),(<span class="number">97</span>, <span class="number">97</span>, <span class="number">97</span>),(<span class="number">98</span>, <span class="number">98</span>, <span class="number">98</span>),(<span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>),(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line"><span class="keyword">Query</span><span class="keyword">commit</span></span><br><span class="line"><span class="keyword">Query</span><span class="keyword">SET</span> autocommit=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>실제 mysql 로그에서는 Batch Insert를 확인할 수 있습니다. 그런데 왜 2번에 걸쳐서 Batch Insert가 진행되었을까요? <strong><code>hibernate.jdbc.batch_size: 50</code>설정으로 Batch Insert에 대한 size를 50으로 지정했기 때문에 rows 100를 저장할 때 2번에 걸쳐 insert를 진행하는 것입니다.</strong> 만약 <code>hibernate.jdbc.batch_size: 100</code>이라면 1번의 insert로 저장됩니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Query<span class="keyword">insert</span> <span class="keyword">into</span> payment_back (amount, order_id, <span class="keyword">id</span>) <span class="keyword">values</span> (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>),(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>),(<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>),(<span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>),(<span class="number">5</span>, <span class="number">5</span>, <span class="number">5</span>),(<span class="number">6</span>, <span class="number">6</span>, <span class="number">6</span>),(<span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>),(<span class="number">8</span>, <span class="number">8</span>, <span class="number">8</span>),(<span class="number">9</span>, <span class="number">9</span>, <span class="number">9</span>),(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>),(<span class="number">11</span>, <span class="number">11</span>, <span class="number">11</span>),(<span class="number">12</span>, <span class="number">12</span>, <span class="number">12</span>),(<span class="number">13</span>, <span class="number">13</span>, <span class="number">13</span>),(<span class="number">14</span>, <span class="number">14</span>, <span class="number">14</span>),(<span class="number">15</span>, <span class="number">15</span>, <span class="number">15</span>),(<span class="number">16</span>, <span class="number">16</span>, <span class="number">16</span>),(<span class="number">17</span>, <span class="number">17</span>, <span class="number">17</span>),(<span class="number">18</span>, <span class="number">18</span>, <span class="number">18</span>),(<span class="number">19</span>, <span class="number">19</span>, <span class="number">19</span>),(<span class="number">20</span>, <span class="number">20</span>, <span class="number">20</span>),(<span class="number">21</span>, <span class="number">21</span>, <span class="number">21</span>),(<span class="number">22</span>, <span class="number">22</span>, <span class="number">22</span>),(<span class="number">23</span>, <span class="number">23</span>, <span class="number">23</span>),(<span class="number">24</span>, <span class="number">24</span>, <span class="number">24</span>),(<span class="number">25</span>, <span class="number">25</span>, <span class="number">25</span>),(<span class="number">26</span>, <span class="number">26</span>, <span class="number">26</span>),(<span class="number">27</span>, <span class="number">27</span>, <span class="number">27</span>),(<span class="number">28</span>, <span class="number">28</span>, <span class="number">28</span>),(<span class="number">29</span>, <span class="number">29</span>, <span class="number">29</span>),(<span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>),(<span class="number">31</span>, <span class="number">31</span>, <span class="number">31</span>),(<span class="number">32</span>, <span class="number">32</span>, <span class="number">32</span>),(<span class="number">33</span>, <span class="number">33</span>, <span class="number">33</span>),(<span class="number">34</span>, <span class="number">34</span>, <span class="number">34</span>),(<span class="number">35</span>, <span class="number">35</span>, <span class="number">35</span>),(<span class="number">36</span>, <span class="number">36</span>, <span class="number">36</span>),(<span class="number">37</span>, <span class="number">37</span>, <span class="number">37</span>),(<span class="number">38</span>, <span class="number">38</span>, <span class="number">38</span>),(<span class="number">39</span>, <span class="number">39</span>, <span class="number">39</span>),(<span class="number">40</span>, <span class="number">40</span>, <span class="number">40</span>),(<span class="number">41</span>, <span class="number">41</span>, <span class="number">41</span>),(<span class="number">42</span>, <span class="number">42</span>, <span class="number">42</span>),(<span class="number">43</span>, <span class="number">43</span>, <span class="number">43</span>),(<span class="number">44</span>, <span class="number">44</span>, <span class="number">44</span>),(<span class="number">45</span>, <span class="number">45</span>, <span class="number">45</span>),(<span class="number">46</span>, <span class="number">46</span>, <span class="number">46</span>),(<span class="number">47</span>, <span class="number">47</span>, <span class="number">47</span>),(<span class="number">48</span>, <span class="number">48</span>, <span class="number">48</span>),(<span class="number">49</span>, <span class="number">49</span>, <span class="number">49</span>),(<span class="number">50</span>, <span class="number">50</span>, <span class="number">50</span>),(<span class="number">51</span>, <span class="number">51</span>, <span class="number">51</span>),(<span class="number">52</span>, <span class="number">52</span>, <span class="number">52</span>),(<span class="number">53</span>, <span class="number">53</span>, <span class="number">53</span>),(<span class="number">54</span>, <span class="number">54</span>, <span class="number">54</span>),(<span class="number">55</span>, <span class="number">55</span>, <span class="number">55</span>),(<span class="number">56</span>, <span class="number">56</span>, <span class="number">56</span>),(<span class="number">57</span>, <span class="number">57</span>, <span class="number">57</span>),(<span class="number">58</span>, <span class="number">58</span>, <span class="number">58</span>),(<span class="number">59</span>, <span class="number">59</span>, <span class="number">59</span>),(<span class="number">60</span>, <span class="number">60</span>, <span class="number">60</span>),(<span class="number">61</span>, <span class="number">61</span>, <span class="number">61</span>),(<span class="number">62</span>, <span class="number">62</span>, <span class="number">62</span>),(<span class="number">63</span>, <span class="number">63</span>, <span class="number">63</span>),(<span class="number">64</span>, <span class="number">64</span>, <span class="number">64</span>),(<span class="number">65</span>, <span class="number">65</span>, <span class="number">65</span>),(<span class="number">66</span>, <span class="number">66</span>, <span class="number">66</span>),(<span class="number">67</span>, <span class="number">67</span>, <span class="number">67</span>),(<span class="number">68</span>, <span class="number">68</span>, <span class="number">68</span>),(<span class="number">69</span>, <span class="number">69</span>, <span class="number">69</span>),(<span class="number">70</span>, <span class="number">70</span>, <span class="number">70</span>),(<span class="number">71</span>, <span class="number">71</span>, <span class="number">71</span>),(<span class="number">72</span>, <span class="number">72</span>, <span class="number">72</span>),(<span class="number">73</span>, <span class="number">73</span>, <span class="number">73</span>),(<span class="number">74</span>, <span class="number">74</span>, <span class="number">74</span>),(<span class="number">75</span>, <span class="number">75</span>, <span class="number">75</span>),(<span class="number">76</span>, <span class="number">76</span>, <span class="number">76</span>),(<span class="number">77</span>, <span class="number">77</span>, <span class="number">77</span>),(<span class="number">78</span>, <span class="number">78</span>, <span class="number">78</span>),(<span class="number">79</span>, <span class="number">79</span>, <span class="number">79</span>),(<span class="number">80</span>, <span class="number">80</span>, <span class="number">80</span>),(<span class="number">81</span>, <span class="number">81</span>, <span class="number">81</span>),(<span class="number">82</span>, <span class="number">82</span>, <span class="number">82</span>),(<span class="number">83</span>, <span class="number">83</span>, <span class="number">83</span>),(<span class="number">84</span>, <span class="number">84</span>, <span class="number">84</span>),(<span class="number">85</span>, <span class="number">85</span>, <span class="number">85</span>),(<span class="number">86</span>, <span class="number">86</span>, <span class="number">86</span>),(<span class="number">87</span>, <span class="number">87</span>, <span class="number">87</span>),(<span class="number">88</span>, <span class="number">88</span>, <span class="number">88</span>),(<span class="number">89</span>, <span class="number">89</span>, <span class="number">89</span>),(<span class="number">90</span>, <span class="number">90</span>, <span class="number">90</span>),(<span class="number">91</span>, <span class="number">91</span>, <span class="number">91</span>),(<span class="number">92</span>, <span class="number">92</span>, <span class="number">92</span>),(<span class="number">93</span>, <span class="number">93</span>, <span class="number">93</span>),(<span class="number">94</span>, <span class="number">94</span>, <span class="number">94</span>),(<span class="number">95</span>, <span class="number">95</span>, <span class="number">95</span>),(<span class="number">96</span>, <span class="number">96</span>, <span class="number">96</span>),(<span class="number">97</span>, <span class="number">97</span>, <span class="number">97</span>),(<span class="number">98</span>, <span class="number">98</span>, <span class="number">98</span>),(<span class="number">99</span>, <span class="number">99</span>, <span class="number">99</span>),(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>위 쿼리는 <code>hibernate.jdbc.batch_size: 100</code>으로 지정한 결과입니다. 그렇다면 왜 <code>batch_size</code> 옵션을 주어서 한 번에 insert 할 수 있는 데이터의 크기를 제한하는 것일까요? 아래 코드에서 해답을 찾을 수 있습니다.</p><blockquote><p><a href="https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#batch-jdbcbatch" rel="external nofollow noopener noreferrer" target="_blank">Hibernate User Guide: 12.2.1. Batch inserts</a></p><p>When you make new objects persistent, employ methods flush() and clear() to the session regularly, to control the size of the first-level cache.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">EntityManager entityManager = <span class="keyword">null</span>;</span><br><span class="line">EntityTransaction txn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">entityManager = entityManagerFactory().createEntityManager();</span><br><span class="line"></span><br><span class="line">txn = entityManager.getTransaction();</span><br><span class="line">txn.begin();</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> batchSize = <span class="number">25</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; entityCount; i++ ) &#123;</span><br><span class="line"><span class="keyword">if</span> ( i &gt; <span class="number">0</span> &amp;&amp; i % batchSize == <span class="number">0</span> ) &#123;</span><br><span class="line"><span class="comment">//flush a batch of inserts and release memory</span></span><br><span class="line">entityManager.flush();</span><br><span class="line">entityManager.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Person Person = <span class="keyword">new</span> Person( String.format( <span class="string">"Person %d"</span>, i ) );</span><br><span class="line">entityManager.persist( Person );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">txn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line"><span class="keyword">if</span> ( txn != <span class="keyword">null</span> &amp;&amp; txn.isActive()) txn.rollback();</span><br><span class="line"><span class="keyword">throw</span> e;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (entityManager != <span class="keyword">null</span>) &#123;</span><br><span class="line">entityManager.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>하이버네이트 공식 가이드의 내용입니다. <code>batchSize</code> 값을 기준으로 <code>flush();</code>, <code>clear();</code>를 이용해서 영속성 컨텍스트를 초기화 작업을 진행하고 있습니다. <code>batchSize</code>에 대한 제한이 없으면 영속성 컨텍스트에 모든 엔티티가 올라가기 때문에 <code>OutOfMemoryException</code> 발생할 수 있고, 메모리 관리 측면에서도 효율적이지 않기 때문입니다. 하이버네이트의 공식 가이드에서도 해당 부분의 언급이 있습니다.</p><blockquote><p><a href="https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#batch-session-batch" rel="external nofollow noopener noreferrer" target="_blank">Hibernate User Guide: 12.2. Session batching</a></p><ol><li>Hibernate caches all the newly inserted Customer instances in the session-level cache, so, when the transaction ends, 100 000 entities are managed by the persistence context. If the maximum memory allocated to the JVM is rather low, this example could fail with an OutOfMemoryException. The Java 1.8 JVM allocated either 1/4 of available RAM or 1Gb, which can easily accommodate 100 000 objects on the heap.</li><li>long-running transactions can deplete a connection pool so other transactions don’t get a chance to proceed</li><li>JDBC batching is not enabled by default, so every insert statement requires a database roundtrip. To enable JDBC batching, set the hibernate.jdbc.batch_size property to an integer between 10 and 50.</li></ol></blockquote><h3><span id="쓰기-지연-sql-제약-사항">쓰기 지연 SQL 제약 사항</span></h3><p><code>batchSize: 50</code> 경우 <code>PaymentBackJpa</code> 객체를 50 단위로 Batch Insert 쿼리가 실행되지만, 중간에 다른 엔티티를 저장하는 경우 아래처럼 지금까지의 <code>PaymentBackJpa</code>에 대한 지정하기 때문에 최종적으로 <code>batchSize: 50</code> 단위로 저장되지 않습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">em.persist(<span class="keyword">new</span> PaymentBackJpa()); <span class="comment">// 1</span></span><br><span class="line">em.persist(<span class="keyword">new</span> PaymentBackJpa()); <span class="comment">// 2</span></span><br><span class="line">em.persist(<span class="keyword">new</span> PaymentBackJpa()); <span class="comment">// 3</span></span><br><span class="line">em.persist(<span class="keyword">new</span> PaymentBackJpa()); <span class="comment">// 4</span></span><br><span class="line">em.persist(<span class="keyword">new</span> Orders()); <span class="comment">// 1-1, 다른 SQL이 추가 되었기 때문에  SQL 배치를 다시 시작 해야 한다.</span></span><br><span class="line">em.persist(<span class="keyword">new</span> PaymentBackJpa()); <span class="comment">// 1</span></span><br><span class="line">em.persist(<span class="keyword">new</span> PaymentBackJpa()); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>이러한 문제는 <code>hibernate.order_updates: true</code>, <code>hibernate.order_inserts: true</code> 값으로 해결 할 수 있습니다.</p><h3><span id="jpa-batch-insert의-가장-큰-문제">JPA Batch Insert의 가장 큰 문제…</span></h3><p>위에서 설명했던 부분들은 Batch Insert에 필요한 properties 설정, 그리고 내부적으로 JPA에서 Batch Insert에 대한 동작 방식을 설명한 것입니다. <strong>실제 Batch Insert를 진행하는 코드는 별다른 부분이 없고 컬렉션 객체를 <code>saveAll()</code> 메서드로 호출하는 것이 전부입니다.</strong> 이로써 JPA는 Batch Insert를 강력하게 지원해 주고 있습니다. <strong>하지만 가장 큰 문제가 있습니다. <code>@GeneratedValue(strategy = GenerationType.IDENTITY)</code> 방식의 경우 Batch Insert를 지원하지 않습니다.</strong></p><blockquote><p><a href="https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#batch-session-batch" rel="external nofollow noopener noreferrer" target="_blank">Hibernate User Guide: 12.2. Session batching</a></p><p>Hibernate disables insert batching at the JDBC level transparently if you use an identity identifier generator.</p></blockquote><p>공식 문서에도 언급이 있듯이 <code>@GeneratedValue(strategy = GenerationType.IDENTITY)</code> 경우 Batch Insert를 지원하지 않습니다. 정확히 어떤 이유 때문인지에 대해서는 언급이 없고, 관련 내용을 잘 설명한 <a href="https://stackoverflow.com/questions/27697810/why-does-hibernate-disable-insert-batching-when-using-an-identity-identifier-gen/27732138#27732138" rel="external nofollow noopener noreferrer" target="_blank">StackOverflow</a>를 첨부합니다.</p><p>제가 이해한 바로는 하이버네이트는 <code>Transactional Write Behind</code> 방식(마지막까지 영속성 컨텍스트에서 데이터를 가지고 있어 플러시를 연기하는 방식)을 사용하기 때문에 <code>GenerationType.IDENTITY</code> 방식의 경우 JDBC Batch Insert를 비활성화함. <code>GenerationType.IDENTITY</code> 방식이란 <code>auto_increment</code>으로 PK 값을 자동으로 증분 해서 생성하는 것으로 매우 효율적으로 관리할 수 있다.(heavyweight transactional course-grain locks 보다 효율적). 하지만 Insert를 실행하기 전까지는 ID에 할당된 값을 알 수 없기 때문에 <code>Transactional Write Behind</code>을 할 수 없고 결과적으로 Batch Insert를 진행할 수 없다.</p><p>Mysql에서는 대부분 <code>GenerationType.IDENTITY</code>으로 사용하기 때문에 해당 문제는 치명적입니다. 우선 <code>GenerationType.IDENTITY</code> 으로 지정하고 다시 테스트 코드를 돌려 보겠습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"payment_back"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentBackJpa</span></span>(</span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"amount"</span>, nullable = false)</span></span><br><span class="line">    <span class="keyword">var</span> amount: BigDecimal,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"order_id"</span>, nullable = false, updatable = false)</span></span><br><span class="line">    <span class="keyword">val</span> orderId: <span class="built_in">Long</span></span><br><span class="line">)&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span> <span class="comment">// GenerationType.IDENTITY 지정</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">BulkInsertJobConfigurationTest</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> paymentBackJpaRepository: PaymentBackJpaRepository</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `jpa 기반 bulk insert`<span class="params">()</span></span> &#123;</span><br><span class="line">        (<span class="number">1.</span><span class="number">.100</span>).map &#123;</span><br><span class="line">            PaymentBackJpa(</span><br><span class="line">                amount = it.toBigDecimal(),</span><br><span class="line">                orderId = it.toLong()</span><br><span class="line">            )</span><br><span class="line">                .apply &#123;</span><br><span class="line"><span class="comment">//                    this.id = it.toLong() // ID를 자동 증가로 변경 했기 때문에 코드 주석</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;.also &#123;</span><br><span class="line">            paymentBackJpaRepository.saveAll(it)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Query<span class="keyword">insert</span> <span class="keyword">into</span> payment_back (amount, order_id) <span class="keyword">values</span> (<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">Query</span><span class="keyword">insert</span> <span class="keyword">into</span> payment_back (amount, order_id) <span class="keyword">values</span> (<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">Query</span><span class="keyword">insert</span> <span class="keyword">into</span> payment_back (amount, order_id) <span class="keyword">values</span> (<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">Query</span><span class="keyword">insert</span> <span class="keyword">into</span> payment_back (amount, order_id) <span class="keyword">values</span> (<span class="number">4</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">Query</span><span class="keyword">insert</span> <span class="keyword">into</span> payment_back (amount, order_id) <span class="keyword">values</span> (<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"><span class="keyword">Query</span><span class="keyword">insert</span> <span class="keyword">into</span> payment_back (amount, order_id) <span class="keyword">values</span> (<span class="number">6</span>, <span class="number">6</span>)</span><br><span class="line"><span class="keyword">Query</span><span class="keyword">insert</span> <span class="keyword">into</span> payment_back (amount, order_id) <span class="keyword">values</span> (<span class="number">7</span>, <span class="number">7</span>)</span><br><span class="line"><span class="keyword">Query</span><span class="keyword">insert</span> <span class="keyword">into</span> payment_back (amount, order_id) <span class="keyword">values</span> (<span class="number">8</span>, <span class="number">8</span>)</span><br><span class="line"><span class="keyword">Query</span><span class="keyword">insert</span> <span class="keyword">into</span> payment_back (amount, order_id) <span class="keyword">values</span> (<span class="number">9</span>, <span class="number">9</span>)</span><br><span class="line"><span class="keyword">Query</span><span class="keyword">insert</span> <span class="keyword">into</span> payment_back (amount, order_id) <span class="keyword">values</span> (<span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line"><span class="keyword">Query</span><span class="keyword">insert</span> <span class="keyword">into</span> payment_back (amount, order_id) <span class="keyword">values</span> (<span class="number">11</span>, <span class="number">11</span>)</span><br><span class="line"><span class="keyword">Query</span><span class="keyword">insert</span> <span class="keyword">into</span> payment_back (amount, order_id) <span class="keyword">values</span> (<span class="number">12</span>, <span class="number">12</span>)</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong><code>GenerationType.IDENTITY</code>의 경우에는 Batch Insert가 진행되지 않습니다.</strong> 그래서 다른 대안을 찾아야 했습니다. 이 부분부터는 다음 포스팅에서 이어가겠습니다.</p><h2><span id="참고">참고</span></h2><ul><li><a href="https://homoefficio.github.io/2020/01/25/Spring-Data%EC%97%90%EC%84%9C-Batch-Insert-%EC%B5%9C%EC%A0%81%ED%99%94/" rel="external nofollow noopener noreferrer" target="_blank">Spring Data에서 Batch Insert 최적화</a></li><li><a href="https://github.com/HomoEfficio/dev-tips/blob/master/JPA-GenerationType-%EB%B3%84-INSERT-%EC%84%B1%EB%8A%A5-%EB%B9%84%EA%B5%90.md" rel="external nofollow noopener noreferrer" target="_blank">JPA GenerationType에 따른 INSERT 성능 차이</a></li><li><a href="https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html#batch-session-batch-insert" rel="external nofollow noopener noreferrer" target="_blank">JPA Batch inserts Document</a></li><li><a href="https://vladmihalcea.com/jpa-persist-and-merge/" rel="external nofollow noopener noreferrer" target="_blank">How do persist and merge work in JPA</a></li><li><a href="https://dev.mysql.com/doc/connector-j/8.0/en/" rel="external nofollow noopener noreferrer" target="_blank">MySQL Connector/J 8.0 Developer Guide</a></li><li><a href="https://docs.jboss.org/hibernate/orm/5.4/userguide/html_single/Hibernate_User_Guide.html" rel="external nofollow noopener noreferrer" target="_blank">Hibernate ORM 5.4.28.Final User Guide</a></li><li><a href="http://www.acornpub.co.kr/book/jpa-programmig" rel="external nofollow noopener noreferrer" target="_blank">자바 ORM 표준 JPA 프로그래밍</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;성능 향상을 위해서 Batch Insert를 도입하는 과정 중 JPA, Mysql 환경에서의 Batch Insert에 대한 방법과 제약사항들에 대해서 정리했습니다. 결과적으로는 다른 프레임워크를 도입해서 해결했으며 본 포스팅은 JPA Batch 
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Batch Insert" scheme="https://cheese10yun.github.io/tags/Batch-Insert/"/>
    
  </entry>
  
  <entry>
    <title>Spring Batch Test 작성 방법 및 고찰</title>
    <link href="https://cheese10yun.github.io/spring-batch-test-2/"/>
    <id>https://cheese10yun.github.io/spring-batch-test-2/</id>
    <published>2021-02-13T15:00:00.000Z</published>
    <updated>2021-02-14T15:29:37.551Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="spring-batch-test-code">Spring Batch Test Code</span></h1><p>스프링 배치 애플리케이션 테스트 코드를 작성하면서 만났던 이슈와 그에 따른 나름의 고찰을 정리한 포스팅 내용입니다. 배치를 사용하지 않더라도 스프링 기반으로 테스트를 작성하는 경우에도 도움 되는 내용들이 있습니다.</p><h2><span id="springbatchtest">@SpringBatchTest</span></h2><p><a href="https://docs.spring.io/spring-batch/docs/4.1.x/reference/html/whatsnew.html" rel="external nofollow noopener noreferrer" target="_blank">Spring Batch 4.1</a> 버전 부터는 <code>@SpringBatchTest</code> Annotation을 지원합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBatchTest</span></span><br><span class="line"><span class="meta">@ContextConfiguration</span>(classes = &#123;JobConfiguration.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JobTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobLauncherTestUtils jobLauncherTestUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JobRepositoryTestUtils jobRepositoryTestUtils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearMetadata</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jobRepositoryTestUtils.removeJobExecutions();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJob</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// given</span></span><br><span class="line">        JobParameters jobParameters =</span><br><span class="line">            jobLauncherTestUtils.getUniqueJobParameters();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// when</span></span><br><span class="line">        JobExecution jobExecution =</span><br><span class="line">            jobLauncherTestUtils.launchJob(jobParameters);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// then</span></span><br><span class="line">        Assert.assertEquals(ExitStatus.COMPLETED,</span><br><span class="line">            jobExecution.getExitStatus());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JobLauncherTestUtils : 스프링 배치 테스트에 필요한 유틸 기능</li><li>JobRepositoryTestUtils : 데이터베이스에 저장된 JobExcution을 생성/삭제 지원</li><li>StepScopeTestExecutionListener : 배치 단위 테스트 시 StepScope 컨텍스트를 생성, 해당 컨텍스트를 통해 JobParamerter 등을 단위 테스트에서 DI 받을 수 있음</li><li>JobSopceTestExecutionListener : 배치 단위 테스트 시 JobScope 컨텍스트를 생성, 해당 컨텍스트를 통해 JobParameter 등을 단위 테스트에서 DI 받을 수 있음</li></ul><p><code>@SpringBatchTest</code>으로 위 코드를 자동으로 구성할 수 있습니다.</p><h2><span id="spring-batch-test-support-만들기">Spring Batch Test Support 만들기</span></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@SpringBatchTest</span></span><br><span class="line"><span class="meta">@TestInstance(TestInstance.Lifecycle.PER_CLASS)</span></span><br><span class="line"><span class="meta">@TestConstructor(autowireMode = TestConstructor.AutowireMode.ALL)</span></span><br><span class="line"><span class="meta">@ActiveProfiles(<span class="meta-string">"test"</span>)</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchTestSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> entityManagerFactory: EntityManagerFactory</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> jobLauncherTestUtils: JobLauncherTestUtils</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">val</span> entityManager <span class="keyword">by</span> lazy &#123; entityManagerFactory.createEntityManager() &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">var</span> jobExecution: JobExecution? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">val</span> query: JPAQueryFactory <span class="keyword">by</span> lazy &#123; JPAQueryFactory(entityManager) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="title">launchJob</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        job: <span class="type">Job</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        jobParameters: <span class="type">JobParameters</span> = jobLauncherTestUtils.uniqueJobParameters</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">        jobLauncherTestUtils.job = job</span><br><span class="line">        <span class="keyword">this</span>.jobExecution = jobLauncherTestUtils.launchJob(jobParameters)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="title">launchStep</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        stepName: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        jobParameters: <span class="type">JobParameters</span> = jobLauncherTestUtils.uniqueJobParameters,</span></span></span><br><span class="line"><span class="function"><span class="params">        executionContext: <span class="type">ExecutionContext</span>? = <span class="literal">null</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.jobExecution = jobLauncherTestUtils.launchStep(stepName, jobParameters, executionContext)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="title">thenBatchCompleted</span><span class="params">()</span></span> &#123;</span><br><span class="line">        then(BatchStatus.COMPLETED).isEqualTo(jobExecution?.status)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="title">thenBatchStatus</span><span class="params">(batchStatus: <span class="type">BatchStatus</span>)</span></span> &#123;</span><br><span class="line">        then(batchStatus).isEqualTo(jobExecution?.status)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">save</span><span class="params">(entity: <span class="type">T</span>)</span></span>: T &#123;</span><br><span class="line">        entityManager.transaction.let &#123; transaction -&gt;</span><br><span class="line">            transaction.begin()</span><br><span class="line">            entityManager.persist(entity)</span><br><span class="line">            transaction.commit()</span><br><span class="line">            entityManager.clear()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> entity</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">saveAll</span><span class="params">(entities: <span class="type">List</span>&lt;<span class="type">T</span>&gt;)</span></span>: List&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> entityManager = entityManagerFactory.createEntityManager()</span><br><span class="line">        entityManager.transaction.let &#123; transaction -&gt;</span><br><span class="line">            transaction.begin()</span><br><span class="line">            <span class="keyword">for</span> (entity <span class="keyword">in</span> entities) &#123;</span><br><span class="line">                entityManager.persist(entity)</span><br><span class="line">            &#125;</span><br><span class="line">            transaction.commit()</span><br><span class="line">            entityManager.clear()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> entities</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;E&gt;</span> List<span class="type">&lt;E&gt;</span>.<span class="title">persist</span><span class="params">()</span></span> &#123;</span><br><span class="line">        saveAll(<span class="keyword">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">deleteAll</span><span class="params">(path: <span class="type">EntityPath</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">        entityManager.transaction.let &#123; transaction -&gt;</span><br><span class="line">            transaction.begin()</span><br><span class="line">            query.delete(path).execute()</span><br><span class="line">            transaction.commit()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>배치 애플리케이션의 테스트를 도와주는 유틸성 클래스, 테스트 코드를 효율적으로 작성할 수 있게 지원합니다. 어떤 기능들이 있고, 이 기능들이 어떤 불편한 점 때문에 추가했는지에 대해서 설명을 진행하겠습니다.</p><h3><span id="테스트-job-실행은">테스트 Job 실행은?</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchTestSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> jobLauncherTestUtils: JobLauncherTestUtils</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="title">launchJob</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        job: <span class="type">Job</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        jobParameters: <span class="type">JobParameters</span> = jobLauncherTestUtils.uniqueJobParameters</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">        jobLauncherTestUtils.job = job</span><br><span class="line">        <span class="keyword">this</span>.jobExecution = jobLauncherTestUtils.launchJob(jobParameters)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">CsvWriterConfigurationTest</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> csvWriterJob: Job,</span><br><span class="line">) : BatchTestSupport() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `csvWriterJob test`<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//given</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">//when</span></span><br><span class="line">        launchJob(csvWriterJob)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//then</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> jobLauncherTestUtils: JobLauncherTestUtils</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `csvWriterJob test 슈퍼 클래스에 없는 경우 직접 DI 받아 job을 실헹 해야한다`<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//given</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">//when</span></span><br><span class="line">        jobLauncherTestUtils.job = job</span><br><span class="line">        jobLauncherTestUtils.launchJob(job)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//then</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>배치 테스트를 위해서는 Job을 실행시켜야 합니다. 이것을 편리하게 도와주는 것이 <code>launchJob()</code>메서드입니다. <code>JobLauncherTestUtils</code>의 <code>launchJob()</code> 메서드를 한 번 감싸서 사용하는 용도로 특별하건 없습니다. 슈퍼 클래스에서 의존성을 주입받지 않으면 실제 테스트에 계속 DI를 받아 사용해야 하기 때문에 슈퍼 클래스에서 해당 기능을 제공합니다. JobParameters가 필요한 경우 <code>JobParameters</code>를 전달하면 됩니다. 그렇지 않은 경우에는 스프링 배치에서 자체적으로 유니크한 <code>JobParameters</code>을 생성하는 기본값을 지정했습니다.</p><h3><span id="특정-step만-테스트하고-싶은-경우는">특정 Step만 테스트하고 싶은 경우는 ?</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sampleJob</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    jobBuilderFactory: <span class="type">JobBuilderFactory</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    step1: <span class="type">Step</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    step2: <span class="type">Step</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    step3: <span class="type">Step</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    step4: <span class="type">Step</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    step5: <span class="type">Step</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: Job =</span><br><span class="line">    jobBuilderFactory[<span class="string">"csvWriterJob"</span>]</span><br><span class="line">        .incrementer(RunIdIncrementer())</span><br><span class="line">        .listener(JobReportListener())</span><br><span class="line">        .start(step1)</span><br><span class="line">        .next(step2)</span><br><span class="line">        .next(step3)</span><br><span class="line">        .next(step4)</span><br><span class="line">        .next(step5)</span><br><span class="line">        .build()</span><br></pre></td></tr></table></figure><p>단순한 Job의 경우에는 Step이 여러개로 구성되어 있는 경우는 특정 Step만 테스트를 진행하는 단위 테스트가 필요할 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchTestSupport</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="title">launchStep</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        job: <span class="type">Job</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        stepName: <span class="type">String</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        jobParameters: <span class="type">JobParameters</span> = jobLauncherTestUtils.uniqueJobParameters,</span></span></span><br><span class="line"><span class="function"><span class="params">        executionContext: <span class="type">ExecutionContext</span>? = <span class="literal">null</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.jobExecution = jobLauncherTestUtils.launchStep(stepName, jobParameters, executionContext)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">CsvWriterConfigurationTest</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> csvWriterJob: Job,</span><br><span class="line">) : BatchTestSupport() &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `csvWriterStep test`<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//given</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">//when</span></span><br><span class="line">        launchStep(csvWriterJob, <span class="string">"csvWriterStep"</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//then</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Step 테스트도 마찬가지로 <code>jobLauncherTestUtils.launchStep()</code> 메서드를 활용해서 특정 Step을 실행할 수 있습니다. 개인적으로는 <code>launchStep()</code> 테스트를 진행하는 것은 좋아하지는 않습니다.</p><p><img src="https://raw.githubusercontent.com/cheese10yun/blog-sample/master/batch-study/docs/img/ste-test-1.png" alt=""></p><p>Job name이 <code>name=TestJob</code> 이것을 확인할 수 있습니다. Step을 테스트하기 위해서는 반드시 Job이 있어야 하기 때문에 <code>TestJob</code>으로 연결해서 테스트를 진행하는 것입니다. 이렇게 테스트가 진행되게 되면 문제가 있을 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleJobListener</span> : <span class="type">JobExecutionListener &#123;</span></span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> log <span class="keyword">by</span> logger()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">beforeJob</span><span class="params">(jobExecution: <span class="type">JobExecution</span>)</span></span> &#123;</span><br><span class="line">        log.info(<span class="string">"beforeJob"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">afterJob</span><span class="params">(jobExecution: <span class="type">JobExecution</span>)</span></span> &#123;</span><br><span class="line">        log.info(<span class="string">"afterJob"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CsvWriterJobConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">csvWriterJob</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        jobBuilderFactory: <span class="type">JobBuilderFactory</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">        csvWriterStep: <span class="type">Step</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: Job =</span><br><span class="line">        jobBuilderFactory[<span class="string">"csvWriterJob"</span>]</span><br><span class="line">            .incrementer(RunIdIncrementer())</span><br><span class="line">            .listener(SimpleJobListener())</span><br><span class="line">            .start(csvWriterStep)</span><br><span class="line">            .build()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드처럼 <code>SimpleJobListener</code>로 Job 시작 이전, 이후로 log를 찍는 리스너를 추가하고 <code>launchStep(&quot;csvWriterStep&quot;)</code> Step을 실행시키면 리스너는 동작하지 않습니다. 반면 <code>launchJob(csvWriterJob)</code>은 잘 동작합니다.</p><blockquote><p>launchJob(csvWriterJob) Log<br><img src="https://raw.githubusercontent.com/cheese10yun/blog-sample/master/batch-study/docs/img/ste-test-2.png" alt=""></p></blockquote><blockquote><p>launchStep(“csvWriterStep”) Log<br><img src="https://raw.githubusercontent.com/cheese10yun/blog-sample/master/batch-study/docs/img/ste-test-3.png" alt=""></p></blockquote><p>리스너는 Job에 연결이 된다는 것이지 Step에 연결돼있는 것은 아니며, 위에서 언급했듯 <code>launchStep()</code>은 <code>name=TestJob</code>으로 Job을 실행시키기 때문에 해당 잡에는 리스너가 없어 당연한 결과입니다.</p><p>해당 코드는 단순하게 리스너로 로직을 것이지만 해당 Step에 필요한 리스너라면 예상했던 테스트 결과와 다르게 동작할 수 있습니다. 이러한 문제 때문에 저는 아래와 같은 방식으로 Step 테스트합니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">CsvWriterConfigurationTest</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> csvWriterJob: Job,</span><br><span class="line">    csvWriterStep: Step,</span><br><span class="line">    jobBuilderFactory: JobBuilderFactory,</span><br><span class="line">) : BatchTestSupport() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> job = jobBuilderFactory[<span class="string">"csvWriterStepForTestJob"</span>]</span><br><span class="line">        .incrementer(RunIdIncrementer())</span><br><span class="line">        .listener(SimpleJobListener())</span><br><span class="line">        .start(csvWriterStep)</span><br><span class="line">        .build()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `csvWriterStep job을 직접 생성해서 테스트`<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//given</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">//when</span></span><br><span class="line">        launchJob(job)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//then</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 실제 Job을 생성하고 해당 Job으로 <code>launchJob()</code>메서드를 통해서 Job을 실행시키고 있습니다.</p><p><img src="https://raw.githubusercontent.com/cheese10yun/blog-sample/master/batch-study/docs/img/ste-test-4.png" alt=""><br>해당 결과 리스너의 로그 및 Job name이 <code>name=csvWriterStepForTestJob</code>으로 테스트를 진행하는 것을 확인할 수 있습니다.</p><p>그 밖에도 Job을 직접 생성할 수 있으니 다양한 방법으로 테스트를 진행할 수 있습니다. 예를 들어 특정 step 몇 개를 연결해서 단위 테스트해볼 수 있으며, Flow와 같은 배치 Step의 순서에 대한 Flow를 직접 정의해서 테스트할 수 있습니다.</p><h3><span id="테스트-데이터-세팅은">테스트 데이터 세팅은?</span></h3><p>배치 애플리케이션 여러 여러 테이블의 데이터를 읽어 오고, 여러 테이블에 데이터를 저장하는 경우가 빈번합니다. 이런 경우 테스트를 작성하기 위한 <code>given</code>절에 해당하는 데이터 세팅이 많이 번거롭습니다.</p><h3><span id="jpa-기반-세팅">JPA 기반 세팅</span></h3><p>테스트를 진행할 때 <code>given</code>을 JPA 기반으로 작성하기 위해서는 <code>Repositroy</code>를 주입받아 save 해서 테스트하는 것이 일반적입니다. 위에서도 언급했지만 여러 테이블의 조회가 필요하니 그 필요한 테이블만큼 <code>Repositroy</code>를 주입 받아야 하는데 이것이 생각보다 귀찮고 코딩의 흐름을 방해합니다.</p><p>테스트 코드를 작성하다 ‘아 데이터가 필요하네…’ 하고 다시 테스트 클래스 상위로 올라가 필요한 Repositroy를 주입받고 다시 save를 진행하는 것은 코딩의 흐름을 많이 방해한다고 생각합니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchTestSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> entityManagerFactory: EntityManagerFactory</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">val</span> entityManager <span class="keyword">by</span> lazy &#123; entityManagerFactory.createEntityManager() &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">save</span><span class="params">(entity: <span class="type">T</span>)</span></span>: T &#123;</span><br><span class="line">        entityManager.transaction.let &#123; transaction -&gt;</span><br><span class="line">            transaction.begin()</span><br><span class="line">            entityManager.persist(entity)</span><br><span class="line">            transaction.commit()</span><br><span class="line">            entityManager.clear()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> entity</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">saveAll</span><span class="params">(entities: <span class="type">List</span>&lt;<span class="type">T</span>&gt;)</span></span>: List&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">val</span> entityManager = entityManagerFactory.createEntityManager()</span><br><span class="line">        entityManager.transaction.let &#123; transaction -&gt;</span><br><span class="line">            transaction.begin()</span><br><span class="line">            <span class="keyword">for</span> (entity <span class="keyword">in</span> entities) &#123;</span><br><span class="line">                entityManager.persist(entity)</span><br><span class="line">            &#125;</span><br><span class="line">            transaction.commit()</span><br><span class="line">            entityManager.clear()</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> entities</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위에서 언급한 문제를 해결하기 위해서 <code>BatchTestSupport</code>는 해당 기능을 제공합니다. <code>EntityManagerFactory</code>를 주입받아 <code>EntityManager</code>를 직접 생성하여 해당 매니저로 트랜잭션을 진행시켜 필요한 데이터를 세팅합니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">CsvWriterConfigurationTest</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> csvWriterJob: Job,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> paymentRepository: PaymentRepository</span><br><span class="line">    ...</span><br><span class="line">) : BatchTestSupport() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span> </span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `csvWriterJob repositroy를 DI 받아 테스트 진행`<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//given</span></span><br><span class="line">        (<span class="number">1.</span><span class="number">.10</span>).map &#123;</span><br><span class="line">            Payment(</span><br><span class="line">                amount = it.toBigDecimal(),</span><br><span class="line">                orderId = it.toLong()</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">            .also &#123;</span><br><span class="line">                paymentRepository.saveAll(it)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//when</span></span><br><span class="line">        launchJob(csvWriterJob)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//then</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `csvWriterJob test`<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//given</span></span><br><span class="line">        (<span class="number">1.</span><span class="number">.10</span>).map &#123;</span><br><span class="line">            Payment(</span><br><span class="line">                amount = it.toBigDecimal(),</span><br><span class="line">                orderId = it.toLong()</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">            .persist()</span><br><span class="line"></span><br><span class="line">        <span class="comment">//when</span></span><br><span class="line">        launchJob(csvWriterJob)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//then</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>위 테스트 코드는 Repositroy를 주입받아 테스트, <code>BatchTestSupport</code>를 기반으로 테스트하는 코드입니다. 해당 코드는 단순하지만 테스트에 필요한 <code>Repositroy</code>가 많아지면 <code>BatchTestSupport</code> 기반으로 테스트하는 것이 효율적입니다.</p><h3><span id="sql-기반-세팅">SQL 기반 세팅</span></h3><p>프로젝트가 JPA 기반으로 진행하고 있다면 코드 냥이 많아 지나더라도 JPA 기반으로 테스트하는 것이 장기적으로 좋다고 생각한다. 하지만 JPA로 데이터 셋업이 번거롭고, 특정 시점으로 데이터를 Set Up 하기에는 어려운 부분이 있다. 그런 경우 유용한 방법이 <code>@Sql</code>을 기반으로 데이터를 세팅하는 것이다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> payment (amount, order_id)</span><br><span class="line"><span class="keyword">values</span> (<span class="number">100</span>, <span class="number">1</span>),</span><br><span class="line">       ...</span><br><span class="line">       (<span class="number">100</span>, <span class="number">1</span>),</span><br><span class="line">       (<span class="number">100</span>, <span class="number">1</span>)</span><br><span class="line">;</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="meta">@Sql(<span class="meta-string">"/csv-setup.sql"</span>)</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `csvWriterJob sql 테스트 진행`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//given</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//when</span></span><br><span class="line">    launchJob(csvWriterJob)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then</span></span><br><span class="line">    thenBatchCompleted()</span><br><span class="line"></span><br><span class="line">    deleteAll(QPayment.payment)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/test/resources/csv-setup.sql</code> 해당 경로에 SQL 파일을 위치시키고 <code>@Sql</code>으로 해당 경로를 지정하면 해당 SQL 기반으로 데이터를 세팅합니다. <code>@Sql</code>는 테스트 메서드 단위로 실행되기 때문에 편리하지만 SQL의 단순 문자열 기반으로 관리되기 때문에 엔티티가 변경되는 경우 유지 보수가 어려운 부분들이 있습니다. <strong>해당 엔티티가 변경될 일이 거의 없거나. 데이터의 특정 시점을 객체 기반으로 만들기 어려운 경우 사용하는 것을 권장합니다.</strong></p><h3><span id="테스트-검증은">테스트 검증은?</span></h3><p>테스트 검증 시 여러 테이블에 대한 변경 작업이 발생했을 경우 모든 변경에 대한 테스트를 작성해야 합니다. 우선 then에서 검증할 엔티티의 개수만큼 <code>Repositroy</code>를 주입받아야 합니다. 이는 위에서도 언급했듯이 코딩의 흐름에 악영향을 미칩니다. 무엇보다 테스트 검증을 위한 조회를 <code>Repositroy</code>를 의존하게 되면 <strong>오직 테스트 코드 검증을 위한 조회 로직이 필요하게 됩니다.</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `csvWriterJob 테스트 코드만을 위한 코드`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//given</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//when</span></span><br><span class="line">    launchJob(csvWriterJob)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then</span></span><br><span class="line">    thenBatchCompleted()</span><br><span class="line">    paymentRepository.findByxxxxx() <span class="comment">// 오직 테스트 코드엑서만 사용한다</span></span><br><span class="line"></span><br><span class="line">    deleteAll(QPayment.payment)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 테스트의 검증은 paymentRepository 기반으로 진행하고 있습니다. 그런데 검증을 위해 조회 코드가 없어 만들려고 하는데 <strong>이 코드는 오직 테스트 검증 시에만 사용하게 되는 코드입니다. 이렇게 테스트를 위해서 특정 메서드가 테스트 스코프가 아닌 영역에 있다는 거 자체가 좋지 않은 패턴, 설계라고 생각합니다.</strong></p><p>이렇게 어려운 부분들을 해결하기 위해서 Query DSL 기반으로 조회를 진행할 수 있는 <code>JPAQueryFactory</code>를 <code>BatchTestSupport</code>에서 지원하고 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">CsvReaderJobConfigurationTest</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> csvReaderJob: Job,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> paymentRepository: PaymentRepository</span><br><span class="line">) : BatchTestSupport() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `csvReaderJob repository 기반 테스트`<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//given</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//when</span></span><br><span class="line">        launchJob(csvReaderJob)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//then</span></span><br><span class="line">        thenBatchCompleted()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> payments = paymentRepository.findByOrderId(<span class="number">1</span>L)</span><br><span class="line"></span><br><span class="line">        then(payments).hasSize(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">        deleteAll(QPayment.payment)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `csvReaderJob JPAQueryFactory 기반 테스트`<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//given</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//when</span></span><br><span class="line">        launchJob(csvReaderJob)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//then</span></span><br><span class="line">        thenBatchCompleted()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> payments = query.selectFrom(QPayment.payment)</span><br><span class="line">            .where(QPayment.payment.orderId.eq(<span class="number">1</span>L))</span><br><span class="line">            .fetch()</span><br><span class="line"></span><br><span class="line">        then(payments).hasSize(<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">        deleteAll(QPayment.payment)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>repository 기반으로 테스트 진행할 할 때, 당연하지만 해당 Repositroy를 주입받아야 하며 검증 조회 메서드가 없는 경우 오직 테스트 코드에서 사용하기 위해서 메서드를 구현해야 합니다. 검증할 엔티티가 많아지면 그만큼 위 작업을 반복해야 합니다.</p><p>JPAQueryFactory 기반으로 테스트는 Query DSL 방식으로 검증을 진행하기 때문에 불필요한 DI, 조회 검증 메서드는 테스트에서 직접 구현해서 이런 문제를 해결할 수 있습니다.</p><h3><span id="테스트-검증-이후-데이터-제거는">테스트 검증 이후 데이터 제거는 ?</span></h3><p>스프링 배치 애플리케이션은 <code>@Transactional</code>으로 시작할 수 없습니다. 그 결과 테스트 메서드가 끝난 이후에 <strong>자동으로 해당 데이터가 롤백 되지 않으며 데이터가 남아 있어 다른 테스트 코드에 영향을 주게 됩니다.</strong> 그러기 때문에 테스트가 끝난 이후에 데이터를 제거하는 작업을 해야 합니다. 반복적인 이야기이지만 Repositroy 기반으로 해당 작업을 하기 위해서는 의존성을 주입받아야 합니다. 이것들을 쉽게 처리할 수 있게 <code>BatchTestSupport</code>에서 <code>deleteAll()</code> 메서드를 지원합니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BatchTestSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> entityManagerFactory: EntityManagerFactory</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">val</span> entityManager <span class="keyword">by</span> lazy &#123; entityManagerFactory.createEntityManager() &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">deleteAll</span><span class="params">(path: <span class="type">EntityPath</span>&lt;<span class="type">T</span>&gt;)</span></span> &#123;</span><br><span class="line">        entityManager.transaction.let &#123; transaction -&gt;</span><br><span class="line">            transaction.begin()</span><br><span class="line">            query.delete(path).execute()</span><br><span class="line">            transaction.commit()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">CsvReaderJobConfigurationTest</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> csvReaderJob: Job</span><br><span class="line">) : BatchTestSupport() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">deleteAll</span><span class="params">()</span></span> &#123;</span><br><span class="line">        deleteAll(QPayment.payment)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>BatchTestSupport</code>에서 엔티티 매니저를 직접 생성해서 <code>JPAQueryFactory</code> 기반으로 데이터를 제거합니다.</p><p><img src="https://raw.githubusercontent.com/cheese10yun/blog-sample/master/batch-study/docs/img/delete-query.png" alt=""></p><p>실제 delete 쿼리가 동작하는 것을 확인할 수 있습니다.</p><h3><span id="왜-배치에서는-transactional을-물고-시작할-수-없을까">왜 배치에서는 @Transactional을 물고 시작할 수 없을까?</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">CsvReaderJobConfigurationTest</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> csvReaderJob: Job</span><br><span class="line">) : BatchTestSupport() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">deleteAll</span><span class="params">()</span></span> &#123;</span><br><span class="line">        deleteAll(QPayment.payment)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `@Transactional 물고 시작하는 경우 테스트는 정상 동작하지 않습니다`<span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cheese10yun/blog-sample/master/batch-study/docs/img/transactional-test.png" alt=""></p><p>트랜잭션을 물고 시작하면 위와 같은 에러가 발생합니다. 일단 실패하는 것은 확인했고 그 이유에 대해서 정리해 해보겠습니다. 해당 내용은 제가 이해한 내용으로 설명한 드린 부분이기 때문에 맞지 않을 수도 있습니다. 비판적으로 읽어주세요.</p><blockquote><p><img src="https://docs.spring.io/spring-batch/docs/current/reference/html/images/meta-data-erd.png.pagespeed.ce.0yIgDTiutm.png" alt=""><br>이미지 출처 <a href="https://docs.spring.io/spring-batch" rel="external nofollow noopener noreferrer" target="_blank">spring-batch</a></p></blockquote><p>스프링 배치에서는 배치에 대한 메타 정보를 저장하기 위해서 <a href="https://docs.spring.io/spring-batch/docs/current/reference/html/schema-appendix.html#metaDataSchema" rel="external nofollow noopener noreferrer" target="_blank">Meta-Data Schema</a>를 이용합니다. <strong>결과 적으로 해당 정보를 데이터베이스에 저장하기 위해서는 트랜잭잭션이 필요합니다.</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">CsvReaderJobConfigurationTest</span></span>() &#123;...&#125;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cheese10yun/blog-sample/master/batch-study/docs/img/spring-batch-transactional.png" alt=""></p><p>테스트 코드에서 트랜잭션을 물고 시작하면 위와 같은 트랜잭션 원자성이 하나로 묶이게 됩니다. 그렇다면 문제가 생겨서 롤백이 발생하면 어떻게 될까요? 하나의 원자성을 가지고 있기 때문에 <code>Meta-Data Schema</code>에 저장돼있는 데이터까지 모두 롤백 되게 됩니다. 해당 저장소에는 배치에 실패에 대한 기록도 남겨야 하기 때문에 이는 문제가 되기 때문에 이러한 경우 예외가 발생하는 것이라고 생각합니다.</p><h2><span id="그동안-배치-테스트를-작성하면서-느낀-점들">그동안 배치 테스트를 작성하면서 느낀 점들</span></h2><p>그동안 스프링 배치 테스트 코드 작성에 대한 나름의 고찰을 정리해 보았습니다. 배치 애플리케이션 테스트 코드도 다른 환경에서의 테스트 코드 작성 방식과 전체적인 방향성은 크게 다르지 않다고 생각합니다. 스프링 배치라는 프레임워크를 통해서 조금 더 쉽고 안전하게 테스트할 수 있는 방향성에 대해서 포스팅해보았습니다.</p><p>스프링 배치 프레임워크를 사용하기 때문에 테스트 코드 작성 시에도 제약사항을 받는 부분이 있었고 이를 원천적으로 해결하기에는 아직도 역량이 많이 부족하다는 생각이 들었습니다. 그래도 이러한 부분들에 대해서 정리가 저와 같은 고민을 했던 분들에게 조금이라도 도움이 되기를 기원하겠습니다. 긴 글 읽어주셔서 감사합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;spring-batch-test-code&quot;&gt;Spring Batch Test Code&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;스프링 배치 애플리케이션 테스트 코드를 작성하면서 만났던 이슈와 그에 따른 나름의 고찰을 정리한 포스팅 내용입니다.
      
    
    </summary>
    
    
      <category term="Spring Batch" scheme="https://cheese10yun.github.io/tags/Spring-Batch/"/>
    
  </entry>
  
  <entry>
    <title>Spring Batch Application 개발하면서 나름의 고찰 정리</title>
    <link href="https://cheese10yun.github.io/spring-batch-application/"/>
    <id>https://cheese10yun.github.io/spring-batch-application/</id>
    <published>2021-02-10T15:00:00.000Z</published>
    <updated>2021-02-11T12:25:22.732Z</updated>
    
    <content type="html"><![CDATA[<p>현재는 Spring Batch Application 개발을 대부분 개발을 하고 있어, 해당 프레임워크로 개발을 진행하면서 내 나름대로의 고찰을 정리해볼까 한다. 2 ~ 10 개 정도의 배치 애플리케이션을 개발을 하고 크게 늘어날 가능성이 없다면 이 내용을 따르지 않는 것이 더 효율적이라고 생각한다. 본 포스팅은 <strong>배치 애플리케이션을 주로 개발하며 그 배치가 요구 사항에 따라 지속적으로 늘어나는 경우에 해당하는 경우이다.</strong></p><h2><span id="job-한-개당-한-개의-batch-application">Job 한 개당 한 개의 Batch Application</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── batch-app</span><br><span class="line">│   ├── batch-bulk-insert</span><br><span class="line">│   ├── batch-csv-reader</span><br><span class="line">│   ├── batch-csv-writer</span><br><span class="line">│   ├── build</span><br><span class="line">│   ├── build.gradle.kts</span><br><span class="line">│   └── payment.csv</span><br><span class="line">├── batch-support</span><br><span class="line">│   ├── batch-support</span><br><span class="line">│   ├── batch-test</span><br><span class="line">│   ├── build</span><br><span class="line">│   └── build.gradle.kts</span><br><span class="line">├── build</span><br></pre></td></tr></table></figure><p>현재 속해 있는 팀에는 전체 배치 애플리케이션은 150 ~ 250개 정도 되는 거 같다. 한 배치 애플리케이션에 Job들이 40 ~ 60 정도 있게 된다. <strong>나의 주관적인 생각이지만 Job 한 개당 한 개의 애플리케이션이 유지 보수하기 좋다고 생각한다.</strong></p><p>조금 다른 이야기이긴 하지만, 그동안 유지 보수 좋으며 확장성에 열려있는 구조를 갖기 위해서 많은 노력 및 학습을 진행을 해봤고 관련 내용으로 포스팅도 했다. 이러한 원칙들도 중요했지만 최근에 들어서는 이런 것들 보다 더 중요한 것은 <strong>애플리케이션의 크기를 작게 유지하는 하는 것이라는 것을 느끼게 되었다.</strong> 결국 애플리케이션이 커지면 앞서 했던 노력들은 물거품이 되기 쉽다고 생각한다.</p><p><strong>최근 Job 한 개당 한 개의 Batch Application 개발을 진행하고 있으며 장단점이 있지만 장점이 압도적으로 많다고 생각한다.</strong></p><h3><span id="단점">단점</span></h3><h4><span id="jar-파일">Jar 파일</span></h4><p>기존 방식은 결국 한 개의 프로젝트에 여러 Job이(Bean)이 있는 형태로 1개의 Jar 파일로 job name 기반으로 여러 잡들을 실행하게 된다. 그렇게 되면 1개의 Jar 파일만 있으면 실행이 가능한 구조이다.</p><p>그러나 Job 한 개당 한 개의 Batch Application을 하게 되면 Jar 파일이 Job 개수만큼 증가하게 되며 이것을 관리해야 하기 때문에 가장 큰 단점이라고 생각한다.</p><h4><span id="테스트-빌드의-속도">테스트 빌드의 속도</span></h4><p>기존 방식을 사용해서 배치 애플리케이션 테스트 코드를 작성하면 스프링 빈 컨텍스트를 여러 Job들이 공유해서 사용할 수 있게 된다. 물론 @MockBean, @TestPropertySource 등 Environment가 변경되면 스프링 빈 컨텍스트를 다시 띄우기는 하지만 이것은 논외로 하겠다.</p><p>기존 방식은 공유해서 사용하기 때문에 압도적으로 빠르다. 하지만 배치 애플리케이션을 분리하면 스프링 빈 컨텍스트를 공유할 방법이 없다. 서로 다른 애플리케이션이기 때문에 공유 자체가 말이 안 된다. 그러기 때문에 배치 애플리케이션 개수만큼 스프링 빈 컨텍스트를 띄우고 죽는 시간이 추가되며 전체 테스트 시간이 많이 발생한다.</p><h3><span id="장점">장점</span></h3><p>단점이 있지만 결국 모든 단점을 상쇄 시킬 만큼의 충분한 장점이 있다고 생각한다. 위에서도 언급했듯이 애플리케이션의 크기가 작게 유지할 수 있는 게 가장 큰 장점이다.</p><p>하나의 배치 애플리케이션의 수십 개의 Job 중 Job name으로 실행시키는 것은 거대한 모노릭틱 서비스와 같다. 아니 배치의 경우는 더 안 좋은 영향을 미친다. 모노리틱 같은 경우는 어쨌든 해당 기능을 수행하기 위해서 수많은 디펜더 시가 필요하다. 하지만 배치의 경우에는 한 개의 Job만 실행시키기 때문에 해당 Job의 디펜던시 외에는 필요가 없다. 그렇기 때문에 배치의 경우가 훨씬 더 독립적인 애플리케이션을 유지하는 게 좋다고 생각한다.</p><p>결국 애플리케이션을 독립적(작은 크기로)으로 유지하면 유지 보수, 아키텍트 구조 개선, 테스트 코드 작성 등등 다양한 이점들이 있고 실제로 이런 형태로 개발을 하고 있다.</p><h2><span id="spring-data-flow">Spring Data Flow</span></h2><p>만약 배치 애플리케이션을 주로 만들고 그 개수가 지속적으로 늘어날 예정이라면  <a href="https://dataflow.spring.io/" rel="external nofollow noopener noreferrer" target="_blank">Spring Data Flow</a>를 강력하게 권장한다.</p><p>Spring Cloud Deployer를 쿠버네테스를 지원하기 때문에 배치 애플리케이션에 대해서 배치 오케스트레이션의 편의성을 높게 가진다. 기조 배치 애플리케이션은 젠킨스를 이용해서 사용하는데 이러한 모든 것을 스프링 데이터 플로우에서 지원해 주며 배치 테이블에 있는 메타 정보에 대한 결과 화면을 제공해 준다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;현재는 Spring Batch Application 개발을 대부분 개발을 하고 있어, 해당 프레임워크로 개발을 진행하면서 내 나름대로의 고찰을 정리해볼까 한다. 2 ~ 10 개 정도의 배치 애플리케이션을 개발을 하고 크게 늘어날 가능성이 없다면 
      
    
    </summary>
    
    
      <category term="Spring Batch" scheme="https://cheese10yun.github.io/tags/Spring-Batch/"/>
    
  </entry>
  
  <entry>
    <title>Spring Batch CSV Reader &amp; Writer</title>
    <link href="https://cheese10yun.github.io/spring-batch-writer-csv/"/>
    <id>https://cheese10yun.github.io/spring-batch-writer-csv/</id>
    <published>2020-12-18T15:00:00.000Z</published>
    <updated>2021-02-11T13:08:47.099Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Batch를 이용해서 데이터베이스에 저장되어 있는 정보를 CSV file로 저장을 하는 방법에 대해서 작성해보겠습니다.</p><h1><span id="csv-writer">CSV Writer</span></h1><h2><span id="데이터-흐름">데이터 흐름</span></h2><h3><span id="payment">payment</span></h3><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/batch-study/docs/img/table_payment.png" alt=""></p><h3><span id="csv">csv</span></h3><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/batch-study/docs/img/csv-format.png" alt=""></p><p>데이터의 흐름은 간단합니다. payment table -&gt; <code>payment.csv</code>으로 변경됩니다. payment table의 불필요한 칼럼 id, <code>created_ay</code>, <code>updated_at은</code> 빼고 <code>amount</code>, <code>order_id</code>만 CSV에 저장하겠습니다.</p><h2><span id="batch-code">Batch Code</span></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CsvWriterJobConfiguration</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> jobBuilderFactory: JobBuilderFactory,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> jobDataSetUpListener: JobDataSetUpListener,</span><br><span class="line">    entityManagerFactory: EntityManagerFactory</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> CHUNK_SIZE = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">csvWriterJob</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        csvWriterStep: <span class="type">Step</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: Job =</span><br><span class="line">        jobBuilderFactory[<span class="string">"csvWriterJob"</span>]</span><br><span class="line">            .incrementer(RunIdIncrementer())</span><br><span class="line">            .listener(jobDataSetUpListener)</span><br><span class="line">            .start(csvWriterStep)</span><br><span class="line">            .build()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@JobScope</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">csvWriterStep</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        stepBuilderFactory: <span class="type">StepBuilderFactory</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: Step =</span><br><span class="line">        stepBuilderFactory[<span class="string">"csvWriterStep"</span>]</span><br><span class="line">            .chunk&lt;Payment, PaymentCsv&gt;(CHUNK_SIZE)</span><br><span class="line">            .reader(reader)</span><br><span class="line">            .writer(writer)</span><br><span class="line">            .build()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> reader: JpaPagingItemReader&lt;Payment&gt; =</span><br><span class="line">        JpaPagingItemReaderBuilder&lt;Payment&gt;()</span><br><span class="line">            .queryString(<span class="string">"SELECT p FROM Payment p"</span>)</span><br><span class="line">            .entityManagerFactory(entityManagerFactory)</span><br><span class="line">            .name(<span class="string">"readerPayment"</span>)</span><br><span class="line">            .build()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> writer: FlatFileItemWriter&lt;PaymentCsv&gt; =</span><br><span class="line">        FlatFileItemWriterBuilder&lt;PaymentCsv&gt;()</span><br><span class="line">            .name(<span class="string">"writerPayment"</span>)</span><br><span class="line">            .resource(FileSystemResource(<span class="string">"src/main/resources/payment.csv"</span>))</span><br><span class="line">            .append(<span class="literal">true</span>)</span><br><span class="line">            .lineAggregator(PaymentCsvMapper().delimitedLineAggregator())</span><br><span class="line">            .headerCallback &#123;</span><br><span class="line">                it.write(PaymentCsvMapper().headerNames.joinToString(<span class="string">","</span>))</span><br><span class="line">            &#125;</span><br><span class="line">            .encoding(StandardCharsets.UTF_8.name())</span><br><span class="line">            .build()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentCsv</span></span>(</span><br><span class="line">    <span class="keyword">val</span> amount: BigDecimal,</span><br><span class="line">    <span class="keyword">val</span> orderId: <span class="built_in">Long</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentCsvMapper</span> :<span class="type"></span></span></span><br><span class="line">    CsvLineAggregator&lt;PaymentCsv&gt; &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">val</span> headerNames: Array&lt;String&gt; = arrayOf(</span><br><span class="line">        <span class="string">"amount"</span>, <span class="string">"orderId"</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="job">Job</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">csvWriterJob</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    csvWriterStep: <span class="type">Step</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: Job =</span><br><span class="line">    jobBuilderFactory[<span class="string">"csvWriterJob"</span>]</span><br><span class="line">        .incrementer(RunIdIncrementer()) <span class="comment">// (1)</span></span><br><span class="line">        .listener(jobDataSetUpListener) <span class="comment">// (2)</span></span><br><span class="line">        .start(csvWriterStep) <span class="comment">// (3)</span></span><br><span class="line">        .build()</span><br></pre></td></tr></table></figure><ul><li>(1): 동일한 job parameter으로 여러 번 job을 실행시켜도 문제없게 <code>run.id</code>를 증가시킵니다.</li><li>(2): <code>beforeJob</code> payment 100 rows를 insert 합니다.</li><li>(3): <code>csvWriterStep</code> 해당 step을 실생 시킵니다.</li></ul><h3><span id="step">Step</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@JobScope</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">csvWriterStep</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    stepBuilderFactory: <span class="type">StepBuilderFactory</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span>: Step =</span><br><span class="line">    stepBuilderFactory[<span class="string">"csvWriterStep"</span>]</span><br><span class="line">        .chunk&lt;Payment, PaymentCsv&gt;(CHUNK_SIZE) <span class="comment">// (1)</span></span><br><span class="line">        .reader(reader) <span class="comment">// (2)</span></span><br><span class="line">        .writer(writer) <span class="comment">// (3)</span></span><br><span class="line">        .build()</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> reader: JpaPagingItemReader&lt;Payment&gt; =</span><br><span class="line">    JpaPagingItemReaderBuilder&lt;Payment&gt;()</span><br><span class="line">        .queryString(<span class="string">"SELECT p FROM Payment p"</span>)</span><br><span class="line">        .entityManagerFactory(entityManagerFactory)</span><br><span class="line">        .name(<span class="string">"readerPayment"</span>)</span><br><span class="line">        .build()</span><br></pre></td></tr></table></figure><ul><li>(1): chunk size 및, inout, output 클래스 지정합니다.</li><li>(2): <code>readerPayment</code>는 전체를 조회합니다. (chuk size 별로 limit ?, ? query가 발생합니다. 한 번에 모두 가져오는 구조는 아닙니다.)</li><li>(3): <code>writerPayment</code> FlatFileItemWriterBuilder 기반으로 Writer을 진행할 CSV에 대한 정보를 생성합니다.</li></ul><h3><span id="writerpayment">writerPayment</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">val</span> writer: FlatFileItemWriter&lt;PaymentCsv&gt; =</span><br><span class="line">    FlatFileItemWriterBuilder&lt;PaymentCsv&gt;()</span><br><span class="line">        .name(<span class="string">"writerPayment"</span>)</span><br><span class="line">        .resource(FileSystemResource(<span class="string">"src/main/resources/payment.csv"</span>)) <span class="comment">// (1)</span></span><br><span class="line">        .append(<span class="literal">true</span>) <span class="comment">// (2)</span></span><br><span class="line">        .lineAggregator(PaymentCsvMapper().delimitedLineAggregator()) <span class="comment">// (3)</span></span><br><span class="line">        .headerCallback &#123; <span class="comment">// (4)</span></span><br><span class="line">            it.write(PaymentCsvMapper().headerNames.joinToString(<span class="string">","</span>))</span><br><span class="line">        &#125;</span><br><span class="line">        .encoding(StandardCharsets.UTF_8.name())</span><br><span class="line">        .build()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CsvLineAggregator</span>&lt;<span class="type">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">val</span> headerNames: Array&lt;String&gt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">delimitedLineAggregator</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        delimiter: <span class="type">String</span> = <span class="string">","</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span> =</span><br><span class="line">        <span class="keyword">object</span> : DelimitedLineAggregator&lt;T&gt;() &#123;</span><br><span class="line">            init &#123;</span><br><span class="line">                setDelimiter(delimiter) <span class="comment">// 3-1</span></span><br><span class="line">                setFieldExtractor(</span><br><span class="line">                    <span class="keyword">object</span> : BeanWrapperFieldExtractor&lt;T&gt;() &#123;</span><br><span class="line">                        init &#123;</span><br><span class="line">                            setNames(headerNames) <span class="comment">// // 3-2</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>(1): <code>output</code>을 사용할 <code>Resource</code>을 지정합니다.</li><li>(2): <code>ture</code>을 지정하면 해당 경로에 이미 파일이 있으면 파일을 추가합니다.</li><li>(3): csv 파일에 집계할 방식에 대해서 작성합니다. <code>CsvLineAggregator</code> 인터페이스를 기준으로 진행됩니다. csv 필드에 대한 구분은 <code>,</code>을 사용하며, <code>PaymentCsvMapper</code> 기반으로 필드 순서가 결정됩니다.</li><li>(4): csv 파일에 header 정보를 입력합니다. <code>PaymentCsvMapper</code>에 headNames를 사용해서 (3)에서 사용한 필드 순서와 동일하게 지정합니다.</li></ul><p><code>CsvLineAggregator</code>, <code>PaymentCsvMapper</code>를 사용하지 않아도 문제는 없지만 Srping Batch에서 지원하는 <code>lineAggregator</code>, <code>headerCallback</code> 사용법을 단순화 시켰습니다. 프레임 워크에서는 상대적으로 저수준의 기능을 제공해주기 때문에 각 서비스에서 고수준으로 변경해서 사용하는 방법을 고려해서 개발하는 것도 개발자에게 중요한 스킬이라고 생각합니다.</p><h2><span id="실행-결과">실행 결과</span></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar build/libs/study<span class="number">-0.0</span><span class="number">.1</span>-SNAPSHOT.jar --job.name=csvWriterJob</span><br></pre></td></tr></table></figure><p>해당 테스트는 <code>docker-compose.yaml</code> 기반 mysql 5.7 기반으로 동작 됩니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">amount,orderId</span><br><span class="line">1.00,1</span><br><span class="line">2.00,2</span><br><span class="line">3.00,3</span><br><span class="line">4.00,4</span><br><span class="line">5.00,5</span><br><span class="line">6.00,6</span><br><span class="line">7.00,7</span><br><span class="line">8.00,8</span><br><span class="line">9.00,9</span><br><span class="line">10.00,10</span><br><span class="line">11.00,11</span><br><span class="line">12.00,12</span><br><span class="line">13.00,13</span><br><span class="line">14.00,14</span><br><span class="line">15.00,15</span><br><span class="line">16.00,16</span><br><span class="line">17.00,17</span><br><span class="line">18.00,18</span><br><span class="line">19.00,19</span><br><span class="line">20.00,20</span><br><span class="line">21.00,21</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>amount, orderId</code> header 정보 및 데이터가 정상적으로 저장돼있는 것을 확인할 수 있습니다.</p><h2><span id="intellij-plugins">IntelliJ Plugins</span></h2><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/batch-study/docs/img/csv-rainbow.png" alt=""><br><img src="https://github.com/cheese10yun/blog-sample/raw/master/batch-study/docs/img/csv-plugin.png" alt=""></p><p>IntelliJ 사용한다면 위 두 개의 CSV 플러그인을 추천드립니다.</p><h1><span id="csv-reader">CSV Reader</span></h1><p>Spring Batch를 이용해서 CSV 파일을 읽어 데이터베이스에 저장하는 방법에 대해서 작성해보겠습니다.</p><h2><span id="데이터-흐름">데이터 흐름</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">amount,orderId</span><br><span class="line">1.00,1</span><br><span class="line">2.00,2</span><br><span class="line">3.00,3</span><br><span class="line">4.00,4</span><br><span class="line">5.00,5</span><br><span class="line">6.00,6</span><br><span class="line">7.00,7</span><br><span class="line">8.00,8</span><br><span class="line">9.00,9</span><br><span class="line">10.00,10</span><br><span class="line">11.00,11</span><br><span class="line">12.00,12</span><br><span class="line">13.00,13</span><br><span class="line">14.00,14</span><br><span class="line">15.00,15</span><br><span class="line">16.00,16</span><br><span class="line">17.00,17</span><br></pre></td></tr></table></figure><p>위 CSV 파일을 읽어 데이터베이스에 저장합니다.</p><h2><span id="batch-code">Batch Code</span></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CsvReaderJobConfiguration</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> jobBuilderFactory: JobBuilderFactory,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> stepBuilderFactory: StepBuilderFactory,</span><br><span class="line">    entityManagerFactory: EntityManagerFactory</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> CHUNK_SIZE = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">csvReaderJob</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        csvReaderStep: <span class="type">Step</span></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span>: Job = jobBuilderFactory[<span class="string">"csvReaderJob"</span>]</span><br><span class="line">        .incrementer(RunIdIncrementer()) <span class="comment">// (1)</span></span><br><span class="line">        .listener(JobReportListener()) <span class="comment">// (2)</span></span><br><span class="line">        .start(csvReaderStep)</span><br><span class="line">        .build()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@JobScope</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">csvReaderStep</span><span class="params">()</span></span>: Step =</span><br><span class="line">        stepBuilderFactory[<span class="string">"csvReaderStep"</span>]</span><br><span class="line">            .chunk&lt;PaymentCsv, Payment&gt;(CHUNK_SIZE) <span class="comment">// (3)</span></span><br><span class="line">            .reader(reader) <span class="comment">// (4)</span></span><br><span class="line">            .processor(processor) <span class="comment">// (5)</span></span><br><span class="line">            .writer(writer) <span class="comment">// (6)</span></span><br><span class="line">            .build()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> processor: ItemProcessor&lt;<span class="keyword">in</span> PaymentCsv, <span class="keyword">out</span> Payment&gt; =</span><br><span class="line">        ItemProcessor &#123;</span><br><span class="line">            it.toEntity()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> reader: FlatFileItemReader&lt;PaymentCsv&gt; =</span><br><span class="line">        FlatFileItemReaderBuilder&lt;PaymentCsv&gt;()</span><br><span class="line">            .name(<span class="string">"paymentCsv"</span>)</span><br><span class="line">            .resource(ClassPathResource(<span class="string">"/payment.csv"</span>)) <span class="comment">// (7)</span></span><br><span class="line">            .linesToSkip(<span class="number">1</span>) <span class="comment">// (8)</span></span><br><span class="line">            .delimited()</span><br><span class="line">            .delimiter(DelimitedLineTokenizer.DELIMITER_COMMA) <span class="comment">// (9)</span></span><br><span class="line">            .names(<span class="string">"amount"</span>, <span class="string">"orderId"</span>) <span class="comment">// (10)</span></span><br><span class="line">            .fieldSetMapper &#123; <span class="comment">// 11</span></span><br><span class="line">                PaymentCsv(</span><br><span class="line">                    amount = it.readBigDecimal(<span class="string">"amount"</span>),</span><br><span class="line">                    orderId = it.readLong(<span class="string">"orderId"</span>)</span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">            .build()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// (12)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> writer: JpaItemWriter&lt;Payment&gt; =</span><br><span class="line">        JpaItemWriterBuilder&lt;Payment&gt;()</span><br><span class="line">            .entityManagerFactory(entityManagerFactory)</span><br><span class="line">            .build()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="job">Job</span></h3><ul><li>(1): 동일한 job parameter으로 여러 번 job을 실행시켜도 문제없게 <code>run.id</code>를 증가시킵니다.</li><li>(3): <code>csvReaderStep</code> 해당 step을 실생 시킵니다.</li></ul><h3><span id="step">Step</span></h3><ul><li>(3): chunk size 및, inout, output 클래스 지정합니다.</li><li>(4): <code>readerPayment</code> CSV 파일을 라인별로 읽습니다.</li><li>(5): <code>processor</code> 읽은 CSV 파일을 Entity POJO 객체를 생성해서 넘겨줍니다.</li><li>(6): <code>writer</code> JpaItemWriterBuilder를 이용해서 Enttiy를 데이터베이스에 저장합니다.</li><li>(7): <code>ClassPathResource</code>를 이용해서 해당 CSV 파일의 리소스를 지정합니다. classpath 기준으로 <code>resources/payment.csv</code>에 위치한 파일을 읽습니다.</li><li>(8): <code>linesToSkip(1)</code> 첫 번째 라인은 header로 해당 데이터를 skip 합니다.</li><li>(9): <code>DelimitedLineTokenizer.DELIMITER_COMMA</code>은 문자열 <code>&quot;,&quot;</code> 으로 CSV 파일에 대한 구분자 값 문자열을 지정합니다.</li><li>(10): CSV 파일에 필드명을 지정합니다.</li><li>(11): CSV의 DTO객체인 <code>PaymentCsv</code>에 어떻게 바인딩 시킬지 지정합니다.</li><li>(12): <code>entityManagerFactory</code> 기반으로 해당 엔티티를 영속화 합니다.</li></ul><h2><span id="결과">결과</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./gradlew bootJar</span><br><span class="line">$ java -jar build/libs/study-0.0.1-SNAPSHOT.jar --job.name=csvReaderJob</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/batch-study/docs/img/csv_reader_result.png" alt=""><br>해당 데이터가 모두 저장되이 었는것을 확인 할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Spring Batch를 이용해서 데이터베이스에 저장되어 있는 정보를 CSV file로 저장을 하는 방법에 대해서 작성해보겠습니다.&lt;/p&gt;
&lt;h1&gt;&lt;span id=&quot;csv-writer&quot;&gt;CSV Writer&lt;/span&gt;&lt;/h1&gt;
&lt;h2&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="Spring Batch" scheme="https://cheese10yun.github.io/tags/Spring-Batch/"/>
    
      <category term="CSV" scheme="https://cheese10yun.github.io/tags/CSV/"/>
    
  </entry>
  
  <entry>
    <title>Rx Kotlin 이용해서 성능 개선</title>
    <link href="https://cheese10yun.github.io/rx-kotlin/"/>
    <id>https://cheese10yun.github.io/rx-kotlin/</id>
    <published>2020-12-05T14:05:25.000Z</published>
    <updated>2020-12-05T14:08:32.556Z</updated>
    
    <content type="html"><![CDATA[<p>Rx Kotlin를 사용하면 스레드를 더 쉽게 사용할 수 있습니다.</p><h2><span id="시나리오">시나리오</span></h2><p>가장 흔한 케이스로 외부 API를 호출하고 그 결과에 맞게 데이터베이스를 수정하는 방식입니다.</p><ol><li>주문을 시스템 내부 API를 호출해서 진행한다.</li><li>내부 API 시스템 성공 여부에 따라 status를 지정한다.</li></ol><h2><span id="code">Code</span></h2><h3><span id="entity">Entity</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"orders"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>(</span><br><span class="line">    <span class="meta">@Enumerated(EnumType.STRING)</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"status"</span>, nullable = false)</span></span><br><span class="line">    <span class="keyword">var</span> status: OrderStatus</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="keyword">var</span> id: <span class="built_in">Long</span>? = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">toString</span><span class="params">()</span></span>: String &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Order(status=<span class="variable">$status</span>, id=<span class="variable">$id</span>)"</span></span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderStatus</span> </span>&#123;</span><br><span class="line">    READY,</span><br><span class="line">    COMPLETED,</span><br><span class="line">    FAILED</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>엔티티 코드는 간단합니다. id, status를 가지고 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderHttpClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 외부 IO 작업을 진행합니다. block은 100 ms, 80% 성공한다</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">doSomething</span><span class="params">(orderId: <span class="type">Long</span>)</span></span>: <span class="built_in">Boolean</span> &#123;</span><br><span class="line">        runBlocking &#123;</span><br><span class="line">            delay(<span class="number">100</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> random = Random.nextInt(<span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">8</span> &gt; random</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTTP 통신을 하는 Client 코드입니다. 성공과 실패를 리턴하는 간단한 코드입니다. 해당 코드를 호출하면 <code>100ms</code> 블록이 걸리게 설정했습니다.</p><h2><span id="test">Test</span></h2><h3><span id="단일-스레드">단일 스레드</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> `단일 스레드 작업`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> stopWatch = StopWatch()</span><br><span class="line">    <span class="keyword">val</span> orders = givenOrders(<span class="number">1</span>_000) <span class="comment">// READY Status Order를 데이터베이스에 저장함</span></span><br><span class="line">    stopWatch.start()</span><br><span class="line"></span><br><span class="line">    orders</span><br><span class="line">        .forEach &#123;</span><br><span class="line">            <span class="keyword">val</span> result = sampleApi.doSomething(it.id!!)</span><br><span class="line">            <span class="keyword">when</span> &#123;</span><br><span class="line">                result -&gt; it.status = OrderStatus.COMPLETED</span><br><span class="line">                <span class="keyword">else</span> -&gt; it.status = OrderStatus.FAILED</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    stopWatch.stop()</span><br><span class="line">    println(stopWatch.totalTimeSeconds)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>단일 스레드에서 5,000의 api를 호출하여 그 결과에 따라서 데이터베이스 상태를 업데이트하는 코드입니다.</p><h3><span id="멀티-스레드">멀티 스레드</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> `멀티 스레드 작업`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> stopWatch = StopWatch()</span><br><span class="line">    <span class="keyword">val</span> orders = givenOrders(<span class="number">5</span>_000) <span class="comment">// (1)</span></span><br><span class="line">    stopWatch.start()</span><br><span class="line"></span><br><span class="line">    orders</span><br><span class="line">        .toFlowable() <span class="comment">//(2)</span></span><br><span class="line">        .parallel() <span class="comment">//(3)</span></span><br><span class="line">        .runOn(Schedulers.io()) <span class="comment">//(4)</span></span><br><span class="line">        .map &#123;</span><br><span class="line">            println(<span class="string">"Mapping orderId :<span class="subst">$&#123;it.id&#125;</span> <span class="subst">$&#123;Thread.currentThread().name&#125;</span>"</span>)</span><br><span class="line">            <span class="keyword">val</span> result = sampleApi.doSomething(it.id!!) </span><br><span class="line">            Pair(result, it)</span><br><span class="line">        &#125;</span><br><span class="line">        .sequential() <span class="comment">//(5)</span></span><br><span class="line">        .subscribe(</span><br><span class="line">            &#123;</span><br><span class="line">                println(<span class="string">"Received orderId :<span class="subst">$&#123;it.second.id&#125;</span> <span class="subst">$&#123;Thread.currentThread().name&#125;</span>"</span>)</span><br><span class="line">                <span class="keyword">when</span> &#123;</span><br><span class="line">                    it.first -&gt; it.second.status = OrderStatus.COMPLETED</span><br><span class="line">                    <span class="keyword">else</span> -&gt; it.second.status = OrderStatus.FAILED</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                it.printStackTrace()</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                stopWatch.stop()</span><br><span class="line">                println(stopWatch.totalTimeSeconds)</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    runBlocking &#123; delay(<span class="number">5</span>_000) &#125; <span class="comment">//(6)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>(1): order 데이터를 준비합니다.</li><li>(2): Back Pressure 기능을 제공하는 Flowable으로 생성 생성</li><li>(3): CPU 수와 동일하게 ParallelFlowable을 생성할 수 있게 해줍니다.</li><li>(4): ParallelFlowable의 병렬 처리 수준만큼 Scheduler.createWorker를 호출해서 스레드를 생성합니다. Buffer size는 기본 설정 128개와 동일합니다.</li><li>(5): 각 ParallelFlowable의 값을 병합 작업을 진행합니다.</li><li>(6): 해당 작업이 모두 테스트 스레드 <code>Test worker</code>에서 실행되지 않기 때문에 block을 진행합니다.</li></ul><h4><span id="parallel">parallel</span></h4><p><img src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/flowable.parallel.png" alt=""></p><p><code>toFlowable()</code> 메서드로 Flowable 처리를 진행했던 것을 parallel 처리하기 위해서 <code>parallel()</code> 메서드를 사용합니다. 해당 레일은 자체적으로 병렬로 실행되지 않으며 각 레일이 병렬로 실행하려면 <code>runOn()</code>메서드의 호출이 필요합니다. 이때 <code>Schedulers.io()</code>를 사용합니다. <code>Schedulers.io()</code>는 <code>I/O</code> 관련 작업을 수행할 수 있는 무제한의 워커 스레드를 생성하는 스레드를 제공한다. 해당 테스트 환경은 12 코어기 때문에 12 스레드를 사용하게 됩니다.</p><h4><span id="sequential">sequential</span></h4><p><img src="https://raw.github.com/wiki/ReactiveX/RxJava/images/rx-operators/parallelflowable.sequential.png" alt=""></p><p><code>parallel</code>메서 여러 레일을 생성하는 것을 다시 단일 스퀀스로 병합하기 위해서 사용합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">Mapping orderId :15 RxCachedThreadScheduler-3</span><br><span class="line">Mapping orderId :18 RxCachedThreadScheduler-6</span><br><span class="line">Mapping orderId :22 RxCachedThreadScheduler-10</span><br><span class="line">Received orderId :8 RxCachedThreadScheduler-8</span><br><span class="line">Mapping orderId :16 RxCachedThreadScheduler-4</span><br><span class="line">Received orderId :1 RxCachedThreadScheduler-8</span><br><span class="line">Mapping orderId :23 RxCachedThreadScheduler-11</span><br><span class="line">Received orderId :2 RxCachedThreadScheduler-8</span><br><span class="line">Received orderId :3 RxCachedThreadScheduler-8</span><br><span class="line">Received orderId :4 RxCachedThreadScheduler-8</span><br><span class="line">Mapping orderId :14 RxCachedThreadScheduler-2</span><br><span class="line">Received orderId :5 RxCachedThreadScheduler-8</span><br><span class="line">Mapping orderId :24 RxCachedThreadScheduler-12</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><code>Mapping</code>, <code>Received</code> 스레드를 확인 1~12 스레드를 모두 사용하는 것을 확인할 수 있습니다. 해당 스레드는 모두 메인 스레드인 <code>Test worker</code>에서 진행되지 않습니다.</p><h2><span id="비교">비교</span></h2><table><thead><tr><th>데이터 개수</th><th>스레드</th><th>소요 시간</th></tr></thead><tbody><tr><td>5,000</td><td>단일스레드</td><td>8m 58s</td></tr><tr><td>5,000</td><td>12 스레드</td><td>43s</td></tr></tbody></table><p>실행 환경의 CPU Core 수에 따라서 결과는 많이 달라집니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Rx Kotlin를 사용하면 스레드를 더 쉽게 사용할 수 있습니다.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;시나리오&quot;&gt;시나리오&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;가장 흔한 케이스로 외부 API를 호출하고 그 결과에 맞게 데이터베이스를 수정하는 방식입니다.&lt;/p
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Rx Kotlin" scheme="https://cheese10yun.github.io/tags/Rx-Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>JPA @Where 사용법</title>
    <link href="https://cheese10yun.github.io/jpa-where/"/>
    <id>https://cheese10yun.github.io/jpa-where/</id>
    <published>2020-10-09T15:00:00.000Z</published>
    <updated>2020-10-10T05:31:24.214Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/query-dsl" rel="external nofollow noopener noreferrer" target="_blank">Github</a> 공개되어 있습니다.</p></blockquote><p>JPA에서 <code>@Where</code>를 사용하면 엔티티를 조회하는 경우 일괄적인 Where 조건을 추가할 수 있습니다. 코드를 살펴보겠습니다.</p><h2><span id="entity">Entity</span></h2><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/member.png" alt=""></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"member"</span>)</span></span><br><span class="line"><span class="meta">@Where(clause = <span class="meta-string">"status = 'NORMAL'"</span>)</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span></span>(</span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"username"</span>, nullable = false)</span></span><br><span class="line">    <span class="keyword">var</span> username: String,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"age"</span>, nullable = false)</span></span><br><span class="line">    <span class="keyword">var</span> age: <span class="built_in">Int</span> = <span class="number">0</span>,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Enumerated(EnumType.STRING)</span></span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"status"</span>, nullable = false)</span></span><br><span class="line">    <span class="keyword">var</span> status: MemberStatus = MemberStatus.NORMAL,</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ManyToOne(fetch = FetchType.EAGER)</span></span><br><span class="line">    <span class="meta">@JoinColumn(name = <span class="meta-string">"team_id"</span>, nullable = false)</span></span><br><span class="line">    <span class="keyword">var</span> team: Team</span><br><span class="line">) : EntityAuditing() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberStatus</span> </span>&#123;</span><br><span class="line">    NORMAL,</span><br><span class="line">    BAN</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"team"</span>)</span></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Team</span></span>(</span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"name"</span>, nullable = false)</span></span><br><span class="line">    <span class="keyword">var</span> name: String</span><br><span class="line">) : EntityAuditing() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OneToMany(fetch = FetchType.LAZY, mappedBy = <span class="meta-string">"team"</span>)</span></span><br><span class="line">    <span class="keyword">var</span> members: MutableList&lt;Member&gt; = mutableListOf()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>엔티티는 위 코드처럼 ManyToOne &lt;-&gt; OneToMany 관계를 가지며 Member 엔티티의 상태를 표현하는 <code>MemberStatus</code> enum 클래스로 <code>NORMAL</code>, <code>BAN</code> status를 갖습니다. 일반적인 Member의 조회는 <code>NORMAL</code>인 status를 기준으로 한다고 가정했을 경우 엔티티 조회에서 <code>where status = 'NOMAL'</code>의 조건이 추가되어야 합니다. 이런 경우 <code>@Where</code>을 사용하면 유용합니다. 테스트 코드를 통해서 살펴보겠습니다.</p><h2><span id="test-code">Test Code</span></h2><h3><span id="member">Member</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `where sql MemberStatus BAN test`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//given</span></span><br><span class="line">    <span class="keyword">val</span> teamA = save(Team(<span class="string">"teamA"</span>))</span><br><span class="line">    <span class="keyword">val</span> memberId = save(Member(<span class="string">"name"</span>, <span class="number">10</span>, MemberStatus.BAN, teamA)).id!!</span><br><span class="line"></span><br><span class="line">    <span class="comment">//when</span></span><br><span class="line">    <span class="keyword">val</span> member = memberRepository.findById(memberId)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then</span></span><br><span class="line">    then(member.isPresent).isFalse()</span><br><span class="line">    println(<span class="string">"member 조회 여부 : <span class="subst">$&#123;member.isPresent&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/member_where_1.png" alt=""></p><p>member의 조회는 <code>findById</code> 즉 PK로 찾는 코드지만 <code>@Where(clause = &quot;status = 'NORMAL'&quot;)</code>으로 인해서 SQL 로그를 보면 where 조건에 <code>member0_.status = 'NORMAL '</code>가 추가된 것을 확인할 수 있습니다. <code>MemberStatus.BAN</code>상태로 Member를 저장했기 때문에 조회 여부는 <code>false</code>인 것을 확인할 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `where sql MemberStatus NORMAL test`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//given</span></span><br><span class="line">    <span class="keyword">val</span> teamA = save(Team(<span class="string">"teamA"</span>))</span><br><span class="line">    <span class="keyword">val</span> memberId = save(Member(<span class="string">"name"</span>, <span class="number">10</span>, MemberStatus.NORMAL, teamA)).id!!</span><br><span class="line"></span><br><span class="line">    <span class="comment">//when</span></span><br><span class="line">    <span class="keyword">val</span> member = memberRepository.findById(memberId)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then</span></span><br><span class="line">    then(member.isPresent).isTrue()</span><br><span class="line">    println(<span class="string">"member 조회 여부 : <span class="subst">$&#123;member.isPresent&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이번에는 <code>MemberStatus.NORMAL</code>으로 저장하고 조회 해보겠습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/member_where_2.png" alt=""></p><p>member 조회 여부가 <code>true</code>인것을 확인할 수 있습니다.</p><h3><span id="team">Team</span></h3><p>그렇다면 Team 엔티티를 통해서 Lazy Loading 하는 경우에도 Member 엔티티의 <code>@Where(clause = &quot;status = 'NORMAL'&quot;)</code>가 동작하는지를 QueryDSL 기반으로 진행해보겠습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `where sql test`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//given</span></span><br><span class="line">    <span class="keyword">val</span> qTeam = QTeam.team</span><br><span class="line">    <span class="keyword">val</span> teamA = save(Team(<span class="string">"teamA"</span>))</span><br><span class="line">    save(Member(<span class="string">"name"</span>, <span class="number">10</span>, MemberStatus.NORMAL, teamA))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//when</span></span><br><span class="line">    <span class="keyword">val</span> findTeam = Optional.of(query.selectFrom(qTeam).where(qTeam.id.eq(teamA.id)).fetchOne()!!)</span><br><span class="line">    <span class="comment">//then</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> memberSize = findTeam.<span class="keyword">get</span>().members.size</span><br><span class="line">    println(<span class="string">"member size : <span class="variable">$memberSize</span>"</span>)</span><br><span class="line">    println(<span class="string">"team 조회 여부 : <span class="subst">$&#123;findTeam.isPresent&#125;</span>"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/team_where.png" alt=""></p><p>Team 엔티티를 통해서 Member 엔티티를 Lazy Loading 하더라도 <code>@Where(clause = &quot;status = 'NORMAL'&quot;)</code>가 정상적으로 동작하는것을 확인 할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/query-dsl&quot; rel=&quot;external nofollow noopener noreferrer
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Where" scheme="https://cheese10yun.github.io/tags/Where/"/>
    
  </entry>
  
  <entry>
    <title>Mockserver Netty 사용해서 HTTP 통신 Mocking 하기</title>
    <link href="https://cheese10yun.github.io/mock-server-netty/"/>
    <id>https://cheese10yun.github.io/mock-server-netty/</id>
    <published>2020-09-28T15:00:00.000Z</published>
    <updated>2020-09-28T15:38:15.018Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/mockserver-netty" rel="external nofollow noopener noreferrer" target="_blank">Github</a> 공개되어 있습니다.</p></blockquote><p>테스트 코드를 작성할 할 때 외부 서비스와 통신하는 구간은 Mocking 해서 해서 테스트를 진행하게 됩니다. 대표적으로 HTTP 외부 통신이 있습니다. 이와 비슷한 내용으로 <a href="https://cheese10yun.github.io/rest-template-mock-test/">RestTemplate Mock 기반 테스트하기</a>을 포스팅을 했었습니다. 그와 비슷한 주제로 Mockserver Netty 기반으로 Mock Test를 진행하는 방법에 대해서 다루어보겠습니다.</p><h2><span id="mockserver-netty-장점">Mockserver Netty 장점</span></h2><p>직관적이고 쉽게 학습하기 좋은 점도 있지만, <code>MockRestServiceServer</code>에 비해서 가장 큰 장점으로 생각되는 것은 HTTP Client에 대한 제약이 생대적으로 없는 부분입니다. <code>MockRestServiceServer</code> 이름에서부터 설명되지만 <code>ResTemplate</code> 테스트를 위한 서비스입니다. 물론 RestTemplate만을 사용하면 괜찮은 도구라고 생각합니다. 전용 테스트 서비스이니 <code>RestTemplate</code>와 핏이 잘 맞는 부분은 큰 장점입니다. 하지만 <code>RestTemplate</code> 이외의 HTTP Client에 대한 테스트를 진행하기 어려운 점이 있습니다.</p><p>무 것보다도 <code>RestTemplate</code>의존성이 <code>spring-boot-starter-web</code>에 종속해 이따 보니 웹서버 모듈이 아닌 경우에는 <code>RestTemplate</code>를 사용하기 어려운 부분이 있습니다. 특히 프로젝트가 고도화되면 모듈을 세부적으로 나누는 작업을 진행하다 보면 <code>IO</code> 관련된 모듈을 따로 만들게 되는데 이때 <code>spring-boot-starter-web</code> 의존성을 갖는 것이 바람직하지 않는 경우가 있습니다.</p><h2><span id="사용법">사용법</span></h2><h3><span id="의존성-추가">의존성 추가</span></h3><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation(<span class="string">"org.mock-server:mockserver-netty:5.11.1"</span>)</span><br><span class="line">    implementation(<span class="string">"org.mock-server:mockserver-client-java:5.11.1"</span>)</span><br><span class="line"></span><br><span class="line">    implementation(<span class="string">"com.github.kittinunf.fuel:fuel:2.3.0"</span>)</span><br><span class="line">    implementation(<span class="string">"com.github.kittinunf.fuel:fuel-jackson:2.3.0"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>mockserver-netty,</code> <code>mockserver-client-java</code>의존성을 추가합니다. <code>fuel</code>은 Kotlin 기반 HTTP Client 라이브러리으로 실제 HTTP 통신하는 코드를 작성하기 위해 추가했습니다.</p><h3><span id="sample-code">Sample Code</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/sample"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getSample</span><span class="params">()</span></span> = Sample(<span class="string">"foo"</span>, <span class="string">"bar"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Sample</span></span>(</span><br><span class="line">        <span class="keyword">val</span> foo: String,</span><br><span class="line">        <span class="keyword">val</span> bar: String</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>HTTP 호출을 하기 위해서 간단하게 컨트롤러 코드를 작성합니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FuelClient</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> host: String = <span class="string">"http://localhost:8080"</span>,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> objectMapper: ObjectMapper = ObjectMapper()</span><br><span class="line">        .registerKotlinModule()</span><br><span class="line">        .apply &#123; <span class="keyword">this</span>.propertyNamingStrategy = PropertyNamingStrategy.LOWER_CAMEL_CASE &#125;</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getSample</span><span class="params">()</span></span>: SampleResponse = <span class="string">"<span class="variable">$host</span>/sample"</span></span><br><span class="line">        .httpGet()</span><br><span class="line">        .response()</span><br><span class="line">        .first.responseObject&lt;SampleResponse&gt;(objectMapper)</span><br><span class="line">        .third.<span class="keyword">get</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleResponse</span></span>(</span><br><span class="line">    <span class="keyword">val</span> foo: String,</span><br><span class="line">    <span class="keyword">val</span> bar: String</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><code>fuel</code> 기반으로 HTTP 통신을 하는 코드로 위 컨트롤러를 호출하게 됩니다.</p><h3><span id="test-code">Test code</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TestInstance(TestInstance.Lifecycle.PER_CLASS)</span> <span class="comment">// (1)</span></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">FuelClientTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> mockServer: ClientAndServer <span class="comment">// (2)</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">startServer</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.mockServer = ClientAndServer.startClientAndServer(<span class="number">8080</span>) <span class="comment">//(3)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">stopServer</span><span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.mockServer.stop()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `getSample test`<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//given</span></span><br><span class="line">        <span class="keyword">val</span> client = FuelClient() <span class="comment">// (4)</span></span><br><span class="line">        <span class="keyword">val</span> responseBody = <span class="string">"""</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                      "foo": "foo",</span></span><br><span class="line"><span class="string">                      "bar": "bar"</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">                """</span>.trimIndent()</span><br><span class="line"></span><br><span class="line">        <span class="comment">//when</span></span><br><span class="line">        mockServer.`<span class="keyword">when</span>`(</span><br><span class="line">            HttpRequest.request() <span class="comment">// (5)</span></span><br><span class="line">                .withMethod(<span class="string">"GET"</span>)</span><br><span class="line">                .withPath(<span class="string">"/sample"</span>)</span><br><span class="line">        ).respond(</span><br><span class="line">            HttpResponse.response() <span class="comment">// (6)</span></span><br><span class="line">                .withBody(responseBody)</span><br><span class="line">                .withStatusCode(<span class="number">200</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment">//then</span></span><br><span class="line">        <span class="keyword">val</span> sample = client.getSample() <span class="comment">// (7)</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// (8)</span></span><br><span class="line">        then(sample.foo).isEqualTo(<span class="string">"foo"</span>)</span><br><span class="line">        then(sample.bar).isEqualTo(<span class="string">"bar"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>(1): <code>@TestInstance(TestInstance.Lifecycle.PER_CLASS)</code>을 통해서 테스트마다 인스턴스를 생성하는 것을 방지합니다. 그 결과 <code>@AfterAll, @BeforeAll</code> 메서드를 static으로 설정하지 않아도 됩니다.</li><li>(2): <code>mockServer</code> 인스턴스를 <code>lateinit</code>으로 지정합니다.</li><li>(3): <code>@BeforeAll</code>을 통해서 테스트 코드가 실행 이전, <code>8080</code>포트로 Mock Server, Client를 생성합니다.</li><li>(4): HTTP 통신하는 클라이언트 객체 <code>FuelClient</code> 생성합니다. 스프링 Bean이 아니기 때문에 직접 객체를 생성합니다.</li><li>(5): Mock HTTP Request를 지정합니다. <code>GET</code> 메서드로 <code>/sample</code>을 호출합니다.</li><li>(6): Mock HTTP Response를 지정합니다. 응답받을 HTTP Status Code, Response Body를 작성합니다.</li><li>(7): Mock HTTP를 호출하고 나온 결과를 바인딩 합니다.</li><li>(8): <code>responseBody</code> 변수에 바인딩 된 값과 일치하는지 검증합니다.</li></ul><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/mockserver-netty/img/result.png" alt=""><br>실제 테스트가 통과를 확인할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/mockserver-netty&quot; rel=&quot;external nofollow noopener nor
      
    
    </summary>
    
    
      <category term="Test" scheme="https://cheese10yun.github.io/tags/Test/"/>
    
      <category term="Mock" scheme="https://cheese10yun.github.io/tags/Mock/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Gateway</title>
    <link href="https://cheese10yun.github.io/spring-cloud-gateway/"/>
    <id>https://cheese10yun.github.io/spring-cloud-gateway/</id>
    <published>2020-08-22T15:00:00.000Z</published>
    <updated>2021-04-15T12:19:24.614Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/spring-gateway" rel="external nofollow noopener noreferrer" target="_blank">Github</a> 공개되어 있습니다.</p></blockquote><h1><span id="용어">용어</span></h1><table><thead><tr><th>명칭</th><th>설명</th></tr></thead><tbody><tr><td>라우트(Route)</td><td>라우트는 목적지 URI, 조건자 목록과 필터의 목록을 식별하기 위한 고유 ID로 구성된다. 라우트는 모든 조건자가 충족됐을 때만 매칭된다</td></tr><tr><td>조건자(Predicates)</td><td>각 요청을 처리하기 전에 실행되는 로직, 헤더와 입력돤값 등 다양한 HTTP 요청이 정의된 기준에 맞는지를 찾는다.</td></tr><tr><td>필터(Filters)</td><td>HTTP 요청 또는 나가는 HTTP 응답을 수정할 수 있게한다. 다운스트림 요청을 보내기전이나 후에 수정할 수 있다. 라우트 필터는 특정 라우트에 한정된다.</td></tr></tbody></table><h1><span id="getting-started">Getting Started</span></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation(&quot;org.springframework.cloud:spring-cloud-starter-gateway&quot;)</span><br><span class="line">implementation(&quot;org.springframework.boot:spring-boot-starter-actuator&quot;)</span><br></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GatewayServerApplication</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    runApplication&lt;GatewayServerApplication&gt;(*args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>필요한 의존성만 추가하면 빠르게 Srping Cloud Gateway를 만들 수 있습니다.</p><h2><span id="gateway-route-노출">Gateway Route 노출</span></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">    endpoints:</span></span><br><span class="line"><span class="attr">        web:</span></span><br><span class="line"><span class="attr">            exposure:</span></span><br><span class="line"><span class="attr">                include:</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="string">"gateway"</span></span><br><span class="line"><span class="attr">    endpoint:</span></span><br><span class="line"><span class="attr">        gateway:</span></span><br><span class="line"><span class="attr">            enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>위에서 추가한 <code>actuator</code>의존성으로 <code>gateway</code>를 노출하면 아래처럼 url mapping 정보를 확인할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/spring-msa/docs/images/result-1.png" alt=""></p><p>현재 아무것도 설정하지 않은 상태이기 때문에 <code>/actuator/gateway/routes</code>를 호출하면 아래와 같은 결과를 확인할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET http://127.0.0.1:5555/actuator/gateway/routes</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">transfer-encoding: chunked</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">[]</span><br><span class="line"></span><br><span class="line">Response code: 200 (OK); Time: 321ms; Content length: 2 bytes</span><br></pre></td></tr></table></figure><h2><span id="route-설정">Route 설정</span></h2><p>API를 서버를 만들고 게이트웨이와 연결해 보겠습니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">        routes:</span></span><br><span class="line"><span class="attr">            -   id:</span> <span class="string">order-service</span></span><br><span class="line"><span class="attr">                uri:</span> <span class="attr">http://localhost:8181</span></span><br><span class="line"><span class="attr">                predicates:</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="string">Path=/order/**</span></span><br><span class="line"><span class="attr">                filters:</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="string">RewritePath=/order/(?&lt;path&gt;.*),/$\&#123;path&#125;</span></span><br><span class="line">            </span><br><span class="line"><span class="attr">            -   id:</span> <span class="string">cart-service</span></span><br><span class="line"><span class="attr">                uri:</span> <span class="attr">http://localhost:8181</span></span><br><span class="line"><span class="attr">                predicates:</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="string">Path=/cart/**</span></span><br><span class="line"><span class="attr">                filters:</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="string">RewritePath=/cart/(?&lt;path&gt;.*),/$\&#123;path&#125;</span></span><br></pre></td></tr></table></figure><ul><li>id: 해당 라우트의 고유 식별자를 나타냅니다.</li><li>uri: 해당 라우터의 주소를 나타냅니다.</li><li>predicates: 해당 라우터의 조건을 작성, <code>/order/**</code>으로 시작하는 요청의 경우 해당 라우터로 요청을 보냄</li><li>filters: 해당 라우터의 필터로, RewritePath는 강제로 Patch를 다시 작성합니다.</li></ul><h2><span id="연결할-api-server">연결할 API Server</span></h2><p><code>cart-service</code>, <code>order-service</code> 2 개의 API 서버를 구성합니다. 각 포트의 설정은 <code>cloud.gateway.routes</code>에 등록된 포트를 설정합니다.</p><h2><span id="order-service">order-service</span></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/orders"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderApi</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getOrders</span><span class="params">(pageable: <span class="type">Pageable</span>)</span></span> = orderRepository.findAll(pageable)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"orders"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>(</span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"product_id"</span>, nullable = false)</span></span><br><span class="line">    <span class="keyword">val</span> productId: <span class="built_in">Long</span></span><br><span class="line">) : EntityAuditing() &#123;</span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"order_number"</span>, nullable = false)</span></span><br><span class="line">    <span class="keyword">val</span> orderNumber: String = UUID.randomUUID().toString()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="cart-service">cart-service</span></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/carts"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CartApi</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> cartRepository: CartRepository</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getCarts</span><span class="params">(pageable: <span class="type">Pageable</span>)</span></span> = cartRepository.findAll(pageable)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = <span class="meta-string">"cart"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cart</span></span>(</span><br><span class="line">    <span class="meta">@Column(name = <span class="meta-string">"product_id"</span>, nullable = false)</span></span><br><span class="line">    <span class="keyword">var</span> productId: <span class="built_in">Long</span></span><br><span class="line">) : EntityAuditing()</span><br></pre></td></tr></table></figure><h2><span id="router-확인">Router 확인</span></h2><p><code>actuator/gateway/routes</code> 확인을 해보면 위에서 설정한 라우터를 확인할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GET http://127.0.0.1:5555/actuator/gateway/routes</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">transfer-encoding: chunked</span><br><span class="line">Content-Type: application/json</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;predicate&quot;: &quot;Paths: [/order/**], match trailing slash: true&quot;,</span><br><span class="line">    &quot;route_id&quot;: &quot;order-service&quot;,</span><br><span class="line">    &quot;filters&quot;: [</span><br><span class="line">      &quot;[[RewritePath /order/(?&lt;path&gt;.*) = &apos;/$&#123;path&#125;&apos;], order = 1]&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;uri&quot;: &quot;http://localhost:8181&quot;,</span><br><span class="line">    &quot;order&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;predicate&quot;: &quot;Paths: [/cart/**], match trailing slash: true&quot;,</span><br><span class="line">    &quot;route_id&quot;: &quot;cart-service&quot;,</span><br><span class="line">    &quot;filters&quot;: [</span><br><span class="line">      &quot;[[RewritePath /cart/(?&lt;path&gt;.*) = &apos;/$&#123;path&#125;&apos;], order = 1]&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;uri&quot;: &quot;http://localhost:8181&quot;,</span><br><span class="line">    &quot;order&quot;: 0</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">Response code: 200 (OK); Time: 207ms; Content length: 404 bytes</span><br></pre></td></tr></table></figure><h2><span id="연결된-서비스-확인">연결된 서비스 확인</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:5555/order/orders?page=0&amp;size=5</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 1075</span><br><span class="line">Date: Sat, 22 Aug 2020 09:29:57 GMT</span><br><span class="line">CUSTOM-RESPONSE-HEADER: It worked</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;content&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;productId&quot;: 1,</span><br><span class="line">      &quot;id&quot;: 1,</span><br><span class="line">      &quot;createdAt&quot;: &quot;2020-08-22T17:19:08.038&quot;,</span><br><span class="line">      &quot;updatedAt&quot;: &quot;2020-08-22T17:19:08.038&quot;,</span><br><span class="line">      &quot;orderNumber&quot;: &quot;7d684c44-1ea3-4dc4-9247-12c351606df3&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">  &quot;pageable&quot;: &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;last&quot;: false,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Response code: 200 (OK); Time: 168ms; Content length: 1075 bytes</span><br></pre></td></tr></table></figure><p>게이트웨이 <code>/order/orders?page=0&amp;size=5</code>를 호출하면 <code>filters.RewritePath</code>에 의해서 <code>orders?page=0&amp;size=5</code>를 호출하게 됩니다. 즉 라우터에 등록된 <code>order-service</code>를 호출하게 됩니다.</p><h1><span id="predicates">Predicates</span></h1><p>Predicates는 조건으로서 해당 라우터에 라우팅 될 조건을 표시합니다. 위 예제에서는 <code>Path=/order/**</code>, <code>Path=/cart/**</code>으로 해당 path로 들어오는 경우 해당 라우터로 라우팅 됩니다. 그 밖에도 여러 가지를 지원합니다. 대표적인 몇 개를 정리해보았습니다. 날짜 관련 매개변수는 <code>ZonedDateTime</code>를 사용해야 합니다.</p><h2><span id="after">After</span></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line"><span class="attr">    -   id:</span> <span class="string">order-service</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://localhost:8181</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">Path=/order/**</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">After=2020-08-23T19:25:19.126+09:00[Asia/Seoul]</span></span><br></pre></td></tr></table></figure><p><code>After</code>는 특정 날짜 이후에 호출이 가능합니다. 현재 날짜가 <code>After</code>에서 지정한 날짜 보다 이후 이어야 합니다. 서비스에 대한 이벤트 API 등 특정 시점에 Open 시킬 API가 있다면 유용합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:5555/order/orders?page=0&amp;size=5</span><br><span class="line"></span><br><span class="line">HTTP/1.1 404 Not Found</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 141</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;timestamp&quot;: &quot;2020-08-22T10:37:11.955+00:00&quot;,</span><br><span class="line">  &quot;path&quot;: &quot;/order/orders&quot;,</span><br><span class="line">  &quot;status&quot;: 404,</span><br><span class="line">  &quot;error&quot;: &quot;Not Found&quot;,</span><br><span class="line">  &quot;message&quot;: null,</span><br><span class="line">  &quot;requestId&quot;: &quot;9b635742-2&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Response code: 404 (Not Found); Time: 28ms; Content length: 141 bytes</span><br></pre></td></tr></table></figure><p>현재 시각 <code>2020-08-22T19:25:19.126+09:00[Asia/Seoul]</code> 이라면 <code>HTTP/1.1 404 Not Found</code>을 응답 받게됩니다.</p><h2><span id="before">Before</span></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line"><span class="attr">    -   id:</span> <span class="string">order-service</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://localhost:8181</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">Path=/order/**</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">Before=2020-08-20T19:25:19.126+09:00[Asia/Seoul]</span></span><br></pre></td></tr></table></figure><p><code>Befroe</code>는 특정 날짜 이전 호출이 가능합니다. 현재 날짜가 <code>Befroe</code>에서 지정한 날짜 보다 이전 이어야 합니다. 특정 API가 deprecate가 되는 경우 유용합니다.</p><h2><span id="between">Between</span></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line"><span class="attr">    -   id:</span> <span class="string">order-service</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://localhost:8181</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">Path=/order/**</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">Between=2020-08-17T19:25:19.126+09:00[Asia/Seoul],</span> <span class="number">2020</span><span class="bullet">-08</span><span class="bullet">-20</span><span class="attr">T19:25:19.126+09:00[Asia/Seoul]</span></span><br></pre></td></tr></table></figure><p><code>Between</code>는 특정 날짜 사이에만 호출이 가능합니다. 특정 기간에만 사용하는 이벤트 API 등에 사용하면 유용합니다.</p><h2><span id="weight">Weight</span></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line"><span class="attr">    -   id:</span> <span class="string">order-service-high</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://localhost:8181</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">Path=/order/**</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">Weight=group-order,</span> <span class="number">7</span></span><br><span class="line"><span class="attr">        filters:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">RewritePath=/order/(?&lt;path&gt;.*),/$\&#123;path&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    -   id:</span> <span class="string">order-service-low</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://localhost:8787</span></span><br><span class="line"><span class="attr">        predicates:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">Path=/order/**</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">Weight=group-order,</span> <span class="number">3</span></span><br><span class="line"><span class="attr">        filters:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">RewritePath=/order/(?&lt;path&gt;.*),/$\&#123;path&#125;</span></span><br></pre></td></tr></table></figure><p><code>grpup</code>, <code>weight</code>를 기반으로 그룹별로 가중치를 계산하게 됩니다. 위 설정은 70% <code>order-service-high</code>, 30% <code>order-service-low</code>으로 라우팅을 분배합니다.</p><h1><span id="filters">Filters</span></h1><p>HTTP Request, Reponse에 대한 수정을 할 수 있습니다. 특정 라우터에에서 안에서 동작하게 됩니다.</p><h2><span id="rewritepath">RewritePath</span></h2><p>RewritePath는 HTTP Request를 수정하여 특정 Server에 전달하게 됩니다. 정규표현식을 사용해서 유연하게 HTTP Request Path를 변경합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes:</span></span><br><span class="line"><span class="attr">    -   id:</span> <span class="string">order-service</span></span><br><span class="line"><span class="attr">        uri:</span> <span class="attr">http://localhost:8181</span>    </span><br><span class="line"><span class="attr">        filters:</span></span><br><span class="line"><span class="bullet">            -</span> <span class="string">RewritePath=/order/(?&lt;path&gt;.*),/$\&#123;path&#125;</span></span><br></pre></td></tr></table></figure><p><code>RewritePath</code>를 통해서 <code>/order/orders</code> -&gt; <code>/order/orders</code>으로 재작성합니다. 즉, <code>/order/orders?page=0&amp;size=5</code> 요청이 오면 <code>/order/</code>를제거하고 <code>orders?page=0&amp;size=5</code>를 기반으로 <code>order-service</code>를 호출하게 됩니다.</p><h2><span id="retry">Retry</span></h2><table><thead><tr><th>name</th><th>설명</th><th>기본값</th></tr></thead><tbody><tr><td>retries</td><td>재시도 횟수</td><td>3번</td></tr><tr><td>statuses</td><td>재시도해야하는 HTTP 상태 코드(<code>org.springframework.http.HttpStatus</code>)</td><td>-</td></tr><tr><td>series</td><td>재시도해야하는 HTTP 상태 코드시리즈(<code>org.springframework.http.HttpStatus.Series</code>)</td><td>5XX</td></tr><tr><td>methods</td><td>재시도해야하는 HTTP 메소드(<code>org.springframework.http.HttpMethod</code>)</td><td>GET</td></tr><tr><td>exceptions</td><td>재시도해야하는 Exception</td><td><code>IOException</code>, <code>TimeoutException</code></td></tr><tr><td>backoff</td><td>재시도하는 시간텀 지정 <code>firstBackoff * (factor ^ n)</code> n번 반복</td><td>비활성화</td></tr></tbody></table><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    cloud:</span></span><br><span class="line"><span class="attr">        gateway:</span></span><br><span class="line"><span class="attr">            discovery:</span></span><br><span class="line"><span class="attr">                locator:</span></span><br><span class="line"><span class="attr">                    enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">            routes:</span></span><br><span class="line"><span class="attr">                -   id:</span> <span class="string">order-service</span></span><br><span class="line"><span class="attr">                    uri:</span> <span class="attr">lb://order-service</span></span><br><span class="line"><span class="attr">                    predicates:</span></span><br><span class="line"><span class="bullet">                        -</span> <span class="string">Path=/order/**</span></span><br><span class="line"><span class="attr">                    filters:</span></span><br><span class="line"><span class="bullet">                        -</span> <span class="string">RewritePath=/order/(?&lt;path&gt;.*),/$\&#123;path&#125;</span></span><br><span class="line"><span class="attr">                        -   name:</span> <span class="string">Retry</span></span><br><span class="line"><span class="attr">                            args:</span></span><br><span class="line"><span class="attr">                                retries:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">                                statuses:</span> <span class="string">INTERNAL_SERVER_ERROR</span></span><br><span class="line"><span class="attr">                                methods:</span> <span class="string">GET</span></span><br><span class="line"><span class="attr">                                backoff:</span></span><br><span class="line"><span class="attr">                                    firstBackoff:</span> <span class="number">1000</span><span class="string">ms</span></span><br><span class="line"><span class="attr">                                    maxBackoff:</span> <span class="number">6000</span><span class="string">ms</span></span><br><span class="line"><span class="attr">                                    factor:</span> <span class="number">2</span></span><br><span class="line"><span class="attr">                                    basedOnPreviousValue:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>제시도 횟수는 <code>retries: 3</code>, 재시도 HTTP Status는 <code>statuses: INTERNAL_SERVER_ERROR (500)</code>, 재시도 HTTP method는 <code>GET</code> <code>backoff</code> 설정은 <code>10ms(firstBackoff) * (2(factor)* 3(retries))</code>으로 <code>retries</code> 만큼 반복됩니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/orders"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderApi</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getOrders</span><span class="params">(pageable: <span class="type">Pageable</span>)</span></span>: Page&lt;Order&gt; &#123;</span><br><span class="line">        println(<span class="string">"getOrders 호출"</span>)</span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> RuntimeException(<span class="string">"Error"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> orderRepository.findAll(pageable)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/carts/&#123;id&#125;"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getCarts</span><span class="params">(<span class="meta">@PathVariable</span> id: <span class="type">Long</span>)</span></span> = cartClient.getCart(id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 API는 <code>RuntimeException(&quot;Error&quot;)</code>를 발생시키고 있어 Status 500을 응답합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:5555/order/orders?page=0&amp;size=5</span><br><span class="line"></span><br><span class="line">HTTP/1.1 500 Internal Server Error</span><br><span class="line">transfer-encoding: chunked</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Sat, 22 Aug 2020 14:57:15 GMT</span><br><span class="line">CUSTOM-RESPONSE-HEADER: It did not work</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;timestamp&quot;: &quot;2020-08-22T14:57:15.122+00:00&quot;,</span><br><span class="line">  &quot;status&quot;: 500,</span><br><span class="line">  &quot;error&quot;: &quot;Internal Server Error&quot;,</span><br><span class="line">  &quot;message&quot;: &quot;&quot;,</span><br><span class="line">  &quot;path&quot;: &quot;/orders&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Response code: 500 (Internal Server Error); Time: 7062ms; Content length: 120 bytes</span><br></pre></td></tr></table></figure><p>결과를 확인하면 3번의 Retry가 있었고, 결국 500을 리턴하게 됩니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getOrders 호출</span><br><span class="line">2020-08-22 23:57:08.080 ERROR [order-service,,,] 17139 --- [nio-8181-exec-7] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.RuntimeException: Error] with root cause</span><br><span class="line"></span><br><span class="line">getOrders 호출</span><br><span class="line">2020-08-22 23:57:09.091 ERROR [order-service,,,] 17139 --- [nio-8181-exec-8] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.RuntimeException: Error] with root cause</span><br><span class="line"></span><br><span class="line">getOrders 호출</span><br><span class="line">2020-08-22 23:57:11.107 ERROR [order-service,,,] 17139 --- [nio-8181-exec-9] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.RuntimeException: Error] with root cause</span><br></pre></td></tr></table></figure><p><code>order-service</code> 로그를 확인해보면 3번의 호출이 있었는지를 확인할 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/orders"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderApi</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> errorCount = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getOrders</span><span class="params">(pageable: <span class="type">Pageable</span>)</span></span>: Page&lt;Order&gt; &#123;</span><br><span class="line">        println(<span class="string">"getOrders 호출"</span>)</span><br><span class="line">        <span class="keyword">if</span> (errorCount &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            println(<span class="string">"예외발생 <span class="variable">$errorCount</span> 1증가"</span>)</span><br><span class="line">            errorCount++</span><br><span class="line">            <span class="keyword">throw</span> RuntimeException(<span class="string">"Error"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        errorCount = <span class="number">0</span> <span class="comment">// 초기화</span></span><br><span class="line">        <span class="keyword">return</span> orderRepository.findAll(pageable)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 코드는 2번 예외가 발생하지만 3번째에서 응답을 리턴해주는 코드입니다. 재시도를 3번 실행하기 때문에 3번째에는 정상적인 응답을 받을 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:5555/order/orders?page=0&amp;size=5</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">transfer-encoding: chunked</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Date: Sat, 22 Aug 2020 15:13:16 GMT</span><br><span class="line">CUSTOM-RESPONSE-HEADER: It worked</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;content&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;productId&quot;: 1,</span><br><span class="line">      &quot;id&quot;: 1,</span><br><span class="line">      &quot;createdAt&quot;: &quot;2020-08-23T00:11:24.747&quot;,</span><br><span class="line">      &quot;updatedAt&quot;: &quot;2020-08-23T00:11:24.747&quot;,</span><br><span class="line">      &quot;orderNumber&quot;: &quot;519011ff-7eaf-4e85-b48f-a9aa6ab879ac&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">  &quot;pageable&quot;: &#123;</span><br><span class="line">   ...</span><br><span class="line">  &quot;totalPages&quot;: 2,</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Response code: 200 (OK); Time: 3034ms; Content length: 1075 bytes</span><br></pre></td></tr></table></figure><p>3번의 응답시간을 기다려야 하기 때문에 <code>3034ms</code> 정도 걸리는 걸 확인할 수 있습니다. 재시도는 단순 조회만 하는 GET 요청에 외에는 신중하게 선택해야 합니다. 게이트웨이에서 재시도를 진행하기 때문에 각 서비스 간의 통신에서 생성, 삭제, 수정 등 조회 조건 외에 동작이 있다면 문제가 생길 가능성이 높습니다. 또 <code>HTTP Status 5XX</code> 응답은 재시도를 하는 것은 바람직하지만, <code>HTTP Status 4XXX</code>에서는 동일한 요청이면 동일한 이유로 실패하기 때문에 재시도를 안 하는 게 더 효율적입니다. 단순 조회 용이 아니면 신중하게 사용해야 합니다.</p><h1><span id="http-timeout-설정">HTTP Timeout 설정</span></h1><h2><span id="글로벌-설정">글로벌 설정</span></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    cloud:</span></span><br><span class="line"><span class="attr">        gateway:</span></span><br><span class="line"><span class="attr">            httpclient:</span></span><br><span class="line"><span class="attr">                connect-timeout:</span> <span class="number">10000</span></span><br><span class="line"><span class="attr">                response-timeout:</span> <span class="number">10</span><span class="string">s</span></span><br></pre></td></tr></table></figure><p><code>connect-timeout</code> 밀리 초 단위로 지정, <code>response-timeout</code> Duration으로 지정 해야 합니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/orders"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderApi</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getOrders</span><span class="params">(pageable: <span class="type">Pageable</span>)</span></span>: Page&lt;Order&gt; &#123;</span><br><span class="line">        Thread.sleep(<span class="number">1100</span>) <span class="comment">// timeout 발생</span></span><br><span class="line">        <span class="keyword">return</span> orderRepository.findAll(pageable)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>클라이언트 응답시간이 1초로 설정했기 때문에 1초를 넘어가면 아래와 같이 <code>HTTP/1.1 504 Gateway Timeout</code>응답을 확인할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:5555/order/orders?page=0&amp;size=5</span><br><span class="line"></span><br><span class="line">HTTP/1.1 504 Gateway Timeout</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 145</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;timestamp&quot;: &quot;2020-08-22T14:05:09.267+00:00&quot;,</span><br><span class="line">  &quot;path&quot;: &quot;/order/orders&quot;,</span><br><span class="line">  &quot;status&quot;: 504,</span><br><span class="line">  &quot;error&quot;: &quot;Gateway Timeout&quot;,</span><br><span class="line">  &quot;message&quot;: &quot;&quot;,</span><br><span class="line">  &quot;requestId&quot;: &quot;0d492aaf-1&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Response code: 504 (Gateway Timeout); Time: 4798ms; Content length: 145 bytes</span><br></pre></td></tr></table></figure><h2><span id="라우터별-설정">라우터별 설정</span></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">    cloud:</span></span><br><span class="line"><span class="attr">        gateway:</span></span><br><span class="line"><span class="attr">            routes:</span></span><br><span class="line"><span class="attr">                -   id:</span> <span class="string">order-service</span></span><br><span class="line"><span class="attr">                    uri:</span> <span class="attr">lb://order-service</span></span><br><span class="line"><span class="attr">                    predicates:</span></span><br><span class="line"><span class="bullet">                        -</span> <span class="string">Path=/order/**</span></span><br><span class="line"><span class="attr">                    filters:</span></span><br><span class="line"><span class="bullet">                        -</span> <span class="string">RewritePath=/order/(?&lt;path&gt;.*),/$\&#123;path&#125;</span></span><br><span class="line"><span class="attr">                    metadata:</span></span><br><span class="line"><span class="attr">                        connect-timeout:</span> <span class="number">1000</span></span><br><span class="line"><span class="attr">                        response-timeout:</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure><p><code>metadata</code>설정을 통해서 라우터별 설정을 진행할 수 있습니다. 여기서 중요한 점은 <code>metadata</code> 설정 시 <code>connect-timeout</code>, <code>response-timeout</code> 모두 밀리 초 단위로 지정해야 합니다. Global 설정과는 차이가 있습니다.</p><h1><span id="logging-sleuth">Logging Sleuth</span></h1><h2><span id="gateway-logging">Gateway Logging</span></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GatewayServerApplication</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args: <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> &#123;</span><br><span class="line">    System.setProperty(<span class="string">"reactor.netty.http.server.accessLogEnabled"</span>, <span class="string">"true"</span>)</span><br><span class="line">    runApplication&lt;GatewayServerApplication&gt;(*args)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Reactor Netty 액세스 로그를 활성화하려면 <code>System.setProperty(&quot;reactor.netty.http.server.accessLogEnabled&quot;, &quot;true&quot;)</code>을 설정해야 합니다. 공식 문서에 따르면 Spring Boot 설정이 아니기 때문에 yml으로 설정하지 않고 위처럼 설정해야 한다고 합니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/spring-msa/docs/images/result-2.png" alt=""></p><p>정상적으로 로킹이 되는 것을 확인할 수 있습니다.</p><h2><span id="sleuth">Sleuth</span></h2><p>스프링 클라우드 슬루스(Sleuth)는 마이크로 서비스 환경에서 서로 다른 시스템의 요청을 연결하여 로깅을 해줄 수 있게 해주는 도구입니다. 이런 경우 슬루스를 이용해서 쉽게 요청에 대한 로깅을 연결해서 볼 수 있습니다. 또 RestTemplate, 페인 클라이언트, 메시지 채널 등등 다양한 플랫폼과 연결하기 쉽습니다. 아래 예제에서는 폐인 클라이언트와 연결해서 로깅하는 방법을 설명하겠습니다.</p><h2><span id="의존성-추가">의존성 추가</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(&quot;org.springframework.cloud:spring-cloud-starter-sleuth&quot;)</span><br></pre></td></tr></table></figure><p><code>gateway-server</code>, <code>order-service</code>. <code>cart-service</code> 모듈에 해당 의존성을 추가합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">cloud:</span></span><br><span class="line"><span class="attr">    gateway:</span></span><br><span class="line"><span class="attr">        discovery:</span></span><br><span class="line"><span class="attr">            locator:</span></span><br><span class="line"><span class="attr">                enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        routes:</span></span><br><span class="line"><span class="attr">            -   id:</span> <span class="string">order-service</span></span><br><span class="line"><span class="attr">                uri:</span> <span class="attr">lb://order-service</span></span><br><span class="line"><span class="attr">                predicates:</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="string">Path=/order/**</span></span><br><span class="line"><span class="attr">                filters:</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="string">RewritePath=/order/(?&lt;path&gt;.*),/$\&#123;path&#125;</span></span><br><span class="line">            </span><br><span class="line"><span class="attr">            -   id:</span> <span class="string">cart-service</span></span><br><span class="line"><span class="attr">                uri:</span> <span class="attr">lb://cart-service</span></span><br><span class="line"><span class="attr">                predicates:</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="string">Path=/cart/**</span></span><br><span class="line"><span class="attr">                filters:</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="string">RewritePath=/cart/(?&lt;path&gt;.*),/$\&#123;path&#125;</span></span><br></pre></td></tr></table></figure><p><code>openfeign</code>을 이용해서 클라이언트를 호출할 것이므로 <code>discovery(Eureka)</code> 설정을 합니다.(아래 포스팅에서 유레카, 페인 관련 설정을 진행하겠습니다.) 호출 순서가 <code>Gateway</code> -&gt; <code>order-service</code> -&gt; <code>cart-service</code> 호출에 대한 로깅입니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># spring-gateway</span><br><span class="line">2020-08-22 22:11:20.671 DEBUG [gateway-server,d1905ab24f0b5d1a,d1905ab24f0b5d1a,true] 12133 --- [ctor-http-nio-4] o.s.c.g.h.RoutePredicateHandlerMapping   : Route matched: order-service</span><br><span class="line">2020-08-22 22:11:20.671 DEBUG [gateway-server,d1905ab24f0b5d1a,d1905ab24f0b5d1a,true] 12133 --- [ctor-http-nio-4] o.s.c.g.h.RoutePredicateHandlerMapping   : Mapping [Exchange: GET http://localhost:5555/order/orders/carts/2] to Route&#123;id=&apos;order-service&apos;, uri=lb://order-service, order=0, predicate=Paths: [/order/**], match trailing slash: true, gatewayFilters=[[[RewritePath /order/(?&lt;path&gt;.*) = &apos;/$&#123;path&#125;&apos;], order = 1], [[Retry retries = 3, series = list[SERVER_ERROR], statuses = list[502 BAD_GATEWAY], methods = list[GET, POST], exceptions = list[IOException, TimeoutException]], order = 2]], metadata=&#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line"># order-service</span><br><span class="line">2020-08-22 22:11:20.685  INFO [order-service,d1905ab24f0b5d1a,ba6672843cb90f99,true] 11949 --- [nio-8181-exec-6] com.service.order.HttpLoggingFilter      : </span><br><span class="line">    ⊙ GET /orders/carts/2</span><br><span class="line">    ├─ Headers: accept: application/json, user-agent: Apache-HttpClient/4.5.12 (Java/11.0.7), accept-encoding: gzip,deflate, custom-request-header: userName, forwarded: proto=http;host=&quot;localhost:5555&quot;;for=&quot;127.0.0.1:57509&quot;, x-forwarded-for: 127.0.0.1, x-forwarded-proto: http, x-forwarded-prefix: /order, x-forwarded-port: 5555, x-forwarded-host: localhost:5555, host: 192.168.0.5:8181, x-b3-traceid: d1905ab24f0b5d1a, x-b3-spanid: ba6672843cb90f99, x-b3-parentspanid: d1905ab24f0b5d1a, x-b3-sampled: 1, content-length: 0</span><br><span class="line"></span><br><span class="line"># cart-service</span><br><span class="line">2020-08-22 22:11:20.683  INFO [cart-service,d1905ab24f0b5d1a,716b9cd4e4e52bdf,true] 11935 --- [nio-8282-exec-5] com.service.cart.HttpLoggingFilter       : </span><br><span class="line">    ⊙ GET /carts/2</span><br><span class="line">    ├─ Headers: x-b3-traceid: d1905ab24f0b5d1a, x-b3-spanid: 716b9cd4e4e52bdf, x-b3-parentspanid: ba6672843cb90f99, x-b3-sampled: 1, accept: */*, user-agent: Java/1.8.0_212, host: 192.168.0.5:8282, connection: keep-alive</span><br></pre></td></tr></table></figure><p>로그를 보면 <code>gateway-server</code>에서 <code>traceId: d1905ab24f0b5d1a</code>발급하고 <code>order-service</code>에게 전달할 때 header 정보에 <code>x-b3-traceid: d1905ab24f0b5d1a</code>를 추가하고, <code>cart-service</code>도 마찬가지로 <code>traceId</code>를 전달받고 자신의 고유한 ID <code>x-b3-parentspanid: ba6672843cb90f99(order-service에서 전달받은)</code> 발급합니다. 결국 <code>d1905ab24f0b5d1a</code> 값 하나로 연결된 하나의 요청을 추적할 수 있습니다.</p><h1><span id="eureka-amp-feign-amp-ribbon">Eureka &amp; Feign &amp; Ribbon</span></h1><p>Spring Cloud Gateway는 유레카 연동도 손쉽게 가능합니다. 본 포스팅은 Spring Cloud Gateway에 대한 포스팅이므로 유레카에 대한 설정은 다루지 않겠습니다. 해당 내용은 실제 코드를 확인해 주세요.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/spring-msa/docs/images/result-3.png" alt=""></p><p><code>order-service</code>, <code>cart-service</code> 서비스를 유레카에 등록 시켰습니다. 이제 라우터에 uri를 연결하기만 하면 손쉽게 연결이 가능합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gateway:</span></span><br><span class="line"><span class="attr">        discovery:</span></span><br><span class="line"><span class="attr">            locator:</span></span><br><span class="line"><span class="attr">                enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        routes:</span></span><br><span class="line"><span class="attr">            -   id:</span> <span class="string">order-service</span></span><br><span class="line"><span class="comment">#                    uri: http://localhost:8181 # 기존 방시</span></span><br><span class="line"><span class="attr">                uri:</span> <span class="attr">lb://order-service</span> <span class="comment"># 유레카를 통한 방식</span></span><br><span class="line"><span class="attr">                predicates:</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="string">Path=/order/**</span></span><br><span class="line"><span class="attr">                filters:</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="string">RewritePath=/order/(?&lt;path&gt;.*),/$\&#123;path&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">            -   id:</span> <span class="string">cart-service</span></span><br><span class="line"><span class="comment">#                    uri: http://localhost:8181 # 기존 방시</span></span><br><span class="line"><span class="attr">                uri:</span> <span class="attr">lb://cart-service</span> <span class="comment"># 유레카를 통한 방식</span></span><br><span class="line"><span class="attr">                predicates:</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="string">Path=/cart/**</span></span><br><span class="line"><span class="attr">                filters:</span></span><br><span class="line"><span class="bullet">                    -</span> <span class="string">RewritePath=/cart/(?&lt;path&gt;.*),/$\&#123;path&#125;</span></span><br></pre></td></tr></table></figure><p>설정은 간단합니다. <code>uri: lb://{service-name}</code>형식으로 유레카에 등록된 서비스 네임을 작성하게 되면 완료됩니다. 유레카에 등록했기 때문에 Feign, Ribbon 이용한 클라이언트 사이드 로드 밸런싱이 가능합니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(<span class="meta-string">"cart-service"</span>)</span></span><br><span class="line"><span class="meta">@RibbonClient(<span class="meta-string">"cart-service"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CartClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/carts/&#123;id&#125;"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getCart</span><span class="params">(<span class="meta">@PathVariable</span> id: <span class="type">Long</span>)</span></span>: CartResponse</span><br><span class="line"></span><br><span class="line">    <span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">CartResponse</span></span>(</span><br><span class="line">        <span class="keyword">val</span> productId: <span class="built_in">Long</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/orders"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderApi</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> cartClient: CartClient</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(<span class="meta-string">"/carts/&#123;id&#125;"</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getCarts</span><span class="params">(<span class="meta">@PathVariable</span> id: <span class="type">Long</span>)</span></span> = cartClient.getCart(id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>게이트웨이를 호출해서 <code>order-service</code>를 호출하고, 페인 클라이언트를 이용해서 <code>cart-service</code>를 호출하는 것을 확인할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET http://localhost:5555/order/orders/carts/2</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Content-Length: 15</span><br><span class="line">Date: Sat, 22 Aug 2020 13:37:48 GMT</span><br><span class="line">CUSTOM-RESPONSE-HEADER: It worked</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;productId&quot;: 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Response code: 200 (OK); Time: 109ms; Content length: 15 bytes</span><br></pre></td></tr></table></figure><h1><span id="출처">출처</span></h1><ul><li><a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/" rel="external nofollow noopener noreferrer" target="_blank">Spring Cloud Gateway  Reference</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/spring-gateway&quot; rel=&quot;external nofollow noopener noref
      
    
    </summary>
    
    
      <category term="Cloud" scheme="https://cheese10yun.github.io/tags/Cloud/"/>
    
      <category term="Gateway" scheme="https://cheese10yun.github.io/tags/Gateway/"/>
    
  </entry>
  
  <entry>
    <title>ApplicationEventPublisher 기반으로 강결합 및 트랜잭션 문제 해결</title>
    <link href="https://cheese10yun.github.io/event-transaction/"/>
    <id>https://cheese10yun.github.io/event-transaction/</id>
    <published>2020-08-15T15:00:00.000Z</published>
    <updated>2020-08-16T12:10:11.839Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/event-transaction" rel="external nofollow noopener noreferrer" target="_blank">Github</a> 공개되어 있습니다.</p></blockquote><h2><span id="회원-가입-시나리오">회원 가입 시나리오</span></h2><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/event-transaction/docs/seq-sign-up.png" alt=""></p><p>회원 가입 시 회원 가입 쿠폰 발행, 회원 가입 이메일 발등을 해야 한다면 다음 코드처럼 로직을 만들 수 있습니다. 이메일 전송 실패, 쿠폰 발급이 실패하는 경우 회원 가입을 다시 해야 한다는 가정으로 설명드리겠습니다.(다소 과격한 시나리오지만 원자성에 대한 설명을 위해서 이런 시나리오를 정했습니다.)</p><h2><span id="문제점">문제점</span></h2><h3><span id="시스템의-강결한-결합-문제">시스템의 강결한 결합 문제</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberSignUpService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> memberRepository: MemberRepository,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> couponIssueService: CouponIssueService,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> emailSenderService: EmailSenderService</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">signUp</span><span class="params">(dto: <span class="type">MemberSignUpRequest</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> member = createMember(dto.toEntity()) <span class="comment">// 1. member 엔티티 영속화</span></span><br><span class="line">        emailSenderService.sendSignUpEmail(member) <span class="comment">// 2. 외부 시스템 회원 가입 이메일 전송</span></span><br><span class="line">        couponIssueService.issueSignUpCoupon(member.id!!) <span class="comment">// 3. 회원가입 쿠폰 발급</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 흐름을 코드로 표현하면 위와 같습니다. 여기서 <code>signUp</code>메서드에 많은 책임들이 부여되는 것입니다. 회원 엔티티를 영속화 시키고, 회원 가입 이메일도 전송 요청하고, 회원 가입 쿠폰까지 발급 시키고 있습니다. 그 결과 <code>MemberSignUpService</code>에 많은 의존성이 필요해지고 이런 의존성들 사이에서 강한 결합 관계가 발생하게 됩니다. 해당 코드 정도는 복잡도가 높진 않지만, 회원가입 시 필요한 로직들이 추가될 때마다 <code>MemberSignUpService</code> 객체에는 더 많은 의존성 주입이 생기며, 더 많은 책임들을 부여받게 됩니다.</p><h3><span id="트랜잭션의-문제">트랜잭션의 문제</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CouponIssueService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> couponRepository: CouponRepository</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">issueSignUpCoupon</span><span class="params">(memberId: <span class="type">Long</span>)</span></span> &#123;</span><br><span class="line">        couponRepository.save(Coupon(<span class="number">100.</span>toBigDecimal(), memberId))</span><br><span class="line">        <span class="keyword">throw</span> RuntimeException(<span class="string">"RuntimeException...."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 <code>3. 회원가입 쿠폰 발급</code>에서 위 코드처럼 예외를 발생시킨다면 회원가입, 회원가입 쿠폰 발행은 트랜잭션이 묶여있기 때문에 Rollback이 진행됩니다. <strong>하지만 2. 외부 시스템 회원 가입 이메일 전송의 경우는 외부 인프라스트럭처이기 때문에 Rollback 과는 무관하게 이메일을 전송하게 됩니다.</strong> 회원가입이 실패했지만, 이메일을 전송하게 되는 문제가 발생하게 된 것입니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/event-transaction/docs/result-1.png" alt=""></p><p><code>RuntimeException</code> 예외가 발생해서 Member, Coupon은 Rollback 되었지만 회원 가입 이메일은 전송하게 됩니다.(위 코드는 외부 시스템 연동이 아닌 print 메서드로 간단하게 호출 한 것입니다.)</p><h2><span id="해결">해결</span></h2><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/event-transaction/docs/event-dram.png" alt=""></p><p>해당 문제는 스프링에서 지원하는 <code>ApplicationEventPublisher</code>으로 해결할 수 있습니다. 이벤트 핸들러는 이벤트 생성 주체가 발행한 이벤트에 반응하고, 이벤트 핸들러는 생성 주체가 발행한 이벤트를 전달받아 이벤트에 담긴 정보(데이터)를 기반으로 해당 기능을 수행하게 됩니다.</p><p><code>회원 가입</code> -&gt; <code>회원 가입 쿠폰 발행</code> -&gt; <code>회원 가입 완료 이벤트 발행</code> -&gt; <code>회원 가입 이벤트 리스너 동작</code> -&gt; <code>회원 가입 이메일 전송</code>으로 동작하게 됩니다.</p><h3><span id="시스템의-강결한-결합-문제-해결">시스템의 강결한 결합 문제 해결</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberSignUpService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> memberRepository: MemberRepository,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> couponIssueService: CouponIssueService,</span><br><span class="line">    <span class="comment">// private val emailSenderService: EmailSenderService, 의존성 주석</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> eventPublisher: ApplicationEventPublisher <span class="comment">// 의존성 추가</span></span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">signUp</span><span class="params">(dto: <span class="type">MemberSignUpRequest</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> member = createMember(dto.toEntity()) <span class="comment">// 1. member 엔티티 영속화</span></span><br><span class="line"><span class="comment">//        emailSenderService.sendSignUpEmail(member) // 2. 외부 시스템 이메일 호출 -&gt; 주석</span></span><br><span class="line">        eventPublisher.publishEvent(MemberSignedUpEvent(member)) <span class="comment">//2. 회원 가입 완료 이벤트 발행</span></span><br><span class="line">        couponIssueService.issueSignUpCoupon(member.id!!) <span class="comment">// 3. 회원가입 쿠폰 발급</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberSignedUpEvent</span></span>(</span><br><span class="line">    <span class="keyword">val</span> member: Member</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MemberEventHandler</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> emailSenderService: EmailSenderService</span><br><span class="line">) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 회원가입 완료 이벤트 리스너 Bean 등록</span></span><br><span class="line">    <span class="meta">@TransactionalEventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">memberSignedUpEventListener</span><span class="params">(event: <span class="type">MemberSignedUpEvent</span>)</span></span> &#123;</span><br><span class="line">        emailSenderService.sendSignUpEmail(event.member)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기존 회원가입 이메일 전송하는 로직과 회원가입 로직이 서로 섞여 있는 것을 위 코드처럼 방지할 수 있습니다. 회원가입이 완료됐다고 생각하는 시점에 <code>회원 가입 완료</code> 이벤트를 발행 하기면 하면 되기 때문에 더 이상 <code>signUp</code> 메서드에서 이메일 전송 관련 의존성이 필요 없어지게 됩니다.</p><h3><span id="트랜잭션의-문제-해결">트랜잭션의 문제 해결</span></h3><p><code>ApplicationEventPublisher</code>에서 발행한 이벤트를 리스닝 하는 방식은 <code>@TransactionalEventListener</code>, <code>@EventListener</code> 2가지 방식이 있습니다. 각각의 차이점을 설명하고 트랜잭션의 문제 해결에 대해서 설명드리겠습니다.</p><h4><span id="eventlistener">@EventListener</span></h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EventListener</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">memberSignedUpEventListener</span><span class="params">(event: <span class="type">MemberSignedUpEvent</span>)</span></span> &#123;</span><br><span class="line">    emailSenderService.sendSignUpEmail(event.member)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@EventListener</code>으로 리스너를 등록하는 경우 이벤트를 퍼블리싱 한 이후 바로 리스너가 동작하게 됩니다. 만약 <code>memberSignedUpEventListener</code>를 <code>@EventListener</code>으로 등록한 경우에 동일하게 회원 가입 쿠폰 발급 시 예외가 발생하게 되면 결과는 동일하게 이메일을 전송하게 됩니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">issueSignUpCoupon</span><span class="params">(memberId: <span class="type">Long</span>)</span></span> &#123;</span><br><span class="line">    couponRepository.save(Coupon(<span class="number">100.</span>toBigDecimal(), memberId))</span><br><span class="line">    <span class="keyword">throw</span> RuntimeException(<span class="string">"RuntimeException...."</span>) <span class="comment">// 동일하게 예외가 발생 시킨다.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/event-transaction/docs/result-1.png" alt=""></p><p><code>@EventListener</code>는 이벤트를 발행하는 시점에 바로 리스닝을 진행하기 때문에 <code>issueSignUpCoupon</code> 메서드 실행 이전에 동작하게 된다. 그 결과 위처럼 동일하게 이메일을 전송하게 된다.</p><h4><span id="transactionaleventlistener">@TransactionalEventListener</span></h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TransactionalEventListener</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">memberSignedUpEventListener</span><span class="params">(event: <span class="type">MemberSignedUpEvent</span>)</span></span> &#123;</span><br><span class="line">    emailSenderService.sendSignUpEmail(event.member)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@TransactionalEventListener</code>으로 리스너를 등록하는 경우 해당 트랜잭션이 Commit된 이후에 리스너가 동작하게 됩니다. 위처럼 동일하게 회원 가입 쿠폰에서 예외가 발생하게 된다면 <strong>트랜잭션 Commit이 진행되지 않기 때문에 해당 리스너가 동작하지 않게 되어 트랜잭션 문제를 해결할 수 있습니다.</strong></p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/event-transaction/docs/result-2.png" alt=""></p><p><code>@TransactionalEventListener</code>으로 빈등 등록을 하게 되면 회원 가입 이메일 관련 메시지가 출력되지 않는 것을 확인할 수 있습니다.</p><h2><span id="주문-시나리오">주문 시나리오</span></h2><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/event-transaction/docs/seq_2.png" alt=""></p><p>상품을 주문 시 장바구니에 있는 제품인 경우 해당 유저의 장바구니를 제거합니다. 만약 장바구니를 제거하다 예외가 발생하더라도 주문은 완료되어야 한다는 것이 전제입니다.</p><h2><span id="문제점">문제점</span></h2><h3><span id="장바구니-삭제시-트랜잭션-문제">장바구니 삭제시 트랜잭션 문제</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> cartService: CartService,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> emailSenderService: EmailSenderService</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">doOrder</span><span class="params">(dto: <span class="type">OrderRequest</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> order = orderRepository.save(dto.toEntity()) <span class="comment">// 1. order 엔티티 영속화</span></span><br><span class="line">        cartService.deleteCartWithOrder(order) <span class="comment">// 2. 해당상품의 장바구니 제거</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CartService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> cartRepository: CartRepository</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">deleteCartWithOrder</span><span class="params">(order: <span class="type">Order</span>)</span></span> &#123;</span><br><span class="line">        cartRepository.deleteByProductId(order.productId)</span><br><span class="line">        <span class="keyword">throw</span> RuntimeException(<span class="string">"runtime exception ...."</span>) <span class="comment">// 예외를 발생시키면 주문 트랜잭션까지 Rollback이 진행된다.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 흐름을 코드로 표현하면 위와 같습니다. 만약 <code>2. 해당 상품의 장바구니 제거</code> 도중 예외가 발생하면 한 트랜잭션으로 묶었기 때문에 주문까지 Rollback 되게 됩니다. 이 문제를 해결하기 위해서는 트랜잭션을 분리 시켜야 합니다.</p><h3><span id="성능-문제">성능 문제</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cartService.deleteCartWithOrder(order) <span class="comment">// 2. 해당상품의 장바구니 제거</span></span><br></pre></td></tr></table></figure><p>해당 코드는 동기식으로 진행되기 때문에 <code>deleteCartWithOrder()</code> 메서드가 블록 되는 만큼 주문 완료에 대한 응답이 늦어질 수밖에 없습니다. 해당 문제를 해결하기 위해서는 비동기로 동작하게 하여 해결이 가능합니다.</p><h2><span id="해결">해결</span></h2><p>해당 문제도 <code>ApplicationEventPublisher</code>, <code>@Async</code>으로 해결할 수 있습니다.</p><h3><span id="장바구니-삭제시-트랜잭션-문제-성능-문제-해결">장바구니 삭제시 트랜잭션 문제, 성능 문제 해결</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> eventPublisher: ApplicationEventPublisher</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">doOrder</span><span class="params">(dto: <span class="type">OrderRequest</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> order = orderRepository.save(dto.toEntity()) <span class="comment">// 1. order 엔티티 영속화</span></span><br><span class="line">        eventPublisher.publishEvent(OrderCompletedEvent(order)) <span class="comment">// 2. 주문 완료 이벤트 발행</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderCompletedEvent</span></span>(</span><br><span class="line">    <span class="keyword">val</span> order: Order</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderEventHandler</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> cartService: CartService,</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Async</span> <span class="comment">// 비동기 처리를 위해 추가</span></span><br><span class="line">    <span class="meta">@EventListener</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">orderCompletedEventListener</span><span class="params">(event: <span class="type">OrderCompletedEvent</span>)</span></span> &#123;</span><br><span class="line">        cartService.deleteCartWithOrder(event.order)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CartService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> cartRepository: CartRepository</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">deleteCartWithOrder</span><span class="params">(order: <span class="type">Order</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">"deleteCartWithOrder CurrentTransactionName: <span class="subst">$&#123;TransactionSynchronizationManager.getCurrentTransactionName()&#125;</span>"</span>)</span><br><span class="line">        cartRepository.deleteByProductId(order.productId)</span><br><span class="line">        <span class="keyword">throw</span> RuntimeException(<span class="string">"runtime exception ...."</span>) <span class="comment">// 예외 발생</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Async</code>을 추가하면 해당 메서드는 기존 스레드와 분리되게 됩니다. 그러기 때문에 비동기로 동작하기 때문에 <code>deleteCartWithOrder()</code> 메서드에서 블록 되더라도 주문에 대한 응답 대기는 사라지게 되며 스레드가 다르기 때문에 트랜잭션도 자연스럽게 분리가 됩니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/event-transaction/docs/result-3.png" alt=""></p><p><code>TransactionSynchronizationManager.getCurrentTransactionName()</code>으로 현재 트랜잭션을 확인해보면 두 트랜잭션은 다르다는 것을 확인할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/event-transaction/docs/result-4.png" alt=""></p><p>위처럼 <code>deleteCartWithOrder()</code> 메서드에서 예외가 발행하더라도 주문 요청 응답은 HTTP Status 200을 받게 되어 장바구니 제거를 실패했더라도 주문 요청은 정상적으로 완료할 수 있습니다. <strong>하지만 문제는 있습니다. 주문은 완료했지만, 해당 상품의 장바구니가 제거되지 않은 상태입니다.</strong> 이런 문제가 발생했을 경우 <code>ApplicationEventPublisher</code>만 이용해서 재처리를 진행하기는 매우 어렵습니다.</p><h2><span id="applicationeventpublisher에대한-개인적-생각">ApplicationEventPublisher에대한 개인적 생각</span></h2><p><code>ApplicationEventPublisher</code>는 활용이 하는 구간이 명확하다고 생각합니다. 스프링 Bean 기반으로 동작하기 때문에 외부 시스템과의 연동은 되지 않으며 단일 환경에서만 사용할 수 있습니다.</p><p>위처럼 단일 서비스에서 강결합 문제, 트랜잭션 문제, 비동기로 동작이 필요한 경우 등에서 활용이 가능하며, <code>ApplicationEventPublisher</code>기반으로 코드를 작성해 놓으면 이후에 다른 메시지 시스템을 도입할 때 전체적인 흐름과 이벤트에 대한 DTO 객체를 활용할 수 있어 큰 도움이 된다고 생각합니다.</p><p>RabbitMQ 경우에는 <code>setChannelTransacted</code> 설정을 통해서 <code>@Transactional</code>이 묶이는 효과 즉, <code>@TransactionalEventListener</code>와 같은 효과를 보장해 주지만 <code>Amazon Simple Queue Service(SQS)</code>같은 경우는 (2019년에 사용해서 현재는 지원하는지는 모르겠습니다.) <code>@TransactionalEventListener</code> 와 같은 트랜잭션 처리를 지원해 주지 않기 때문에 <code>@TransactionalEventListener</code> + <code>SQS</code>를 조합해서 사용해도 좋다고 생각합니다.</p><p>그리고 실패에 대한 재처리를 별도로 지원해 주지 않고, 이벤트에 대한 별도의 모니터링 시스템을 지원해 주기 않기 때문에 신중하게 사용해야 합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/event-transaction&quot; rel=&quot;external nofollow noopener no
      
    
    </summary>
    
    
      <category term="ApplicationEventPublisher" scheme="https://cheese10yun.github.io/tags/ApplicationEventPublisher/"/>
    
      <category term="Transactional" scheme="https://cheese10yun.github.io/tags/Transactional/"/>
    
      <category term="Event" scheme="https://cheese10yun.github.io/tags/Event/"/>
    
  </entry>
  
  <entry>
    <title>동일한 Bean(Class)에서 @Transactional 동작 방식</title>
    <link href="https://cheese10yun.github.io/spring-transacion-same-bean/"/>
    <id>https://cheese10yun.github.io/spring-transacion-same-bean/</id>
    <published>2020-08-11T15:00:00.000Z</published>
    <updated>2020-08-13T14:37:29.638Z</updated>
    
    <content type="html"><![CDATA[<p>동일한 Bean 내에서 <code>@Transactional</code>을 사용하는 경우 예상했던 것과 다르게 동작할 수 있습니다. 발생 원인과 해결 방법에 대해서 정리한 포스팅입니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CouponService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> couponRepository: CouponRepository</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">something</span><span class="params">(i: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">"something CurrentTransactionName: <span class="subst">$&#123;TransactionSynchronizationManager.getCurrentTransactionName()&#125;</span>"</span>)</span><br><span class="line">        <span class="keyword">this</span>.save(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">save</span><span class="params">(i: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">"save CurrentTransactionName: <span class="subst">$&#123;TransactionSynchronizationManager.getCurrentTransactionName()&#125;</span>"</span>)</span><br><span class="line">        (<span class="number">1.</span>.i).map &#123;</span><br><span class="line">            <span class="keyword">if</span> (it == <span class="number">20</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> RuntimeException(<span class="string">"<span class="variable">$i</span> ...."</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            couponRepository.save(Coupon(it.toBigDecimal()))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/transaction"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TransactionApi</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> couponService: CouponService</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">transactional</span><span class="params">(<span class="meta">@RequestParam</span> i: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        couponService.something(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 <code>Controller</code>에서 <code>something()</code> -&gt; <code>save()</code>을 차례대로 호출하는 코드입니다. <code>save()</code> 메서드에서는 특정 경우 <code>RuntimeException</code>을 발생시키고 있습니다.  <code>save()</code> 메서드에 <code>@Transactional</code> 때문에 해당 반복문 전체에 트랜잭션이 묶이게 되고 예외가 발생하면 전체가 Rollback될 것이라고 예상됩니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --location --request GET &apos;http://localhost:8080/transaction?i=40&apos;</span><br></pre></td></tr></table></figure><p>위 와 같이 해당 컨트롤러를 호출하고 결과를 조회하면 아래와 같습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/result-1.png" alt=""></p><p>결과는 전체를 롤백 되지 않고 19개가 commit 된 것을 확인할 수 있습니다. 그렇다는 것은 트랜잭션이 묶이지 않고 <code>SimpleJpaRepository</code>의 아래 <code>save()</code> 메서드를 통해서 단일 트랜잭션으로 진행된 것입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleJpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; <span class="keyword">implements</span> <span class="title">JpaRepositoryImplementation</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> &lt;S extends T&gt; <span class="function">S <span class="title">save</span><span class="params">(S entity)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (entityInformation.isNew(entity)) &#123;</span><br><span class="line">em.persist(entity);</span><br><span class="line"><span class="keyword">return</span> entity;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> em.merge(entity);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>즉, 위와 같은 경우에는 동일한 Bean(Class)에서 Spring AOP CGLIB이 동작하지 않습니다.</strong></p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/result-2.png" alt=""></p><p><code>TransactionSynchronizationManager.getCurrentTransactionName()</code> 메서드를 통해서 현재 트랜잭션을 확인해 보면 두 메서드 모두 <code>null</code>이라는 것은<code>this.save()</code> 메서드에 있는 <code>@Transactional</code>이 동작하지 않았다는 것입니다.</p><p>그렇다면 외부에서 Bean 호출시 <code>@Transactional</code>으로 시작하고 동일한 Bean(Class)에서 <code>this.xxx()</code>으로 호출시 <code>@Transactional</code> 동작을 살펴보겠습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> couponRepository: CouponRepository,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> paymentRepository: PaymentRepository,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">saveOrder</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"saveOrder CurrentTransactionName: <span class="subst">$&#123;TransactionSynchronizationManager.getCurrentTransactionName()&#125;</span>"</span>)</span><br><span class="line">        orderRepository.save(Order(</span><br><span class="line">            amount = <span class="number">10.</span>toBigDecimal(),</span><br><span class="line">            orderer = Orderer(<span class="number">1</span>L, <span class="string">"test@test.com"</span>)</span><br><span class="line">        ))</span><br><span class="line">        <span class="keyword">this</span>.savePayment()</span><br><span class="line">        <span class="keyword">this</span>.saveCoupon()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">savePayment</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"savePayment CurrentTransactionName: <span class="subst">$&#123;TransactionSynchronizationManager.getCurrentTransactionName()&#125;</span>"</span>)</span><br><span class="line">        paymentRepository.save(Payment(<span class="number">10.</span>toBigDecimal()))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">saveCoupon</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"saveCoupon CurrentTransactionName: <span class="subst">$&#123;TransactionSynchronizationManager.getCurrentTransactionName()&#125;</span>"</span>)</span><br><span class="line">        couponRepository.save(Coupon(<span class="number">10.</span>toBigDecimal()))</span><br><span class="line">        <span class="keyword">throw</span> RuntimeException()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>코드의 흐름은 다음과 같습니다.</p><ol><li>order insert</li><li>payment insert</li><li>coupon insert 진행하다 RuntimeException() 발생</li></ol><p><code>savePayment()</code>메서드에서 <code>@Transactional(propagation = Propagation.REQUIRES_NEW)</code>설정을 했기 때문에 <code>1</code>, <code>3</code>은 Rollback이 진행되고 <code>2</code> payment는 성공적으로 commit이 진행될것이라고 판단될 수 있습니다. 하지만 결과는 모두 Rollback 진행됩니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/result-6.png" alt=""></p><p><code>TransactionSynchronizationManager.getCurrentTransactionName()</code>을 통해서 현재 트랜잭션을 확인해보면 모두 동일하다는 것을 확인할 수 있습니다. 즉 전체 트랜잭션이 한 트랜잭션으로 묶이게 되어 <code>RuntimeException</code> 발생시 전체 Rollback이 진행된것입니다.</p><p>다시 정리하면 Bean 내부에서 <code>this.xxxx()</code>메서드 호출시에는 Proxy를 통해서 <code>@Transactional</code>설정이 동작하지 않는다는 것입니다.</p><h2><span id="원인">원인</span></h2><blockquote><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/data-access.html#transaction-declarative-annotations" rel="external nofollow noopener noreferrer" target="_blank">Spring Document</a><br>In proxy mode (which is the default), only external method calls coming in through the proxy are intercepted. This means that self-invocation (in effect, a method within the target object calling another method of the target object) does not lead to an actual transaction at runtime even if the invoked method is marked with @Transactional. Also, the proxy must be fully initialized to provide the expected behavior, so you should not rely on this feature in your initialization code (that is, @PostConstruct).</p></blockquote><p>스프링 문서에 따르면 Proxy Default Mode(스프링에서 사용하는 기본 Proxy를 의미하는 거 같음)는 외부 메서드 (외부 Bean, 즉 동일하지 않은 Bean)에서 호출하는 경우에만 프록시를 타고 Self(<code>this.xxx()</code>)를 호출하는 경우 런타임에 <code>@Transactional</code>가 동작하지 않습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/result-3.png" alt=""></p><p>즉, 위 그림처럼 CGBLIB Proxy를 통해서 <code>save()</code> 메서드가 Proxy 기반으로 <code>@Transactional</code>이 추가가 될 것을 기대했지만 호출하는 곳이 외부 Bean이 아닌 경우에는 Proxy가 인터셉트가 되지 않기 때문에 <code>@Transactional</code>이 동작하지 않게 되는 것입니다.</p><p>또 <code>order</code>, <code>payment</code>, <code>coupon</code> 코드에서 확인 했듯이 외부에서 Bean을 호출 하여 Proxy가 인터럽트 했더라도 동일한 Bean에서 <code>this.xxxx()</code>(Self 호출)에서는 Proxy가 동작하지 않게 됩니다.</p><h2><span id="해결-방법">해결 방법</span></h2><p><code>Self Injection</code>, Spring AOP 대신 <code>AspectJ</code> 사용 등 몇 가지 방법을 검색을 통해서 확인했지만 개인적 견해로는 이 방법은 권장하고 싶지는 않습니다. AOP 라이브러리를 변경하는 것은 리스크가 너무 커 보였고, <code>Self Injection</code> 또한 직관적이지 않으며 <code>@Autowired</code>를 사용하는 것이 마음에 들지 않았습니다.</p><p>가장 간단한 해결 방법은 <code>Service</code> 클래스를 나누고 외부 Bean 호출을 통해서 Proxy가 올바르게 동작하게 하는 것입니다. 코드는 다음과 같습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CouponService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> saveService: SaveService</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">something</span><span class="params">(i: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">"something CurrentTransactionName: <span class="subst">$&#123;TransactionSynchronizationManager.getCurrentTransactionName()&#125;</span>"</span>)</span><br><span class="line">        saveService.save(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SaveService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> couponRepository: CouponRepository</span><br><span class="line">) &#123;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">save</span><span class="params">(i: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        println(<span class="string">"save CurrentTransactionName: <span class="subst">$&#123;TransactionSynchronizationManager.getCurrentTransactionName()&#125;</span>"</span>)</span><br><span class="line">        (<span class="number">1.</span>.i).map &#123;</span><br><span class="line">            <span class="keyword">if</span> (it == <span class="number">20</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> RuntimeException(<span class="string">"<span class="variable">$i</span> ...."</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            couponRepository.save(Coupon(it.toBigDecimal()))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 코드를 다시 호출하면 아래와 같은 결과를 확인할 수 있습니다.<br><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/result-4.png" alt=""></p><p><code>save()</code> 메서드에서 트랜잭션이 생겼으며 해당 아래의 작업은 동일한 트랜잭션을 묶이게 됩니다. 즉 Proxy 기반으로 <code>@Transactional</code>이 동작했으며 예외가 발생하면 모두 Rollback을 진행하게 됩니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> paymentSaveService: PaymentSaveService,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> couponSaveService: CouponSaveService</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">saveOrder</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"saveOrder CurrentTransactionName: <span class="subst">$&#123;TransactionSynchronizationManager.getCurrentTransactionName()&#125;</span>"</span>)</span><br><span class="line">        orderRepository.save(Order(</span><br><span class="line">            amount = <span class="number">10.</span>toBigDecimal(),</span><br><span class="line">            orderer = Orderer(<span class="number">1</span>L, <span class="string">"test@test.com"</span>)</span><br><span class="line">        ))</span><br><span class="line"></span><br><span class="line">        paymentSaveService.savePayment()</span><br><span class="line">        couponSaveService.saveCoupon()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentSaveService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> paymentRepository: PaymentRepository</span><br><span class="line">)&#123;</span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">savePayment</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"savePayment CurrentTransactionName: <span class="subst">$&#123;TransactionSynchronizationManager.getCurrentTransactionName()&#125;</span>"</span>)</span><br><span class="line">        paymentRepository.save(Payment(<span class="number">10.</span>toBigDecimal()))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CouponSaveService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> couponRepository: CouponRepository</span><br><span class="line">)&#123;</span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">saveCoupon</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"saveCoupon CurrentTransactionName: <span class="subst">$&#123;TransactionSynchronizationManager.getCurrentTransactionName()&#125;</span>"</span>)</span><br><span class="line">        couponRepository.save(Coupon(<span class="number">10.</span>toBigDecimal()))</span><br><span class="line">        <span class="keyword">throw</span> RuntimeException()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/result-5.png" alt=""></p><p><code>savePayment()</code> 메서드에서 현재 트랜잭션이 <code>savePayment</code>, <code>saveOrder</code>, <code>saveCoupon</code>은 트랜잭션이 <code>saveOrder</code>인것을 확인할 수 있습니다. 결과는 <code>@Transactional(propagation = Propagation.REQUIRES_NEW)</code>이 정상적으로 동작해서 <code>savePayment()</code>만 트랜잭션이 Commit하게 됩니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;동일한 Bean 내에서 &lt;code&gt;@Transactional&lt;/code&gt;을 사용하는 경우 예상했던 것과 다르게 동작할 수 있습니다. 발생 원인과 해결 방법에 대해서 정리한 포스팅입니다.&lt;/p&gt;
&lt;figure class=&quot;highlight kotl
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Transactional" scheme="https://cheese10yun.github.io/tags/Transactional/"/>
    
      <category term="CGLIB" scheme="https://cheese10yun.github.io/tags/CGLIB/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 살펴보기</title>
    <link href="https://cheese10yun.github.io/spring-cloud/"/>
    <id>https://cheese10yun.github.io/spring-cloud/</id>
    <published>2020-07-31T15:00:00.000Z</published>
    <updated>2020-08-01T09:36:49.476Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="spring-cloud-config">Spring Cloud Config</span></h1><p>스프링 클라우드 컨피그는 중앙 집중식 마이크로서비스 구성을 지원한다. 여기서 두 가지 중요한 구성 요소의 조합이다.</p><ul><li>스프링 클라우드 컨피그 서버 : 버전 관리 리포지토리로 백업된 중앙 집중식 구성 노출을 지원한다.</li><li>스프링 클라우드 컨피그 클라이언트 : 애플리케이션이 스프링 클라우드 컨피그 서버에 연결하도록 지원한다.</li></ul><h2><span id="github-repository-연결">GitHub Repository 연결</span></h2><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/github-img.png" alt=""></p><p>GitHub Repository에</p><ul><li>micoroservice-a-default.yml</li><li>micoroservice-a-dev.yml</li></ul><p>아래 처럼 작성합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">application:</span></span><br><span class="line"><span class="attr">  message:</span> <span class="string">"Message From &#123;ENV&#125; Local Git Repository"</span></span><br></pre></td></tr></table></figure><p><code>{ENV}</code>에 ddefault, dev 환경에 맞는 값을 작성합니다.</p><h2><span id="config-server">Config Server</span></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'org.springframework.cloud:spring-cloud-config-server'</span></span><br><span class="line">implementation <span class="string">'org.springframework.boot:spring-boot-starter-actuator'</span></span><br></pre></td></tr></table></figure><p>config server 의존 성을 추가합니다. actuator도 편의를 위해서 추가합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8888</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"config-server"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      server:</span></span><br><span class="line"><span class="attr">        git:</span></span><br><span class="line"><span class="attr">          uri:</span> <span class="string">"https://github.com/cheese10yun/msa-study-sample"</span></span><br></pre></td></tr></table></figure><p>config server는 8888 port를 사용하는 관례가 있어 port를 8888로 지정합니다. Github Repository URI 주소를 입력합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableConfigServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(ConfigServerApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@EnableConfigServer</code> 어노테이션을 추가만 하면 별다른 설정없이 Config Server가 설정됩니다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/intellj-actuator.png" alt=""><br>actuator 의존성이 있으면 IntellJ Endpoints -&gt; Mappings에서 현재 서버의 API mapping 정보를 쉽게 확인할 수 있습니다.</p><p>마우스 왼쪽 클릭을 한 이후에 Open In Http Request…를 클릭하면 쉽게 HTTP 콜을 할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/http-call.png" alt=""></p><p>URL 형식은 /{appliation-name}/{profile}/{label}입니다. 위에서 등록한 <code>micoroservice-a-default.yml</code>을 확인해보기 위해서 <code>http://localhost:8888/microservice-a/default</code>을 호출합니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"microservice-a"</span>,</span><br><span class="line">  <span class="attr">"profiles"</span>: [</span><br><span class="line">    <span class="string">"default"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"label"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"c03eecc5d8eabefc4b2a8f085789f42bd5317366"</span>,</span><br><span class="line">  <span class="attr">"state"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"propertySources"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"https://github.com/cheese10yun/msa-study-sample/microservice-a-default.yml"</span>,</span><br><span class="line">      <span class="attr">"source"</span>: &#123;</span><br><span class="line">        <span class="attr">"application.message"</span>: <span class="string">"Message From Default Local Git Repository"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>응답 값을 보면 해당 properties를 잘 읽어 오는 것을 확인할 수 있습니다.</p><p><code>http://localhost:8888/microservice-a/dev</code>을 호출하면 <code>micoroservice-a-dev.yml</code>의 값을 제대로 읽어 오는지 확인할 수 있습니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"microservice-a"</span>,</span><br><span class="line">  <span class="attr">"profiles"</span>: [</span><br><span class="line">    <span class="string">"dev"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"label"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"c03eecc5d8eabefc4b2a8f085789f42bd5317366"</span>,</span><br><span class="line">  <span class="attr">"state"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"propertySources"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"https://github.com/cheese10yun/msa-study-sample/microservice-a-dev.yml"</span>,</span><br><span class="line">      <span class="attr">"source"</span>: &#123;</span><br><span class="line">        <span class="attr">"application.message"</span>: <span class="string">"Message From Default Dev Git Repository"</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="client">Client</span></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.cloud:spring-cloud-config-client'</span></span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-actuator'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>필요한 의존성을 추가합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"application"</span>)</span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>프로퍼티를 읽을 ConfigurationProperties 객체를 만듭니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ApplicationConfiguration applicationConfiguration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/message"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">welcome</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"message"</span>, applicationConfiguration.getMessage());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 메시지를 확인할 수 있는 컨트롤러를 만듭니다. <code>getMessage()</code> 메시지는 각 환경마다 다른 메시지를 출력합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  profiles:</span></span><br><span class="line"><span class="attr">    active:</span> <span class="string">&#123;ENV&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">  cloud:</span></span><br><span class="line"><span class="attr">    config:</span></span><br><span class="line"><span class="attr">      uri:</span> <span class="attr">http://localhost:8888</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">microservice-a</span></span><br></pre></td></tr></table></figure><p>파일명은 <code>bootstrap.yml</code>으로 지정합니다. <code>active</code>는 각 환경마다 지정합니다. dev으로 지정하고 <code>http://127.0.0.1:8080/message</code> API를 호출해보겠습니다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/message-call.png" alt=""></p><p>이것도 인텔리제이를 이용해서 호출하면 간편합니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"message"</span>: <span class="string">"Message From Default Dev Git Repository"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Dev</code> 메시지가 출력되는 것을 확인 할 수 있습니다. <code>profiles</code>을 <code>default</code> 으로 지정하면 메시지에는 local 이라는 문자가 출력됩니다.</p><h2><span id="refresh">Refresh</span></h2><p>마이크로서비스 A의 properties의 변경이 생겼을 경우 Refresh API를 호출해서 설정을 변경할 수 있다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/json-1.png" alt=""></p><p>message API를 호출하면 기존 메시지가 그대로 출력된다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># microservice-a-default.yml</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line"><span class="attr">  message:</span> <span class="string">"Message From Default Local Git Repository (Properties update...)"</span></span><br></pre></td></tr></table></figure><p><code>microservice-a-default.yml</code> 메시지를 위와 같이 변경한 이후에</p><p>POST <a href="http://127.0.0.1:8080/actuator/refresh%EC%9D%84" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/actuator/refresh을</a> 호출하면</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &quot;config.client.version&quot;,</span><br><span class="line">  &quot;application.message&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Response으로 application.message의 변경을 알려준다. 이후 message api를 호출하면 아래 그림처럼 변경된 Response를 확인 할 수 있다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/json-2.png" alt=""></p><h2><span id="정리">정리</span></h2><p>Github Repository와 같은 버전 관리 리포지토리로 백업된 중앙 집중 구성으로 properties를 제공해줍니다. 또 Properties 설정 및 단순한 설정으로 클라이언트 애플리케이션이 스프링 클라우드 컨피그 서버에 쉽게 연결되도록 지원해줍니다.</p><h1><span id="spring-cloud-bus">Spring Cloud Bus</span></h1><p>프로덕션 환경에서 실행중인 마이크로서비스 A의 인스턴스가 N대가 있을 경우에는 설정을 변경하기 위해서는 <code>POST http://127.0.0.1:8080/actuator/refresh</code> 요청을 N대의 인스턴스 서버에 N번의 refresh API를 호출 해야한다. 이는 번거러울 뿐만 아니라 실수를 유발하기 쉬운 구조이다.</p><h2><span id="스프링-클라우드-버스를-시용한-변경-전파">스프링 클라우드 버스를 시용한 변경 전파</span></h2><p>스프링 클라우 버스를 사용해서 Rabbit MQ 같은 메시지 브로커를 통해 변경 사항을 여러 인스턴스에 전달할 수 있다.</p><p>각 마이크로서비스의 인스턴스는 애플리케이션 구동시에 스프링 클라우드 버스에 등록한다. 마이크로서비스의 인스턴스 중 하나에 refresh가 호출되면 스프링 클라우드 버스는 모든 마이크로서비스 인스턴스에 변경 이벤트를 전달하게 된다.</p><h2><span id="rabbit-mq-설치">Rabbit MQ 설치</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── config-server</span><br><span class="line">├── docker-compose.yaml</span><br><span class="line">├── microservice-a</span><br><span class="line">├── microservice-a-default.yml</span><br><span class="line">├── microservice-a-dev.yml</span><br><span class="line">├── service-consumer</span><br><span class="line">├── static</span><br><span class="line">└── volumes</span><br></pre></td></tr></table></figure><p>프로젝트 루트 디렉토리에 volumes 디렉토리를 만들고, gitginore를 추가 해줍니다. 해당 디렉토리에 docker rabbmit mq가 저장됩니다.</p><p><code>docker-compose.yaml</code>  파일은 아래와 같이 준비 해줍니다.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">  rabbitmq:</span></span><br><span class="line"><span class="attr">    container_name:</span> <span class="string">bus.rabbitmq</span></span><br><span class="line"><span class="attr">    image:</span> <span class="attr">rabbitmq:3.7-management</span></span><br><span class="line"><span class="attr">    ports:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"5672:5672"</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">"15672:15672"</span></span><br><span class="line"><span class="attr">    environment:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">RABBITMQ_DEFAULT_USER</span> <span class="string">=</span> <span class="string">user</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">RABBITMQ_DEFAULT_PASS</span> <span class="string">=</span> <span class="string">user</span></span><br><span class="line"><span class="attr">    hostname:</span> <span class="string">bus</span></span><br><span class="line"><span class="attr">    volumes:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">./volumes/bus-rabbitmq:/var/lib/rabbitmq</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd 프로젝트 루트 디렉토리</span><br><span class="line">$ docker-compose -up -d</span><br></pre></td></tr></table></figure><h2><span id="client">Client</span></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-bus-amqp'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>필요한 의존성을 추가합니다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/bus-log.png" alt=""><br>서버가 시작될때 스프링 클라우드 버스에 등록되고, 클라우드 버스의 이벤트를 수신하게 됩니다. Rabbmit MQ 컨넥션은 자동으로 연결됩니다. (스프링 너란 자식…)</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/intellj-port-2.png" alt=""></p><p>포트를 8080, 8081을 설정해서 2대의 서버를 구동 시킵니다.</p><h2><span id="bus-refresh">Bus Refresh</span></h2><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/bus-mapping.png" alt=""></p><p><code>microservice-a-default.yml</code>을 아래처럼 변경합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">application:</span></span><br><span class="line"><span class="attr">  message:</span> <span class="string">"Message From Default Local Git Repository (Spring Cloud Bus)"</span></span><br></pre></td></tr></table></figure><p><code>/bus/refresh</code> API가 추가되 었습니다. 해당 API를 호출합니다. (8081을 호출해도 됩니다.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X POST http://localhost:8080/bus/refresh</span><br></pre></td></tr></table></figure><p>refresh 호출 이후에 message를 호출합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -X GET http://localhost:8081/message</span><br></pre></td></tr></table></figure><p>8080 refresh를 호출하더라도 다른 8081 서버도 반영되는 것을 확인할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/8081-result.png" alt=""></p><h1><span id="eureka">Eureka</span></h1><h2><span id="네임-서버">네임 서버</span></h2><p>마이크로서비스 아키텍처는 서로 상호 작용하는 더 작은 마이크로서비스가 필요 하다. 이 밖에도 각 마이크로서비스의 인스턴스가 여러 개 있을 수 있다. 마이크로서비스의 새로운 인스턴스가 동적으로 생성되고 파괴되면 외부 서비스의 연결 및 구성을 수동으로 유지하는 것이 어려울 수 있다. <strong>네임 서버는 서비스 등록 및 서비스 검색 기능을 제공한다.</strong> 네임 서버는 마이크서비스가 이들 자신을 등록할 수 있게 하고, 상호 작용하고자 하는 다른 마이크러서비스에 대한 URL을 찾을 수 있게 도와준다.</p><h2><span id="url-하드-코딩의-한계">URL 하드 코딩의 한계</span></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">microservice-a:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    listOfServers:</span> <span class="attr">http://localhost:8080,http://localhost:8081</span></span><br></pre></td></tr></table></figure><ul><li>마이크로서비스 A의 새 인스턴스가 생성된다.</li><li>마이크로서비스 A의 기존 인스턴스는 더 이상 사용할 수 없다.</li><li>마이크로서비스 A가 다른 서버로 이동됐다.</li></ul><p>이런 모든 경우에 구성을 업데이트해야 하며, 변경 사항을 적용하기 위해서는 마이크로서비스가 새로 고쳐져야 한다.</p><h2><span id="네임-서버-작동">네임 서버 작동</span></h2><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/name-server.png" alt=""></p><ul><li><strong>모든 마이크로서비스는 각 마이크로서비스가 시작될때 네임 서버에 등록한다.</strong></li><li>서비스 소비자가 특정 마이크로 서비스의 위치를 얻으려면 네임 서버를 요청해야한다.</li><li>고유한 마이크로서비스 ID가 각 마이크로서비스에 지정된다. 이것을 등록 요청 및 검색 요청에서 키로 사용된다.</li><li>마이크로서비스는 자동으로 등록 및 등록 취소할 수 있다.</li><li>서비스 소비자가 마이크로서비스ID로 네임 서버를 찾을 때마다 해당 특정 마이크로서비스의 인스턴스 목록을 가져온다.</li></ul><h2><span id="구현">구현</span></h2><h3><span id="유레카-서버-설정">유레카 서버 설정</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation &apos;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>필요한 디펜던시를 추가합니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8761</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3><span id="유레카-마이크로-서비스-등록">유레카 마이크로 서비스 등록</span></h3><p>기존에 서비스들을 유레카 서버에게 접속할 수있도록 서비스 등록 작업을 진행합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation &apos;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MicroserviceAApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(MicroserviceAApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>의존성 추가 및 <code>@EnableDiscoveryClient</code> 어노테이션 추가합니다.</p><h3><span id="유레카와-마이크로-서비스-연결">유레카와 마이크로 서비스 연결</span></h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#microservice-a:</span></span><br><span class="line"><span class="comment">#  ribbon:</span></span><br><span class="line"><span class="comment">#    listOfServers: http://localhost:8080,http://localhost:8081</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableFeignClients</span>(<span class="string">"com.cloud.serviceconsumer"</span>) <span class="comment">// 어노테이션 추가</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(ServiceConsumerApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>마이크로서비스A의 URL을 하드 코딩했을 경우 추가적인 서버 증성작업이 어렵다. 서비스 소비자 마이크로서비스가 유레카 서비스로부터 URL을 알아낼 수 있어야한다. 하드코딩된 URL정보를 주석처리 하고 아래의 어노테이션을 추가하면 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"microservice-a"</span>)</span><br><span class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"microservice-a"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RandomServiceProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/random"</span>)</span><br><span class="line">  <span class="function">List&lt;Integer&gt; <span class="title">getRandomNumbers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3><span id="동작-순서">동작 순서</span></h3><ol><li>마이크로서비스 A의 각 인스턴스가 시작되면 유레카 네임 서버에 등록한다.</li><li>서비스 소비자 마이크로서비스는 마이크로서비스 A의 인스턴스ㅔ 대해 유레카 네임 서버를 요청한다.</li><li>서비스 소비자 마이크로서비스는 립본 클라이언트-클라이언트 로드 밸런서를 사용해 소출할 마이크로서비스 A의 특정 인스턴스를 결정한다.</li><li>서비스 소비자 마이크로서비스는 마이크로서비스 A의 특정 인스턴스를 호출한다.</li></ol><p>유레카의 가장 큰 장점은 서비스 소비자 마이크로서비스가 마이크로서비스 A와 분리된다는 것이다. 서비스 소비자 마이크로서비스는 마이크로서비스 A의 새로운 인스턴스가 나타나거나 기존 인스턴스가 디운될 때마다 재구성할 필요가 없다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/eureka-dashboard.png" alt=""><br>유레카 데시보드에서 여러 마이크로서비스를 확인 할 수 있다.</p><h1><span id="ribbon">Ribbon</span></h1><h2><span id="로드-밸런싱">로드 밸런싱</span></h2><p>마이크로서비스는 클라우드-네이티브 아키텍처의 가장 중요한 빌딩 블록이다. 마이크로서비스 인스턴스는 특정 마이크로서비스의 로드에 따라 확대 및 축소된다. 부하가 마이크로서비스의 다른 인스턴스 간에 똑같이 분산되도록 하려면 로드밸런싱의 기술피 필수이다. 로드 밸런싱은 로드가 마이크로서비스의 다른 인스턴스간에 균등하게 분배하도록 도와준다.</p><h2><span id="ribbon-구성">Ribbon 구성</span></h2><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/ribbon.png" alt=""></p><p>스프링 클라우드 넷플릭스 립본은 마이크로서비스의 다른 인스턴스 간에 라운드 로빈 실행을 사용해 <strong>클라이언트-사이드 로드 밸런싱을 제공한다.</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-netflix-ribbon'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>필요한 의존성을 추가 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"microservice-a"</span>)</span><br><span class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"microservice-a"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RandomServiceProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/random"</span>)</span><br><span class="line">  <span class="function">List&lt;Integer&gt; <span class="title">getRandomNumbers</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기존에 작성했던 RandomServiceProxy 인터페이스를 위와 같이 작성합니다. <code>FeignClient</code>도 서비스 네임만 기술합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">microservice-a:</span></span><br><span class="line"><span class="attr">  ribbon:</span></span><br><span class="line"><span class="attr">    listOfServers:</span> <span class="attr">http://localhost:8080,http://localhost:8081</span></span><br></pre></td></tr></table></figure><p><code>microservice-a</code>의 서비스 url을 입력합니다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/ribbon-result.png" alt=""></p><p>GET <a href="http://127.0.0.1:8100/add%EC%9D%84" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8100/add을</a> 호추랗면 아래와 같은 결과값을 응답 받습니다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/ribbon-result2.png" alt=""></p><p>라운드 로빈 방식으로 random API 호출이 <a href="http://localhost:8080" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080</a>, http://localhost:8081으로 분산되어 호출됩니다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/msa-simple.png" alt=""></p><p>위과 같은 아키텍처 구성을 가지게 됩니다.</p><h1><span id="선언적-rest-클라이언트-feign">선언적 Rest 클라이언트 - Feign</span></h1><p>페인은 최소한의 구성과 코드로, REST 서비스를 위한 REST 클라이언트를 쉽게 작성할 수 있습니다. 간단한 인터페이스로, 적절한 어노테이션을 사용하는 것이 특징입니다.</p><p>페인은 립본 및 유레카와 통합하여 사용하면 더욱 효율성이 높아지게 됩니다.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-openfeign'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>필요한 의존성을 추가합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient</span>(name = <span class="string">"micoservice-a"</span>, url = <span class="string">"localhost:8080"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RandomServiceProxy</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/random"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">getRandomNumbers</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>서비스의 이름과 URL을 하드코딩 합니다. (유레카를 통해서 하드코딩된 부분을 제거할 수 있습니다.)</li><li>Controller 코드를 작성하듯이 작성합니다.</li><li>중요한 것은 이것은 인터페이스이며, 적절한 어노테이션 기반으로 동작한다는 것입니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberAddController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> RandomServiceProxy randomServiceProxy;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/add"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Long <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> List&lt;Integer&gt; numbers = randomServiceProxy.getRandomNumbers();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> sum = numbers.stream().mapToInt(number -&gt; number).asLongStream().sum();</span><br><span class="line">    log.warn(<span class="string">"returning "</span> + sum);</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>RandomServiceProxy 의존성을 받아 사용합니다.</li></ul><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/fegin-result.png" alt=""><br>Feign 응답값을 확인할 수 있습니다.</p><h1><span id="api-게이트웨이">API 게이트웨이</span></h1><h2><span id="마이크로-서비스의-문제점">마이크로 서비스의 문제점</span></h2><ul><li>인증, 권한 부여 및 보안 : 모놀리식 서버에서는 인증 인가를 한 서버에서 책임지면 되는데 여러 서비스가 존재하는 마이크로서비스에서는 올바른 엑세스 보장을 어떻게할 것인가?</li><li>동적 라우팅은 어떻게 할 것인가?</li><li>내결합성: 하나의 마이크로서비스에서 오류가 발생해도 전체 시스템이 중단되지 않도록하면 어떻게 해야하는가 ?</li></ul><p>이러한 문제는 마이크로서비스가 서로 직접 대화할 때 개별 마이크로서비스에 의해 해결돼야한다. <strong>하지만 이런 아키텍처들은 위 우려들을 각 마이크로서비스가 다르게 처리할 수 있기 때문에 유지 관리가 어려울 수 있다.</strong></p><p>이려한 문제를 해결하기 가장 쉬운 것이 API 게이트웨이이다. 다음은 API 게이트가 제공하는 기능이다.</p><ul><li>인증 및 보안</li><li>속도 제한</li><li>모니터링</li><li>동적 라우팅 및 정적 응답 처리</li><li>로드 차단</li><li>여러 가지 서비스의 응답 집계</li></ul><h2><span id="주울로-클라이언트-사이드-로드-밸런싱-구현">주울로 클라이언트 - 사이드 로드 밸런싱 구현</span></h2><p>주을은 스프링 클라우드 넷플릭스 프로젝트의 일부다. 동적 라우팅, 모니터링, 필터링, 보안 등의 기능을 제공하는 API 게이트웨이 서비스다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation &apos;org.springframework.cloud:spring-cloud-starter-netflix-eureka-client&apos;</span><br><span class="line">    implementation &apos;org.springframework.cloud:spring-cloud-starter-netflix-zuul&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableZuulProxy</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApiGatewayApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SpringApplication.run(ApiGatewayApplication.class, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">"zuul-api-gateway"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">eureka:</span></span><br><span class="line"><span class="attr">  client:</span></span><br><span class="line"><span class="attr">    service-url:</span></span><br><span class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka</span></span><br><span class="line"></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">  port:</span> <span class="number">8765</span></span><br></pre></td></tr></table></figure><p>필요한 의존성, 유레카 클라이언트, API 게이트웨이 등록을 진행한다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/api-gateway-eureka.png" alt=""><br>서버를 실행하면 유레카에 등록된 것을 확인 할 수있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleLoggingFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"pre"</span>; <span class="comment">// pre 사전 필터, route 원본으로 라우팅하기, post필터를 포스트라우팅, error 에러 처리</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// 필터 우선순위</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>; <span class="comment">// 조건에 따른 필터 동작 여부, 해당 코드에서는 동작하기 위해서 true 리턴</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 필터에 대한 로직을 구현하는 방식, 아래 예제는 단순하게 로깅용</span></span><br><span class="line">    <span class="keyword">final</span> RequestContext context = RequestContext.getCurrentContext();</span><br><span class="line">    <span class="keyword">final</span> HttpServletRequest request = context.getRequest();</span><br><span class="line"></span><br><span class="line">    log.info(MessageFormat</span><br><span class="line">        .format(<span class="string">"Request Method : &#123;0&#125; \n URL : &#123;1&#125; "</span>, request.getMethod(),</span><br><span class="line">            request.getRequestURI()));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GET http://127.0.0.1:8765/microservice-a/random</span><br><span class="line">Accept: application/json</span><br><span class="line"></span><br><span class="line">GET http://127.0.0.1:8765/service-consumer/add</span><br><span class="line">Accept: application/json</span><br></pre></td></tr></table></figure><p>service-name/url 을 호출할 경우 유레카에 등록되있는 서비스 정보를 기반으로 호출하게된다.<br><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/api-gateway-eureka-result.png" alt=""></p><p><code>SimpleLoggingFilter</code> 잘 동작하는지 확인할 수 있다.</p><h2><span id="필터">필터</span></h2><ul><li>사전 필터: 주울에서 목표 대상에 대한 실제 요청이 발생하기 전에 호출된다. 일반적으로 사전 필터는 서비스의 일관된 메세지형식(HTTP 헤더의 포함여부)을 확이하는 작업을 수행하거나 서비스를 이용하는 사용자가 인증 및 인가되었는지 확인하는 게이이트키퍼 역할을 한다.</li><li>사후 필터: 대상 서비스를 호추랗고 응답을 클라이언트로 전송한 후 호출된다. 일반적으로 사후 필터는 대상 서비스의 응답을 로깅하거나 에러 처리, 민감정보에 대한 응답을 감시하는 목적으로 구현된다.</li><li>경로 필터: 대상 서비스가 호출되기 전에 호출을 가로체는 데 사용된다. 일반적으로 경로 필터는 일정 수준의 동적 라우팅 필요 여부를 결정하는 데 사용된다. 예를 들어 이 장 뒷부분에서 동일 서비스의 다른 두 버전을 라우팅할 수 있는 경로 단위 핉를 사용해 작은 호출 비율만 새 버전의 서비스로 라우팅할 수 있다.</li></ul><h3><span id="필터-적용-패턴">필터 적용 패턴</span></h3><ul><li>TrackingFilter: 주울에서 보내는 모든 요청에 연관된 상관관계 ID 여부를 확인하는 사전 필터다, 상관관계 ID는 고객 요청을 수행할 때 실행할 때 실행되는 모든 마이크로서비스에 전달되는 고유 ID이다. 상관관계 ID를 사용하면 특정 호출이 일련의 마이크로서비스를 통과할 때 발생하는 모든 이벤트 체인을 추적할 수 있다.</li><li>SpecialRoutesFilter: 유입되는 경로를 확인하고 해당 경로에 A/B 테스팅 수행 여부를 결정하는 주울의 경로 필터다.</li><li>ResponseFilter: 서비스 호출과 연관된 상관관계 ID를 클라이언트 회신하는 HTTP 응답 헤더에 삽입하는 사후 필터다. 일반적으로 클라이언트는 호출한 요청과 연관된 상관관계 ID에 엑세스할 수 있다.</li></ul><h2><span id="참고">참고</span></h2><ul><li><a href="http://acornpub.co.kr/book/mastering-spring-5.0" rel="external nofollow noopener noreferrer" target="_blank">스프링 5.0 마스터</a></li><li><a href="http://www.yes24.com/Product/Goods/67473377" rel="external nofollow noopener noreferrer" target="_blank">스프링 마이크로 서비스 코딩 공작소</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;spring-cloud-config&quot;&gt;Spring Cloud Config&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;스프링 클라우드 컨피그는 중앙 집중식 마이크로서비스 구성을 지원한다. 여기서 두 가지 중요한 구성 요소의 조합이다.&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Cloud" scheme="https://cheese10yun.github.io/tags/Cloud/"/>
    
  </entry>
  
  <entry>
    <title>인텔리제이 Github Code Review</title>
    <link href="https://cheese10yun.github.io/intellij-code-review/"/>
    <id>https://cheese10yun.github.io/intellij-code-review/</id>
    <published>2020-07-17T15:00:00.000Z</published>
    <updated>2020-07-18T13:47:48.454Z</updated>
    
    <content type="html"><![CDATA[<p>인텔리제이기반으로 Github 기반 Pull Request &amp; Code Review를 진행할 수 있습니다. 바로 기능을 살펴보겠습니다. 인텔리제이 기반 Pull Request는 <a href="https://cheese10yun.github.io/github-proejct/#pull-requestcode-review-1">Github로 프로젝트 관리하기 Part1</a>을 참고해 주세요</p><p><img src="https://raw.githubusercontent.com/cheese10yun/github-project-management/master/images//intellij-pr-3.png" alt=""></p><p><code>Actions</code>에서 <code>View Pullrequests</code>을 통해서 현재 PR을 확인할 수 있습니다.</p><p><img src="https://raw.githubusercontent.com/cheese10yun/github-project-management/master/images//intellij-pr-4.png" alt=""></p><p><code>state:open</code>을 통해서 현재 open 상태이 PR 리스트를 확인할 수 있고 우측에는 코드 리뷰 대상 파일이 있고 <code>User.java</code> 파일을 클릭해서 Diff를 확인할 수 있습니다.</p><p><img src="https://raw.githubusercontent.com/cheese10yun/github-project-management/master/images//intellij-pr-5.png" alt=""><br>해당 코드에 대해서 코멘트를 추가하고 싶은 경우 <code>+</code> 버튼을 클릭해서 코멘트를 달 수 있습니다.</p><p><img src="https://raw.githubusercontent.com/cheese10yun/github-project-management/master/images//intellij-pr-6.png" alt=""></p><p><img src="https://raw.githubusercontent.com/cheese10yun/github-project-management/master/images//intellij-pr-7.png" alt=""></p><p>이렇게 추가한 코멘트는 Github, Intellij에서도 확인할 수 있으며 코멘트에 대한 코멘트도 추가할 수 있습니다.</p><p><img src="https://raw.githubusercontent.com/cheese10yun/github-project-management/master/images//intellij-pr-8.png" alt=""><br>또 인텔리제이에서 머지도 가능합니다. <code>Merge</code> 버튼을 눌러서 머지를 진행합니다. <a href="https://github.com/cheese10yun/github-project-management/pull/24" rel="external nofollow noopener noreferrer" target="_blank">인텔리제이 PR &amp; Code Review #24</a>는 실제 PR이 머지 된 것을 확인할 수 있습니다.</p><p><img src="https://raw.githubusercontent.com/cheese10yun/github-project-management/master/images//intellij-pr-9.png" alt=""><br>위처럼 질이를 통해서 PR에 <code>status</code>, <code>author</code>, <code>assignee</code>을 기반으로 검색을 할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;인텔리제이기반으로 Github 기반 Pull Request &amp;amp; Code Review를 진행할 수 있습니다. 바로 기능을 살펴보겠습니다. 인텔리제이 기반 Pull Request는 &lt;a href=&quot;https://cheese10yun.githu
      
    
    </summary>
    
    
      <category term="IntelliJ" scheme="https://cheese10yun.github.io/tags/IntelliJ/"/>
    
      <category term="Code Review" scheme="https://cheese10yun.github.io/tags/Code-Review/"/>
    
  </entry>
  
  <entry>
    <title>Junit5</title>
    <link href="https://cheese10yun.github.io/junit5/"/>
    <id>https://cheese10yun.github.io/junit5/</id>
    <published>2020-06-16T12:45:50.000Z</published>
    <updated>2020-06-16T12:49:43.163Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="instance-특징">Instance 특징</span></h2><p>Junit5는 <strong>테스트 메서드마다 인스턴스를 새로 생성</strong>하는 것이 기본 전략입니다. 이는 테스트 코드(메서드) 간의 디펜던시 줄이기 위해서입니다. 아래 코드를 통해서 살펴보겠습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">Junit5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `value add 1`<span class="params">()</span></span> &#123;</span><br><span class="line">        value++</span><br><span class="line"></span><br><span class="line">        println(<span class="string">"value : <span class="variable">$value</span>"</span>)</span><br><span class="line">        println(<span class="string">"Junit5 : <span class="variable">$this</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `value add 2`<span class="params">()</span></span> &#123;</span><br><span class="line">        value++</span><br><span class="line"></span><br><span class="line">        println(<span class="string">"value : <span class="variable">$value</span>"</span>)</span><br><span class="line">        println(<span class="string">"Junit5 : <span class="variable">$this</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>각가의 테스트 코드마다 <code>value</code>을 증가시키고 있습니다. <code>value add 1</code>, <code>value add 2</code> 두 메서드 중 한 메서드에서는 <code>value : 2</code>가 출력되어야 합니다. 하지만 출력 결과를 확인해 보면 모두 <code>value : 1</code>의 값이 출력되는 것을 확인할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/junit5-instance-1.png" alt=""></p><p>그 이유는 위에서 언급했듯이 Junit5는 테스트 메서드마다 인스턴스를 새로 생성하는 것이 기본 전략이기 때문에 <code>value</code> 값이 초기화되는 것입니다. <code>Junit5 : $this</code> 출력을 확인해보면 인스턴스 주솟값이 다른 것을 확인할 수 있습니다. 이렇게 되면 <code>value add 1</code>, <code>value add 2</code> 테스트 메서드 간에 디펜더시가 줄어들게 됩니다.</p><p>만약 테스트 메서드마다 해당 값을 공유해서 사용하고 싶으면 <code>companion object (static)</code>으로 변수를 지정하는 것입니다. 아레 코드처럼 변경하고 테스트 코드를 실행해보면 다음과 같은 결과를 확인할 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">Junit5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private var value = 0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">var</span> value = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/junit5-instance-2.png" alt=""></p><p><code>value : $value</code>의 출력을 확인해보면 해당 값이 증가된 것을 확인할 수 있습니다. 또 Junit5 인스턴스가 계속 생성되는 것을 방지하고 싶은 경우에는 <code>@TestInstance(TestInstance.Lifecycle.PER_CLASS)</code> 에노테이션을 사용하면 됩니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TestInstance(TestInstance.Lifecycle.PER_CLASS)</span></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">Junit5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> value = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `value add 1`<span class="params">()</span></span> &#123;</span><br><span class="line">        value++</span><br><span class="line"></span><br><span class="line">        println(<span class="string">"value : <span class="variable">$value</span>"</span>)</span><br><span class="line">        println(<span class="string">"Junit5 : <span class="variable">$this</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `value add 2`<span class="params">()</span></span> &#123;</span><br><span class="line">        value++</span><br><span class="line"></span><br><span class="line">        println(<span class="string">"value : <span class="variable">$value</span>"</span>)</span><br><span class="line">        println(<span class="string">"Junit5 : <span class="variable">$this</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/junit5-instance-3.png" alt=""></p><p><code>Junit5</code> 주솟값을 보면 동일한 주솟값을 출력하는 것을 확인할 수 있습니다. 그 결과 <code>private var value</code> 변숫값이 테스트 메서드에서 공유되는 것을 확인할 수 있습니다. 물론 테스트 코드 간의 디펜더시를 줄이는 것이 올바른 테스트 방식이라고 생각합니다. <strong>하지만 테스트 메서드마다 인스턴스를 계속 생성하는 것이 효율적이지 않다고 생각합니다.</strong> 테스트 코드는 디펜던시 없이 작성하고, <code>@TestInstance(TestInstance.Lifecycle.PER_CLASS)</code>을 통해서 인스턴스를 계속 생성을 막는 것도 좋은 방법이라고 생각합니다.</p><h3><span id="전처리-후처리">전처리 후처리</span></h3><table><thead><tr><th>Annotation</th><th>Description</th></tr></thead><tbody><tr><td>@BeforeAll</td><td>테스트 실행되기 전 한번 실행됨</td></tr><tr><td>@BeforeEach</td><td>모든 테스트 마다 실행되기 전에실행됨</td></tr><tr><td>@AfterEach</td><td>모든 테스트 마다 실행된후 전에실행됨</td></tr><tr><td>@AfterAll</td><td>테스트 실행된 후 한 번 실행됨</td></tr></tbody></table><p>Junit5에서는 테스트 메서드 실행 시 전처리, 후처리를 위해서 위와 같은 어노테이션을 지원합니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">        <span class="meta">@BeforeAll</span></span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">beforeAll</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="string">"BeforeAll : 테스트 실행되기 이전 단 한 번만 실행"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@AfterAll</span></span><br><span class="line">        <span class="meta">@JvmStatic</span></span><br><span class="line">        <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">afterAll</span><span class="params">()</span></span> &#123;</span><br><span class="line">            println(<span class="string">"AfterAll : 테스트 실행 이후 단 한 번 실행됨"</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">beforeEach</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"BeforeEach : 모든 테스트 마다 실행되기 이전 실행"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">afterEach</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"AfterEach : 모든 테스트 마다 실행 이후 실행"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `test code1`<span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"test code run 1"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `test code2`<span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"test code run 2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/junit5-instance-5.png" alt=""></p><p>테스트 결과를 보면 <code>@BeforeXXX</code>는 테스트 실행 이전 이후 1번 실행되고, <code>@BeforeXXX</code>는 테스트 메서드 실행 이전 이후 실행되는 것을 확인할 수 있습니다.</p><p>위에서 설명했듯이 테스트 메서드마다 인스턴스를 새로 생성하기 때문에 <code>@BeforeXXX</code>는 <code>companion object(static)</code>으로 처리하고 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">beforeAll</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"BeforeAll : 테스트 실행되기 이전 단 한 번만 실행"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">afterAll</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"AfterAll : 테스트 실행 이후 단 한 번 실행됨"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약 위처럼 설정하면 위와 같은 에러 메시지를 확인할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.junit.platform.commons.JUnitException: @BeforeAll method &apos;public final void com.example.querydsl.SampleTest.beforeAll$query_dsl()&apos; must be static unless the test class is annotated with @TestInstance(Lifecycle.PER_CLASS).</span><br></pre></td></tr></table></figure><p>아래 코드처럼 <code>TestInstance.Lifecycle.PER_CLASS</code>을 추가하면 테스트 코드가 잘 실행되는 것을 확인할 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TestInstance(TestInstance.Lifecycle.PER_CLASS)</span></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">beforeAll</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"BeforeAll : 테스트 실행되기 이전 단 한 번만 실행"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">afterAll</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"AfterAll : 테스트 실행 이후 단 한 번 실행됨"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>예제가 길었지만 전하고 싶은 것은 <strong>테스트 메서드마다 인스턴스를 새로 생성하는 것입니다.</strong></p><h2><span id="테스트-순서">테스트 순서</span></h2><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/junit5-instance-5.png" alt=""></p><p>Junit5에는 테스트 코드 실행 순서는 명확하게 정해져있지 않습니다.(정확히는 순서가 있지만 그것이 명시적으로 정해져있지는 않은 거 같습니다.) 물론 테스트 간의 디펜더시를 줄이기 위해서는 테스트 간의 순서가 없는 것이 더 바람직합니다.</p><p>하지만 특정 테스트에서는 순서를 명시해야 할 필요성도 있습니다. <code>@TestMethodOrder(MethodOrderer.OrderAnnotation::class)</code>을 사용하면 테스트 순서를 명시적으로 지정할 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TestInstance(TestInstance.Lifecycle.PER_CLASS)</span></span><br><span class="line"><span class="meta">@TestMethodOrder(MethodOrderer.OrderAnnotation::class)</span></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">beforeAll</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"BeforeAll : 테스트 실행되기 이전 단 한 번만 실행"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">afterAll</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"AfterAll : 테스트 실행 이후 단 한 번 실행됨"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">beforeEach</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"BeforeEach : 모든 테스트 마다 실행되기 이전 실행"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> <span class="title">afterEach</span><span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"AfterEach : 모든 테스트 마다 실행 이후 실행"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Order(1)</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `test code1`<span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"test code run 1"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@Order(2)</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `test code2`<span class="params">()</span></span> &#123;</span><br><span class="line">        println(<span class="string">"test code run 2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/junit5-instance-6.png" alt=""></p><p><code>@Order()</code>을 사용하면 위와 같이 테스트 순서를 보장 받을 수 있습니다. <strong><code>value</code> 값이 낮을수록 테스트 코드 우선순위가 높습니다.</strong></p><h2><span id="정리">정리</span></h2><p><code>Junit5</code>에서는 테스트마다 새로운 인스턴스 생성, 테스트 간의 순서를 보장하지 않습니다. 그러한 이유는 이런 방식으로 테스트 코드를 작성하는 것이 더 좋은 방법이라 생각하여 가이드를 하는 거 같습니다. 이러한 부분을 명확하게 이해하고 위와 같은 방법을 사용하는 것이 좋을 거 같습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;instance-특징&quot;&gt;Instance 특징&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Junit5는 &lt;strong&gt;테스트 메서드마다 인스턴스를 새로 생성&lt;/strong&gt;하는 것이 기본 전략입니다. 이는 테스트 코드(메서드) 간의 디펜던시 줄
      
    
    </summary>
    
    
      <category term="test" scheme="https://cheese10yun.github.io/tags/test/"/>
    
      <category term="junit5" scheme="https://cheese10yun.github.io/tags/junit5/"/>
    
  </entry>
  
  <entry>
    <title>JPA + Querydsl group_concat 사용법</title>
    <link href="https://cheese10yun.github.io/jpa-query-dsl-group-concat/"/>
    <id>https://cheese10yun.github.io/jpa-query-dsl-group-concat/</id>
    <published>2020-06-13T06:11:42.000Z</published>
    <updated>2020-06-13T06:19:17.696Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/query-dsl" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에서 확인할 수 있습니다.</p></blockquote><h1><span id="jpa-querydsl-group_concat-사용법">JPA + Querydsl group_concat 사용법</span></h1><p>Querydsl 기반으로 작업하다 보면 sql 함수가 필요한 경우가 있습니다. 대표적으로 sum(), max() 등이 있고 해당 함수는 Querydsl 자체에서 지원해 주고 있습니다. 하지만 <code>group_concat</code>과 같은 함수를 사용하기 위해서는 별도의 설정이 필요합니다. 본 포스팅의 내용은 Mysql 환경에서 JPA + Querydsl 조합에서 <code>group_concat</code>을 사용하는 방법을 정리한 것입니다.</p><p>Mysql 환경에서 <code>group_concat</code>을 사용하기 위해서 별다른 설정 없이 <code>Expressions.stringTemplate()</code> 함수를 이용해서 <code>group_concat</code>사용하는 경우 아래와 같은 에러가 발생합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: No pattern found for GROUP_CONCAT</span><br></pre></td></tr></table></figure><p><code>SQLExpressions.groupConcat</code>을 사용해서 <code>group_concat</code>을 사용하는 방법도 있지만 해당 설정은 의존성과, 설정이 조금 복잡하기 때문에 <code>Expressions.stringTemplate</code> 기반으로 <code>group_concat</code>을 사용하겠습니다.</p><h2><span id="설정-방법">설정 방법</span></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.querydsl.config</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MysqlCustomDialect</span> : <span class="type">MySQL57Dialect</span></span>() &#123;</span><br><span class="line">    init &#123;</span><br><span class="line">        registerFunction(</span><br><span class="line">            <span class="string">"GROUP_CONCAT"</span>,</span><br><span class="line">            StandardSQLFunction(<span class="string">"group_concat"</span>, StandardBasicTypes.STRING)</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MySQL57Dialect</code>을 상속받는 커스텀한 <code>Dialect</code>클래스를 작성하고 <code>registerFunction()</code>메서드를 통해서 <code>group_concat</code> SQL Function을 등록합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  jpa:</span></span><br><span class="line">    <span class="string">...</span></span><br><span class="line"><span class="attr">    show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">    database-platform:</span> <span class="string">com.example.querydsl.config.MysqlCustomDialect</span></span><br><span class="line">    <span class="string">...</span></span><br></pre></td></tr></table></figure><p><code>application.myl</code> or <code>application.properties</code> 설정에서 위에서 작성한 <code>MysqlCustomDialect</code> 패키지 경로를 입력합니다.</p><h2><span id="테스트">테스트</span></h2><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/group_concat_erd.png" alt=""></p><ul><li>위와 같은 관계에서 테스트를 진행하겠습니다.</li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberGroupConcat</span> <span class="meta">@QueryProjection</span> <span class="keyword">constructor</span></span>(</span><br><span class="line">    <span class="keyword">val</span> usernameGroupConcat: String,</span><br><span class="line">    <span class="keyword">val</span> ageGroupConcat: String</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@ActiveProfiles(<span class="meta-string">"mysql"</span>)</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">GroupConcatTest</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> em: EntityManager</span><br><span class="line">) : SpringBootTestSupport() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `group concat test`<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//given</span></span><br><span class="line">        <span class="keyword">val</span> teamA = Team(<span class="string">"teamA"</span>)</span><br><span class="line">        em.persist(teamA)</span><br><span class="line"></span><br><span class="line">        (<span class="number">1.</span><span class="number">.20</span>).map &#123;</span><br><span class="line">            em.persist(Member(username = <span class="string">"member-<span class="variable">$it</span>"</span>, age = it, team = teamA))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//when</span></span><br><span class="line">        <span class="keyword">val</span> members =</span><br><span class="line">            query</span><br><span class="line">                .select(QMemberGroupConcat(</span><br><span class="line">                    Expressions.stringTemplate(<span class="string">"group_concat(&#123;0&#125;)"</span>, qMember.username),</span><br><span class="line">                    Expressions.stringTemplate(<span class="string">"group_concat(&#123;0&#125;)"</span>, qMember.age)</span><br><span class="line">                ))</span><br><span class="line">                .from(qMember)</span><br><span class="line">                .groupBy(qMember.team)</span><br><span class="line">                .fetch()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (member <span class="keyword">in</span> members) &#123;</span><br><span class="line">            println(member) <span class="comment">// MemberGroupConcat(usernameGroupConcat=member-1,member-2,member-3,member-4,member-5,member-6,member-7,member-8,member-9,member-10,member-11,member-12,member-13,member-14,member-15,member-16,member-17,member-18,member-19,member-20, ageGroupConcat=1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>teamA</code>를 하나 생성하고 <code>member-1</code> ~ <code>member-20</code>까지 <code>member</code>를 생성하고 <code>teamA</code>에 연결합니다. 리턴 받는 객체는 <code>MemberGroupConcat</code>으로 받게 설정합니다. <code>Projection</code>을 하는 여러 가지 방법이 있지만 <code>@QueryProjection</code>을 이용한 방법을 선호합니다. 해당 포스팅은 <a href="https://cheese10yun.github.io/querydsl-projections/">Querydsl Projection 방법 소개 및 선호하는 패턴 정리</a>에서 정리한 적 있습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/group_concat_sql.png" alt=""></p><p>의도한 것처럼 <code>group_concat</code>이 잘 동작하는 것을 확인할 수 있습니다.</p><h2><span id="주의점">주의점</span></h2><p><code>group_concat</code>사용할 때 max length를 주의해서 사용해야 합니다. <code>group_concat</code> max length size가 있고 그것을 넘어가면 문자열을 더 가져오지 않습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `group concat max length size`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">//given</span></span><br><span class="line">    <span class="keyword">val</span> teamA = Team(<span class="string">"teamA"</span>)</span><br><span class="line">    em.persist(teamA)</span><br><span class="line"></span><br><span class="line">    (<span class="number">1.</span><span class="number">.1000</span>).map &#123;</span><br><span class="line">        em.persist(Member(username = <span class="string">"member-<span class="variable">$it</span>"</span>, age = it, team = teamA))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//when</span></span><br><span class="line">    <span class="keyword">val</span> members =</span><br><span class="line">        query</span><br><span class="line">            .select(QMemberGroupConcat(</span><br><span class="line">                Expressions.stringTemplate(<span class="string">"group_concat(&#123;0&#125;)"</span>, qMember.username),</span><br><span class="line">                Expressions.stringTemplate(<span class="string">"group_concat(&#123;0&#125;)"</span>, qMember.age)</span><br><span class="line">            ))</span><br><span class="line">            .from(qMember)</span><br><span class="line">            .groupBy(qMember.team)</span><br><span class="line">            .fetch()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (member <span class="keyword">in</span> members) &#123;</span><br><span class="line">        println(member) <span class="comment">// MemberGroupConcat(usernameGroupConcat=member-1,member-2,member-3,...member-101,member-102,member-103, ageGroupConcat=1,2,3,,281,282,283,)</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>member를 1000개 저장하고 <code>group_concat</code>을 사용해서 <code>print()</code>을 하면 전체 결과가 나오지 않고 일정 length에서 잘리는 것을 알 수 있습니다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">'group_concat_max_len'</span>;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/group_concat_max_length.png" alt=""></p><p>위 명령어로 <code>group_concat</code> max length를 확인할 수 있습니다. 물론 해당 max length를 늘려서 사용할 수 있습니다.</p><h2><span id="정리">정리</span></h2><p><code>group_concat</code>을 사용하는 방법을 정리하긴 했지만 가능하면 사용하는 것을 권장하지 않습니다. JPA 연관관계를 통해서 가져오는 것이 더 선호하며 <code>group_concat</code> 정도는 괜찮지만 SQL에 함수에 너무 의존적인 코드를 작성하는 것은 지양하는 것이 좋다고 생각합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/query-dsl&quot; rel=&quot;external nofollow noopener noreferrer
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Querydsl" scheme="https://cheese10yun.github.io/tags/Querydsl/"/>
    
      <category term="group_concat" scheme="https://cheese10yun.github.io/tags/group-concat/"/>
    
  </entry>
  
  <entry>
    <title>Visual VM Launcher IntelliJ</title>
    <link href="https://cheese10yun.github.io/intellij-visual-vm/"/>
    <id>https://cheese10yun.github.io/intellij-visual-vm/</id>
    <published>2020-05-29T15:00:00.000Z</published>
    <updated>2020-05-29T16:40:00.301Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/cheese10yun/TIL/blob/master/assets/VisualVM%20Launcher-6.png?raw=true" alt=""></p><p><code>VisualVM</code>을 사용하면 JVM의  Memory, CPU, Thread의 상태를 쉽게 확인할 수 있습니다. <code>IntelliJ</code> 플러그인을 설치하면 보다 쉽게 사용이가능 합니다.</p><p><img src="https://github.com/cheese10yun/TIL/blob/master/assets/VisualVM%20Launcher-2.png?raw=true" alt=""></p><p><a href="https://visualvm.github.io/download.html" rel="external nofollow noopener noreferrer" target="_blank">https://visualvm.github.io/download.html</a> 다운로드 받고 압축을 해제 합니다.</p><p><img src="https://github.com/cheese10yun/TIL/blob/master/assets/VisualVM%20Launcher-3.png?raw=true" alt=""></p><p>압축 해제이후, <code>visualvm</code> 파일은 이후 설정에 필요하기 때문에 별도의 <code>path</code>에 보관하시면 됩니다.</p><p><img src="https://github.com/cheese10yun/TIL/blob/master/assets/VisualVM%20Launcher-1.png?raw=true" alt=""></p><p><code>IntelliJ -&gt; Plugin -&gt; VisualVM Launcher</code> 검색해서 설치를 진행합니다.</p><p><img src="https://github.com/cheese10yun/TIL/blob/master/assets/VisualVM%20Launcher-4.png?raw=true" alt=""></p><p>설치가 완료되면 <code>Preferences -&gt; Other Settings -&gt; VisualVM Launcher</code> 설정으로 이동 이후 <code>VisualVM executable</code> -&gt; <code>visualvm</code> 위에서 다운받은 <code>path</code>를 지정합니다. <code>JDK home</code> -&gt; <code>JDK home path</code>를 지정합니다.</p><p><img src="https://github.com/cheese10yun/TIL/blob/master/assets/VisualVM%20Launcher-5.png?raw=true" alt=""></p><p>위설정을 완료한 이후 <code>Run -&gt; RunWithVisualVM or DebugVisualVM</code>으로 실행합니다.</p><p><img src="https://github.com/cheese10yun/TIL/blob/master/assets/VisualVM%20Launcher-6.png?raw=true" alt=""></p><p>위 설정이 모두 정상적으로 완료되었으면 <code>VisualVM</code> 실행이 되는 것을 확인할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://github.com/cheese10yun/TIL/blob/master/assets/VisualVM%20Launcher-6.png?raw=true&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;VisualVM&lt;/code&gt;을
      
    
    </summary>
    
    
      <category term="VisualVM Launcher" scheme="https://cheese10yun.github.io/tags/VisualVM-Launcher/"/>
    
  </entry>
  
  <entry>
    <title>Github Action With Gradle</title>
    <link href="https://cheese10yun.github.io/github-action-1/"/>
    <id>https://cheese10yun.github.io/github-action-1/</id>
    <published>2020-05-12T15:00:00.000Z</published>
    <updated>2020-05-13T17:37:44.653Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/github-action" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에서 확인할 수 있습니다.</p></blockquote><h2><span id="github-action">Github Action</span></h2><p>Github Action을 통해서 깃허브 자체적으로 CI &amp; CD를 진행할 수 있습니다. Github에대한 자세한 설명은 <a href="https://github.com/features/actions" rel="external nofollow noopener noreferrer" target="_blank">공식홈페이지</a>를 참고 해주세요. 본 포스팅에서는 Spring Boot &amp; Gradle 환경에서 간단한 빌드를 다룰 예정입니다.</p><h2><span id="github-action-만들기">Github Action 만들기</span></h2><p>Github Repository 상단에 <code>Actions</code>을 클릭 합니다.</p><p><img src="https://raw.githubusercontent.com/cheese10yun/github-action/master/images/github-action-1.png" alt=""></p><p>Java With Gradle Action의 <code>Set up this workflow</code> 버튼을 클릭합니다.</p><p><img src="https://raw.githubusercontent.com/cheese10yun/github-action/master/images/github-action-2.png" alt=""></p><p><code>Java With Gradle Action</code>의 YML을 생성합니다.</p><h3><span id="gradleyml">gradle.yml</span></h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">Java</span> <span class="string">CI</span> <span class="string">with</span> <span class="string">Gradle</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">  push:</span></span><br><span class="line"><span class="attr">    branches:</span> <span class="string">[</span> <span class="string">master</span> <span class="string">]</span></span><br><span class="line"><span class="attr">  pull_request:</span></span><br><span class="line"><span class="attr">    branches:</span> <span class="string">[</span> <span class="string">master</span> <span class="string">]</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">    - uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">JDK</span> <span class="number">1.8</span></span><br><span class="line"><span class="attr">      uses:</span> <span class="string">actions/setup-java@v1</span></span><br><span class="line"><span class="attr">      with:</span></span><br><span class="line"><span class="attr">        java-version:</span> <span class="number">1.8</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Grant</span> <span class="string">execute</span> <span class="string">permission</span> <span class="string">for</span> <span class="string">gradlew</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">gradlew</span></span><br><span class="line"><span class="attr">    - name:</span> <span class="string">Build</span> <span class="string">with</span> <span class="string">Gradle</span></span><br><span class="line"><span class="attr">      run:</span> <span class="string">./gradlew</span> <span class="string">build</span></span><br></pre></td></tr></table></figure><p><code>on.push</code>, <code>on.pull_request</code>을 보면 <code>master</code> branch에 <code>push</code>, <code>pull_request</code> 이벤트가 발생하는 경우 해당 <code>jobs</code>가 실행됩니다. <code>build</code>에서는 JDK 설정, Gradle 설정을 진행하고 최종적으로 <code>./gradlew build</code> 진행합니다.</p><h3><span id="action-workflows">Action Workflows</span></h3><p><img src="https://raw.githubusercontent.com/cheese10yun/github-action/master/images/github-action-3.png" alt=""></p><p><code>master</code>에 <code>push</code>, <code>pull_request</code> 이벤트가 발생할 경우 해당 Github Action이 동작하게 됩니다.</p><p><img src="https://raw.githubusercontent.com/cheese10yun/github-action/master/images/github-action-4.png" alt=""></p><p>Event를 클릭하면 상세 Github Actuon에 대한 내용을 살펴볼 수 있습니다.</p><h3><span id="badge">Badge</span></h3><p><img src="https://raw.githubusercontent.com/cheese10yun/github-action/master/images/github-action-5.png" alt=""></p><p>오른쪽 상단에 <code>Create status badge</code> 버튼을 클릭해서 Badge를 Markdown Copy를 진행할 수 있습니다. <img src="https://github.com/cheese10yun/github-action/workflows/Java%20CI%20with%20Gradle/badge.svg?branch=master" alt="Java CI with Gradle"></p><h2><span id="schedule-with-spring-batch">Schedule With Spring Batch</span></h2><p>Github Action은 <code>schedule</code> 기능을 제공하고 있습니다. Spring Batch를 이용하여 간단한 schedule Job을 작성해보겠습니다.</p><h3><span id="schedule-github-action-생성">Schedule Github action 생성</span></h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># simple-job.yml</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Simple</span> <span class="string">Job</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line"><span class="attr">  schedule:</span></span><br><span class="line"><span class="attr">    - cron:</span> <span class="string">'*/5 * * * *'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line"><span class="attr">  build:</span></span><br><span class="line"><span class="attr">    runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"><span class="attr">    steps:</span></span><br><span class="line"><span class="attr">      - uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Set</span> <span class="string">up</span> <span class="string">JDK</span> <span class="number">1.8</span></span><br><span class="line"><span class="attr">        uses:</span> <span class="string">actions/setup-java@v1</span></span><br><span class="line"><span class="attr">        with:</span></span><br><span class="line"><span class="attr">          java-version:</span> <span class="number">1.8</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Grant</span> <span class="string">execute</span> <span class="string">permission</span> <span class="string">for</span> <span class="string">gradlew</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">chmod</span> <span class="string">+x</span> <span class="string">gradlew</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Build</span> <span class="string">with</span> <span class="string">Gradle</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">./gradlew</span> <span class="string">build</span> <span class="bullet">-x</span> <span class="string">test</span></span><br><span class="line"><span class="attr">      - name:</span> <span class="string">Commpany</span> <span class="string">Save</span> <span class="string">Job</span> <span class="string">Execute</span></span><br><span class="line"><span class="attr">        run:</span> <span class="string">java</span> <span class="bullet">-jar</span> <span class="bullet">-Dspring.batch.job.names=simpleJob</span> <span class="string">./build/libs/action-0.0.1-SNAPSHOT.jar</span></span><br></pre></td></tr></table></figure><p>위에서 생성한 <code>gradle.yml</code>을 기반으로 schedule Gtihub Action을 위한 <code>simple-job.yml</code>을 생성합니다. <code>cron: '*/5 * * * *'</code> 해당 설정으로 5분마다 스케줄을 지정합니다.</p><h3><span id="batch-code">Batch Code</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SimpleJobConfig</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> jobBuilderFactory: JobBuilderFactory,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> stepBuilderFactory: StepBuilderFactory</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">simpleJob</span><span class="params">()</span></span>: Job &#123;</span><br><span class="line">        <span class="keyword">return</span> jobBuilderFactory.<span class="keyword">get</span>(<span class="string">"simpleJob"</span>)</span><br><span class="line">            .incrementer(RunIdIncrementer())</span><br><span class="line">            .start(simpleStep())</span><br><span class="line">            .build()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">simpleStep</span><span class="params">()</span></span>: Step &#123;</span><br><span class="line">        <span class="keyword">return</span> stepBuilderFactory.<span class="keyword">get</span>(<span class="string">"simpleStep1"</span>)</span><br><span class="line">            .tasklet &#123; _, _ -&gt;</span><br><span class="line"></span><br><span class="line">                Unirest.post(<span class="string">"https://hooks.slack.com/services/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"</span>)</span><br><span class="line">                    .header(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>)</span><br><span class="line">                    .body(<span class="string">"""</span></span><br><span class="line"><span class="string">                        &#123;</span></span><br><span class="line"><span class="string">                            "text": "<span class="subst">$&#123;LocalDateTime.now()&#125;</span>"</span></span><br><span class="line"><span class="string">                        &#125;</span></span><br><span class="line"><span class="string">                    """</span>.trimIndent())</span><br><span class="line">                    .asString()</span><br><span class="line"></span><br><span class="line">                RepeatStatus.FINISHED</span><br><span class="line">            &#125;</span><br><span class="line">            .build()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Slack 으로 현재 시간을 보내는 메시지를 전송하는 Job입니다.</p><p><img src="https://raw.githubusercontent.com/cheese10yun/github-action/master/images/simple-github.png" alt=""></p><p>Simple Job Action에 대한 스케줄을 확인할 수 있습니다. 이처럼 schedule 기능을 이용하면 간단하게 Schedule Batch Job을 구성할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/github-action&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Gi
      
    
    </summary>
    
    
      <category term="Github" scheme="https://cheese10yun.github.io/tags/Github/"/>
    
      <category term="Action" scheme="https://cheese10yun.github.io/tags/Action/"/>
    
  </entry>
  
  <entry>
    <title>외부 인프라스트럭처 테스트</title>
    <link href="https://cheese10yun.github.io/spring-mock-test/"/>
    <id>https://cheese10yun.github.io/spring-mock-test/</id>
    <published>2020-03-28T15:00:00.000Z</published>
    <updated>2020-03-29T12:13:52.340Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/spring-mock-test" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에서 확인할 수 있습니다.</p></blockquote><p>대부분의 애플리케이션은 외부 인프라스트럭처와 통신하면서 진행됩니다. 대표적인 외부 스트럭처는 외부 API들이 있습니다. 이런 외부 인프라스트럭처는 Mocking 해서 원하는 응답 값을 지정하고 검증하고 싶은 부분을 검증을 진행하는 것이 흔한 패턴입니다.</p><p>대표적으로 Mockito 프레임워크가 있으며 Mock 테스트는  <a href="https://github.com/cheese10yun/spring-guide/blob/master/docs/test-guide.md#mocktest" rel="external nofollow noopener noreferrer" target="_blank">Spring Guide - 테스트 전략 : Service 테스트</a>, <a href="https://cheese10yun.github.io/rest-template-mock-test/">RestTemplate Mock 기반 테스트 하기</a>에서 포스팅한 적 있습니다. 그런데 이런 식의 Mock 테스트 코드는 문제없지만, 실제 구동 환경(Local, Sandbox, Beta)에서는 문제가 있을 수 있습니다.</p><h2><span id="요구사항">요구사항</span></h2><ul><li>파트너 등록을 진행한다.</li><li>파트너 등록 시 계좌 주명, 계좌번호 일치 여부를 검증한다.<ul><li>계좌 주명 검증은 신한 API를 사용한다.<ul><li>API는 허가된 서버만 호출할 수 있다.</li><li>API Call 1건당 비용이 발생한다.</li></ul></li><li>계좌 주명, 계좌번호 일치하는 경우 저장한다.</li><li>계좌 주명, 계좌번호 일치하지 않은 경우 예외를 발생시킨다.</li></ul></li></ul><h2><span id="code">Code</span></h2><p>코드는 자세히 보실 필요 없습니다. 아래의 흐름만 읽어 보시면 됩니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(<span class="meta-string">"/partners"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PartnerApi</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> partnerRegistrationService: PartnerRegistrationService</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">register</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> dto: <span class="type">PartnerRegistrationRequest</span>)</span></span> &#123;</span><br><span class="line">        partnerRegistrationService.register(dto)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">PartnerRegistrationRequest</span></span>(</span><br><span class="line">    <span class="meta">@field:NotEmpty</span></span><br><span class="line">    <span class="keyword">val</span> name: String,</span><br><span class="line">    <span class="meta">@field:NotEmpty</span></span><br><span class="line">    <span class="keyword">val</span> accountHolder: String,</span><br><span class="line">    <span class="meta">@field:NotEmpty</span></span><br><span class="line">    <span class="keyword">val</span> accountNumber: String</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PartnerRegistrationService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> partnerRepository: PartnerRepository,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> bankClient: ShinhanBankClient</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">register</span><span class="params">(dto: <span class="type">PartnerRegistrationRequest</span>)</span></span>: Partner &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 은행 코드 검증일 진행한다</span></span><br><span class="line">        bankClient.verifyAccountHolder(</span><br><span class="line">            accountHolder = dto.accountHolder,</span><br><span class="line">            accountNumber = dto.accountHolder</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> partnerRepository.save(Partner(</span><br><span class="line">            accountNumber = dto.accountNumber,</span><br><span class="line">            accountHolder = dto.accountHolder,</span><br><span class="line">            name = dto.name</span><br><span class="line">        ))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShinhanBankClient</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> shinChanBankApi: ShinChanBankApi</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 계좌주명, 계좝번호가 일치하지 않으면 예외 발생</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">verifyAccountHolder</span><span class="params">(accountNumber: <span class="type">String</span>, accountHolder: <span class="type">String</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">val</span> response = shinChanBankApi.checkAccountHolder(accountHolder, accountNumber)</span><br><span class="line">        require(!response.matched.not()) &#123; <span class="string">"계좌주명이 일치하지 않습니다."</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShinChanBankApi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 계좌주명, 계좌번호가 하드 코딩된 값과 일치여불르 확인한다.</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">checkAccountHolder</span><span class="params">(accountHolder: <span class="type">String</span>, accountNumber: <span class="type">String</span>)</span></span>: AccountHolderVerificationResponse &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span> &#123;</span><br><span class="line">            accountHolder == <span class="string">"yun"</span> &amp;&amp; accountNumber == <span class="string">"110-2222-2222"</span> -&gt; AccountHolderVerificationResponse(<span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">else</span> -&gt; AccountHolderVerificationResponse(<span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountHolderVerificationResponse</span></span>(</span><br><span class="line">    <span class="keyword">val</span> matched: <span class="built_in">Boolean</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>예제 코드가 길지만 흐름은 간단합니다. 파트너 등록을 진행할 때 ShinhanBankClient를 통해서 계좌 주명 일치 여부를 검증하고, 일치하지 않은 경우 예외가 발생시켜 파트너 등록을 진행하지 않습니다.</p><p>본 포스팅과는 관련 없는 내용이지만 실제 API Call은 <code>ShinChanBankApi</code> 클래스에서 진행하고, 일치하지 않은 경우 예외가 발생하는 비즈니스 코드는 <code>ShinhanBankClient</code> 클래스에서 진행합니다.</p><p><strong>단순하게 API 통신만 담당하는 객체, API 통신을 담당하는 객체를 이용해서 비즈니스 코드를 만드는 객체</strong> 이렇게 객체의 책임과 역할을 명확하게 나누고 그 크기를 작게 유지하는 것이 좋은 설계 좋은 코드라고 생각합니다.</p><h3><span id="test-code">Test Code</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">PartnerApiTest</span> : <span class="type">SpringApiTestSupport</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MockBean</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> shinChanBankApi: ShinChanBankApi</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `파트너 등록`<span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        given(shinChanBankApi.checkAccountHolder(anyString(), anyString()))</span><br><span class="line">            .willReturn(AccountHolderVerificationResponse(<span class="literal">true</span>))</span><br><span class="line"></span><br><span class="line">        mockMvc.post(<span class="string">"/partners"</span>) &#123;</span><br><span class="line">            contentType = MediaType.APPLICATION_JSON</span><br><span class="line">            content = <span class="string">"""</span></span><br><span class="line"><span class="string">                &#123;</span></span><br><span class="line"><span class="string">                  "name" : "123",</span></span><br><span class="line"><span class="string">                  "accountHolder" : "123",</span></span><br><span class="line"><span class="string">                  "accountNumber" :  "123"</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">            """</span>.trimIndent()</span><br><span class="line">        &#125;.andExpect &#123;</span><br><span class="line">            status &#123; isOk &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MockBean을 통해서 가짜 객체를 주입받고 <code>given()</code> 메서드를 통해서 일치한다는 가정을 하고 테스트를 진행하게 됩니다.</p><p><img src="https://raw.githubusercontent.com/cheese10yun/blog-sample/master/spring-mock-test/image/partenr-test-code.png" alt=""></p><p>해당 테스트는 잘 진행되는 것을 볼 수 있습니다.</p><h2><span id="하지만-문제는">하지만 문제는 ?</span></h2><p><img src="https://raw.githubusercontent.com/cheese10yun/blog-sample/master/spring-mock-test/image/api-result.png" alt=""></p><p><strong>하지만 문제가 있습니다. 실제 구동 환경(Local, Sandbox, Beta…)에서는 해당 API Call을 진행하면 예외가 발생합니다.</strong></p><p>허가된 Production 서버 이외의 조건들은 호출은 가능하지만 API 비용 발생 문제 등이 있어 Production 이외의 환경에서는 막는 것이 적절할 수 있습니다. 그 밖에 다양한 이유들이 있습니다.</p><ul><li>실제 Email을 호출하는 경우</li><li>실제 SMS으로 문자가 나가는 경우</li><li>실제 송금을 진행하는 경우</li><li>상대 서버에 sandbox, beta 등 production 환경 이외의 테스트 서버가 없는 경우</li></ul><p>해당 이유들은 비용상의 문제, 서버 권한 문제 외 적으로 막아야 합니다. <strong>그리고 무엇보다 Production 환경 외에서 해당 API를 사용(테스트) 할 수 없게 되는 것이 가장 큰 문제입니다.</strong></p><h2><span id="해결-방법">해결 방법</span></h2><p><img src="https://raw.githubusercontent.com/cheese10yun/TIL/bc6ee987d4073d59ec884210215ba1fc9307c0de/assets/partner-ocp.png" alt=""></p><p>해결 방법은 간단합니다. ShinhanBankClient가 ShinhanBankApi 인터페이스를 의존하게 함으로써 <strong>의존관계를 인터페이스를 통해서 역전시키는 것입니다.</strong> 이것도 <a href="https://github.com/cheese10yun/spring-SOLID/blob/master/docs/OCP.md" rel="external nofollow noopener noreferrer" target="_blank">개방 폐쇄의 원칙: Open Close Principle</a>에서 포스팅한 적 이 있습니다.</p><h3><span id="code">Code</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ShinChanBankApi</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">checkAccountHolder</span><span class="params">(accountHolder: <span class="type">String</span>, accountNumber: <span class="type">String</span>)</span></span>: AccountHolderVerificationResponse</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(<span class="meta-string">"shinChanBankApi"</span>)</span></span><br><span class="line"><span class="meta">@Profile(<span class="meta-string">"production"</span>)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShinChanBankApiImpl</span> : <span class="type">ShinChanBankApi &#123;</span></span></span><br><span class="line">    <span class="comment">// 계좌주명, 계좌번호가 하드 코딩된 값과 일치여불르 확인한다.</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkAccountHolder</span><span class="params">(accountHolder: <span class="type">String</span>, accountNumber: <span class="type">String</span>)</span></span>: AccountHolderVerificationResponse &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">when</span> &#123;</span><br><span class="line">            accountHolder == <span class="string">"yun"</span> &amp;&amp; accountNumber == <span class="string">"110-2222-2222"</span> -&gt; AccountHolderVerificationResponse(<span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">else</span> -&gt; AccountHolderVerificationResponse(<span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(<span class="meta-string">"shinChanBankApi"</span>)</span></span><br><span class="line"><span class="meta">@Profile(<span class="meta-string">"sandbox"</span>, <span class="meta-string">"beta"</span>, <span class="meta-string">"local"</span>, <span class="meta-string">"test"</span>)</span></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ShinChanBankApMock</span> : <span class="type">ShinChanBankApi &#123;</span></span></span><br><span class="line">    <span class="comment">// 어떤 값이 들어 와도 일치 한다고 가정한다</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">checkAccountHolder</span><span class="params">(accountHolder: <span class="type">String</span>, accountNumber: <span class="type">String</span>)</span></span>: AccountHolderVerificationResponse &#123;</span><br><span class="line">        <span class="keyword">return</span> AccountHolderVerificationResponse(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PartnerRegistrationService</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> partnerRepository: PartnerRepository,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> bankClient: ShinhanBankClient</span><br><span class="line">) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">register</span><span class="params">(dto: <span class="type">PartnerRegistrationRequest</span>)</span></span>: Partner &#123;</span><br><span class="line">        <span class="comment">// 은행 코드 검증일 진행한다</span></span><br><span class="line">        bankClient.verifyAccountHolder(</span><br><span class="line">            accountHolder = dto.accountHolder,</span><br><span class="line">            accountNumber = dto.accountHolder</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> partnerRepository.save(Partner(</span><br><span class="line">            accountNumber = dto.accountNumber,</span><br><span class="line">            accountHolder = dto.accountHolder,</span><br><span class="line">            name = dto.name</span><br><span class="line">        ))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>@Service(&quot;beanName&quot;)</code> beanName을 지정합니다.</li><li><code>@Profile</code> 어노테이션을 통해서 각 환경에 맞는 bean이 등록되게 진행합니다.</li><li><strong><code>PartnerRegistrationService</code>에서 <code>ShinChanBankApi</code> 인터페이스를 의존하게 합니다.</strong></li></ul><p><img src="https://raw.githubusercontent.com/cheese10yun/blog-sample/master/spring-mock-test/image/bean-error.png" alt=""><br><code>@Profile</code> 잘못 설정해서 Bean이 2개 등록되는 경우 스프링에서 예외를 발생시키며 Bean 하나도 등록 못하는 경우에도 마찬가지로 예외가 발생합니다.</p><p>스프링에서 Bean 관련 예외를 명확하게 표시해 주고 있지만 그래도 불안하다고 판단되면 Bean 등록하는 코드를 따로 작성해도 좋습니다.</p><h3><span id="test">Test</span></h3><p><img src="https://raw.githubusercontent.com/cheese10yun/blog-sample/master/spring-mock-test/image/result.png" alt=""></p><p><code>spring.profiles.active=local</code> 으로 지정하고 해당 API를 호출하면 <code>Status 200</code>을 응답받은 것을 확인할 수 있습니다.</p><p><img src="https://raw.githubusercontent.com/cheese10yun/blog-sample/master/spring-mock-test/image/bean-.png" alt=""></p><p><code>spring.profiles.active=local</code>환경에서는 <code>shinhanBankApi</code>객체에 <code>ShinhanBankApiMock</code>이 등록된것을 확인할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/spring-mock-test&quot; rel=&quot;external nofollow noopener nor
      
    
    </summary>
    
    
      <category term="Test" scheme="https://cheese10yun.github.io/tags/Test/"/>
    
      <category term="Mock" scheme="https://cheese10yun.github.io/tags/Mock/"/>
    
  </entry>
  
  <entry>
    <title>JPA 기반 테스트 코드 작성 팁</title>
    <link href="https://cheese10yun.github.io/jpa-test-support/"/>
    <id>https://cheese10yun.github.io/jpa-test-support/</id>
    <published>2020-02-29T15:00:00.000Z</published>
    <updated>2020-03-04T13:45:40.135Z</updated>
    
    <content type="html"><![CDATA[<p>JPA 기반으로 테스트 코드를 작성하면서 불편했던 부분을 소개하고 해결 방법에 관한 포스팅입니다.</p><h2><span id="jpa-기반-테스트-불편한-점">JPA 기반 테스트 불편한 점</span></h2><h3><span id="과도한-dependency">과도한 Dependency</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaTest</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> paymentRepository: PaymentRepository,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> memberRepository: MemberRepository,</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> orderRepository: OrderRepository</span><br><span class="line">) : SpringBootTestSupport() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `특정 테스트를 하기위해서는 외부 dependency가 필요하다`<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 특정 테스트를 하기 위해서 많은 디펜던시가 필요하다.</span></span><br><span class="line">        paymentRepository.save(Payment(BigDecimal.TEN))</span><br><span class="line">        memberRepository.save(Member(<span class="string">"username"</span>, <span class="number">10</span>, Team(<span class="string">"team-name"</span>)))</span><br><span class="line">        orderRepository.save(Order(BigDecimal.TEN))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>많은 디펜던시가 필요한 부분의 테스트 코드를 작성할 때는 많은 Repository를 주입 받아서 테스트를 진헹 해야합니다. 위 코드처럼 특정 구간의 서비스를 테스트하기 위해서는 <code>Given</code>절을 작성할 때 흔하게 발생합니다.</p><p>물론 테스트 코드이기 때문에 DI 받아야하는 항목들이 많아지는것이 상대적으로 문제가 크게 발생하지는 않지만 코드 양이 많이 발생하는 문제가 있습니다.</p><h3><span id="검증이-필요한데">검증이 필요한데 ?..</span></h3><p>무엇보다 큰 문제가 해당 테스트의 <code>Then</code>절에 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `특정 테스트를 하기위해서는 외부 dependency가 필요하다`<span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 특정 테스트를 하기 위해서 많은 디펜던시가 필요하다.</span></span><br><span class="line">    paymentRepository.save(Payment(BigDecimal.TEN))</span><br><span class="line">    memberRepository.save(Member(<span class="string">"username"</span>, <span class="number">10</span>, Team(<span class="string">"team-name"</span>)))</span><br><span class="line">    orderRepository.save(Order(BigDecimal.TEN))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 특정 서비스가 여러 entity rows를 변경할때 아래와 같은 조회로 Then 이어가야 합니다.</span></span><br><span class="line">    <span class="comment">// paymentRepository.findBy... epository 메서드는 없는데??...</span></span><br><span class="line">    <span class="comment">// memberRepository.findBy...</span></span><br><span class="line">    <span class="comment">// orderRepository.findBy...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 서비스의 코드가 여러 enttiy의 여러 row의 변경을 가할 때 <code>Then</code>절에서 검증을 진행할 때 문제가 발생합니다. 해당 조회 코드가 없는 경우 <strong>오직 테스트를 위해서만 조회용 코드를 일반 코드에 작성해야 합니다.</strong> 그렇지 않다면 <strong>Test Scope에서 사용할 Repository를 따로 작성해야 합니다.</strong></p><p>두 방식 모두 좋은 해결 방법이 아니라고 생각합니다.</p><h2><span id="해결-방법">해결 방법</span></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@TestConstructor(autowireMode = TestConstructor.AutowireMode.ALL)</span></span><br><span class="line"><span class="meta">@ActiveProfiles(<span class="meta-string">"test"</span>)</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootTestSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> entityManagerFactory: EntityManagerFactory</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> query: JPAQueryFactory</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">val</span> entityManager: EntityManager <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        entityManagerFactory.createEntityManager()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">val</span> transaction: EntityTransaction <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        entityManager.transaction</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">save</span><span class="params">(entity: <span class="type">T</span>)</span></span>: T &#123;</span><br><span class="line">        transaction.begin()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            entityManager.persist(entity)</span><br><span class="line">            entityManager.flush() <span class="comment">// transaction commit시 자동으로 flush 발생시키나 명시적으로 선언</span></span><br><span class="line">            transaction.commit()</span><br><span class="line">            entityManager.clear()</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            transaction.rollback()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> entity</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">saveAll</span><span class="params">(entities: <span class="type">Iterable</span>&lt;<span class="type">T</span>&gt;)</span></span>: Iterable&lt;T&gt; &#123;</span><br><span class="line">        transaction.begin()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (entity <span class="keyword">in</span> entities) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                entityManager.persist(entity)</span><br><span class="line">                entityManager.flush() <span class="comment">// transaction commit시 자동으로 flush 발생시키나 명시적으로 선언</span></span><br><span class="line">                transaction.commit()</span><br><span class="line">                entityManager.clear()</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">                transaction.rollback()</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> entities</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해결 방법은 테스트 코드를 위해서 필요한 기능을 제공해 주는 <code>SpringBootTestSupport</code>을 제공해 주는 것입니다. 자세한 코드는 아래에서 설명하겠습니다.</p><h3><span id="과도한-dependency-해결-방법">과도한 Dependency 해결 방법</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">save</span><span class="params">(entity: <span class="type">T</span>)</span></span>: T &#123;</span><br><span class="line">    transaction.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        entityManager.persist(entity)</span><br><span class="line">        entityManager.flush() <span class="comment">// transaction commit시 자동으로 flush 발생시키나 명시적으로 선언</span></span><br><span class="line">        transaction.commit()</span><br><span class="line">        entityManager.clear()</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">        transaction.rollback()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> entity</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">saveAll</span><span class="params">(entities: <span class="type">Iterable</span>&lt;<span class="type">T</span>&gt;)</span></span>: Iterable&lt;T&gt; &#123;</span><br><span class="line">    transaction.begin()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (entity <span class="keyword">in</span> entities) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            entityManager.persist(entity)</span><br><span class="line">            entityManager.flush() <span class="comment">// transaction commit시 자동으로 flush 발생시키나 명시적으로 선언</span></span><br><span class="line">            transaction.commit()</span><br><span class="line">            entityManager.clear()</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (e: Exception) &#123;</span><br><span class="line">            transaction.rollback()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> entities</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Given</code>절에서 작성하는 데이터 Set up이기 때문에 <strong>트랜잭션을 완전히 분리하기 위해서 transactionn을 commit을 직접 수행 시킵니다.</strong> transaction commit 시에 flush가 동작하지만 명시적으로 코드를 작성했습니다.</p><p>주의해야할 점은</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">entityManager.clear()</span><br></pre></td></tr></table></figure><p><strong>EntityManager를 이용해서 clear()을 강제로 발생시키는 있는 점입니다.</strong></p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/query-result-.png" alt=""></p><p>영속성 컨텍스트는 1차 캐시를 우선시 합니다. 즉 추가적인 JPQL 쿼리로 조회한 값이 영속성 컨텍스트에 존재하는 경우(식별자 값으로 동일성을 판단함) JPQL로 조회한 데이터를 버립니다. <strong>즉 1차 캐시된것을 우선시합니다.</strong></p><p>그러기 때문에 EntityManager를 이용해서 <strong>영속성 컨텍스트를 초기화하는 것입니다.</strong> 자세한 내용은 <a href="https://cheese10yun.github.io/jpa-bulk/#1">JPA 벌크 작업 주의점 - 영속성 컨텍스트는 1차 캐시된 것이 우선이다.</a> 포스팅을 참고해 주세요</p><p>그리고 <code>Give</code>절에 작성하는 데이터는 이미 데이터베이스에 영속화되어 있다는 개념으로 테스트하는 것이니 이런 문제가 없더라도 최대한 동일한 환경을 구성해주는 것이 좋다고 생각합니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaTestSupport</span> : <span class="type">SpringBootTestSupport</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `entityManager를 이용해서 dependency가 최소화 `<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 특정 테스트를 하기 위해서 많은 디펜던시가 필요하다.</span></span><br><span class="line">        save(Payment(BigDecimal.TEN))</span><br><span class="line">        save(Member(<span class="string">"username"</span>, <span class="number">10</span>, save(Team(<span class="string">"team-ename"</span>))))</span><br><span class="line">        save(Coupon(BigDecimal.TEN))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Entity의 영속성을 EnttiyManager를 통해서 진행하기 때문에 단순 save를 위해서 DI 받는 Repository가 없어졌습니다.</p><h3><span id="검증이-필요한데-해결방법">검증이 필요한데 ?.. 해결방법</span></h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Configuration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">query</span><span class="params">(entityManager: <span class="type">EntityManager</span>)</span></span>: JPAQueryFactory &#123;</span><br><span class="line">        <span class="keyword">return</span> JPAQueryFactory(entityManager)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootTestSupport</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> query: JPAQueryFactory</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>JPAQueryFactory</code>을 <code>query</code>으로 Bean 등록을 진행합니다. Test Scope에서만 사용하는 것을 원하는 경우에는 Test directory에 <code>@TestConfiguration</code>으로 지정해도 됩니다.</p><p><code>query</code>을 이용해서 테스트 코드 검증을 진행할 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">JpaTestSupport</span> : <span class="type">SpringBootTestSupport</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `entityManager를 이용해서 dependency가 최소화 `<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">// 특정 테스트를 하기 위해서 많은 디펜던시가 필요하다.</span></span><br><span class="line">        save(Payment(BigDecimal.TEN))</span><br><span class="line">        save(Member(<span class="string">"username"</span>, <span class="number">10</span>, save(Team(<span class="string">"team-ename"</span>))))</span><br><span class="line">        save(Coupon(BigDecimal.TEN))</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 특정 서비스가 여러 entity rows를 변경할때 아래와 같은 조회로 Then 이어가야 합니다.</span></span><br><span class="line">        <span class="comment">// paymentRepository.findBy... epository 메서드는 없는데??...</span></span><br><span class="line">        <span class="comment">// memberRepository.findBy...</span></span><br><span class="line">        <span class="comment">// couponRepository.findBy...</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> payments = query.selectFrom(QPayment.payment)</span><br><span class="line">            .where(QPayment.payment.amount.gt(BigDecimal.TEN))</span><br><span class="line">            .fetch()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> members = query.select(QMember.member.age)</span><br><span class="line">            .from(QMember.member)</span><br><span class="line">            .where(QMember.member.age.gt(<span class="number">20</span>))</span><br><span class="line">            .fetch()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">val</span> coupons = query.selectFrom(QCoupon.coupon)</span><br><span class="line">            .where(QCoupon.coupon.amount.eq(<span class="number">123.</span>toBigDecimal()))</span><br><span class="line">            .fetch()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>여러 엔티티의 여러 row의 수정을 진행했을 경우 해당 엔티티의 변경을 확인하기 위한 검증이 필요합니다. 이때 조회용 메서드를 단순히 테스트 코드에서만 사용하기 위해서 작성하기 위해서 작성하거나 Test Scope에 별도의 Repository를 구성해야 했지만 이제는 위에서 등록한 <code>query</code>을 이용해서 해당 비즈니스에 맞는 쿼리를 작성할 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentServiceTest</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> paymentService: PaymentService</span><br><span class="line">) : SpringBootTestSupport() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `paymentZero test`<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//given</span></span><br><span class="line">        <span class="keyword">val</span> targetAmount = <span class="number">105.</span>toBigDecimal()</span><br><span class="line">        saveAll((<span class="number">1.</span><span class="number">.100</span>).map &#123;</span><br><span class="line">            Payment(it.toBigDecimal().plus(BigDecimal.TEN).setScale(<span class="number">0</span>))</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//when</span></span><br><span class="line">        paymentService.paymentZero(targetAmount)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//then</span></span><br><span class="line">        <span class="keyword">val</span> count = query</span><br><span class="line">            .selectFrom(qPayment)</span><br><span class="line">            .where(qPayment.amount.gt(targetAmount))</span><br><span class="line">            .fetchCount()</span><br><span class="line"></span><br><span class="line">        then(count).isEqualTo(<span class="number">0</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>이런 식으로 심플하게 테스트 코드를 작성할 수 있습니다.</p><h2><span id="주의할-점">주의할 점</span></h2><p><code>SpringBootTestSupport</code> 클래스에서 정의한 <code>save()</code>, <code>saveAll()</code> 메서드를 사용하는 경우 테스트에서 사용하는 트랜잭션과 완전하게 분리가 됩니다.</p><p>스프링 테스트에서는 <code>@Transactional</code>이 있는 경우 해당 테스트 메서드가 종료되면 트랜잭션으로 같이 Rollback이 진행되게 됩니다. 하지만 <code>SpringBootTestSupport</code>에서 작성한 <code>save()</code>, <code>saveAll()</code>메서드 같은 경우에는 완전히 다른 트랜잭션이므로 <code>given</code>절에서 작성한 트랜잭션이 롤백 되지 않습니다.</p><h2><span id="마무리">마무리</span></h2><p>테스트 코드의 중요성의 강조는 의미 없을 정도로 현업에서 자리 잡았다고 생각합니다. 이렇게 중요성이 있는 부분이니 테스트 코드를 작성하기 편한 방법도 많이 연구되었으면 좋겠다는 생각이 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JPA 기반으로 테스트 코드를 작성하면서 불편했던 부분을 소개하고 해결 방법에 관한 포스팅입니다.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;jpa-기반-테스트-불편한-점&quot;&gt;JPA 기반 테스트 불편한 점&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id=&quot;과도한
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Test" scheme="https://cheese10yun.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>Querydsl Repository Support 활용</title>
    <link href="https://cheese10yun.github.io/querydsl-support/"/>
    <id>https://cheese10yun.github.io/querydsl-support/</id>
    <published>2020-02-28T15:00:00.000Z</published>
    <updated>2020-02-29T14:02:39.470Z</updated>
    
    <content type="html"><![CDATA[<p>개발을 진행할 하다 보면 다양한 조회 쿼리를 만들게 됩니다. JPA를 이용한다면 Querydsl Support를 사용하면 세부 구현체를 숨기고 Repository를 통해서 조회 쿼리를 제공해 줄 수 있어 장점이 있습니다.</p><p>관련 <a href="https://github.com/cheese10yun/spring-jpa-best-practices/blob/master/doc/step-15.md" rel="external nofollow noopener noreferrer" target="_blank">step-15: Querydsl를 이용해서 Repository 확장하기 (1)</a>, <a href="https://cheese10yun.github.io/jpa-preference/">JPA 선호하는 패턴</a>을 참고해 주세요</p><h2><span id="querydslrepositorysupport-사용시-문제점">QuerydslRepositorySupport 사용시 문제점</span></h2><p>QuerydslRepositorySupport은 <code>JPQLQuery</code>를 이용해서 JPQL 작업을 진행합니다. 그래서 약간 단점이 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.example.querydsl.domain.QPayment.payment <span class="keyword">as</span> qPayment</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PaymentCustomRepositoryImpl</span> : <span class="type">QuerydslCustomRepositorySupport</span></span>(Payment::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>), <span class="type">PaymentCustomRepository &#123;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">findUseFrom</span><span class="params">(targetAmount: <span class="type">BigDecimal</span>)</span></span>: List&lt;Payment&gt;? &#123;</span><br><span class="line">        <span class="keyword">return</span> from(qPayment)</span><br><span class="line">            .where(qPayment.amount.gt(targetAmount))</span><br><span class="line">            .fetch()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>해당 코드를 보면 <code>from</code>으로 시작해야 합니다. <code>QuerydslRepositorySupport</code> 구현체의 from 메서드는 아래와 같습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> &lt;T&gt; JPQLQuery&lt;T&gt; from(EntityPath&lt;T&gt; path) &#123;</span><br><span class="line">    <span class="keyword">return</span> getRequiredQuerydsl().createQuery(path).select(path);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>즉 <code>JPQLQuery</code>을 사용해서 쿼리 작업을 진행해야 되기 때문에 <code>from</code>으로 시작할 수밖에 없습니다.</p><p>사실 별거 아닌 거 같지만 우리는 일반적으로 query를 시작할 때는 <code>select</code>으로 시작합니다. <code>queryFactory</code>을 이용하면 select, selectFrom으로 쿼리를 시작할 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">findUseSelectFrom</span><span class="params">(targetAmount: <span class="type">BigDecimal</span>)</span></span>: List&lt;Payment&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> selectFrom(qPayment)</span><br><span class="line">        .where(qPayment.amount.gt(targetAmount))</span><br><span class="line">        .fetch()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">findUseSelect</span><span class="params">(targetAmount: <span class="type">BigDecimal</span>)</span></span>: List&lt;<span class="built_in">Long</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> select(qPayment.id)</span><br><span class="line">        .from(qPayment)</span><br><span class="line">        .where(qPayment.amount.gt(targetAmount))</span><br><span class="line">        .fetch()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>selectFrom</code>은 조회하는 타입이 일치하는 경우 사용할 수 있고, <code>select</code>는 리턴 받을 타입을 지정할 수 있습니다. 우리가 일반적으로 사용하는 SQL 문과 아주 유사한 구조입니다.</p><h2><span id="querydslcustomrepositorysupport-작성하기">QuerydslCustomRepositorySupport 작성하기</span></h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">QuerydslCustomRepositorySupport</span></span>(domainClass: Class&lt;*&gt;) : QuerydslRepositorySupport(domainClass) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> queryFactory: JPAQueryFactory <span class="keyword">by</span> Delegates.notNull()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PersistenceContext</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">setEntityManager</span><span class="params">(entityManager: <span class="type">EntityManager</span>)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.setEntityManager(entityManager)</span><br><span class="line">        <span class="keyword">this</span>.queryFactory = JPAQueryFactory(entityManager)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">select</span><span class="params">(expr: <span class="type">Expression</span>&lt;<span class="type">T</span>&gt;)</span></span>: JPAQuery&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> queryFactory.select(expr)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">fun</span> <span class="type">&lt;T&gt;</span> <span class="title">selectFrom</span><span class="params">(from: <span class="type">EntityPath</span>&lt;<span class="type">T</span>&gt;)</span></span>: JPAQuery&lt;T&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> queryFactory.selectFrom(from)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사용법은 간단합니다. <code>QuerydslRepositorySupport</code>을 상속하는 클래스를 <strong>직접 정의해서 제공하는 것입니다.</strong></p><p>코드는 간단합니다. <code>EntityManager</code>을 상위 클래스에서 전달해 주며 <code>JPAQuery</code>에서 제공해 주는 <code>select</code>, <code>selectFrom</code>을 구현(JPAQuery의 메서드를 복붙)하면 됩니다. <code>select</code>, <code>selectFrom</code> 외에도 다양한 기능들을 제공해 줄 수 있습니다.</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">internal</span> <span class="class"><span class="keyword">class</span> <span class="title">PaymentRepositoryTest</span></span>(</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> paymentRepository: PaymentRepository</span><br><span class="line">) : SpringBootTestSupport() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `findUseSelectFrom`<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//given</span></span><br><span class="line">        <span class="keyword">val</span> targetAmount = <span class="number">200.</span>toBigDecimal()</span><br><span class="line"></span><br><span class="line">        <span class="comment">//when</span></span><br><span class="line">        <span class="keyword">val</span> payments = paymentRepository.findUseSelectFrom(targetAmount)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//then</span></span><br><span class="line">        then(payments).anySatisfy &#123;</span><br><span class="line">            then(it.amount).isGreaterThan(targetAmount)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">internal</span> <span class="function"><span class="keyword">fun</span> `findUseSelect`<span class="params">()</span></span> &#123;</span><br><span class="line">        <span class="comment">//given</span></span><br><span class="line">        <span class="keyword">val</span> targetAmount = <span class="number">200.</span>toBigDecimal()</span><br><span class="line"></span><br><span class="line">        <span class="comment">//when</span></span><br><span class="line">        <span class="keyword">val</span> ids = paymentRepository.findUseSelect(targetAmount)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//then</span></span><br><span class="line">        then(ids).hasSizeGreaterThan(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/query-dsl/docs/images/queydsl-support-result.png" alt=""></p><p>테스트 코드를 통과로 정상 동작하는 것을 확인할 수 있습니다.<br><code>select</code>, <code>selectFrom</code> 시작해서 큰 이득을 얻을 수 없지만 최대한 SQL스럽게 코드를 작성할 수 있어서 개인적으로 선호하는 방식입니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;개발을 진행할 하다 보면 다양한 조회 쿼리를 만들게 됩니다. JPA를 이용한다면 Querydsl Support를 사용하면 세부 구현체를 숨기고 Repository를 통해서 조회 쿼리를 제공해 줄 수 있어 장점이 있습니다.&lt;/p&gt;
&lt;p&gt;관련 &lt;a 
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Querydsl" scheme="https://cheese10yun.github.io/tags/Querydsl/"/>
    
  </entry>
  
</feed>
