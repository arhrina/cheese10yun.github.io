<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yun Blog</title>
  <icon>https://www.gravatar.com/avatar/d313a2c442931458ed624a3999d75011</icon>
  <subtitle>기술 블로</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://cheese10yun.github.io/"/>
  <updated>2018-07-14T18:36:40.846Z</updated>
  <id>https://cheese10yun.github.io/</id>
  
  <author>
    <name>Yun</name>
    <email>cheese10yun@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Github로 프로젝트 관리하기 Part2</title>
    <link href="https://cheese10yun.github.io/github-proejct-part2/"/>
    <id>https://cheese10yun.github.io/github-proejct-part2/</id>
    <published>2018-07-13T15:00:00.000Z</published>
    <updated>2018-07-14T18:36:40.846Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="ci-amp-test-coverage">CI &amp; Test Coverage</span></h1><p><img src="https://i.imgur.com/G5jo0Ty.png" alt=""></p><p><a href="https://github.com/marketplace/category/continuous-integration" rel="external nofollow noopener noreferrer" target="_blank">GitHub Marketplace</a> Public Repository를 이용하면 대부분 무료로 이용 가능합니다. <strong>본 포스팅에서는  CI는 Travis CI, Test Coverage는 Coveralls를 이용해서 진행하겠습니다.</strong></p><p>전체적인 플로우를 설명하는 것이 목적 이리서 특정 툴에 대한 직접적인 사용법을 다루지는 않겠습니다. 언어의 특성 및 개인에 기호에 맞는 제품을 사용하시면 됩니다.</p><h2><span id="전체-플로우">전체 플로우</span></h2><ol><li>Pull Request 요청 -&gt; Code Review 진행</li><li>Code Review 완료 -&gt; 특정 Branch에 반영</li><li>특정 Branch 수정시 자동 CI Build 작업 진행 -&gt; 테스트 코드 실행</li><li>테스트 커버지리 표시</li></ol><h2><span id="pull-request-amp-code-review">Pull Request &amp; Code Review</span></h2><p><img src="https://i.imgur.com/q6HmT7o.png" alt=""></p><p>별다른 설정을 하지 않았다면 Pull Request를 요청할 경우 Travis에서 자동으로 해당 요청한 코드 기반으로 Build 작업이 진행됩니다. Build가 실패했을 경우는 Pull Request 요청자는 코드를 수정해서 최소한 Build가 된 코드 기반으로 Code Review를 진행하게 해야 됩니다(Build도 안 되는 코드를 리뷰할 이유는 없을 거 같습니다.)</p><p>요청받은 Pull Request에 대해서 Code Review 작업을 진행하게 됩니다. Code Review가 완료되면 Merge pull request를 통해서 해당 작업(issue)을 반영합니다.</p><h2><span id="테스트-커버지리-표시">테스트 커버지리 표시</span></h2><p><img src="https://i.imgur.com/U1ROYeE.png" alt=""></p><p>위에서 Merge pull request를 통해서 해당 작업(issue)을 반영했다면 Travis가 Build 할 때 작성된 Test Code 기반으로 Coverage 정보를 위처럼 자동으로 코멘드를 추가해줍니다.</p><p>누군가가 테스트 코드를 작성하지 않았다면 <code>Change from base</code> 항목에서 - 표시가 됩니다. <strong>이렇게 해당 작업마다 커버리지를 표시하는 것이 전체 커버리지를 높이고 그 값을 유지하는 좋은 방법이라고 생각합니다.</strong></p><h1><span id="wiki">Wiki</span></h1><p>GitHub에서는 기본적인 WIKI 기능을 제공해줍니다.</p><h2><span id="wiki-등록">Wiki 등록</span></h2><p><img src="https://github.com/cheese10yun/github/blob/master/images/wiki.gif?raw=true" alt=""></p><h2><span id="github-작성">GitHub 작성</span></h2><p><img src="https://i.imgur.com/t3LuQsm.png" alt=""><br>GitHub에서 위키를 작성할 수 있습니다.</p><h2><span id="local-작성">Local 작성</span></h2><p><img src="https://i.imgur.com/Ff6Heeb.png" alt=""><br><strong>위키를 로컬환경에서 작성해서 Push 할 수 있습니다. 이렇게 사용하시는 것을 추천 드립니다.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;ci-amp-test-coverage&quot;&gt;CI &amp;amp; Test Coverage&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/G5jo0Ty.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=
      
    
    </summary>
    
    
      <category term="Github" scheme="https://cheese10yun.github.io/tags/Github/"/>
    
      <category term="Issue" scheme="https://cheese10yun.github.io/tags/Issue/"/>
    
      <category term="Proejct Management" scheme="https://cheese10yun.github.io/tags/Proejct-Management/"/>
    
  </entry>
  
  <entry>
    <title>Jackson 어노테이션 총 정리</title>
    <link href="https://cheese10yun.github.io/jackson-annotation-final/"/>
    <id>https://cheese10yun.github.io/jackson-annotation-final/</id>
    <published>2018-07-08T10:00:00.000Z</published>
    <updated>2018-07-08T10:03:55.914Z</updated>
    
    <content type="html"><![CDATA[<iframe src="//www.slideshare.net/slideshow/embed_code/key/3bcVswknGqlE8u" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/ssuser565d51/jackson-104816215" title="Jackson 사용법" target="_blank">Jackson 사용법</a> </strong> from <strong><a href="https://www.slideshare.net/ssuser565d51" target="_blank" rel="external nofollow noopener noreferrer">남윤 김</a></strong> </div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/3bcVswknGqlE8u&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginhe
      
    
    </summary>
    
    
      <category term="Jackson" scheme="https://cheese10yun.github.io/tags/Jackson/"/>
    
      <category term="Slideshare" scheme="https://cheese10yun.github.io/tags/Slideshare/"/>
    
  </entry>
  
  <entry>
    <title>Github로 프로젝트 관리하기 Part1</title>
    <link href="https://cheese10yun.github.io/github-proejct/"/>
    <id>https://cheese10yun.github.io/github-proejct/</id>
    <published>2018-07-08T08:13:46.000Z</published>
    <updated>2018-07-14T10:32:04.300Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="프로젝트-소개">프로젝트 소개</span></h1><p>Github를 이용해서 Project Management 하는 방법 및 전체적인 프로세스에 대해서 정리했습니다. <strong>issue 관리, 일정 관리, 코드리뷰, 버그 리포트 등 다양한 일들을 Github 하나에서 다 관리할 수 있고 어느 하나 부족하다고 생각하지 않습니다.</strong> 이미 Remote Repository로 Github를 사용 중 이리 사면 적극 추천해 드립니다.</p><p>프로젝트는 지속해서 추가될 예정이라 상단의 전체 사용법은 <a href="https://github.com/cheese10yun/github" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에서 확인하실 수 있습니다.</p><h1><span id="목차">목차</span></h1><!-- TOC --><ul><li><a href="#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%86%8C%EA%B0%9C">프로젝트 소개</a></li><li><a href="#%EB%AA%A9%EC%B0%A8">목차</a></li><li><a href="#%EC%A0%84%EC%B2%B4-%ED%94%8C%EB%A1%9C%EC%9A%B0">전체 플로우</a><ul><li><a href="#issue-%EB%B0%9C%ED%96%89">Issue 발행</a><ul><li><a href="#issue%EB%9E%80">Issue란?</a></li><li><a href="#issue-template">Issue Template</a><ul><li><a href="#issue-template-%EB%93%B1%EB%A1%9D">Issue Template 등록</a></li><li><a href="#issue-template-%EC%82%AC%EC%9A%A9%EB%B2%95">Issue Template 사용법</a></li><li><a href="#issue-template-%ED%8C%8C%EC%9D%BC">Issue Template 파일</a></li></ul></li></ul></li><li><a href="#issue-%EC%9E%91%EC%97%85">Issue 작업</a><ul><li><a href="#%EB%93%B1%EB%A1%9D%EB%90%9C-issue-%EC%82%B4%ED%8E%B4-%EB%B3%B4%EA%B8%B0">등록된 issue 살펴 보기</a></li><li><a href="#issue-%EC%97%B0%EB%8F%99">Issue 연동</a></li><li><a href="#issue-%EA%B8%B0%EB%B0%98-bracnh-%EC%83%9D%EC%84%B1">Issue 기반 Bracnh 생성</a></li></ul></li><li><a href="#pull-requestcode-review">Pull Request[Code Review]</a><ul><li><a href="#jetbrains-pull-request">Jetbrains Pull Request</a></li><li><a href="#github-pull-request">GitHub Pull Request</a></li><li><a href="#pull-request-%EC%9E%91%EC%84%B1%EB%B2%95">Pull Request 작성법</a></li><li><a href="#code-review">Code Review</a></li></ul></li></ul></li><li><a href="#%EC%84%B8%EB%B6%80-%EC%82%AC%EC%9A%A9%EB%B2%95">세부 사용법</a></li><li><a href="#zenhub-%EC%82%AC%EC%9A%A9%EB%B2%95">ZenHub 사용법</a></li><li><a href="#code-coverage">Code Coverage</a></li></ul><!-- /TOC --><h1><span id="전체-플로우">전체 플로우</span></h1><ol><li>Isuee 발급</li><li>Issue 작업</li><li>Pull Request Coide Review 진행</li><li>Issue 반영</li></ol><h2><span id="issue-발행">Issue 발행</span></h2><h3><span id="issue란">Issue란?</span></h3><p>모든것이 이슈라고 볼 수 있습니다. 새로운 추가될 가능, 개선 해야할 가능, 버그 등등 모든것이 이슈라고 볼 수 있습니다. 모든 활동 내역에 대해서 이슈를 등록하고 그 이슈기반으로 작업을 진행하게 됩니다.</p><p>이슈를 등록할 때 자주 사용하는 템플릿을 등록해서 사용하는 방법이 효율적입니다. 이슈 템플릿을 등록하는 방법을 소개해드리겠습니다.</p><h3><span id="issue-template">Issue Template</span></h3><h4><span id="issue-template-등록">Issue Template 등록</span></h4><p><img src="https://github.com/cheese10yun/github/blob/master/images/issue-template-rg.gif?raw=true" alt=""></p><p>환경에 앎맞는 Issue Template 생성을 합니다.</p><h4><span id="issue-template-사용법">Issue Template 사용법</span></h4><p><img src="https://github.com/cheese10yun/github/blob/master/images/add-new-issue.gif?raw=true" alt="new_issue"></p><p>위에서 등록한 Issue Template 기반으로 이슈를 생성할 수 있습니다.</p><h4><span id="issue-template-파일">Issue Template 파일</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">.</div><div class="line">├── .github</div><div class="line">│   └── ISSUE_TEMPLATE</div><div class="line">│       ├── bug_report.md</div><div class="line">│       └── feature_request.md</div><div class="line">├── README.md</div><div class="line">├── github.iml</div><div class="line">├── images</div><div class="line">├── mvnw</div><div class="line">├── mvnw.cmd</div><div class="line">├── pom.xml</div><div class="line">└── src</div></pre></td></tr></table></figure><p>위에서 등록된 Issue Template은 .github/ISSUE_TEMPLATE 디렉터리에 생성된 것을 확인할 수 있습니다.<br><strong>각자의 맞는 한경에 따라서 Issue Template를 작성하시면 됩니다.</strong> 저 같은 경우에는 Back-end를 주로 담당하기 때문에 bug tempalte 에서 서버로그, response body 값을 등록했습니다.</p><h2><span id="issue-작업">Issue 작업</span></h2><h3><span id="등록된-issue-살펴-보기">등록된 issue 살펴 보기</span></h3><p><img src="https://i.imgur.com/2ciNoCd.png" alt="등록된-이슈"></p><ul><li>Assignees : 해당 작업의 담당자</li><li>Labels: 해당 작업의 성격</li><li>Milestone: 해당 작업이 속한 파트</li></ul><p><img src="https://i.imgur.com/DkniJHn.png" alt=""></p><p>다른 것들은 이해하기 쉬울 텐데 Milestone은 조금 생소할 수 있습니다. Milestone에 간단하게 설명해 드리면 이번 출시 버전이 1.0.0 일 경우 해당 버전이든 이슈(작업) 기능 강화, 새 기능추가, 버그 기타 등등 모든 이슈를 Version 1.0.0 Milestone이라는 항목에 추가하면 위 그림처럼 Version 1.0.0에 대한 전체적인 상황을 한눈에 볼 수가 있는 장점이 있습니다.</p><h3><span id="issue-연동">Issue 연동</span></h3><p><img src="https://i.imgur.com/FtO0Xme.png" alt="intellij-task"></p><p>만약 Jetbrains의 IDE를 사용하고 계신다면 Task 연동을 통해서 Github와 연동하시는 것을 적극 권장해 드립니다.</p><h3><span id="issue-기반-bracnh-생성">Issue 기반 Bracnh 생성</span></h3><p><img src="https://i.imgur.com/R8aFoCL.png" alt="issue-base-branch"><br>위에서 언급한 Jetbrains의 Task 연동을 하지 않아도 크게 상관없습니다. Task의 갖는 가장 큰 기능은 Github 이슈 기반으로 Branch를 생성을 쉽게 도와주는 것으로 생각합니다. <strong>즉 Github에서 생성된 Issue 기반으로 Branch를 생성하는 것이 핵심입니다.</strong></p><p>Github Issue는 각자의 유니크한 값인 Issue Number를 갖습니다. 또 그 Iusse Number 기반으로 Branch를 이름을 갖게 하여 해당 Branch의 명확한 작업의 의도를 갖게 할 수 있습니다.</p><p>Branch 네이밍을 통해서 해당 작업의 의도를 갖게 하는 것은 한계가 있습니다. 또 동료 개발자들이 정확히 무슨 작업을 하는지도 Branch 네이밍을 통해서 유추해내기도 어렵고, 해당 작업이 반영(머지)될 때 도 마찬가지입니다. 이러한 문제들을 Issue Number 기반으로 Branch를 생성(Issue Number Branch 네이밍에 추가)하면 아주 명확해집니다.</p><h2><span id="pull-requestcode-review">Pull Request[Code Review]</span></h2><p><a href="https://github.com/cheese10yun/github/issues/1" rel="external nofollow noopener noreferrer" target="_blank">issue-1</a>에 대한 풀리퀘스트를 통해서 코드리뷰를 진행해 보겠습니다.</p><h3><span id="jetbrains-pull-request">Jetbrains Pull Request</span></h3><p><img src="https://i.imgur.com/vkNR06g.png" alt="intellij-pull-request"><br>만약 Jetbrains IDE를 사용하신다면 위 방법 처럼 Pull Request를 하는 방법을 권장드립니다.</p><h3><span id="github-pull-request">GitHub Pull Request</span></h3><p><img src="https://i.imgur.com/6bBTJUV.png" alt="github-pull-request"></p><p>Github Code 텝에서 <code>New Pull Request</code> 버튼을 클릭해서 Pull Request를 진행 합니다.</p><h3><span id="pull-request-작성법">Pull Request 작성법</span></h3><p><img src="https://i.imgur.com/3TnHt0c.png" alt=""></p><ul><li>왼쪽 위에 Reviewers 톱니바퀴 버튼을 클릭해서 리뷰어를 지정합니다.</li><li>resolved: #1(해당 Issue Number) 풀리퀘스트 요청하는 이유 즉 무슨 이슈에 대한 작업인지 명시합니다.</li></ul><p><code>resolved</code> 키워드를 입력하면 해당 풀리퀘스트가 master Branch에 반영되면 자동으로 close 됩니다. 자동으로 close 되는 것이 싫으시다면 issue: #[해당 Issue Number]를 작성해주세요.</p><p>이렇게 Pull Request가 생성되면 새로운 Issue Number가 부여됩니다. <strong>즉 Pull Request도 Issue입니다.</strong></p><p><img src="https://i.imgur.com/skNmpeQ.png" alt="issue-pull-request-연결"></p><p><strong>반드시 해당 풀리퀘스트가 무슨 이슈에 따른 요청인지 명시하시는 것을 권장합니다.</strong> 그렇게 되면 위 그림처럼 해당 이슈에 #2[방금 요청한 풀리퀘스트]가 연결되어 해당 이슈가 무슨 코드로 인해서 진행됐는지 추적하기 좋습니다.</p><h3><span id="code-review">Code Review</span></h3><p>리뷰어가 요청받은 Pull Request로 가서 <code>Add your review</code> 버튼을 클릭합니다.</p><p><img src="https://i.imgur.com/k11vL5w.png" alt="리뷰진행"><br>소스코드에 대한 질문 등 다양한 comment를 남기는 방식으로 pull reqeust가 진행합니다.</p><ul><li>Approve: 코드에 대한 의문점이 없다면 승인 .</li><li>Comment: 간단한 피드백 제출</li><li>Request changes: 해당 코드에 문제가 있다고 판단되며 코드를 반드시 수정 요구</li></ul><p>위 항목은 Comment로 Submit review를 진행했습니다.</p><p><img src="https://i.imgur.com/EHnVEjU.png" alt="comment-표시"><br>위에서 작성한 comment가 해결됬었다면 <code>Merge pull request</code> 버튼을 눌러서 해당 pull request를 반영합니다. 반영이 완료되고 해당 branch가 더는 필요 없다고 판단되시면 <code>Delete branch</code> 버튼을 통해서 Remote에 있는 Branch를 삭제할 수 있습니다.</p><p><strong>위에서 작성한 resolved: #1 키워드 덕분에 소스코드가 해당 Branch에 적용됐으니 자동으로 #1에 대한 이슈는 close 처리됩니다.</strong></p><h1><span id="세부-사용법">세부 사용법</span></h1><ul><li>추가 예정</li></ul><h1><span id="zenhub-사용법">ZenHub 사용법</span></h1><ul><li>추가 예정</li></ul><h1><span id="code-coverage">Code Coverage</span></h1><ul><li>추가 예정</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;프로젝트-소개&quot;&gt;프로젝트 소개&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;Github를 이용해서 Project Management 하는 방법 및 전체적인 프로세스에 대해서 정리했습니다. &lt;strong&gt;issue 관리, 일정 관리, 코드리뷰, 
      
    
    </summary>
    
    
      <category term="Github" scheme="https://cheese10yun.github.io/tags/Github/"/>
    
      <category term="Issue" scheme="https://cheese10yun.github.io/tags/Issue/"/>
    
      <category term="Proejct Management" scheme="https://cheese10yun.github.io/tags/Proejct-Management/"/>
    
  </entry>
  
  <entry>
    <title>Spring OOP 프로그래밍 예제(5) - 외부 API(PagerDuty) 호출</title>
    <link href="https://cheese10yun.github.io/spring-oop-05/"/>
    <id>https://cheese10yun.github.io/spring-oop-05/</id>
    <published>2018-07-05T15:00:00.000Z</published>
    <updated>2018-07-07T15:18:52.937Z</updated>
    
    <content type="html"><![CDATA[<p>예제 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/pagerduty" rel="external nofollow noopener noreferrer" target="_blank">Github : blog-sample</a>에 공개 되어 있습니다.</p><h1><span id="외부-apipagerduty-호출">외부 API(PagerDuty) 호출</span></h1><p>최근 외부 API를 통신하는 일들이 많이 있었고 최근 PagerDuty API 작업을 하면서 외부 API를 사용할 때 많은 시행착오와 고민을 나름 정리해 보았습니다.</p><h2><span id="pagerduty-request">PagerDuty Request</span></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"routing_key"</span>: <span class="string">"routing_key..."</span>,</div><div class="line">    <span class="attr">"event_action"</span>: <span class="string">"only trigger, acknowledge, resolve"</span>,</div><div class="line">    <span class="attr">"images"</span>: [],</div><div class="line">    <span class="attr">"links"</span>: [],</div><div class="line">    <span class="attr">"payload"</span>: &#123;</div><div class="line">        <span class="attr">"summary"</span>: <span class="string">"summary...(string)"</span>,</div><div class="line">        <span class="attr">"source"</span>: <span class="string">"System..."</span>,</div><div class="line">        <span class="attr">"severity"</span>: <span class="string">"only critical, error, warning, info"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="pagerduty-response">PagerDuty Response</span></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"status"</span>: <span class="string">"success"</span>,</div><div class="line">  <span class="attr">"message"</span>: <span class="string">"Event processed"</span>,</div><div class="line">  <span class="attr">"dedup_key"</span>: <span class="string">"samplekeyhere"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="https://v2.developer.pagerduty.com/docs/send-an-event-events-api-v2" rel="external nofollow noopener noreferrer" target="_blank">PagerDuty Document</a>에 나와 있는 Request, Response를 JSON으로 정리했습니다. Request 값은 필수 값 위주로 정리했습니다.</p><h2><span id="request-response-class">Request, Response Class</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Request</span> </span>&#123;</div><div class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"event_action"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> EventAction eventAction;</div><div class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"routing_key"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String routingKey = <span class="string">"routingKey..."</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Payload payload;</div><div class="line"></div><div class="line">    <span class="meta">@Builder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Request</span><span class="params">(<span class="keyword">final</span> EventAction eventAction, <span class="keyword">final</span> Payload payload)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.eventAction = eventAction;</div><div class="line">        <span class="keyword">this</span>.payload = payload;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Payload</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String summary;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String timestamp = ZonedDateTime.now().toOffsetDateTime().format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Severity severity;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Group group;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Source source;</div><div class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"custom_details"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Object customDetails;</div><div class="line"></div><div class="line">    <span class="meta">@Builder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Payload</span><span class="params">(<span class="keyword">final</span> String summary, <span class="keyword">final</span> Severity severity, <span class="keyword">final</span> Group group, <span class="keyword">final</span> Source source, <span class="keyword">final</span> Object customDetails)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.summary = summary;</div><div class="line">        <span class="keyword">this</span>.severity = severity;</div><div class="line">        <span class="keyword">this</span>.group = group;</div><div class="line">        <span class="keyword">this</span>.source = source;</div><div class="line">        <span class="keyword">this</span>.customDetails = customDetails;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String status;</div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line">    <span class="meta">@JsonProperty</span>(<span class="string">"dedup_key"</span>)</div><div class="line">    <span class="keyword">private</span> String dedupKey;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="request-response에-대한-dto-클래스-생성">Request, Response에 대한 DTO 클래스 생성</span></h3><p>위의 JSON을 클래스로 바인딩시킬 DTO 클래스를 생성해서 API에 대한 Request, Response를 관리하는 것이 바람직합니다. 간혹 Map, JSON(gsoon, jackson) 등을 이용해서 유연하게 두는 예도 있지만 <strong>저는 개인적으로 권장하지 않습니다.</strong> 가장 큰 이유는 해당 값에 무슨 데이터가 있는지 확인하기 어렵습니다. 코드 가독성이 심각하게 떨어지며 정확히 어떤 자료형인지 확인하기도 어렵습니다. 또 @JsonProperty를 통해서 해당 실제 JSON 키값과 객체의 멤버 필드 값을 다르게 설정 할 수 있습니다.</p><h3><span id="setter를-사용하지-않기">Setter를 사용하지 않기</span></h3><p>이전 포스팅에서도 <a href="https://github.com/cheese10yun/spring-jpa-best-practices/blob/master/doc/step-06.md" rel="external nofollow noopener noreferrer" target="_blank">Setter 사용하지 않기</a>를 언급한 적이 있습니다. Response DTO 클래스 같은 경우는 더욱 Setter를 제공할 필요가 없지만, 관습적으로 Setter 메서드를 추가하는 경우가 많습니다. <strong>해당 객체를 어디서든지 변경이 가능한 객체가 되기 때문에 명확한 이유 없이 관습적인 Setter는 반드시 지양 해야 합니다.</strong></p><p>반면 Request 객체는 필요한 값을 바인딩시켜 보내줘야 합니다. 이러한 경우는 Builder 패턴을 이용해서 객체를 생성하면 많은 장점이 있습니다. 제가 느끼는 대표적인 장점들 아래와 같습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">PagerDutyDto.Request.builder()</div><div class="line">    .eventAction(PagerDutyDto.EventAction.acknowledge)</div><div class="line">    .payload(Payload ...)</div><div class="line">    .build();</div></pre></td></tr></table></figure><ol><li>인자의 순서에 영향 받지 않습니다. 생성자로 생성했을 경우 인자의 순서가 중요하며, 특히 같은 자료형에 대한 인자는 실수할 수 있는 여지가 높습니다.</li><li><strong>Setter 메서드가 없어 변경 불가능 객체를 만들 수 있습니다.</strong></li></ol><p>그렇다면 객체의 수정이 필요 하면 어떻게 어떻게 해야 할까요?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String email;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changeEmail</span><span class="params">(String email)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.email = email;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>객체의 멤버필드를 수정 할 수 있는 수정 메소드를 재공 해주면 됩니다. 단순하게 setter라는 네이밍으로 공개하는 것보다 해당 메소드의 기능을 잘 표현하는 네이밍을 갖는 것이 적합합니다. 더 구체적인 내용은 이전 포스팅 <a href="https://github.com/cheese10yun/spring-jpa-best-practices/blob/master/doc/step-06.md#updatemyaccount-%EB%A9%94%EC%84%9C%EB%93%9C%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8" rel="external nofollow noopener noreferrer" target="_blank">Settet 사용하지 않기</a>에 정리 되어 있습니다.</p><h2><span id="enum을-활용한-안전성-보장">Enum을 활용한 안전성 보장</span></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"event_action"</span>: <span class="string">"only trigger, acknowledge, resolve"</span>,</div><div class="line">    <span class="attr">"payload"</span>: &#123;</div><div class="line">        <span class="attr">"severity"</span>: <span class="string">"only critical, error, warning, info"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>PagerDuty API event_action, payload.severity 의 value는 위에서 정의한 값 이외의 값이 넘어오면 status 400이 리턴 됩니다. 이러한 값들에 대해서는 아래 코드처럼 enum 클래스로 안전성을 확보하는 것이 바람직합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EventAction &#123;</div><div class="line">    trigger, acknowledge, resolve</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Severity &#123;</div><div class="line">    info, error, warn</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>String으로 관리할 경우 해당 값 이외의 입력에 대한 예외코드를 작성하면 런타임시에 발생하게 됩니다. enum 클래스로 관리했을 경우 개발자는 해당 enum 값이 외에는 값을 넣을 수도 없게끔 강제하는 것이 실수를 줄이는 방법입니다. String은 변경 및 유지 보수에 취약합니다. 이처럼 API에서 강제된 항목들은 enum 클래스로 관리하는 것이 바람직합니다.</p><h2><span id="각각의-메소드에-책임-부여">각각의 메소드에 책임 부여</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendErrorMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 적절한 Error Message를 가공하는 책임</span></div><div class="line">    <span class="comment">// 해당 메소드의 변경시 이유는 Error Message의 변경시에만 변경 이유를 갖는다</span></div><div class="line">    <span class="keyword">final</span> PagerDutyDto.Request request = buildErrorMessage();</div><div class="line">    send(request);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendInfoMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 적절한 Info Message를 가공하는 책임</span></div><div class="line">    <span class="comment">// 해당 메소드의 변경시 이유는 Info Message의 변경시에만 변경 이유를 갖는다</span></div><div class="line">    <span class="keyword">final</span> PagerDutyDto.Request request = buildInfoMessage();</div><div class="line">    send(request);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> PagerDutyDto.<span class="function">Response <span class="title">send</span><span class="params">(<span class="keyword">final</span> PagerDutyDto.Request request)</span> </span>&#123;</div><div class="line">    <span class="comment">// 넘겨 받은 request를 PagerDuty 에게 보내는 책임</span></div><div class="line">    <span class="comment">// 해당 메소드의 변경시 이유는 PagerDuty API 변경시만 변경 이유를 갖는다. -&gt; Request, Response 변경이 대표적인 예</span></div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">final</span> String url = <span class="string">"https://events.pagerduty.com/v2/enqueue"</span>;</div><div class="line">        <span class="keyword">return</span> restTemplate.postForObject(url, request, PagerDutyDto.Response.class);</div><div class="line">    &#125; <span class="keyword">catch</span> (HttpClientErrorException e) &#123;</div><div class="line">        log.error(e.getResponseBodyAsString(), e);</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>클린 코드 출처</p><p><strong>작게 만들어라!</strong></p><p>함수를 만드는 첫 번째 규칙은 '작게!'다. 함수를 만드는 둘째 규칙은 '더 작게!'다. …중략<br><strong>한 가지만 해라!</strong></p><p>함수는 한 가지를 해야 한다. 그 한 가지를 잘해야 한다. 그 한 가지만을 해야 한다. … 중략</p></blockquote><p><strong>클린 코드에서 언급했듯이 함수의 기본단위는 정말 작아야 한다고 생각합니다. 그래야 재사용성이 높아지며 가독성, 유지보수에 좋은 코드가 된다고 생각합니다.</strong></p><p>sendErrorMessage() 메소드는 적절하게 Error Message를 만들어서 send 메소드에게 전달해주는 것이 그 함수가 하는 일입니다. 함수의 크기가 작으며 적은 일을 수행하고 있습니다.</p><p>send() 메소드도 넘겨받은 request값을 PagerDutry API 에게 요청하고 그에 따른 응답값을 받는 일만 합니다. 그렇게 된 결과 sendInfoMessage() 메서드에서도 재사용성이 높아지고, 해당 함수가 하는 일이 단순해져서 가독성이 높아집니다. 또 위에서도 언급했듯이 PagerDuty API 변경시에만 해당 메소드가 변경됩니다. 그런 결과 유지 보수하기 편한 이점이 있다고 생각합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;예제 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/pagerduty&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_bl
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="OOP" scheme="https://cheese10yun.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Jpa Best Practices Step-08 - OneToOne 관계 설정 팁</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-08/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-08/</id>
    <published>2018-06-28T15:00:00.000Z</published>
    <updated>2018-06-29T10:51:56.290Z</updated>
    
    <content type="html"><![CDATA[<p>해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p><p>OneToOne 관계 설정 시에 간단한 팁을 정리하겠습니다. 해당 객체들의 성격은 다음과 같습니다.</p><ul><li>주문과 쿠폰 엔티티가 있다.</li><li>주문 시 쿠폰을 적용해서 할인받을 수 있다.</li><li>주문과 쿠폰 관계는 1:1 관계 즉 OneToOne 관계이다.</li></ul><p>주의 깊게 살펴볼 내용은 다음과 같습니다.</p><ul><li>외래 키는 어디 테이블에 두는 것이 좋은가?</li><li>양방향 연관 관계 편의 메소드</li><li>제약 조건으로 인한 안정성 및 성능 향상</li></ul><h2><span id="entity-객체">Entity 객체</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coupon</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"discount_amount"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> discountAmount;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"use"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> use;</div><div class="line"></div><div class="line">    <span class="meta">@OneToOne</span>()</div><div class="line">    <span class="keyword">private</span> Order order;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line">    </div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"price"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</div><div class="line"></div><div class="line">    <span class="meta">@OneToOne</span></div><div class="line">    <span class="meta">@JoinColumn</span>()</div><div class="line">    <span class="keyword">private</span> Coupon coupon;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="외래-키는-어디-테이블에-두는-것이-좋은가">외래 키는 어디 테이블에 두는 것이 좋은가?</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Order 가연관관계의 주인일 경우</span></div><div class="line"><span class="meta">@OneToOne</span></div><div class="line"><span class="meta">@JoinColumn</span>(name = <span class="string">"coupon_id"</span>, referencedColumnName = <span class="string">"id"</span>)</div><div class="line"><span class="keyword">private</span> Coupon coupon;</div><div class="line"></div><div class="line"><span class="meta">@OneToOne</span>(mappedBy = <span class="string">"coupon"</span>)</div><div class="line"><span class="keyword">private</span> Order order;</div><div class="line"></div><div class="line"><span class="comment">// coupon이 연관관계의 주인일 경우 </span></div><div class="line"><span class="meta">@OneToOne</span>(mappedBy = <span class="string">"order"</span>)</div><div class="line"><span class="keyword">private</span> Coupon coupon;</div><div class="line"></div><div class="line"><span class="meta">@OneToOne</span></div><div class="line"><span class="meta">@JoinColumn</span>(name = <span class="string">"order_id"</span>, referencedColumnName = <span class="string">"id"</span>)</div><div class="line"><span class="keyword">private</span> Order order;</div></pre></td></tr></table></figure><p>일대다 관계에서는 다 쪽에서 외래 키를 관리 하게 되지만 상대적으로 일대일 관계 설정에는 외래 키를 어느 곳에 두어야 하는지를 생각을 해야 합니다. JPA 상에서는 외래 키가 갖는 쪽이 연관 관계의 주인이 되고<br><strong>연관 관계의 주인만이 데이터베이스 연관 관계와 매핑되고 왜래 키를 관리(등록, 수정, 삭제)할 수 있기 때문입니다.</strong></p><h2><span id="sample-code">Sample Code</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 주문시 1,000 할인 쿠폰을 적용해본 간단한 코드입니다. </span></div><div class="line"><span class="function"><span class="keyword">public</span> Order <span class="title">order</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Order order = Order.builder().price(<span class="number">1_0000</span>).build(); <span class="comment">// 10,000 상품주문</span></div><div class="line">    Coupon coupon = couponService.findById(<span class="number">1</span>); <span class="comment">// 1,000 할인 쿠폰</span></div><div class="line">    order.applyCoupon(coupon);</div><div class="line">    <span class="keyword">return</span> orderRepository.save(order);</div><div class="line">&#125;</div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> order_쿠폰할인적용() &#123;</div><div class="line">    <span class="keyword">final</span> Order order = orderService.order();</div><div class="line">    assertThat(order.getPrice(), is(<span class="number">9_000</span>D)); <span class="comment">// 1,000 할인 적용 확인</span></div><div class="line"></div><div class="line">    <span class="keyword">final</span> Order findOrder = orderService.findOrder(order.getId());</div><div class="line">    System.out.println(<span class="string">"couponId : "</span>+ findOrder.getCoupon().getId()); <span class="comment">// couponId : 1 (coupon_id 외래 키를 저장 완료)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="order가-주인일-경우-장점-insert-sql이-한번-실행">Order가 주인일 경우 장점 : INSERT SQL이 한번 실행</span></h3><p><img src="https://i.imgur.com/k6V64ye.png" alt=""></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// order가 연관 관계의 주인일 경우 SQL</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders (<span class="keyword">id</span>, coupon_id, price) <span class="keyword">values</span> (<span class="literal">null</span>, ?, ?) </div><div class="line"></div><div class="line">//coupon이 연관 관계의 주인일 경우 <span class="keyword">SQL</span></div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> orders (<span class="keyword">id</span>, price) <span class="keyword">values</span> (<span class="literal">null</span>, ?)</div><div class="line"><span class="keyword">update</span> coupon <span class="keyword">set</span> discount_amount=?, order_id=?, <span class="keyword">use</span>=? <span class="keyword">where</span> <span class="keyword">id</span>=?</div></pre></td></tr></table></figure><p>order 테이블에 coupon_id 칼럼을 저장하기 때문에 주문 SQL은 한 번만 실행됩니다. 반면에 coupon이 연관 관계의 주인일 경우에는 coupon에 order의 외래 키가 있으니 order INSERT SQL 한 번, coupon 테이블에 order_id 칼럼 업데이트 쿼리 한번 총 2번의 쿼리가 실행됩니다.</p><p>작은 장점으로는 데이터베이스 칼럼에 coupon_id 항목이 null이 아닌 경우 할인 쿠폰이 적용된 것으로 판단할 수 있습니다.</p><h3><span id="order가-주인일-경우-단점-연관-관계-변경-시-취약">Order가 주인일 경우 단점 : 연관 관계 변경 시 취약</span></h3><p>기존 요구사항은 주문 한 개에 쿠폰은 한 개만 적용 이 가는 했기 때문에 OneToOne 연관 관계를 맺었지만  <strong>하나의 주문에 여러 개의 쿠폰이 적용되는 기능이 추가되었을 때 변경하기 어렵다는 단점이 있습니다.</strong></p><p>order 테이블에 coupon_id 칼럼을 갖고 있어서 여러 개의 쿠폰을 적용하기 위해서는 coupon 테이블에서 order_id 칼럼을 가진 구조로 변경 해야 합니다. <strong>OneToMany 관계에서는 연관 관계의 주인은 왜래 키를 갖는 엔티티가 갖는 것이 바람직합니다.</strong> 비즈니스 로직 변경은 어려운 게 없으나 데이터베이스 칼럼들을 이전 해야 하기 때문에 실제 서비스 중인 프로젝트에는 상당히 골치 아프게 됩니다.</p><p>장점이 단점이 되고 단점이 장점이 되기 때문에 Coupon 장단점을 정리하지 않았습니다.</p><h2><span id="연관-관계의-주인-설정">연관 관계의 주인 설정</span></h2><p>OneToOne 관계를 맺으면 외래 키를 어디에 둘 것인지, 즉 연관 관계의 주인을 어디에 둘 것인지는 많은 고민이 필요 합니다. 제 개인적인 생각으로는 OneToMany로 변경될 가능성이 있는지를 판단하고 변경이 될 가능성이 있다고 판단되면 Many가 될 엔티티가 관계의 주인이 되는 것이 좋다고 봅니다. 또 애초에 OneToMany를 고려해서 초기 관계 설정을 OneToMany로 가져가는 것도 좋다고 생각합니다.</p><p>그러니 이 연관 관계가 정말 OneToOne 관계인지 깊은 고민이 필요하고 해당 도메인에 대한 지식도 필요 하다고 생각합니다. 예를 들어 개인 송금 관계에서 입금 &amp;amplt-&amp;ampgt 출금 관계를 가질 경우 반드시 하나의 입금 당 하나의 출금을 갖게 되니 이것은 OneToOne 관계로 맺어가도 무리가 없다고 판단됩니다. (물론 아닌 때도 있습니다. 그래서 해당 도메인에 대한 지식이 필요 한다고 생각합니다)</p><p><strong>주인 설정이라고 하면 뭔가 더 중요한 것이 주인이 되어야 할 거 같다는 생각이 들지만 연관 관계의 주인이라는 것은 왜래 키의 위치와 관련해서 정해야 하지 해당 도메인의 중요성과는 상관관계가 없습니다.</strong></p><h2><span id="양방향-연관관계-편의-메소드">양방향 연관관계 편의 메소드</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Order가 연관관계의 주인일 경우 예제</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coupon</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="comment">// 연관관계 편의 메소드</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">(<span class="keyword">final</span> Order order)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.order = order;</div><div class="line">        <span class="keyword">this</span>.use = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Coupon coupon; <span class="comment">//(1)</span></div><div class="line">    ...</div><div class="line">    <span class="comment">// 연관관계 편의 메소드</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applyCoupon</span><span class="params">(<span class="keyword">final</span> Coupon coupon)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.coupon = coupon;</div><div class="line">        coupon.use(<span class="keyword">this</span>);</div><div class="line">        price -= coupon.getDiscountAmount();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 주문 생성시 1,000 할인 쿠폰 적용</span></div><div class="line"><span class="function"><span class="keyword">public</span> Order <span class="title">order</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Order order = Order.builder().price(<span class="number">1_0000</span>).build(); <span class="comment">// 10,000 상품주문</span></div><div class="line">    Coupon coupon = couponService.findById(<span class="number">1</span>); <span class="comment">// 1,000 할인 쿠폰</span></div><div class="line">    order.applyCoupon(coupon);</div><div class="line">    <span class="keyword">return</span> orderRepository.save(order);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>연관 관계의 주인이 해당 참조할 객체를 넣어줘야 데이터베이스의 칼럼에 외래 키가 저장됩니다. 즉 Order가 연관 관계의 주인이면 (1)번 멤버 필드에 Coupon을 넣어줘야 데이터베이스 order 테이블에 coupon_id 칼럼에 저장됩니다.</p><p>양방향 연관 관계일 경우 위처럼 연관 관계 편의 메소드를 작성하는 것이 좋습니다. 위에서 말했듯이 연관 관계의 주인만이 왜래 키를 관리 할 수 있으니 applyCoupon 메소드는 이해하는데 어렵지 않습니다.</p><p>그렇다면 use 메서드에서에 데이터베이스에 저장하지도 않는 Order를 set을 왜 해주는 걸까요?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">(<span class="keyword">final</span> Order order)</span> </span>&#123;</div><div class="line"><span class="comment">//  this.order = order; 해당코드를 주석했을 때 테스트 코드</span></div><div class="line">    <span class="keyword">this</span>.use = <span class="keyword">true</span>;</div><div class="line">&#125; </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> use_메서드에_order_set_필요이유() &#123;</div><div class="line">    <span class="keyword">final</span> Order order = orderService.order();</div><div class="line">    assertThat(order.getPrice(), is(<span class="number">9_000</span>D)); <span class="comment">// 1,000 할인 적용 확인</span></div><div class="line">    <span class="keyword">final</span> Coupon coupon = order.getCoupon();</div><div class="line">    assertThat(coupon.getOrder(), is(notNullValue())); <span class="comment">// 해당 검사는 실패한다.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>order를 바인딩하는 코드를 주석하고 해당 코드를 돌려보면 실패하게 됩니다. 일반적으로 생각했을 때 order 생성 시 1,000할인 쿠폰을 적용했기 때문에 해당 쿠폰에도 주문 객체가 들어갔을 거로 생각할 수 있습니다. 하지만 위의 주석시킨 코드가 그 기능을 담당했기 때문에 쿠폰 객체의 주문 값은 null인 상태입니다. <strong>즉 순수한 객체까지 고려한 양방향 관계를 고려하는 것이 바람직하고 그것이 안전합니다.</strong></p><h2><span id="제약-조건으로-인한-안정-성-및-성능-향상">제약 조건으로 인한 안정 성 및 성능 향상</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="meta">@OneToOne</span></div><div class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"coupon_id"</span>, referencedColumnName = <span class="string">"id"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> Coupon coupon;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>모든 주문에 할인 쿠폰이 적용된다면 @JoinColumn의 nullable 옵션을 false로 주는 것이 좋습니다. <strong>NOT NULL 제약 조건을 준수해서 안전성이 보장됩니다.</strong></p><p><img src="https://i.imgur.com/bHfKh8m.png" alt=""></p><ul><li>nullable = false 없는 경우, outer join</li></ul><p><img src="https://i.imgur.com/94To549.png" alt=""></p><ul><li>nullable = false 선언한 경우, inner join</li></ul><p><strong>외래 키에 NOT NULL 제약 조건을 설정하면 값이 있는 것을 보장합니다. 따라서 JPA는 이때 내부조인을<br>통해서 내부 조인 SQL을 만들어 주고 이것은 외부 조인보다 성능과 최적화에 더 좋습니다.</strong></p><p>물론 모든 경우에 적용할 수는 없고 반드시 외래 키가 NOT NULL인 조건에만 사용할 수 있습니다. 예를 들어 쿠폰과 회원 연관 관계가 있을 때 쿠폰은 반드시 회원의 외래 키를 참조하고 있어야 합니다. 이런 경우 유용하게 사용할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-jpa-best-practices&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Git
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
  </entry>
  
  <entry>
    <title>Jackson 어노테이션 사용법(5)</title>
    <link href="https://cheese10yun.github.io/jackson-annotation-05/"/>
    <id>https://cheese10yun.github.io/jackson-annotation-05/</id>
    <published>2018-06-22T15:00:00.000Z</published>
    <updated>2018-06-22T15:13:59.757Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="custom-jackson-annotation-disable-jackson-annotation">Custom Jackson Annotation, Disable Jackson Annotation</span></h2><ul><li><a href="http://www.baeldung.com/jackson-annotations" rel="external nofollow noopener noreferrer" target="_blank">Jackson Annotation Examples</a> 예제를 적용전, 적용후로 나누어서 정리 해봤습니다.</li><li>테스트코드도 참고하시면 좋습니다.</li><li>해당 코드 및 전체 Jackson 정리는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/jackson" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 참고해주세요</li></ul><h2><span id="custom-jackson-annotation">Custom Jackson Annotation</span></h2><ul><li>Annotation 직접 정리 할 수 있습니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CustomAnnotation</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithCustomAnnotation</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">    <span class="keyword">public</span> Date dateCreated;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanWithCustomAnnotation</span><span class="params">(<span class="keyword">int</span> id, String name, Date dateCreated)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.dateCreated = dateCreated;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@JacksonAnnotationsInside</span></div><div class="line"><span class="meta">@JsonInclude</span>(JsonInclude.Include.NON_NULL)</div><div class="line"><span class="meta">@JsonPropertyOrder</span>(&#123;<span class="string">"name"</span>, <span class="string">"id"</span>, <span class="string">"dateCreated"</span>&#125;)</div><div class="line"><span class="meta">@interface</span> CustomAnnotation &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 적용전</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"My bean"</span>,</div><div class="line">  <span class="attr">"dateCreated"</span>: <span class="literal">null</span></div><div class="line">&#125;</div><div class="line">// 적용후, property order 변경, null 값 비 직렬화</div><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"My bean"</span>,</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="disable-jackson-annotation">Disable Jackson Annotation</span></h2><ul><li>모든 Jackson annotation 비활성화 하는 방법</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonInclude</span>(JsonInclude.Include.NON_NULL)</div><div class="line"><span class="meta">@JsonPropertyOrder</span>(&#123;<span class="string">"name"</span>, <span class="string">"id"</span>&#125;)</div><div class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</div><div class="line">     <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">     <span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="title">MyBean</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</div><div class="line">         <span class="keyword">this</span>.id = id;</div><div class="line">         <span class="keyword">this</span>.name = name;</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line">mapper.disable(MapperFeature.USE_ANNOTATIONS); <span class="comment">// 모든 Jackson annotation 비활성화</span></div></pre></td></tr></table></figure> <figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// MapperFeature.USE_ANNOTATIONS 적용전</div><div class="line">&#123;</div><div class="line">    <span class="attr">"id"</span>:<span class="number">1</span>,</div><div class="line">    <span class="attr">"name"</span>:<span class="literal">null</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">// MapperFeature.USE_ANNOTATIONS 적용후</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;custom-jackson-annotation-disable-jackson-annotation&quot;&gt;Custom Jackson Annotation, Disable Jackson Annotation&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;
      
    
    </summary>
    
    
      <category term="Jackson" scheme="https://cheese10yun.github.io/tags/Jackson/"/>
    
  </entry>
  
  <entry>
    <title>Jackson 어노테이션 사용법(4)</title>
    <link href="https://cheese10yun.github.io/jackson-annotation-04/"/>
    <id>https://cheese10yun.github.io/jackson-annotation-04/</id>
    <published>2018-06-19T15:00:00.000Z</published>
    <updated>2018-06-20T13:50:28.134Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="polymorphic-type-handling-annotations-general-annotations">Polymorphic Type Handling Annotations,  General Annotations</span></h2><ul><li><a href="http://www.baeldung.com/jackson-annotations" rel="external nofollow noopener noreferrer" target="_blank">Jackson Annotation Examples</a> 예제를 적용전, 적용후로 나누어서 정리 해봤습니다.</li><li>테스트코드도 참고하시면 좋습니다.</li><li>해당 코드 및 전체 Jackson 정리는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/jackson" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 참고해주세요</li></ul><h2><span id="jackson-polymorphic-type-handling-annotations">Jackson Polymorphic Type Handling Annotations</span></h2><ul><li>Polymorphic을 통한 직렬화, 비직렬화</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PRIVATE)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Zoo</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> Animal animal;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Zoo</span><span class="params">(Animal animal)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.animal = animal;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@JsonTypeInfo</span>(</div><div class="line">            use = JsonTypeInfo.Id.NAME,</div><div class="line">            include = JsonTypeInfo.As.PROPERTY,</div><div class="line">            property = <span class="string">"type"</span>)</div><div class="line">    <span class="meta">@JsonSubTypes</span>(&#123;</div><div class="line">            <span class="meta">@JsonSubTypes</span>.Type(value = Dog.class, name = <span class="string">"dog"</span>),</div><div class="line">            <span class="meta">@JsonSubTypes</span>.Type(value = Cat.class, name = <span class="string">"cat"</span>)</div><div class="line">    &#125;)</div><div class="line">    <span class="meta">@Getter</span></div><div class="line">    <span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PRIVATE)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Animal</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@JsonTypeName</span>(<span class="string">"dog"</span>)</div><div class="line">    <span class="meta">@Getter</span></div><div class="line">    <span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PRIVATE)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">double</span> barkVolume;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@JsonTypeName</span>(<span class="string">"cat"</span>)</div><div class="line">    <span class="meta">@Getter</span></div><div class="line">    <span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PRIVATE)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</div><div class="line">        <span class="keyword">boolean</span> likesCream;</div><div class="line">        <span class="keyword">public</span> <span class="keyword">int</span> lives;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(name);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"animal"</span>: &#123;</div><div class="line">        <span class="attr">"type"</span>: <span class="string">"dog"</span>,</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"lacy"</span>,</div><div class="line">        <span class="attr">"barkVolume"</span>: <span class="number">0</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#123;</div><div class="line">    <span class="attr">"animal"</span>:&#123;</div><div class="line">        <span class="attr">"name"</span>:<span class="string">"lacy"</span>,</div><div class="line">        <span class="attr">"type"</span>:<span class="string">"cat"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="jackson-general-annotations">Jackson General Annotations</span></h2><h3><span id="jsonformat">@JsonFormat</span></h3><ul><li>날짜 / 시간 값을 직렬화 할 때 포멧팅을 지정합니다</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">    <span class="meta">@JsonFormat</span>(</div><div class="line">            shape = JsonFormat.Shape.STRING,</div><div class="line">            pattern = <span class="string">"dd-MM-yyyy hh:mm:ss"</span>)</div><div class="line">    <span class="keyword">public</span> Date eventDate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Event</span><span class="params">(String name, Date date)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.eventDate = date;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//적용전</div><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>:<span class="string">"party"</span>,</div><div class="line">  <span class="attr">"eventDate"</span>:<span class="number">1419042600000</span></div><div class="line">&#125;</div><div class="line">//적용후</div><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"party"</span>,</div><div class="line">  <span class="attr">"eventDate"</span>: <span class="string">"20-12-2014 02:30:00"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jsonunwrapped">@JsonUnwrapped</span></h3><ul><li>직렬화, 비 직렬화 될 때 언 래핑 / 병합되어야 하는 값 을 정의하는 데 사용됩니다</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UnwrappedUser</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="meta">@JsonUnwrapped</span></div><div class="line">    <span class="keyword">public</span> Name name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UnwrappedUser</span><span class="params">(<span class="keyword">int</span> id, Name name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> String firstName;</div><div class="line">        <span class="keyword">public</span> String lastName;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Name</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.firstName = firstName;</div><div class="line">            <span class="keyword">this</span>.lastName = lastName;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//적용전</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">"firstName"</span>: <span class="string">"John"</span>,</div><div class="line">  <span class="attr">"lastName"</span>: <span class="string">"Doe"</span></div><div class="line">&#125;</div><div class="line">//적용후</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>:<span class="number">1</span>,</div><div class="line">  <span class="attr">"name"</span>:&#123;</div><div class="line">    <span class="attr">"firstName"</span>:<span class="string">"John"</span>,</div><div class="line">    <span class="attr">"lastName"</span>:<span class="string">"Doe"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jsonview">@JsonView</span></h3><ul><li>속성이 serialization / deserialization에 포함될 View 를 나타내는 데 사용됩니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Views</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Public</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Internal</span> <span class="keyword">extends</span> <span class="title">Public</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span> </span>&#123;</div><div class="line">    <span class="meta">@JsonView</span>(Views.Public.class)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="meta">@JsonView</span>(Views.Public.class)</div><div class="line">    <span class="keyword">public</span> String itemName;</div><div class="line"></div><div class="line">    <span class="meta">@JsonView</span>(Views.Internal.class)</div><div class="line">    <span class="keyword">public</span> String ownerName;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Item</span><span class="params">(<span class="keyword">int</span> id, String itemName, String ownerName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.itemName = itemName;</div><div class="line">        <span class="keyword">this</span>.ownerName = ownerName;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//적용전</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>:<span class="number">2</span>,</div><div class="line">  <span class="attr">"itemName"</span>:<span class="string">"book"</span>,</div><div class="line">  <span class="attr">"ownerName"</span>:<span class="string">"John"</span></div><div class="line">&#125;</div><div class="line">//적용후</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>:<span class="number">2</span>,</div><div class="line">  <span class="attr">"itemName"</span>:<span class="string">"book"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jsonmanagedreference-jsonbackreference">@JsonManagedReference, @JsonBackReference</span></h3><ul><li>객체의  상위 / 하위 관계를 처리 명시하고 무한 순함참조에러를 해결합니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemWithRef</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">public</span> String itemName;</div><div class="line"></div><div class="line">    <span class="meta">@JsonManagedReference</span></div><div class="line">    <span class="keyword">public</span> UserWithRef owner;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ItemWithRef</span><span class="params">(<span class="keyword">int</span> id, String itemName, UserWithRef owner)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.itemName = itemName;</div><div class="line">        <span class="keyword">this</span>.owner = owner;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserWithRef</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">    <span class="meta">@JsonBackReference</span></div><div class="line">    <span class="keyword">public</span> List&lt;ItemWithRef&gt; itemWithRefs = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserWithRef</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(ItemWithRef item)</span> </span>&#123;</div><div class="line">        itemWithRefs.add(item);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//적용전</div><div class="line">// Infinite recursion (StackOverflowError)... 무한 순함참조 에러</div><div class="line">//적용후</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>:<span class="number">2</span>,</div><div class="line">  <span class="attr">"itemName"</span>:<span class="string">"book"</span>,</div><div class="line">  <span class="attr">"owner"</span>:&#123;</div><div class="line">    <span class="attr">"id"</span>:<span class="number">1</span>,</div><div class="line">    <span class="attr">"name"</span>:<span class="string">"John"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jsonfilter">@JsonFilter</span></h3><ul><li>직렬화시에 사용되는 필터를 지정합니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonFilter</span>(<span class="string">"myFilter"</span>)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithFilter</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanWithFilter</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id= id;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//적용전</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>:<span class="number">1</span>,</div><div class="line">  <span class="attr">"name"</span>:<span class="string">"My bean"</span></div><div class="line">&#125;</div><div class="line">//적용후</div><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>:<span class="string">"My bean"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;polymorphic-type-handling-annotations-general-annotations&quot;&gt;Polymorphic Type Handling Annotations,  General Annotations&lt;/span&gt;&lt;
      
    
    </summary>
    
    
      <category term="Jackson" scheme="https://cheese10yun.github.io/tags/Jackson/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Jpa Best Practices Step-07 - Embedded를 적극 활용</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-07/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-07/</id>
    <published>2018-06-13T15:00:00.000Z</published>
    <updated>2018-06-22T15:25:51.374Z</updated>
    
    <content type="html"><![CDATA[<p>해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p><p>Embedded을 사용하면 칼럼들을 자료형으로 규합해서 응집력 및 재사용성을 높여 훨씬 더 객체지향 프로그래밍을 할 수 있게 도울 수 있습니다. Embedded은 다음과 같은 장점들이 있습니다.</p><h2><span id="자료형의-통일">자료형의 통일</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</div><div class="line">    <span class="comment">// 단순 String</span></div><div class="line">    <span class="meta">@email</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"email"</span>, nullable = <span class="keyword">false</span>, unique = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> String email;</div><div class="line"></div><div class="line">    <span class="comment">// Email 자료형 </span></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">private</span> Email email;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span>&#123;</div><div class="line">    <span class="meta">@Email</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"email"</span>, nullable = <span class="keyword">false</span>, unique = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> String value;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위처럼 단순 String 자료형에서 Email 자로 형으로 통일이 됩니다. <strong>자료형이 통일되면 많은 더욱 안전성이 높아지는 효과가 있습니다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">findByEmail</span><span class="params">(<span class="keyword">final</span> Email email)</span> </span>&#123; <span class="comment">//단순 문자열일 경우 (final String email)</span></div><div class="line">    <span class="keyword">final</span> Account account = accountRepository.findByEmail(email);</div><div class="line">    <span class="keyword">if</span> (account == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> AccountNotFoundException(email);</div><div class="line">    <span class="keyword">return</span> account;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>이메일로 회원을 조회 할 때 단순 문자열일 경우에는 굳이 이메일 형식을 맞추지 않고도 단순 문자열을 통해서 조회할 수 있습니다. 이것은 편하게 느껴질지는 모르나 안전성에는 좋다고 생각하지 않습니다. 위처럼 정확한 이메일 자료형으로 조회가 가능하게 안전성을 높일 수 있습니다. <strong>위처럼 단순 조회용뿐만이 아니라 Email에 관련된 모든 자료형을 단순 String에서 Email로 변경함으로써 얻을 수 있는 이점은 많습니다.</strong></p><h2><span id="풍부한-객체-rich-obejct">풍부한 객체 (Rich Obejct)</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHost</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> index = value.indexOf(<span class="string">"@"</span>);</div><div class="line">        <span class="keyword">return</span> value.substring(index);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> index = value.indexOf(<span class="string">"@"</span>);</div><div class="line">        <span class="keyword">return</span> value.substring(<span class="number">0</span>, index);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>이메일 아이디와 호스트값을 추출해야 하는 기능이 필요해질 경우 기존 String 자로 형일 경우에는 해당 로직을 Account 도메인 객체에 추가하든, 유틸성 클래스에 추가하든 해야 합니다.</p><p>도메인 객체에 추가할 때는 Account 도메인 클래스가 갖는 책임들이 많아집니다. 또 이메일은 어디서든지 사용할 수 있는데 Account 객체에서 이 기능을 정의하는 것은 올바르지 않습니다.</p><p>유틸성 클래스에 추가하는 것 또한 좋지 않아 보입니다. 일단 유틸성 클래스에 해당 기능이 있는지 알아봐야 하고 기능이 있음에도 불구하고 그것을 모르고 추가하여 중복 코가 발생하는 일이 너무나도 흔하게 발생합니다.</p><p>이것을 Email 형으로 빼놓았다면 아래처럼 Email 객체를 사용하는 곳 어디든지 사용할 수 있습니다. 해당 기능은 Email 객체가 해야 하는 일이고 또 그 일을 가장 잘할 수 있는 객체입니다. 또 한 코드가 아주 이해하기 쉽게 됩니다. 객체의 기능이 풍부해집니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">email.getHost();</div><div class="line">email.getId());</div></pre></td></tr></table></figure><h2><span id="재사용성">재사용성</span></h2><p>가령 해외 송금을 하는 기능이 있다고 가정할 경우 Remittance 클래스는 보내는 금액, 나라, 통화, 받는 금액, 나라, 통화가 필요하다. 이처럼 도메인이 복잡해질수록 더 재사용성은 중요합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Remittance</span></span>&#123;</div><div class="line">    <span class="comment">//자료형이 없는 경우</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"send_amount"</span>) <span class="keyword">private</span> <span class="keyword">double</span> sendAamount;</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"send_country"</span>) <span class="keyword">private</span> String sendCountry;</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"send_currency"</span>) <span class="keyword">private</span> String sendCurrency;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"receive_amount"</span>) <span class="keyword">private</span> <span class="keyword">double</span> receiveAamount;</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"receive_country"</span>) <span class="keyword">private</span> String receiveCountry;</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"receive_currency"</span>) <span class="keyword">private</span> String receiveCurrency;</div><div class="line"></div><div class="line">    <span class="comment">//Money 자료형</span></div><div class="line">    <span class="keyword">private</span> Money snedMoney;</div><div class="line">    <span class="keyword">private</span> Money receiveMoney;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Money</span> </span>&#123;</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"amount"</span>, nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>) <span class="keyword">private</span> <span class="keyword">double</span> amount;</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"country"</span>, nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>) <span class="keyword">private</span> Country country;</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"currency"</span>, nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>) <span class="keyword">private</span> Currency currency;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위처럼 Money라는 자료형을 두고 금액, 나라, 통화를 두면 도메인을 이해하는데 한결 수월할 뿐만 아니라 수많은 곳에서 재사용 할 수 있습니다. 사용자에게 해당 통화로 금액을 보여줄 때 소숫자리 몇 자리로 보여줄 것인지 등등 핵심 도메인일수록 재사용성을 높여 중복 코드를 제거하고 응집력을 높일 수 있습니다.</p><h2><span id="결론">결론</span></h2><p>Embedded의 장점을 계속 이야기했습니다. 자료형을 통일해서 안전성 및 재사용성을 높이고 풍부한 객체를 갖게 함으로써 많은 장점을 얻을 수 있습니다. 이러한 장점들은 객체지향 프로그래밍에 충분히 나와 있는 내용입니다. 제가 하고 싶은 이야기는 <strong>JPA는 결국 객체지향 프로그래밍을 돕는 도구</strong> 라는 이야기입니다. 실제 데이터는 관계형 데이터베이스에 저장됨으로써 객체지향과 패러다임이 일치하지 않는 부분을 JPA는 너무나도 좋게 해결해줍니다. 그러니 JPA가 주는 다양한 어노테이션, 기능들도 좋지만 결국 이것이 궁극적으로 무엇을 위한 것인지 생각해보는 것도 좋다고 생각합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-jpa-best-practices&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Git
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
  </entry>
  
  <entry>
    <title>Jackson 어노테이션 사용법(3)</title>
    <link href="https://cheese10yun.github.io/jackson-annotation-03/"/>
    <id>https://cheese10yun.github.io/jackson-annotation-03/</id>
    <published>2018-06-12T15:00:00.000Z</published>
    <updated>2018-06-20T13:52:02.398Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="jackson-property-inclusion-annotations">Jackson Property Inclusion Annotations</span></h2><ul><li><a href="http://www.baeldung.com/jackson-annotations" rel="external nofollow noopener noreferrer" target="_blank">Jackson Annotation Examples</a> 예제를 적용전, 적용후로 나누어서 정리 해봤습니다.</li><li>테스트코드도 참고하시면 좋습니다.</li><li>해당 코드 및 전체 Jackson 정리는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/jackson" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 참고해주세요</li></ul><h3><span id="jsonignoreproperties">@JsonIgnoreProperties</span></h3><ul><li>무시할 속성이나 속성 목록을 표시하는 데 사용됩니다</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonIgnoreProperties</span>(&#123;<span class="string">"id"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithIgnore</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jsonignore">@JsonIgnore</span></h3><ul><li>필드 레벨에서 무시 될 수있는 속성을 표시하는 데 사용됩니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithIgnore</span> </span>&#123;</div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jsonignoretype">@JsonIgnoreType</span></h3><ul><li>주석이 달린 형식의 모든 속성을 무시하도록 지정하는 데 사용됩니다</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line"><span class="keyword">public</span> Name name;</div><div class="line"></div><div class="line">    <span class="meta">@JsonIgnoreType</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> String firstName;</div><div class="line">        <span class="keyword">public</span> String lastName;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jsoninclude">@JsonInclude</span></h3><ul><li>어노테이션 속성을 제외 하는 데 사용 됩니다</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonInclude</span>(JsonInclude.Include.NON_NULL)</div><div class="line"><span class="meta">@AllArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//NON_NULL 사용시 name이 null인 경우에 제외 됩니다.</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jsonautodetect">@JsonAutoDetect</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonAutoDetect</span>(fieldVisibility = JsonAutoDetect.Visibility.ANY)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivateBean</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Visibility.ANY 경우 표시</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;jackson-property-inclusion-annotations&quot;&gt;Jackson Property Inclusion Annotations&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.baeldu
      
    
    </summary>
    
    
      <category term="Jackson" scheme="https://cheese10yun.github.io/tags/Jackson/"/>
    
  </entry>
  
  <entry>
    <title>인텔리제이 다국어 message properties</title>
    <link href="https://cheese10yun.github.io/intellij-message-properties/"/>
    <id>https://cheese10yun.github.io/intellij-message-properties/</id>
    <published>2018-06-05T15:00:00.000Z</published>
    <updated>2018-06-06T07:32:35.641Z</updated>
    
    <content type="html"><![CDATA[<p>인텔리제이의  다국어 message properties 기능을 소개하려 합니다.</p><h2><span id="messagesproperties-생성">messages.properties 생성</span></h2><p><img src="https://i.imgur.com/qLq9yRu.png" alt=""></p><p>원하는 디렉터리에서 파일을 생성하실 때 Resource Bundle 선택합니다.</p><h2><span id="locales-추가">Locales 추가</span></h2><p><img src="https://i.imgur.com/cx4BUD0.png" alt=""></p><p>하단의 + 버튼을 눌러서 원하는 Locales를 추가합니다. 추가하실 때는 <a href="https://ko.wikipedia.org/wiki/ISO_639" rel="external nofollow noopener noreferrer" target="_blank">ISO_639</a> 표준을 따르는 것을 추천해 드립니다. Alpha-3, Alpha-2 둘 중 선택하되 일괄되게 적용 하는 것이 좋다고 생각합니다.<br>본 예제에서는 kr, en을 추가했습니다.</p><h2><span id="추가된-messagesproperties-파일">추가된 messages.properties 파일</span></h2><p><img src="https://i.imgur.com/CqePrKL.png" alt=""></p><p>디폴트 messages.properties 및 위에서 추가시킨 kr, en 파일들도 같이 생성된 걸 확인할 수 있습니다.</p><h2><span id="message-작성">message 작성</span></h2><p><img src="https://i.imgur.com/1rPFIE1.png" alt=""></p><ol><li>아무 messages.properties 선택하시고 하단의 Resource Bundle를 클릭 합니다.</li><li>messages.properties의 key 값을 입력합니다.</li><li>오른쪽 messages.properties 알맞는 메시지를 추가합니다.</li></ol><p>Resource Bundle 탭에서 에서는 여러 곳에 있는 messages.properties 쉽게 추가, 삭제, 변경 작업을 쉽게 할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;인텔리제이의  다국어 message properties 기능을 소개하려 합니다.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;messagesproperties-생성&quot;&gt;messages.properties 생성&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;htt
      
    
    </summary>
    
    
      <category term="Intellij" scheme="https://cheese10yun.github.io/tags/Intellij/"/>
    
      <category term="message properties" scheme="https://cheese10yun.github.io/tags/message-properties/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Jpa Best Practices Step-06 - Setter 사용하지 않기</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-06/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-06/</id>
    <published>2018-06-04T15:00:00.000Z</published>
    <updated>2018-06-22T15:25:54.176Z</updated>
    
    <content type="html"><![CDATA[<p>해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p><p>객체지향 언어에서 관습처럼 setter를 추가하는 때도 있습니다. 무분별하게 setter를 사용하는 것은 바람직하지 않다고 생각합니다. 특히 도메인 객체들에는 더더욱이 말입니다. 이번 포스팅에서는 무분별한 setter의 단점과 setter를 이용하지 않고 도메인 객체를 변경하는 방법을 소개하겠습니다.</p><h2><span id="setter-메소드는-의도를-갖기-힘듭니다">Setter 메소드는 의도를 갖기 힘듭니다.</span></h2><h3><span id="setter를-이용한-업데이트">Setter를 이용한 업데이트</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">updateMyAccount</span><span class="params">(<span class="keyword">long</span> id, AccountDto.MyAccountReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Account account = findById(id);</div><div class="line">    account.setAddress(<span class="string">"value"</span>);</div><div class="line">    account.setFistName(<span class="string">"value"</span>);</div><div class="line">    account.setLastName(<span class="string">"value"</span>);</div><div class="line">    <span class="keyword">return</span> account;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위의 코드는 회원 정보의 성, 이름, 주소를 변경하는 코드로 여러 setter 메소드들이 나열돼있습니다. 위 setter들은 회원 정보를 변경하기 위한 나열이라서 메소드들의 의도가 명확히 드러나지 않습니다.</p><h3><span id="updatemyaccount-메서드를-이용한-업데이트">updateMyAccount 메서드를 이용한 업데이트</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">updateMyAccount</span><span class="params">(<span class="keyword">long</span> id, AccountDto.MyAccountReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Account account = findById(id);</div><div class="line">    account.updateMyAccount(dto);</div><div class="line">    <span class="keyword">return</span> account;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Account 도메인 클래스</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateMyAccount</span><span class="params">(AccountDto.MyAccountReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.address = dto.getAddress();</div><div class="line">    <span class="keyword">this</span>.fistName = dto.getFistName();</div><div class="line">    <span class="keyword">this</span>.lastName = dto.getLastName();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Account 도메인 클래스에 updateMyAccount 메소드를 통해서 회원정보업데이트를 진행했습니다. 위의 코드보다 의도가 명확히 드러납니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccountReq</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> Address address;</div><div class="line"><span class="keyword">private</span> String firstName;</div><div class="line"><span class="keyword">private</span> String lastName;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위는 MyAccountReq 클래스입니다. 회원 정보 수정에 필요한 값 즉 변경될 값에 대한 명확한 명세가 있어 DTO를 두는 것이 바람직합니다.</p><h3><span id="객체의-일관성을-유지하기-어렵다">객체의 일관성을 유지하기 어렵다</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">updateMyAccount</span><span class="params">(<span class="keyword">long</span> id, AccountDto.MyAccountReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Account account = findById(id);</div><div class="line">    account.setEmail(<span class="string">"value"</span>);</div><div class="line">    <span class="keyword">return</span> account;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>setter 메소드가 있을 때 객체에 언제든지 변경할 수 있게 됩니다. 위처럼 회원 변경 메소드뿐만이 아니라 모든 곳에서 이메일 변경이 가능하게 됩니다. 물론 변경이 불가능 한 항목에 setter 메서드를 두지 않는다는 방법도 있지만 관례로 setter는 모든 멤버필드에 대해서 만들기도 하거니와 실수 조금이라도 덜 할 수 있게 하는 것이 바람직한 구조라고 생각합니다.</p><h2><span id="setter를-사용하지-않기">Setter를 사용하지 않기</span></h2><h3><span id="updatemyaccount">updateMyAccount</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">updateMyAccount</span><span class="params">(<span class="keyword">long</span> id, AccountDto.MyAccountReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Account account = findById(id);</div><div class="line">    account.updateMyAccount(dto);</div><div class="line">    <span class="keyword">return</span> account;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Account 도메인 클래스</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateMyAccount</span><span class="params">(AccountDto.MyAccountReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.address = dto.getAddress();</div><div class="line">    <span class="keyword">this</span>.fistName = dto.getFistName();</div><div class="line">    <span class="keyword">this</span>.lastName = dto.getLastName();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위의 예제와 같은 예제 코드입니다. findById 메소드를 통해서 영속성을 가진 객체를 가져오고 도메인에 작성된 updateMyAccount를 통해서 업데이트를 진행하고 있습니다.</p><p><strong>repository.save() 메소드를 사용하지 않았습니다. 다시 말해 메소드들은 객체 그 자신을 통해서 데이터베이스 변경작업을 진행하고, create 메서드에 대해서만 repository.save()를 사용합니다</strong></p><h3><span id="create">create</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 전체 코드를 보시는 것을 추천드립니다.</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SignUpReq</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> com.cheese.springjpa.Account.model.Email email;</div><div class="line"><span class="keyword">private</span> Address address;</div><div class="line"></div><div class="line"><span class="meta">@Builder</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SignUpReq</span><span class="params">(Email email, String fistName, String lastName, String password, Address address)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.email = email;</div><div class="line">        <span class="keyword">this</span>.address = address;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">toEntity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Account.builder()</div><div class="line">            .email(<span class="keyword">this</span>.email)</div><div class="line">            .address(<span class="keyword">this</span>.address)</div><div class="line">            .build();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">create</span><span class="params">(AccountDto.SignUpReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> accountRepository.save(dto.toEntity());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>setter 메소드 없이 create 하는 예제입니다. SignUpReq 클래스는 Request DTO 클래스를 통해서 사용자에게 필요한 값을 입력받고 그 값을 toEntity 메소드를 통해서 Account 객체를 생성하게 됩니다. 이 때 빌더 패턴을 이용해서 객체를 생성했습니다. 도메인 객체를 생성할 때 빌더패턴을 적극 추천해 드립니다. 빌더 패턴에 대해서는 여기서는 별도로 다루지 않겠습니다.</p><p>save 메소드에는 도메인 객체 타입이 들어가야 합니다. 이때 toEntity 메소드를 통해서 해당 객체로 새롭게 도메인 객체가 생성되고 save 메소드를 통해서 데이터베이스에 insert 됩니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-jpa-best-practices&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Git
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
  </entry>
  
  <entry>
    <title>Spring OOP 프로그래밍 예제(4) - Service, ServiceImpl 구조</title>
    <link href="https://cheese10yun.github.io/spring-oop-04/"/>
    <id>https://cheese10yun.github.io/spring-oop-04/</id>
    <published>2018-06-02T15:00:00.000Z</published>
    <updated>2018-06-02T16:32:37.113Z</updated>
    
    <content type="html"><![CDATA[<p>예제 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/partner-api" rel="external nofollow noopener noreferrer" target="_blank">Github : blog-sample</a>에 공개 되어 있습니다.</p><p>스프링을 처음 공부 할 때 많이 사용되는 Service, ServiceImpl 구조에 관해서 이야기 하려고 합니다. 저도 처음 Spring을 학습할 때 Service, ServiceImpl 구조를 그대로 타이핑하면서 학습을 하였지만, 굳이 이것을 통해서 장점을 얻지 못했기 때문에 실무에서나 개인적으로나 사용하지는 않았습니다.</p><p>Service, ServiceImpl 구조의 장점을 찾으려고 해도 명확한 답변보다는 교과서적인 답변밖에 찾지를 못했습니다. 최근에 객체지향 프로그래밍을 학습하면서 Service, ServiceImpl 구조를 한번 설명하고자 합니다. <strong>어디까지나 저의 부족한 개념을 통한 정리이기에 때문에 비판적인 시각으로 읽어주시면 감사하겠습니다. 또 여러분들도 자신만의 정의를 내려보는 것도 좋을 거 같습니다.</strong></p><p>결론부터 말씀드리면 Service, ServiceImpl는 좋은 구조라고 생각하지 않습니다. 특히 도메인 객체에는 더욱더 좋지 않다고 생각합니다.</p><h2><span id="memberservice">MemberService</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">Member <span class="title">findById</span><span class="params">(MemberId id)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Member <span class="title">findByEmail</span><span class="params">(Email email)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changePassword</span><span class="params">(PasswordDto.ChangeRequest dto)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Member <span class="title">updateName</span><span class="params">(MemberId id, Name name)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 와 같은 인터페이스는 좋은 구조라고 생각지 않습니다. 우선 인터페이스를 두어서 얻는 이점은 세부 구현체를 숨기고 인터페이스를 바라보게 함으로써 클래스 간의 의존관계를 줄이는 것, 다형성을 사용 하는 것 이 핵심이라고 생각합니다.</p><p><strong>조금 더 쉽게 정리하면 하나의 인터페이스를 구현하는 여러 구현체가 있고 기능에 따라 적절한 구현체가 들어가서 다형성을 주기 위함이 이라고 생각합니다. 또 하나의 인터페이스만 바라보니 의존관계도 줄일 수 있습니다.</strong></p><p>하지만 인터페이스의 하나에 구현체 하나를 두면 의존관계를 줄이는 효과도 다형성을 주는 효과도 없습니다. 그렇다면 인터페이스 하나에 구현체 하나는 반드시 나쁜 구조냐의 답에는 그렇지 않다고 생각합니다. 이 부분에 대한 설명은 아래에서 진행하겠습니다.</p><p>위의 인터페이스의 문제점은 무엇일까요? 저의 생각은 <strong>인터페이스의 책임이 너무 많은 것이 문제라고 생각합니다.</strong> 저 인터페이스의 구현체가 두 개 이상이 되려면 해당 구현체가 다른 기능을 가져야 합니다. findById, findByEmail, changePassword 의 메소드들이 다른 구현 클래스가 들어갔다고 해서 다른 기능을 수행해야할까요? findById의 기능은 PK 값으로 해당 Member를 찾는 것입니다. id 값이 1번인 Member가 철수라면 무슨 구현체를 쓰든 철수가 나와야 하는 너무나도 당연하죠.</p><p>그렇다는 것은 위의 메소드들은 인터페이스에 대상이 되지 않습니다. MemberService의 기능을 전부 다른 기능으로 대체 가능한 세부 구현체는 현실적으로 존재하기 어렵습니다. 예외가 있다면 테스트를 위해서 Mock 으로 추상화시킬 수는 있습니다.</p><h2><span id="하나의-인터페이스의-하나의-구현체">하나의 인터페이스의 하나의 구현체</span></h2><p>그렇다면 위의 내용은 하나의 구현체를 갖는 경우에는 인터페이스를 둘 필요가 없다는 것으로 결론을 내는 것처럼 보이지만 하나의 구현체만 갖더라도 인터페이스를 사용하는 것이 바람직하다고 생각합니다. 아래와 같은 가정으로 설명하겠습니다.</p><h3><span id="요구사항">요구사항</span></h3><ul><li>신한 카드결제 기능이 필요하다.</li><li>앞으로 결제 가능한 카드가 지속해서 추가될 예정이다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CardPaymentService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShinhanCardPaymentService</span> <span class="keyword">implements</span> <span class="title">Card</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> ShinhanCard shinhanCard;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span> </span>&#123;</div><div class="line">        shinhanCard.pay(); <span class="comment">//신한 카드 결제 API 호출</span></div><div class="line">        <span class="comment">// 결제를 위한 비지니스 로직 실행....</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위처럼 카드 인터페이스를 두고 신한카드 구현체를 하나만 갖지만 향후 추가 적으로 생길 여지가 있으니 인터페이스를 두는 것이 바람직합니다.</p><p>그렇다면 앞으로 추가될 여지가 없다고 판단된다면 어떻게 해야 할까요? 저의 생각은 정말 추가될 여지가 없나 에 대한 꽤 깊은 고민이 필요하다고 생각합니다. 개발 관점에서만 보는 것이 아니라 도메인 관점에서 해당 도메인을 가장 잘 이해하고 있는 분과 이야기를 충분히 하고 결론짓는 것을 추천합니다.</p><p>그런데도 추가될 여지가 없다고 판단하면 저 같은 경우에는 인터페이스를 두지 않습니다. 추가되더라도 그 때 인터페이스를 두는 것은 그다지 어렵지 않거니와 애초에 모든 변경에 대응할 수 있는 구조라는 건 없다고 생각합니다. 픽스 시킬 것은 픽스 시켜야 추상화가 되고 그 추상화 기반으로 다형성을 가질 수 있다고 저는 생각합니다.</p><h2><span id="인터페이스는-어떻게-두어야-하는가">인터페이스는 어떻게 두어야 하는가?</span></h2><p>위에서 MemberService 인터페이스가 책임이 너무 크다고 했습니다. 그렇다는 건 MemberServiceImpl 또한 책임이 너무 큰 것입니다. 해당 인터페이스의 기능을 모두 구현하고 있으니 말이죠. DomainService로 두는 것은 좋은 구조라 생각하지 않습니다. 물론 그다지 중요하지 않는 도메인에는 Service로 가는 것은 크게 상관없습니다. 하지만 핵심 도메인들은 다양한 구현체를 갖게 됩니다. 위에서 설명했듯이 다양한 구현체를 같은 인터페이스를 갖게 하려면 그 책임이 작아야 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberFindService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MemberRepository memberRepository;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">findById</span><span class="params">(<span class="keyword">final</span> MemberId id)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Member member = memberRepository.findOne(id);</div><div class="line">        <span class="keyword">if</span> (member == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> MemberNotFoundException(id);</div><div class="line">        <span class="keyword">return</span> member;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">findByEmail</span><span class="params">(<span class="keyword">final</span> Email email)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Member member = memberRepository.findByEmail(email);</div><div class="line">        <span class="keyword">if</span> (member == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> MemberNotFoundException(email);</div><div class="line">        <span class="keyword">return</span> member;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위의 코드는 조회만을 위한 서비스 클래스입니다. 위의 메소드들은 일반적으로 다양한 구현체를 갖기는 어렵습니다. 그런 것들은 인터페이스에 대상이 아니라고 생각합니다.</p><p>그렇다면 비밀번호 변경 기능은 어떨까요? 비밀번호 변경 기능은 대표적으로 다음과 같습니다.</p><ul><li>비밀번호 기반으로 비밀번호를 변경하는 기능</li><li>비밀번호를 잃어버렸을 때 다른 인증 기반으로 비밀번호를 변경하는 기능</li></ul><p>비밀번호를 변경하는 방식이 일반적으로 2개 이상입니다. 즉 구현체를 2개 이상 갖게 되고 이럴 때 인터페이스를 두는 것이 바람직하다고 생각합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChangePasswordService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(MemberId id, PasswordDto.ChangeRequest dto)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByAuthChangePasswordService</span> <span class="keyword">implements</span> <span class="title">ChangePasswordService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MemberFindService memberFindService;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(MemberId id, PasswordDto.ChangeRequest dto)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (dto.getAuthCode().equals(<span class="string">"인증 코드가 적합한지 로직 추가..."</span>)) &#123;</div><div class="line">            <span class="keyword">final</span> Member member = memberFindService.findById(id);</div><div class="line">            <span class="keyword">final</span> String newPassword = dto.getNewPassword().getValue();</div><div class="line">            member.changePassword(newPassword);</div><div class="line">            <span class="comment">// 필요로직...</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByPasswordChangePasswordService</span> <span class="keyword">implements</span> <span class="title">ChangePasswordService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MemberFindService memberFindService;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(MemberId id, PasswordDto.ChangeRequest dto)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (dto.getPassword().equals(<span class="string">"비밀번호가 일치하는지 판단 로직..."</span>)) &#123;</div><div class="line">            <span class="keyword">final</span> Member member = memberFindService.findById(id);</div><div class="line">            <span class="keyword">final</span> String newPassword = dto.getNewPassword().getValue();</div><div class="line">            member.changePassword(newPassword);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ChangePasswordService 책임은 비밀번호를 변경하는 것입니다. 해당 구현체들은 본인의 비밀번호 변경의 필요한 인증방식을 구현하고 최종적으로 비밀번호를 변경하게 됩니다. 이것을 인터페이스를 둘 수 있는 이유는 인터페이스의 책임이 하나이기 때문입니다.</p><p>그렇다면 하나의 인터페이스에는 하나의 메소드만 갖게 되는 것이냐? 라는 질문을 하게 됩니다. 그렇지는 않습니다. 다시 한번 카드 예제로 돌아가겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CardPaymentService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>일반적으로 카드는 결제가 있으면 반드시 취소 기능도 함께 있습니다. 결제 취소가 되지 않는 것은 상식적으로 이해하기 어렵습니다. 그것은 신한 은행 이외의 카드사들도 당연히 결제 취소 기능이 있다는 것입니다. 그렇다면 카드 결제는 위와 같이 인터페이스를 두고 세부 구현체에 따라서 카드 결제를 진행하게 됩니다.</p><p>위에서도 말했듯이 픽시 시킬것은 픽스 시켜야합니다. 그렇기에 도메인에 대한 충분한 이해 또한 개발자가 갖춰야 합니다.</p><h2><span id="결론">결론</span></h2><p>클래스를 잘게 나누고 해당 클래스에 맞는 책임을 부여하는 것은 객체지향 프로그래밍에서 중요하다고 생각합니다. 하나의 클래스에서 너무 많은 책임을 갖게 되면 다른 클래스와의 의존관계 또한 자연스럽게 늘어나 결합 도가 증가 됩니다. 그러니 클래스를 잘게 나누는 것이 좋습니다. 아래는 제가 좋아하는 인용 구입니다.</p><p><img src="http://woowabros.github.io/img/2016-08-03/tray.png" alt=""></p><blockquote><p>출처 « 로버트 C.마틴 - Clean Code 177page »<br>작은 클래스가 많은 시스템이든 큰 클래스가 몇 개뿐인 시스템이든 돌아가는 부품은 그 수가 비슷하다.<br>(중략)<br>“도구 상자를 어떻게 관리하고 싶은가? 작은 서랍을 많이 두고 기능과 이름을 명확한 컴포넌트를 나눠 넣고 싶은가? 아니면 큰 서랍 몇 개를 두고 모두를 던져 넣고 싶은가?”</p></blockquote><p><a href="http://woowabros.github.io/experience/2016/08/02/first_java_project.html" rel="external nofollow noopener noreferrer" target="_blank">인용 문구, 사진 - 우아한 형제들 기술 블로그 :첫 Java 프로젝트의 생생한 후기</a></p><p>너무나도 부족한 지식으로 이것을 정의 하는 것이 부끄럽지만 제가 공부한 것과 느낀 것을 공유하고 싶었습니다. 조금이라도 도움이 되기를 기원하겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;예제 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/partner-api&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="OOP" scheme="https://cheese10yun.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>Jackson 어노테이션 사용법(2)</title>
    <link href="https://cheese10yun.github.io/jackson-annotation-02/"/>
    <id>https://cheese10yun.github.io/jackson-annotation-02/</id>
    <published>2018-05-31T15:00:00.000Z</published>
    <updated>2018-06-11T17:35:31.108Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="jackson-deserialization-annotations">Jackson Deserialization Annotations</span></h2><ul><li><a href="http://www.baeldung.com/jackson-annotations" rel="external nofollow noopener noreferrer" target="_blank">Jackson Annotation Examples</a> 예제를 적용전, 적용후로 나누어서 정리 해봤습니다.</li><li>테스트코드도 참고하시면 좋습니다.</li><li>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/jackson" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 참고해주세요</li></ul><h3><span id="jsoncreator">@JsonCreator</span></h3><ul><li>JSON key 와 멤버 필드의 이름이 일치하지 않을 경우 사용합니다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>:<span class="number">1</span>,</div><div class="line">  <span class="attr">"theName"</span>:<span class="string">"My bean"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithCreator</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">    <span class="meta">@JsonCreator</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanWithCreator</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">            @JsonProperty(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id,</span></div><div class="line"><span class="function">            @<span class="title">JsonProperty</span><span class="params">(<span class="string">"theName"</span>)</span> String name</span></div><div class="line"><span class="function">    ) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jacksoninject">@JacksonInject</span></h3><ul><li>JSON 데이터가 아닌 값을 주입하는데 사용됩니다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"My bean"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithInject</span> </span>&#123;</div><div class="line">    <span class="meta">@JacksonInject</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jsonanysetter">@JsonAnySetter</span></h3><ul><li>Map을 이용해서 유연성있게 Deserialization 합니다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"My bean"</span>,</div><div class="line">  <span class="attr">"attr2"</span>: <span class="string">"val2"</span>,</div><div class="line">  <span class="attr">"attr1"</span>: <span class="string">"val1"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendableBean</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; properties = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@JsonAnySetter</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(String key, String value)</span> </span>&#123;</div><div class="line">        properties.put(key, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> properties;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jsonsetter">@JsonSetter</span></h3><ul><li>객체와 맴버필드와 일치하지 않을 경우 유용하게 사용할 수 있습니다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"My bean"</span>å</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="meta">@JsonSetter</span>(<span class="string">"name"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTheName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTheName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;jackson-deserialization-annotations&quot;&gt;Jackson Deserialization Annotations&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.baeldung.com
      
    
    </summary>
    
    
      <category term="Jackson" scheme="https://cheese10yun.github.io/tags/Jackson/"/>
    
  </entry>
  
  <entry>
    <title>Spring OOP 프로그래밍 예제(3) - 파트너 API</title>
    <link href="https://cheese10yun.github.io/spring-oop-03/"/>
    <id>https://cheese10yun.github.io/spring-oop-03/</id>
    <published>2018-05-29T15:00:00.000Z</published>
    <updated>2018-06-22T15:25:36.804Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/cheese10yun/blog-sample/tree/master/bankapi" rel="external nofollow noopener noreferrer" target="_blank">Spring OOP 프로그래밍 예제(2)</a>의 부족했던 부분을 정리한 포스팅입니다. 예제 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/partner-api" rel="external nofollow noopener noreferrer" target="_blank">Github : blog-sample</a>에 공개 되어 있습니다.</p><h2><span id="요구사항">요구사항</span></h2><ul><li>환율 정보를 조회할 수 있다.</li><li>환율 정보를 제공해주는 은행은 신한, 우리 은행이 있다.</li><li>앞으로도 파트너 은행들은 계속 추가된다.</li><li>KRW, VND으로 받는 통화는 신한은행 환율정보를 이용해야 한다<ul><li>USD - &gt; KRW, VND 신한은행 API</li></ul></li><li>USD으로 받는 통화는 우리은행 환율정보를 이용해야 한다<ul><li>KRW, VND - &gt; USD 우리은행 API</li></ul></li></ul><h2><span id="요구사항-정리">요구사항 정리</span></h2><p>요구사항을 어렵게 설명했지만 결국은 다형성을 이야기하고 싶었습니다. 이러한 다형성을 지키기 위해서 삽질을 많이 했고 다양한 안티 패턴들을 만났습니다. 왜 이것이 안티 패턴인것인지 설명해 드리고 최종적으로 제가 생각한 것을 공유하려고 합니다. 물론 최종결과물이 높은 수준의 객체지향 코드라고는 생각지 않습니다. 그러나 투박하게나마 객체지향의 다양한 원칙들을 지키려 노력했고 그것을 공유하고 싶습니다.</p><h2><span id="안티패턴">안티패턴</span></h2><h3><span id="api-인터페이스">API 인터페이스</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PartnerApi</span> </span>&#123;</div><div class="line">    PartnerManagerDto.<span class="function">ExchangeRate <span class="title">get</span><span class="params">(PartnerManagerDto.ExchangeCurrency dstCurrency)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShinhanApi</span> <span class="keyword">implements</span> <span class="title">PartnerApi</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">ExchangeRate <span class="title">get</span><span class="params">(PartnerManagerDto.ExchangeCurrency dstCurrency)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WooriApi</span> <span class="keyword">implements</span> <span class="title">PartnerApi</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">ExchangeRate <span class="title">get</span><span class="params">(PartnerManagerDto.ExchangeCurrency dstCurrency)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>처음 생각했던 방식입니다. 가장 쉽게 설계할 수 있는 구조로  PartnerApi 인터페이스를 구현 클래스에서 implements를 통한 구현 방식입니다. 하지만 다음과 같은 단점들이 있습니다.</p><h4><span id="객체의-책임이-올바르지-않다">객체의 책임이 올바르지 않다</span></h4><p>ShinhanApi, WooriApi의 책임은 각각의 은행과 API 통신을 담당하는 것입니다. 즉 각각의 API는 Request, Response 값들은 객체 자신이 자율적인 책임을 가지고 있어야 합니다. <strong>하지만 PartnerApi 인터페이스를 통해서 매게변수와, 리턴 값이 통일 되게 됩니다</strong> 신한, 우리 은행의 환율 정보 API Request, Response 값들은 다를 수밖에 없는 것을 공통된 값으로 변경시키는 것까지 책임이 추가됩니다. 그 결과 SRP, OCP를 위반하게 된다고 생각합니다.</p><p><strong>즉 API 구현 객체의 유일한 변경이유는 파트너사의 API 변경입니다(request, reponse 등등의 변경 ). 그 외에는 변경사항에서는 변경되면 SRP 위반 이라고 저는 생각합니다.</strong></p><h4><span id="api-추가-시-문제">API 추가 시 문제</span></h4><p>전북은행 API가 추가되었고 계좌 이체할 수 있는 은행 리스트를 가져오는 API가 우리은행, 전북은행에만 추가되었다고 가정했을 경우 아래와 같은 코드가 작성됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PartnerApi</span> </span>&#123;</div><div class="line">    PartnerManagerDto.<span class="function">ExchangeRate <span class="title">getExchangeRate</span><span class="params">(PartnerManagerDto.ExchangeCurrency dstCurrency)</span></span>;</div><div class="line">    PartnerManagerDto.<span class="function">Banks <span class="title">getBanks</span><span class="params">(PartnerManagerDto.ExchangeCurrency dto)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JbApi</span> <span class="keyword">implements</span>  <span class="title">PartnerApi</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">Banks <span class="title">getBanks</span><span class="params">(PartnerManagerDto.ExchangeCurrency dto)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> 은행 리스트 가져오는 로직;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WooriApi</span> <span class="keyword">implements</span> <span class="title">PartnerApi</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">Banks <span class="title">getBanks</span><span class="params">(PartnerManagerDto.ExchangeCurrency dto)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> 은행 리스트 가져오는 로직;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShinhanAPi</span> <span class="keyword">implements</span> <span class="title">PartnerApi</span>  </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">Banks <span class="title">getBanks</span><span class="params">(PartnerManagerDto.ExchangeCurrency dto)</span> </span>&#123;</div><div class="line">        <span class="comment">// PartnerApi 인터페이스에 getBanks 메소드가 정의되있으니 반드시 구현해야한다.</span></div><div class="line">        <span class="comment">// 하지만 신한은행은 은행리스트 조회 기능이 없다.</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위처럼 신한 API에서 getBanks를 반드시 구현해야하고 이렇게되면 LSP 위반이 발생합니다.  <strong>우리은행에 getBanks 메서드를 대충 null 정도 리턴하는 코드로 비워 놓지 마세요. 조금만 노력하면 더 좋은 설계가 할 수 있습니다.</strong></p><h3><span id="manager">Manager</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WooriManager</span> <span class="keyword">implements</span> <span class="title">PartnerApi</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">ExchangeRate <span class="title">get</span><span class="params">(PartnerManagerDto.ExchangeCurrency dstCurrency)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShinhanManager</span> <span class="keyword">implements</span> <span class="title">PartnerApi</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">ExchangeRate <span class="title">get</span><span class="params">(PartnerManagerDto.ExchangeCurrency dstCurrency)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>두 번째로 생각했던 방법입니다. 매니저를 두고 해당 매니저가 해당 API를 호출하고 리턴되는 값을 변환작업을 담당하게 했습니다. 그 결과 각각의 구현 API 객체들은 API 통신만 하는 책임만 갖게 되었습니다 매니저의 책임도 분명합니다. 해당 파트너사의 API를 호출하고 공통된 리턴 값으로 돌려준다. 입니다.<br><strong>하지만 'API 추가 시 문제’를 해결하지는 못했습니다.</strong> 위 처럼 문제가 똑같이 발생하게 됩니다.</p><h2><span id="최종-결과물">최종 결과물</span></h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShinhanApi</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> ShinhanDto.<span class="function">ExchangeRateResponse <span class="title">getExchangeRate</span><span class="params">(PartnerManagerDto.ExchangeCurrency exchangeCurrency)</span> </span>&#123;</div><div class="line">         ...</div><div class="line">    <span class="keyword">return</span> response.getBody();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WooriApi</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> WooriDto.<span class="function">ExchangeRateResponse <span class="title">getExchangeRate</span><span class="params">(PartnerManagerDto.ExchangeCurrency exchangeCurrency)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    <span class="keyword">return</span> response.getBody();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShinhanExchangeRate</span> <span class="keyword">implements</span> <span class="title">PartnerExchangeRate</span> </span>&#123;</div><div class="line">   ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">ExchangeRate <span class="title">get</span><span class="params">(PartnerManagerDto.ExchangeCurrency dto)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> PartnerManagerDto.ExchangeRate.builder();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WooriExchangeRate</span> <span class="keyword">implements</span> <span class="title">PartnerExchangeRate</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">ExchangeRate <span class="title">get</span><span class="params">(PartnerManagerDto.ExchangeCurrency dto)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> PartnerManagerDto.ExchangeRate.builder();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PartnerExchangeRate</span> </span>&#123;</div><div class="line">    PartnerManagerDto.<span class="function">ExchangeRate <span class="title">get</span><span class="params">(PartnerManagerDto.ExchangeCurrency dto)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>구현 API 객체는 API 통신만의 책임을 갖게 했습니다. 이것은 매니저에 서도 해결한 문제이니 넘어가겠습니다. 중요한 문제는 <strong><em>API 추가 시 문제</em></strong> 입니다. 위의 문제들은 한 인터페이스에서 너무 많은 책임을 갖게 되어 추상화가 안 된다는 것으로 생각합니다. 다시 말해 <strong>PartnerApi 인터페이스를 통해서 모든 파트너 API를 규약 시키려 했던 것이 문제라고 생각합니다.</strong> 인터페이스를 PartnerExchangeRate로 두고 환율 정보가 져오는 것에 대해서만 규약 시켰습니다. 그 결과 그 기능이 있는 파트너만 해당 구현체를 갖게 되어 문제를 해결했습니다. 또 ShinhanExchangeRate 객체의 책임은 ShinhanAPi를 통해서 얻은 response 값을 통일감 있는 response 값으로 변경만 시켜주는 책임을 갖습니다.</p><h2><span id="최종-클래스다이어그램">최종 클래스다이어그램</span></h2><p><img src="https://i.imgur.com/6KxeWmL.png" alt=""></p><h2><span id="마무리">마무리</span></h2><p>많은 안티 패턴들을 만났고 그것을 해결했던 과정을 정리하면 저와 같이 고민하는 분들에게 조금이라도 도움이 될 거 같아 부족한 실력임에도 불구하고 정리해 보았습니다. 물론 저 모델도 허점투성이겠죠. 그래도 지금의 제 수준에서는 많은 고민과 시행착오가 있었습니다. 그 덕분에 조금 더 객체지향에 프로그래밍을 더 깊게 공부해 게되 었구요. 또 저런 식으로 작성하게 되면 인터페이스, 클래스가 엄청 많아지는 것에 대해서 조금은 꺼려지게 되는 것도 사실이었습니다. 하지만 아래 첨부된 글을 읽고 더 알맞은 책임으로 더 질게 나누는 것이 더 바람직하다고 생각이 듭니다.</p><p><img src="http://woowabros.github.io/img/2016-08-03/tray.png" alt=""></p><blockquote><p>출처 « 로버트 C.마틴 - Clean Code 177page »<br>작은 클래스가 많은 시스템이든 큰 클래스가 몇 개뿐인 시스템이든 돌아가는 부품은 그 수가 비슷하다.<br>(중략)<br>“도구 상자를 어떻게 관리하고 싶은가? 작은 서랍을 많이 두고 기능과 이름을 명확한 컴포넌트를 나눠 넣고 싶은가? 아니면 큰 서랍 몇 개를 두고 모두를 던져 넣고 싶은가?”</p></blockquote><p><a href="http://woowabros.github.io/experience/2016/08/02/first_java_project.html" rel="external nofollow noopener noreferrer" target="_blank">인용 문구, 사진 - 우아한 형제들 기술 블로그 :첫 Java 프로젝트의 생생한 후기</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/bankapi&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Spri
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="OOP" scheme="https://cheese10yun.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>Jackson 어노테이션 사용법(1)</title>
    <link href="https://cheese10yun.github.io/jackson-annotation/"/>
    <id>https://cheese10yun.github.io/jackson-annotation/</id>
    <published>2018-05-27T15:00:00.000Z</published>
    <updated>2018-05-27T15:40:21.249Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="jackson-어노테이션-사용법">Jackson 어노테이션 사용법</span></h1><ul><li><a href="http://www.baeldung.com/jackson-annotations" rel="external nofollow noopener noreferrer" target="_blank">Jackson Annotation Examples</a> 예제를 적용전, 적용후로 나누어서 정리 해봤습니다.</li><li>2.Jackson Serialization Annotations 정리 (3,4… 추후 계속 추가될 예정)</li><li>테스트코드도 참고하시면 좋습니다.</li><li>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/jackson" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 참고해주세요</li></ul><h2><span id="2-jackson-serialization-annotations">2 Jackson Serialization Annotations</span></h2><h2><span id="21-jsonanygetter">2.1. @JsonAnyGetter</span></h2><ul><li>이 엔티티의 인스턴스를 직렬화 할 때 Map의 모든 키 - 값 을 표준 일반 속성으로 가져옵니다</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@Builder</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendableBean</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; properties;</div><div class="line"></div><div class="line">    <span class="meta">@JsonAnyGetter</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> properties;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//적용전</div><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span>,</div><div class="line">  <span class="attr">"properties"</span>: &#123;</div><div class="line">    <span class="attr">"key1"</span>: <span class="string">"value1"</span>,</div><div class="line">    <span class="attr">"key2"</span>: <span class="string">"value2"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">//적용후</div><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span>,</div><div class="line">  <span class="attr">"key1"</span>: <span class="string">"value1"</span>,</div><div class="line">  <span class="attr">"key2"</span>: <span class="string">"value2"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="22-jsongetter">2.2. @JsonGetter</span></h2><ul><li>getter 이름 기반으로 키값이 정해지는것을 어노테이션을 제어</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Builder</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="meta">@JsonGetter</span>(<span class="string">"name"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTheName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//적용전</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">"theName"</span>: <span class="string">"yun"</span></div><div class="line">&#125;</div><div class="line">//적용후</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="23-jsonpropertyorder">2.3. @JsonPropertyOrder</span></h2><ul><li>Json 직렬화 순서를 제어</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonPropertyOrder</span>(&#123;<span class="string">"name"</span>, <span class="string">"id"</span>&#125;)</div><div class="line"><span class="meta">@Builder</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyOrder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//적용전</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"name"</span></div><div class="line">&#125;</div><div class="line">//적용후</div><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"name"</span>,</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="24-jsonrawvalue">2.4. @JsonRawValue</span></h2><ul><li>@JsonRawValue 는 Jackson이 속성을 그대로 직렬화하여 JSON으로 변경</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Builder</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RawBean</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">        <span class="meta">@JsonRawValue</span></div><div class="line">        <span class="keyword">public</span> String json;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//적용전</div><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span>,</div><div class="line">  <span class="attr">"json"</span>: <span class="string">"&#123;\n  \"attr\":false\n&#125;"</span></div><div class="line">&#125;</div><div class="line">//적용후</div><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span>,</div><div class="line">  <span class="attr">"json"</span>: &#123;</div><div class="line">    <span class="attr">"attr"</span>: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="25-jsonvalue">2.5. @JsonValue</span></h2><ul><li>getName 에 @JsonValue 해당 멤버필드가 이름을 통해 직렬화 시킴</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TypeEnumWithValue &#123;</div><div class="line">    TYPE1(<span class="number">1</span>, <span class="string">"Type A"</span>),</div><div class="line">    TYPE2(<span class="number">2</span>, <span class="string">"Type 2"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    TypeEnumWithValue(Integer id, String name) &#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@JsonValue</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//적용전</div><div class="line"><span class="string">"TYPE1"</span></div><div class="line">//적용후</div><div class="line"><span class="string">"Type A"</span></div></pre></td></tr></table></figure><h2><span id="26-jsonrootname">2.6. @JsonRootName</span></h2><ul><li>Root 이름 지정</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Builder</span></div><div class="line"><span class="meta">@JsonRootName</span>(value = <span class="string">"user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserWithRoot</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//objectMapper.enable(SerializationFeature.WRAP_ROOT_VALUE); 반드시 적용해야함</span></div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//적용전</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span></div><div class="line">&#125;</div><div class="line">//적용후</div><div class="line">&#123;</div><div class="line">  <span class="attr">"user"</span>: &#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"yun"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;jackson-어노테이션-사용법&quot;&gt;Jackson 어노테이션 사용법&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.baeldung.com/jackson-annotations&quot; rel=&quot;external 
      
    
    </summary>
    
    
      <category term="Jackson" scheme="https://cheese10yun.github.io/tags/Jackson/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Jpa Best Practices Step-05 - OneToMany 관계 설정 팁</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-05/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-05/</id>
    <published>2018-05-17T15:00:00.000Z</published>
    <updated>2018-06-22T15:25:57.546Z</updated>
    
    <content type="html"><![CDATA[<p>배송이 있고 배송의 상태를 갖는 배송 로그가 있고 각각의 관계는 1:N 관계입니다. 아래와 같은 특정한 1:N 관계에 대해서 포스팅을 진행해보겠습니다. 해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p><h2><span id="배송-배송-로그">배송 - 배송 로그</span></h2><ul><li>배송이 있고 배송의 상태를 갖는 배송 로그가 있습니다.</li><li>각각의 관계는 1:N 관계입니다.</li><li>다음과 같은 JSON을 갖습니다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"address"</span>: &#123;</div><div class="line">    <span class="attr">"address1"</span>: <span class="string">"서울 특별시..."</span>,</div><div class="line">    <span class="attr">"address2"</span>: <span class="string">"신림 ...."</span>,</div><div class="line">    <span class="attr">"zip"</span>: <span class="string">"020...."</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"logs"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"status"</span>: <span class="string">"PENDING"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"status"</span>: <span class="string">"DELIVERING"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"status"</span>: <span class="string">"COMPLETED"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>배송 로그는 단순히 배송의 상태를 표시하기 위한 것임으로 배송 엔티티에서 추가되는 것이 맞는다고 생각합니다. 위의 특성을 만족하는 관계 설정을 진행해보겠습니다.</p><h2><span id="관계-설정">관계 설정</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Delivery</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">private</span> Address address;</div><div class="line"></div><div class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"delivery"</span>, cascade = CascadeType.PERSIST, orphanRemoval = <span class="keyword">true</span>, fetch = FetchType.EAGER)</div><div class="line">    <span class="keyword">private</span> List&lt;DeliveryLog&gt; logs = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">private</span> DateTime dateTime;</div><div class="line">    ....</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryLog</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Enumerated</span>(EnumType.STRING)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"status"</span>, nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> DeliveryStatus status;</div><div class="line"></div><div class="line">    <span class="meta">@ManyToOne</span></div><div class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"delivery_id"</span>, nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> Delivery delivery;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">private</span> DateTime dateTime;</div><div class="line"></div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>@Embedded 타입으로 빼놓은 Address를 그대로 사용했습니다. 이처럼 핵심 도메인에 대해서 데이터의 연관성이 있는 것들을 Embedded 분리해놓으면 여러모로 좋습니다.</li><li>DateTime 클래스도 Embedded 타입으로 지정해서 반복적인 생성일, 수정일 칼럼들을 일관성 있고 편리하게 생성할 수 있습니다.</li></ul><p><strong>지금부터는 1:N 관계 팁에 관한 이야기를 진행하겠습니다.</strong></p><ul><li>Delivery를 통해서 DeliveryLog를 관리함으로 <code>CascadeType.PERSIST</code> 설정을 주었습니다.</li><li>1: N 관계를 맺을 경우 List를 주로 사용하는데 객체 생성을 null로 설정하는 것보다 <code>new ArrayList&amp;amplt&amp;ampgt();</code>설정하는 것이 바람직합니다. 이유는 다음과 같습니다.</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verifyStatus</span><span class="params">(DeliveryStatus status, Delivery delivery)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!delivery.getLogs().isEmpty()) &#123;</div><div class="line">    ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>초기화하지 않았을 경우 null로 초기화되며 ArrayList에서 지원해주는 함수를 사용할 수 없습니다. 1:N 관계에서 N이 없는 경우 null인 상태인 보다 Empty 상태가 훨씬 직관적입니다. null의 경우 값을 못가져 온것인지 값이 없는 것인지 의미가 분명하지 않습니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLog</span><span class="params">(DeliveryStatus status)</span> </span>&#123;</div><div class="line">    logs.add(DeliveryLog.builder()</div><div class="line">            .status(status)</div><div class="line">            .delivery(<span class="keyword">this</span>)</div><div class="line">            .build());</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>CascadeType.PERSIST 설정을 주면  Delivery에서 DeliveryLog를 저장시킬 수 있습니다. 이 때 ArrayList 형으로 지정돼 있다면 add 함수를 통해서 쉽게 저장할 수 있습니다. 이렇듯 ArrayList의 다양한 함수들을 사용할 수 있습니다.</li><li>FetchType.EAGER 통해서 모든 로그 정보를 가져오고 있습니다. 로그 정보가 수십 개 이상일 경우는 Lazy 로딩을 통해서 가져오는 것이 좋지만 3~4개 정도로 가정했을 경우 FetchType.EAGER로 나쁘지 않다고 생각합니다.</li></ul><h2><span id="객체의-상태는-언제나-자기-자신이-관리합니다">객체의 상태는 언제나 자기 자신이 관리합니다.</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryLog</span> </span>&#123;</div><div class="line">  <span class="meta">@Id</span></div><div class="line">  <span class="meta">@GeneratedValue</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line">  ....</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</div><div class="line">      verifyNotYetDelivering();</div><div class="line">      <span class="keyword">this</span>.status = DeliveryStatus.CANCELED;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verifyNotYetDelivering</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (isNotYetDelivering()) <span class="keyword">throw</span> <span class="keyword">new</span> DeliveryAlreadyDeliveringException();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verifyAlreadyCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isCompleted())</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"It has already been completed and can not be changed."</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>객체의 상태는 언제나 자기 자신이 관리합니다. 즉 자신이 생성되지 못할 이유도 자기 자신이 관리해야 한다고 생각합니다. 위의 로직은 다음과 같습니다.</p><ul><li>cancel() : 배송을 취소하기 위해서는 아직 배달이 시작하기 이전의 상태여야 가능합니다.</li><li>verifyAlreadyCompleted() : 마지막 로그가 COMPLETED 경우 더는 로그를 기록할 수 없습니다.</li></ul><p>즉 자신이 생성할 수 없는 이유는 자기 자신이 갖고 있어야 합니다. 이렇게 되면 어느 곳에서 생성하든 같은 기준으로 객체가 생성되어 생성 관리 포인트가 한 곳에서 관리됩니다.</p><h2><span id="배송-로그-저장">배송 로그 저장</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryService</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> Delivery <span class="title">create</span><span class="params">(DeliveryDto.CreationReq dto)</span> </span>&#123;</div><div class="line">      <span class="keyword">final</span> Delivery delivery = dto.toEntity();</div><div class="line">      delivery.addLog(DeliveryStatus.PENDING);</div><div class="line">      <span class="keyword">return</span> deliveryRepository.save(delivery);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> Delivery <span class="title">updateStatus</span><span class="params">(<span class="keyword">long</span> id, DeliveryDto.UpdateReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Delivery delivery = findById(id);</div><div class="line">    delivery.addLog(dto.getStatus());</div><div class="line">    <span class="keyword">return</span> delivery;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>create : Delivery 클래스를 생성하고 delivery.addLog를 PENDING 상태로 생성하고 Repository의 save 메소드를 통해서 저장할 수 있습니다. 최종적인 JSON 값은 아래와 같습니다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"address"</span>: &#123;</div><div class="line">    <span class="attr">"address1"</span>: <span class="string">"서울 특별시..."</span>,</div><div class="line">    <span class="attr">"address2"</span>: <span class="string">"신림 ...."</span>,</div><div class="line">    <span class="attr">"zip"</span>: <span class="string">"020...."</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"logs"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"status"</span>: <span class="string">"PENDING"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>updateStatus : 해당 객체를 데이터베이스에서 찾고 해당 배송 객체에 배송 로그를 추가합니다. 배송 로그에 추가적인 로그 저장은 <code>delivery.addLog(..);</code> 메서드를 통해서 진행됩니다. 언제나 관리 포인트를 줄이는 것은 중요하다고 생각됩니다.</li></ul><h2><span id="마무리">마무리</span></h2><p>코드 양이 많아지고 있어서 반드시 전체 코드와 테스트 코드를 돌려 보면서 이해하는 것을 추천해 드립니다. 이전 포스팅에서도 언급한 적 있지만 소스코드에서는 setter 메서드를 사용하지 않고 있습니다. 무분별하게 setter 메서드를 남용하는 것은 유지 보수와 가독성을 떨어트린다고 생각합니다. 다음 포스팅에서는 setter를 사용하지 않는 장점에 대해서 조금 더 깊게 설명해 보겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;배송이 있고 배송의 상태를 갖는 배송 로그가 있고 각각의 관계는 1:N 관계입니다. 아래와 같은 특정한 1:N 관계에 대해서 포스팅을 진행해보겠습니다. 해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/sprin
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Embedded" scheme="https://cheese10yun.github.io/tags/Embedded/"/>
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Jpa Best Practices Step-04 - Embedded를 이용한 Password 처리</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-04/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-04/</id>
    <published>2018-05-11T15:00:00.000Z</published>
    <updated>2018-06-22T15:26:00.823Z</updated>
    
    <content type="html"><![CDATA[<p>이번 포스팅에서는 Embedded를 이용해서 Password 클래스를 통해서 Password 관련 응집력을 높이는 것 방법과  JPA에서 LocalDateTime을 활용하는 방법에 대해서 중점으로 포스팅을 진행해 보겠습니다. 해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p><h2><span id="중요포인트">중요포인트</span></h2><ul><li>Embeddable 타입의 Password 클래스 정의</li></ul><h2><span id="embeddable-타입의-password-클래스-정의">Embeddable 타입의 Password 클래스 정의</span></h2><h3><span id="비밀번호-요구사항">비밀번호 요구사항</span></h3><ul><li>비밀번호 만료 기본 14일 기간이 있다.</li><li>비밀번호 만료 기간이 지나는 것을 알 수 있어야 한다.</li><li>비밀번호 5회 이상 실패했을 경우 더 이상 시도를 못하게 해야 한다.</li><li>비밀번호가 일치하는 경우 실패 카운트를 초기화 해야한다</li><li>비밀번호 변경시 만료일이 현재시간 기준 14로 연장되어야한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Embeddable</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Password</span> </span>&#123;</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"password"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> String value;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"password_expiration_date"</span>)</div><div class="line">    <span class="keyword">private</span> LocalDateTime expirationDate;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"password_failed_count"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> failedCount;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"password_ttl"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> ttl;</div><div class="line"></div><div class="line">    <span class="meta">@Builder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Password</span><span class="params">(<span class="keyword">final</span> String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ttl = <span class="number">1209_604</span>; <span class="comment">// 1209_604 is 14 days</span></div><div class="line">        <span class="keyword">this</span>.value = encodePassword(value);</div><div class="line">        <span class="keyword">this</span>.expirationDate = extendExpirationDate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatched</span><span class="params">(<span class="keyword">final</span> String rawPassword)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (failedCount &gt;= <span class="number">5</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PasswordFailedExceededException();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> matches = isMatches(rawPassword);</div><div class="line">        updateFailedCount(matches);</div><div class="line">        <span class="keyword">return</span> matches;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changePassword</span><span class="params">(<span class="keyword">final</span> String newPassword, <span class="keyword">final</span> String oldPassword)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isMatched(oldPassword)) &#123;</div><div class="line">            value = encodePassword(newPassword);</div><div class="line">            extendExpirationDate();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>객체의 변경이나 질의는 반드시 해당 객체에 의해서 이루어져야 하는데 위의 요구 사항을 만족하는 로직들은 Password 객체 안에 있고 Password 객체를 통해서 모든 작업들이 이루어집니다.</strong> 그래서 결과적으로 Password 관련 테스트 코드도 작성하기 쉬워지고 이렇게 작은 단위로 테스트 코드를 작성하면 실패했을 때 원인도 찾기 쉬워집니다.</p><p>결과적으로 Password의 책임이 명확해집니다. 만약 Embeddable 타입으로 분리하지 않았을 경우에는 해당 로직들은 모두 Account 클래스에 들어가 Account 책임이 증가하는 것을 방지할 수 있습니다.</p><h2><span id="소소한-팁">소소한 팁</span></h2><ul><li>날짜 관련 클래스는 LocalDateTime 사용하였습니다. 설정 방법은 <a href="https://github.com/cheese10yun/spring-jpa-best-practices/blob/master/doc/appendix-01.md" rel="external nofollow noopener noreferrer" target="_blank">링크</a>에서 확인해주세요</li><li>LocalDateTime.now().plusSeconds(ttl); 현재 시간에서 시간 초만큼 더하는 함수입니다. 정말 직관적이며 다른 좋은 함수들이 있어 꼭 프로젝트에 도입해보시는 것을 추천드립니다.</li></ul><h2><span id="결론">결론</span></h2><p>굳이 Password 에민 해당하는 경우가 아니라 핵심 도메인들을 Embeddable을 분리해서 책임을 분리하고 응집력, 재사용성을 높이는 것이 핵심 주제였습니다. 꼭 개인 프로젝트에서라도 핵 심도 메인을 성격에 맞게끔 분리해 보시는 것을 경험해보시길 바랍니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이번 포스팅에서는 Embedded를 이용해서 Password 클래스를 통해서 Password 관련 응집력을 높이는 것 방법과  JPA에서 LocalDateTime을 활용하는 방법에 대해서 중점으로 포스팅을 진행해 보겠습니다. 해당 코드는 &lt;a h
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Embedded" scheme="https://cheese10yun.github.io/tags/Embedded/"/>
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Jpa Best Practices Step-03 - 효과적인 validate, 예외 처리 (2)</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-03/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-03/</id>
    <published>2018-05-07T15:00:00.000Z</published>
    <updated>2018-06-22T15:26:04.128Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="step-03-효과적인-validate-예외-처리-처리-2">step-03 : 효과적인 validate, 예외 처리 처리 (2)</span></h2><p>이전 포스팅의 단점을 해결해서 더 효과적은 효과적인 validate, 예외 처리 처리 작업을 진행해보겠습니다. 해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p><h2><span id="step-02-이전-포스팅의-단점"></span></h2><ol><li>모든 Request Dto에 대한 반복적인 유효성 검사의 어노테이션이 필요합니다.<ul><li>회원 가입, 회원 정보 수정 등등 지속적으로 DTO 클래스가 추가되고 그때마다 반복적으로 어 로테이션이 추가됩니다.</li></ul></li><li>유효성 검사 로직이 변경되면 모든 곳에 변경이 따른다.<ul><li>만약 비밀번호 유효성 검사가 특수문자가 추가된다고 하면 비밀번호 변경에 따른 유효성 검사를 정규 표현식의 변경을 모든 DTO마다 해줘야 합니다.</li></ul></li></ol><h2><span id="중요포인트">중요포인트</span></h2><ul><li>@Embeddable / @Embedded</li><li>DTO 변경</li></ul><h2><span id="embeddable-embedded">@Embeddable / @Embedded</span></h2><h3><span id="embeddable-embedded-적용">@Embeddable / @Embedded 적용</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">private</span> com.cheese.springjpa.Account.model.Email email;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Embeddable</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@org</span>.hibernate.validator.constraints.Email</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"email"</span>, nullable = <span class="keyword">false</span>, unique = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> String address;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>임베디드 키워드를 통해서 새로운 값 타입을 집적 정의해서 사용할 수 있습니다. Email 클래스를 새로 생성하고 거기에 Email 칼럼에 매핑하는 하였습니다.</p><h2><span id="dto-변경">DTO 변경</span></h2><h3><span id="accountdtoclass">AccountDto.class</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SignUpReq</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// @Email 기존코드</span></div><div class="line">    <span class="comment">// private String email;</span></div><div class="line">    <span class="meta">@Valid</span> <span class="comment">// @Valid 반드시 필요</span></div><div class="line">    <span class="keyword">private</span> com.cheese.springjpa.Account.model.Email email;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String zip;</div><div class="line">    <span class="meta">@Builder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SignUpReq</span><span class="params">(com.cheese.springjpa.Account.model.Email email, String fistName, String lastName, String password, String address1, String address2, String zip)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.email = email;</div><div class="line">        ...</div><div class="line">        <span class="keyword">this</span>.zip = zip;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">toEntity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Account.builder()</div><div class="line">                .email(<span class="keyword">this</span>.email)</div><div class="line">                ...</div><div class="line">                .zip(<span class="keyword">this</span>.zip)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>모든 Request Dto에 대한 반복적인 유효성 검사의 어 로테이션이 필요했었지만 <strong>새로운 Email 클래스를 바라보게 변경하면 해당 클래스의 이메일 유효성 검사를 바라보게 됩니다.</strong> 그 결과 이메일에 대한 유효성 검사는 Embeddable 타입의 Email 클래스가 관리하게 됩니다. 물론 이메일 유효성 검사는 로직이 거의 변경할 일이 없지만 다른 입력값들은 변경할 일들이 자주 생깁니다. 이럴 때 모든 DTO에 가서 유효성 로직을 변경하는 것은 불편 것을 넘어서 불안한 구조를 갖게 됩니다. 관리 포인트를 줄이는 것은 제가 생각했을 때는 되게 중요하다고 생각합니다.</p><h2><span id="단점">단점</span></h2><p>물론 이것 또한 단점이 없는 건 아닙니다. 아래 json처럼 email json 포멧팅이 변경되신 걸 확인할 수 있습니다. 물론 jackson을 사용해서 root element 조정을 할 수 있지만 그다지 추천해주고 싶지는 않습니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"address1"</span>: <span class="string">"string"</span>,</div><div class="line">  <span class="attr">"address2"</span>: <span class="string">"string"</span>,</div><div class="line">  <span class="attr">"email"</span>: &#123;</div><div class="line">    <span class="attr">"address"</span>: <span class="string">"string"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"fistName"</span>: <span class="string">"string"</span>,</div><div class="line">  <span class="attr">"lastName"</span>: <span class="string">"string"</span>,</div><div class="line">  <span class="attr">"password"</span>: <span class="string">"string"</span>,</div><div class="line">  <span class="attr">"zip"</span>: <span class="string">"string"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="결론">결론</span></h2><p>포스팅에는 유효성 검사를 하기 위해서 임베디드 타입을 분리했지만 사실 이런 이점보다는 다른 이점들이 많습니다. 또 이러한 이유로만 분리하지도 않는 걸로 알고 있습니다. 잘 설계된 ORM 애플리케이션은 매핑 한 테이블의 수보다 클래스의 수가 더 많다고들 합니다. 제가 생했을 때 진정한 장점은 다음과 같다고 생각합니다.</p><p>Account 엔티티는 fistName, lastName, password, address1, address2, zip 갖는 자입니다. 하지만 이러한 단순한 정보로 풀어 둔 것 일뿐. 데이터의 연관성이 없습니다. 아래처럼 정리하는 것이 더 바람직하다고 생각합니다.</p><p>Account 엔티티는 이름, 비밀번호, 주소를 갖는다. 여기에 필요한 상세 정보들은 주소라는 임베디드 타입에 정의돼있으면 된다고 생각합니다. 해당 설명을 json으로 풀어쓰면 아래와 같을 거같습니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"address"</span>: &#123;</div><div class="line">    <span class="attr">"address1"</span>: <span class="string">"string"</span>,</div><div class="line">    <span class="attr">"address2"</span>: <span class="string">"string"</span>,</div><div class="line">    <span class="attr">"zip"</span>: <span class="string">"string"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"email"</span>: &#123;</div><div class="line">    <span class="attr">"address"</span>: <span class="string">"string"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"name"</span>:&#123;</div><div class="line">    <span class="attr">"first"</span>: <span class="string">"name"</span>,</div><div class="line">    <span class="attr">"last"</span>: <span class="string">"name"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"password"</span>: <span class="string">"string"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Account가 상세한 데이터를 그대로 가지고 있는 것은 객체지향적이지 않으며 응집 력만 떨어뜨리는 결과를 갖는다고 생각합니다. 저는 ORM JPA 기술은 단순히 반복적인 쿼리문을 대신 작성해주는 것이라고 생각하지는 않고 데이터를 데이터베이스에서만 생각하지 않고 그것을 객체지향 적으로 바라보게 결국 객체지향 프로그래밍을 돕는다고 생각합니다.</p><h2><span id="참고">참고</span></h2><ul><li><a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788960777330&amp;orderClick=LAH&amp;Kc=" rel="external nofollow noopener noreferrer" target="_blank">자바 ORM 표준 JPA 프로그래밍 </a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;step-03-효과적인-validate-예외-처리-처리-2&quot;&gt;step-03 : 효과적인 validate, 예외 처리 처리 (2)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;이전 포스팅의 단점을 해결해서 더 효과적은 효과적인 validate, 
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Embedded" scheme="https://cheese10yun.github.io/tags/Embedded/"/>
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
  </entry>
  
  <entry>
    <title>Swagger 날짜 포멧팅</title>
    <link href="https://cheese10yun.github.io/swagger-tip-01/"/>
    <id>https://cheese10yun.github.io/swagger-tip-01/</id>
    <published>2018-05-02T15:00:00.000Z</published>
    <updated>2018-05-07T15:40:38.569Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/YGnD90T.png" alt=""></p><p>Swagger를 API 도큐먼트로 사용하고 계시다면 날짜 관련 model value는 지저분하게 출력 됩니다. 이 문제를 해결 하는 방법에 대해서 간단하게 포스팅 하겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableSwagger</span>2</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</div><div class="line">                .select()</div><div class="line">                .apis(RequestHandlerSelectors.any())</div><div class="line">                .paths(PathSelectors.any())</div><div class="line">                .build()</div><div class="line">                .directModelSubstitute(Timestamp.class, Long.class);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>directModelSubstitute 메소드는 다음과 같이 작용합니다. 변경하고 싶은 클래스, 변경되고자 하는 포멧팅 입니다.<br>저같은 경우는 long 타입의 클래스로 날짜를 출력하니 <code>directModelSubstitute(Timestamp.class, Long.class);</code>를 적용했습니다.</p><p><img src="https://i.imgur.com/THkaEN6.png" alt=""></p><p>작업을 완료하시면 위 그림처럼 표시 됩니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/YGnD90T.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Swagger를 API 도큐먼트로 사용하고 계시다면 날짜 관련 model value는 지저분하게 출력 됩니다. 이 문제를 해결 하는 방법에 대
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Swagger" scheme="https://cheese10yun.github.io/tags/Swagger/"/>
    
      <category term="Document" scheme="https://cheese10yun.github.io/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Jpa Best Practices Step-02 - 효과적인 validate, 예외 처리 (1)</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-02/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-02/</id>
    <published>2018-05-01T15:00:00.000Z</published>
    <updated>2018-06-22T15:26:07.492Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="step-02-효과적인-validate-예외-처리-1">Step-02 효과적인 validate, 예외 처리 (1)</span></h2><p>API을 개발하다 보면 프런트에서 넘어온 값에 대한 유효성 검사를 수없이 진행하게 됩니다. 이러한 <strong>반복적인 작업을 보다 효율적으로 처리하고 정확한 예외 메시지를 프런트엔드에게 전달해주는 것이 목표입니다</strong>. 해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p><h2><span id="중요-포인트">중요 포인트</span></h2><ul><li><code>@Valid</code>를 통한 유효성검사</li><li><code>@ControllerAdvice</code>를 이용한 Exception 헨들링</li><li><code>ErrorCode</code> 에러 메시지 통합</li></ul><h2><span id="valid-를-통한-유효성검사">@Valid 를 통한 유효성검사</span></h2><h3><span id="dto-유효성-검사-어노테이션-추가">DTO 유효성 검사 어노테이션 추가</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SignUpReq</span> </span>&#123;</div><div class="line">    <span class="meta">@Email</span></div><div class="line">    <span class="keyword">private</span> String email;</div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="keyword">private</span> String fistName;</div><div class="line">    ...</div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="keyword">private</span> String zip;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>이전 단계에서 작성한 회원가입을 위한 SignUpReq.class에 새롭게 추가된 <code>@Email</code>, <code>@NotEmpty</code> 어 로테이션을 추가했습니다. 이 밖에 다양한 어노테이션들이 있습니다. 아래의 컨트롤러에서  <code>@Valid</code> 어 로테이션을 통해서 유효성 검사 가를 진행하고 유효성 검사를 실패하면 <code>MethodArgumentNotValidException</code> 예외가 발생합니다.</p><h3><span id="controller에서-유효성-검사">Controller에서 유효성 검사</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</div><div class="line"><span class="meta">@ResponseStatus</span>(value = HttpStatus.CREATED)</div><div class="line"><span class="keyword">public</span> AccountDto.<span class="function">Res <span class="title">signUp</span><span class="params">(@RequestBody @Valid <span class="keyword">final</span> AccountDto.SignUpReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AccountDto.Res(accountService.create(dto));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>컨트롤러에 <code>@Valid</code> 어 로테이션을 추가했습니다. <code>SignUpReq</code> 클래스의 유효성 검사가 실패했을 경우 <code>MethodArgumentNotValidException</code> 예외가 발생하게 됩니다. <strong>프론트에서 넘겨받은 값에 대한 유효성 검사는 엄청난 반복적인 작업이며 실패했을 경우 사용자에게 적절한 Response 값을 리턴해주는 것 또한 중요 비즈니스 로직이 아님에도 불과하고 많은 시간을 할애하게 됩니다.</strong> 다음 부분은 <code>MethodArgumentNotValidException</code> 발생시 공통적으로 <strong>사용자에게 적절한 Response 값을 리턴해주는 작업을 진행하겠습니다.</strong></p><h2><span id="controlleradvice를-이용한-exception-헨들링">@ControllerAdvice를 이용한 Exception 헨들링</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorExceptionController</span> </span>&#123;</div><div class="line"><span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException.class)</div><div class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</div><div class="line"><span class="function"><span class="keyword">protected</span> ErrorResponse <span class="title">handleMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</div><div class="line">    retrun errorResponse...</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>@ControllerAdvice</code> 어 로테이션을 추가하면 특정 Exception을 핸들링하여 적절한 값을 Response 값으로 리턴해줍니다. 위처럼 별다른 <code>MethodArgumentNotValidException</code> 핸들링을 하지 않으면 스프링 자체의 에러 Response 값을 아래와 같이 리턴해줍니다.</p><h3><span id="error-response">Error Response</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"timestamp"</span>: <span class="number">1525182817519</span>,</div><div class="line">  <span class="attr">"status"</span>: <span class="number">400</span>,</div><div class="line">  <span class="attr">"error"</span>: <span class="string">"Bad Request"</span>,</div><div class="line">  <span class="attr">"exception"</span>: <span class="string">"org.springframework.web.bind.MethodArgumentNotValidException"</span>,</div><div class="line">  <span class="attr">"errors"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"codes"</span>: [</div><div class="line">        <span class="string">"Email.signUpReq.email"</span>,</div><div class="line">        <span class="string">"Email.email"</span>,</div><div class="line">        <span class="string">"Email.java.lang.String"</span>,</div><div class="line">        <span class="string">"Email"</span></div><div class="line">      ],</div><div class="line">      <span class="attr">"arguments"</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"codes"</span>: [</div><div class="line">            <span class="string">"signUpReq.email"</span>,</div><div class="line">            <span class="string">"email"</span></div><div class="line">          ],</div><div class="line">          <span class="attr">"arguments"</span>: <span class="literal">null</span>,</div><div class="line">          <span class="attr">"defaultMessage"</span>: <span class="string">"email"</span>,</div><div class="line">          <span class="attr">"code"</span>: <span class="string">"email"</span></div><div class="line">        &#125;,</div><div class="line">        [],</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"arguments"</span>: <span class="literal">null</span>,</div><div class="line">          <span class="attr">"defaultMessage"</span>: <span class="string">".*"</span>,</div><div class="line">          <span class="attr">"codes"</span>: [</div><div class="line">            <span class="string">".*"</span></div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      ],</div><div class="line">      <span class="attr">"defaultMessage"</span>: <span class="string">"이메일 주소가 유효하지 않습니다."</span>,</div><div class="line">      <span class="attr">"objectName"</span>: <span class="string">"signUpReq"</span>,</div><div class="line">      <span class="attr">"field"</span>: <span class="string">"email"</span>,</div><div class="line">      <span class="attr">"rejectedValue"</span>: <span class="string">"string"</span>,</div><div class="line">      <span class="attr">"bindingFailure"</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">"code"</span>: <span class="string">"Email"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="attr">"message"</span>: <span class="string">"Validation failed for object='signUpReq'. Error count: 3"</span>,</div><div class="line">  <span class="attr">"path"</span>: <span class="string">"/accounts"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>너무나 많은 값을 돌려보내 주고 있으며 시스템 정보에 대한 값들도 포함되고 있어 위처럼 Response 값을 돌려보내는 것은 바람직하지 않습니다. 또 자체적으로 돌려보내 주는 Response 결과를 공통적인 포맷으로 가져가는 것은 최종적으로 프론트 엔드에서 처리해야 하므로 항상 공통적인 Response 포맷일 유지해야 합니다. 아래 <code>Error Response</code> 클래스를 통해서 공통적인 예외 Response 값을 갖도록 하겠습니다.</p><h3><span id="methodargumentnotvalidexception의-response-처리">MethodArgumentNotValidException의 Response 처리</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException.class)</div><div class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</div><div class="line"><span class="function"><span class="keyword">protected</span> ErrorResponse <span class="title">handleMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</div><div class="line">log.error(e.getMessage());</div><div class="line"><span class="keyword">final</span> BindingResult bindingResult = e.getBindingResult();</div><div class="line"><span class="keyword">final</span> List&lt;FieldError&gt; errors = bindingResult.getFieldErrors();</div><div class="line"></div><div class="line"><span class="keyword">return</span> buildFieldErrors(</div><div class="line">ErrorCode.INPUT_VALUE_INVALID,</div><div class="line">errors.parallelStream()</div><div class="line">.map(error -&gt; ErrorResponse.FieldError.builder()</div><div class="line">.reason(error.getDefaultMessage())</div><div class="line">.field(error.getField())</div><div class="line">.value((String) error.getRejectedValue())</div><div class="line">.build())</div><div class="line">.collect(Collectors.toList())</div><div class="line">);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="errorresponse">ErrorResponse</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorResponse</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line">    <span class="keyword">private</span> String code;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</div><div class="line">    <span class="keyword">private</span> List&lt;FieldError&gt; errors;</div><div class="line">...</div><div class="line"></div><div class="line">    <span class="meta">@Getter</span></div><div class="line">    <span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldError</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> String field;</div><div class="line">        <span class="keyword">private</span> String value;</div><div class="line">        <span class="keyword">private</span> String reason;</div><div class="line">...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>전체적인 흐름을 보시는 것을 권장합니다. 대충 소스코드의 흐름은 MethodArgumentNotValidException 클래스의 유효성 예외 부분들을 <code>ErrorResponse</code> 클래스의 정보에 알맞게 넣어주는 것입니다.</p><h3><span id="errorresponse-공통적인-예외-response">ErrorResponse :  공통적인 예외 Response</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"message"</span>: <span class="string">"입력값이 올바르지 않습니다."</span>,</div><div class="line">  <span class="attr">"code"</span>: <span class="string">"???"</span>,</div><div class="line">  <span class="attr">"status"</span>: <span class="number">400</span>,</div><div class="line">  <span class="attr">"errors"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"field"</span>: <span class="string">"email"</span>,</div><div class="line">      <span class="attr">"value"</span>: <span class="string">"string"</span>,</div><div class="line">      <span class="attr">"reason"</span>: <span class="string">"이메일 주소가 유효하지 않습니다."</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"field"</span>: <span class="string">"lastName"</span>,</div><div class="line">      <span class="attr">"value"</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">"reason"</span>: <span class="string">"반드시 값이 존재하고 길이 혹은 크기가 0보다 커야 합니다."</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"field"</span>: <span class="string">"fistName"</span>,</div><div class="line">      <span class="attr">"value"</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">"reason"</span>: <span class="string">"반드시 값이 존재하고 길이 혹은 크기가 0보다 커야 합니다."</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>동일한 ErrorResponse 값을 갖게 되었으며 어느 칼럼에서 무슨 무슨 문제들이 발생했는지 알 수 있게 되었습니다. <code>@Valid</code> 어 로테이션으로 발생하는 <code>MethodArgumentNotValidException</code>들은 모두 handleMethodArgumentNotValidException 메서드를 통해서 공통된 Response 값을 리턴합니다. <strong>이제부터는 @Valid, 해당 필드에 맞는 어 로테이션을 통해서 모든 유효성 검사를 진행할 수 있습니다.</strong></p><h3><span id="accountnotfoundexception-새로운-exception-정의">AccountNotFoundException : 새로운 Exception 정의</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountNotFoundException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountNotFoundException</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Account account = accountRepository.findOne(id);</div><div class="line">    <span class="keyword">if</span> (account == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AccountNotFoundException(id);</div><div class="line">    <span class="keyword">return</span> account;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="handleaccountnotfoundexception-헨들링">handleAccountNotFoundException : 헨들링</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ExceptionHandler</span>(value = &#123;</div><div class="line">        AccountNotFoundException.class</div><div class="line">&#125;)</div><div class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</div><div class="line"><span class="function"><span class="keyword">protected</span> ErrorResponse <span class="title">handleAccountNotFoundException</span><span class="params">(AccountNotFoundException e)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> ErrorCode accountNotFound = ErrorCode.ACCOUNT_NOT_FOUND;</div><div class="line">    log.error(accountNotFound.getMessage(), e.getMessage());</div><div class="line">    <span class="keyword">return</span> buildError(accountNotFound);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="response">Response</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"message"</span>: <span class="string">"해당 회원을 찾을 수 없습니다."</span>,</div><div class="line">  <span class="attr">"code"</span>: <span class="string">"AC_001"</span>,</div><div class="line">  <span class="attr">"status"</span>: <span class="number">404</span>,</div><div class="line">  <span class="attr">"errors"</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위처럼 새로운 Exception 정의하고 핸들링할 수 있습니다. 이 또 한 공통된 Response 갖게 되며 예외가 발생했을 경우 throw를 통해 해당 Exception 잘 처리해 주는 곳으로 던지게 됨으로써 비즈니스 로직과 예외 처리를 하는 로직이 분리되어 코드 가속성 및 유지 보수에 좋다고 생각합니다.</p><h2><span id="errorcode">ErrorCode</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ErrorCode &#123;</div><div class="line"></div><div class="line">    ACCOUNT_NOT_FOUND(<span class="string">"AC_001"</span>, <span class="string">"해당 회원을 찾을 수 없습니다."</span>, <span class="number">404</span>),</div><div class="line">    EMAIL_DUPLICATION(<span class="string">"AC_002"</span>, <span class="string">"이메일이 중복되었습니다."</span>, <span class="number">400</span>),</div><div class="line">    INPUT_VALUE_INVALID(<span class="string">"CM_001"</span>, <span class="string">"입력값이 올바르지 않습니다."</span>, <span class="number">400</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> status;</div><div class="line"></div><div class="line">    ErrorCode(String code, String message, <span class="keyword">int</span> status) &#123;</div><div class="line">        <span class="keyword">this</span>.code = code;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">        <span class="keyword">this</span>.status = status;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 방법은 깃허브에서 많은 개발자들이 예외 처리를 하는 방법들의 장점들을 합쳐서 만든 방법이지만 이 에러 코드는 저의 생각으로만 만들어진 방법이라서 효율적인 방법인지는 아직 잘 모르겠습니다. 우선 각각 모두 흩어져있는 예외 메시지들을 한 곳에서 관리하는 것이 바람직하다고 생각합니다. 그 이유는 다음과 같습니다.</p><ol><li>중복적으로 작성되는 메시지들이 너무 많습니다.<ul><li>예를 들어 <code>해당 회원을 찾을 수 없습니다.</code> 메시지를 로그에 남기는 메시지 형태는 너무나도 많은 형태입니다. 형태는 너무나도 많은 형태입니다.</li></ul></li><li>메시지 변경이 힘듭니다.<ul><li>메시지가 스트링 형식으로 모든 소스에 흩어져있을 경우 메시지 변경 시에 모든 곳을 다 찾아서 변경해야 합니다.모든 곳을 다 찾아서 변경해야 합니다.</li></ul></li></ol><h2><span id="단점">단점</span></h2><p>위의 유효성 검사의 단점은 다음과 같습니다.</p><ol><li>모든 Request Dto에 대한 반복적인 유효성 검사의 어 로테이션이 필요합니다.<ul><li>회원 가입, 회원 정보 수정 등등 지속적으로 DTO 클래스가 추가되고 그때마다 반복적으로 어 로테이션이 추가됩니다.</li></ul></li><li>유효성 검사 로직이 변경되면 모든 곳에 변경이 따른다.<ul><li>만약 비밀번호 유효성 검사가 특수문자가 추가된다고 하면 비밀번호 변경에 따른 유효성 검사를 정규 표현식의 변경을 모든 DTO마다 해줘야 합니다.</li></ul></li></ol><p>이러한 단점들은 다음 <code>step-03 : 효과적인 validate, 예외 처리 처리 (2)</code>에서 다루어 보겠습니다. 지속적으로 포스팅이 어 가겠습니다. 긴 글 읽어주셔서 감사합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;step-02-효과적인-validate-예외-처리-1&quot;&gt;Step-02 효과적인 validate, 예외 처리 (1)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;API을 개발하다 보면 프런트에서 넘어온 값에 대한 유효성 검사를 수없이 진행하게 됩
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
  </entry>
  
</feed>
