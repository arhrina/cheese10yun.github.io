<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yun Blog</title>
  <icon>https://www.gravatar.com/avatar/d313a2c442931458ed624a3999d75011</icon>
  <subtitle>기술 블로</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://cheese10yun.github.io/"/>
  <updated>2018-03-23T19:02:26.363Z</updated>
  <id>https://cheese10yun.github.io/</id>
  
  <author>
    <name>Yun</name>
    <email>cheese10yun@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring OOP 프로그래밍 예제</title>
    <link href="https://cheese10yun.github.io/spring-notificaion-oop/"/>
    <id>https://cheese10yun.github.io/spring-notificaion-oop/</id>
    <published>2018-03-23T19:02:26.000Z</published>
    <updated>2018-03-23T19:02:26.363Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/PI6g3ku.png" alt=""></p><p><strong>해당 요구사항에 맞는 객체지향 프로그래밍을 진행하고 해당 코드를 SOLD 원칙에 맞게 제 나름대로 해석 해보았습니다. 아직 배우는 단계라 너무 부족합니다. 지적 사항을 댓글로 남겨주시면 정말로 감사하겠습니다.</strong> 위사진은 해당 셈플코드의 간략한 클래스 다이어그램 입니다.</p><h2><span id="예제-코드">예제 코드</span></h2><p><strong><a href="https://github.com/cheese10yun/blog-sample/tree/master/notification" rel="external nofollow noopener noreferrer" target="_blank">Blog-Sample </a>에 있습니다. <s>star 한번만…</s></strong></p><h2><span id="요구사항">요구사항</span></h2><ul><li>배송이 완료 됬을 경우 사용자가 등록한 알림을 받는다.</li><li>알림에는 SMS, Kakao, Email 이 있다</li><li>알람은 지속적으로 추가 될 가능 성이 높아 보인다.</li></ul><h2><span id="delivery-domain">Delivery Domain</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Delivery</span> </span>&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="meta">@OneToMany</span>(fetch = FetchType.LAZY)</div><div class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"transfer_id"</span>)</div><div class="line">    <span class="keyword">private</span> List&lt;DeliveryNotificationType&gt; deliveryNotificationTypes = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@OneToOne</span>(targetEntity = Sender.class)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"sender_id"</span>)</div><div class="line">    <span class="keyword">private</span> Sender sender;</div><div class="line"></div><div class="line">    <span class="meta">@OneToOne</span>(targetEntity = Receiver.class)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"receiver_id"</span>)</div><div class="line">    <span class="keyword">private</span> Receiver receiver;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Delivery는 Sender(발송인), Receiver(수신자)와 연관관계를 맺는다.</li><li>Delivery는 배송이 안료되면 수신자에게 보낼 알림 타입의 리스트 DeliveryNotificationType와 연관관계를 맺는다</li></ul><h2><span id="deliverynotificationsender-interface">DeliveryNotificationSender Interface</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeliveryNotificationSender</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(DeliveryMessageDto.Message dto)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>배송 노티를 보내는 인터페이스</li><li>dto 클래스로 유연하게 받을 수 있게 처리</li></ul><h2><span id="deliverykakaonotificationsender-구현-클래스">DeliveryKakaoNotificationSender 구현 클래스</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryKakaoNotificationSender</span> <span class="keyword">extends</span> <span class="title">KakaoNotificaionSender</span> <span class="keyword">implements</span> <span class="title">DeliveryNotificationSender</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DeliveryMessageDto.Message dto)</span> </span>&#123;</div><div class="line">        create(buildKaKaoNotificationDto(dto));</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>배송 관련 카카오 메시지를 담당하는 클래스</li><li><code>DeliveryNotificationSender</code> 인터페이스를 <code>implements</code> 해서 자신이 <code>send</code> 메서드를 구현 해야하는 책임을 명확하게 알 수 있다.</li><li><code>KakaoNotificaionSender</code> 클래스를 상속 받고 있어 실제 구체적으로 어떻게 보내지는지 모르더라도 상관 없다.</li><li>테이블에 insert 되고 그 데이터 기반으로 카카오에서 메시지를 전송해 준다.</li></ul><h2><span id="deliverysmsnotificationsender-구현-클래스">DeliverySmsNotificationSender 구현 클래스</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliverySmsNotificationSender</span> <span class="keyword">extends</span> <span class="title">SmsNotificationSender</span> <span class="keyword">implements</span> <span class="title">DeliveryNotificationSender</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DeliveryMessageDto.Message dto)</span> </span>&#123;</div><div class="line">        sendSMS(buildSmsMessageDto(dto));</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>배송 관련 카카오 메시지를 담당하는 클래스이다.</li><li><code>DeliveryNotificationSender</code> 인터페이스를 <code>implements</code> 해서 자신이 <code>send</code> 메서드를 구현 해야하는 책임을 명확하게 알 수 있다.</li><li><code>SmsNotificationSender</code> 클래스를 상속 받고 있어 실제 구체적으로 어떻게 보내지는지 모르더라도 상관 없다.</li><li>해당 업체 API 호출을 통해서 문자전송이 진행된다. 카카오 메시지 전송과는 다르다. 하지만 <code>DeliveryNotificationSender</code> 인터페이스를 통해서  <code>send</code>라는 동일한 책임을 갖게 된다.</li></ul><h2><span id="deliverynotificationsendermanager">DeliveryNotificationSenderManager</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryNotificationSenderManager</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Delivery delivery)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> List&lt;DeliveryNotificationType&gt; notifications = delivery.getDeliveryNotificationTypes();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!notifications.isEmpty())</div><div class="line">            <span class="keyword">for</span> (DeliveryNotificationType type : notifications)</div><div class="line">                getInstanceByType(type).send(buildMessage(delivery));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> DeliveryNotificationSender <span class="title">getInstanceByType</span><span class="params">(DeliveryNotificationType type)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> deliveryNotificationSenderFactory.getInstanceByType(type.getType());</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>사용자가 등록한 알림을 전송</li><li><strong><code>getInstanceByType</code> 팩토리 메소드를 통해서 해당 타입에 맞는 인스턴스가 의존성 주입</strong><ul><li><strong>type이 SMS 일 경우 <code>DeliverySmsNotificationSender</code> 인스턴스 주입</strong></li><li><strong><code>DeliverySmsNotificationSender</code> 인스턴스 <code>send</code>(SMS 전송) 메서드 실행</strong></li></ul></li><li><strong><em>컴파일 단계에서는 알림을 보내는 것이 <code>DeliveryNotificationSender</code> 인터페이스를 바라보지만 런타임 단계에서는 그것이 역전되 IoC 발생</em></strong></li></ul><h2><span id="solid">SOLID</span></h2><p>아직 배워가는 단계라 많이 부족 하지만 나름대로 SOLD 원측에 의해서 정리 해보겠습니다.</p><h3><span id="srp-단일-책임-원칙">SRP : 단일 책임 원칙</span></h3><ul><li>객체는 오직 하나의 변경의 이유만을 갖게되 었습니다. 배송 관련 카카오 전송시 세부 메시지 형태나, 포함될 정보가 달라질 경우 <code>DeliveryKakaoNotificationSender</code> 클래스만 변경 하면됩니다.</li><li>다른 곳에서 다른형태로 카카오 메시지를 전송하고 있는 로직에 영향을 미치지 않습니다.</li></ul><h3><span id="ocp-개방-폐쇄-원칙">OCP : 개방-폐쇄 원칙</span></h3><ul><li>확장에는 열려 있습니다.<ul><li>새로운 배송 라인 알림이 추가 된다고 하면 <code>DeliveryNotificationSender</code> 인터페이스를 <code>implements</code> 하여 <code>send</code> 메서드만 세부 구현 하면됩니다.</li><li>IoC를 이용해서 <code>send</code> 메서드를 다형성으로 해결하지 않았다면 알림이 추가 될때 마다 <code>if</code> 으로 무슨 알림이면 무슨 <code>send</code>를 실행 하라는 반복 적인 코드들이 나오게 됩니다.</li><li><code>if</code>은 직관적으로 이해하기 편하 코드지만 유지보수하기는 어렵습니다. 만약 10개 알림이 있고 11번째 알림을 추가 한다고 가정했을 때 앞에 작성된 <code>if</code>문들을 이해하고 또 11 번째 <code>if</code>문을 추가해야 합니다. 코드는 작성하는 시간보다 읽히는 시간이 더 많습니다.</li></ul></li><li>변경에는 닫혀 있습니다.<ul><li>새로운 배송 알림이 추가 되더라도 기존 코드의 변경은 거의 없습니다. 팩토리 메소드에 새로운 배송 알림을 담당하는 인스턴스를 추가 하기만 하면 됩니다.</li><li>위에서 언급했듯이 새로운 배송 알림이 추가되면 해당 코드에 가서 <code>if</code>을 통한 <code>send</code> 메시지를 작성할 필요가 없습니다.</li></ul></li></ul><h3><span id="lsp-리스코프-치환-원칙">LSP : 리스코프 치환 원칙</span></h3><ul><li>서브 타입은 언제나 슈퍼타입을 교체 할 수 있어야 한다.</li><li><code>DeliveryKakaoNotificationSender</code> 서브 클래스는 <code>KakaoNotificaionSender</code>  슈퍼 클래스를 대체 합니다. 카카오 알림 중에서 배송 관련 알림을 교체해서 보내줍니다. <strong>Is a 관계가 성립됩니다.</strong></li></ul><h3><span id="isp-인터페이스-분리-원칙">ISP : 인터페이스 분리 원칙</span></h3><ul><li>서브 타입에서 상위 타입의 메소드들의 사용하지 않는 경우가 없</li></ul><h3><span id="dip-의존성-역전-원칙">DIP : 의존성 역전 원칙</span></h3><ul><li><code>DeliveryNotificationSenderManager</code> 클래스에서 팩토리 메소드를 통해서  <code>DeliveryNotificationSender</code>의 새부 인스턴스를 각 타입에 맞게 변경 해주고 있습니다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/PI6g3ku.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;해당 요구사항에 맞는 객체지향 프로그래밍을 진행하고 해당 코드를 SOLD 원칙에 맞게 제 나름대로 해석 해보았습니다. 아직 배우
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>인텔리제이 Todo 활용법</title>
    <link href="https://cheese10yun.github.io/intellij-todo/"/>
    <id>https://cheese10yun.github.io/intellij-todo/</id>
    <published>2018-03-20T15:00:00.000Z</published>
    <updated>2018-03-21T12:53:58.051Z</updated>
    
    <content type="html"><![CDATA[<p>개발할 때 생각나는 사소 한 것들을 이슈 트래킹이나 메모장 같은 곳에 작성하기엔 번거롭고 올려 등록해도 잘 찾아보지 않는 경우가 많습니다. 그래서 저 같은 경우는 아래 그림과 같이 생각나는 모든 것들을 todo로 갈겨 놓습니다. 저는 개발 할 때 IDE에서 벗어나는 걸 싫어해서 웬만한 것들 IDE에서 작업을 진행합니다. 이러한 문제를 해결하는 인텔리제이 팁을 포스팅해보겠습니다.</p><h2><span id="인텔리제이-todo-활용법">인텔리제이 Todo 활용법</span></h2><p><img src="https://i.imgur.com/74N8oYR.png" alt=""></p><p>위 그림과 같이 생각 나는 것들을 날짜 + 내용 + 작성자 이름 형식으로 Todo로 등록합니다. 날짜 정보와 누가 작성했는 지 는 나중에 Todo를 추적할 때 많은 도움을 줍니다.</p><h2><span id="todo-전체-검색">TODO 전체 검색</span></h2><p><img src="https://i.imgur.com/AgvhG70.png" alt=""></p><p>개발 중에 Todo 전레 검색을 통해서 혹시라도 놓친 작업들이 있나 검색해 볼 수 있습니다. 단축키는 스크린샷에 나와 있습니다.</p><h2><span id="커밋할-때-한-번-더-검사">커밋할 때 한 번 더 검사</span></h2><p><img src="https://i.imgur.com/ZTW8jIq.png" alt=""></p><p>인텔리제이를 통해서 커밋 작업을 진행하게 되면 다양한 지원을 받을 수 있습니다. 그중에 하나가 TODO 검사 입니다. 왼쪽 중단에 <code>Check TODO</code> 라는 항목을 체크 하고 커밋을 하게 되면 아래 그림과 같이 표시 됩니다.</p><p><img src="https://i.imgur.com/x5yMIgW.png" alt=""></p><p>작성된 TODO가 있으면 커밋전에 사용자에게 알려줍니다. 남은 작업들을 확인하려면 <code>Review</code> 버튼을 누를 경우 위 처럼 작성된 TODO 리스트들이 출력됩니다. 혹시라도 잊어 버린 TODO를 커밋전에 확인 할 수 있습니다. <code>Before Commit</code> 기능은 이 이외도 많은 기능이 있는데 추후 포스팅에서 정리 해보겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;개발할 때 생각나는 사소 한 것들을 이슈 트래킹이나 메모장 같은 곳에 작성하기엔 번거롭고 올려 등록해도 잘 찾아보지 않는 경우가 많습니다. 그래서 저 같은 경우는 아래 그림과 같이 생각나는 모든 것들을 todo로 갈겨 놓습니다. 저는 개발 할 때
      
    
    </summary>
    
    
      <category term="IntelliJ" scheme="https://cheese10yun.github.io/tags/IntelliJ/"/>
    
      <category term="Todo" scheme="https://cheese10yun.github.io/tags/Todo/"/>
    
  </entry>
  
  <entry>
    <title>Spring 으로 초간단 Slack Message 보내기</title>
    <link href="https://cheese10yun.github.io/slack-bot-spring/"/>
    <id>https://cheese10yun.github.io/slack-bot-spring/</id>
    <published>2018-03-17T17:00:00.000Z</published>
    <updated>2018-03-20T17:08:45.450Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="프로젝트-설명">프로젝트 설명</span></h2><p><strong><a href="https://github.com/cheese10yun/slackbot" rel="external nofollow noopener noreferrer" target="_blank">프로젝트 소스</a></strong></p><p>Spring boot 으로 초간단하게 Slack Message 보내기를 만들어 보는 프로젝트입니다. 현재는 별다른 기능은 없고 정말 단순하게 메세지 보내는 기능만 있습니다. <a href="https://github.com/cheese10yun/slackbot/tree/release-1" rel="external nofollow noopener noreferrer" target="_blank">branch : release-1</a>에 최대한 가져다 Copy &amp; Paste 하기 쉽게? 만들었습니다. (<s>조금이라도 도움이 되셨다면 start 좀…</s>) <a href="https://api.slack.com/docs/messages/builder" rel="external nofollow noopener noreferrer" target="_blank">Slack Message</a> 에서 제공하는 3 가지 메세지를 보내 보겠습니다. 포스팅 하단에 Curl로 실제 메세지를 보내 볼 수 있습니다.</p><p>앞으로는 프로젝트 특정 시나리오에서 Exception 발생 했을 경우 Slack 으로 에러 메세지가 오게 설정하는 등 다양한 에러 메세지를 Slack 통해서 받아 볼 수 있게 할 예정입니다.</p><h2><span id="slack-web-hook-연동">Slack Web Hook 연동</span></h2><p><img src="https://i.imgur.com/MBhHN58.png" alt=""></p><p>Incoming WebHooks 작업이 완료 됬다고 가정하고 포스팅을 진행하겠습니다. 만약 작업이 완료 되지 않았다면 해당 앱을 설치하고 특정 채널에 알림이 가게 설정해주세요</p><h2><span id="slack-message-유형">Slack Message 유형</span></h2><p>크게 3 가지 유형이 있습니다. 이미지 형태와 컨트롤러에서 보내 볼 수 받아 볼 수 있는 Curl 하나하나 살펴보습니다.</p><h3><span id="basic">Basic</span></h3><h4><span id="이미지">이미지</span></h4><p><img src="https://i.imgur.com/W6Gg0eV.png" alt=""></p><h4><span id="curl">Curl</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">curl -X POST \</div><div class="line">  http://localhost:8080/bot/basic \</div><div class="line">  -H &apos;cache-control: no-cache&apos; \</div><div class="line">  -H &apos;content-type: application/json&apos; \</div><div class="line">  -H &apos;postman-token: db7316c5-3358-0ccc-4de4-03bd7dd307c4&apos; \</div><div class="line">  -d &apos;&#123;</div><div class="line">&quot;text&quot;: &quot;text&quot;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure><h3><span id="attachments">Attachments</span></h3><h4><span id="이미지">이미지</span></h4><p><img src="https://i.imgur.com/Povsbzl.png" alt=""></p><h4><span id="curl">Curl</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">curl -X POST \</div><div class="line">  http://localhost:8080/bot/button \</div><div class="line">  -H &apos;cache-control: no-cache&apos; \</div><div class="line">  -H &apos;content-type: application/json&apos; \</div><div class="line">  -H &apos;postman-token: 0b503f02-713c-afdc-8c8f-b007c7bfb882&apos; \</div><div class="line">  -d &apos;&#123;</div><div class="line">    &quot;text&quot;: &quot;Would you like to play a game?&quot;,</div><div class="line">    &quot;attachments&quot;: [</div><div class="line">        &#123;</div><div class="line">            &quot;text&quot;: &quot;Choose a game to play&quot;,</div><div class="line">            &quot;fallback&quot;: &quot;You are unable to choose a game&quot;,</div><div class="line">            &quot;callback_id&quot;: &quot;wopr_game&quot;,</div><div class="line">            &quot;color&quot;: &quot;#3AA3E3&quot;,</div><div class="line">            &quot;attachment_type&quot;: &quot;default&quot;,</div><div class="line">            &quot;actions&quot;: [</div><div class="line">                &#123;</div><div class="line">                    &quot;name&quot;: &quot;game&quot;,</div><div class="line">                    &quot;text&quot;: &quot;Chess&quot;,</div><div class="line">                    &quot;type&quot;: &quot;button&quot;,</div><div class="line">                    &quot;value&quot;: &quot;chess&quot;</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    &quot;name&quot;: &quot;game&quot;,</div><div class="line">                    &quot;text&quot;: &quot;Falken&apos;\&apos;&apos;s Maze&quot;,</div><div class="line">                    &quot;type&quot;: &quot;button&quot;,</div><div class="line">                    &quot;value&quot;: &quot;maze&quot;</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    &quot;name&quot;: &quot;game&quot;,</div><div class="line">                    &quot;text&quot;: &quot;Thermonuclear War&quot;,</div><div class="line">                    &quot;style&quot;: &quot;danger&quot;,</div><div class="line">                    &quot;type&quot;: &quot;button&quot;,</div><div class="line">                    &quot;value&quot;: &quot;war&quot;,</div><div class="line">                    &quot;confirm&quot;: &#123;</div><div class="line">                        &quot;title&quot;: &quot;Are you sure?&quot;,</div><div class="line">                        &quot;text&quot;: &quot;Wouldn&apos;\&apos;&apos;t you prefer a good game of chess?&quot;,</div><div class="line">                        &quot;ok_text&quot;: &quot;Yes&quot;,</div><div class="line">                        &quot;dismiss_text&quot;: &quot;No&quot;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure><h3><span id="message-buttons">Message buttons</span></h3><h4><span id="이미지">이미지</span></h4><p><img src="https://i.imgur.com/GEAfeAJ.png" alt=""></p><h4><span id="curl">Curl</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">curl -X POST \</div><div class="line">  http://localhost:8080/bot/attachment \</div><div class="line">  -H &apos;cache-control: no-cache&apos; \</div><div class="line">  -H &apos;content-type: application/json&apos; \</div><div class="line">  -H &apos;postman-token: 53d665f3-c1e7-064d-e957-525a703e3965&apos; \</div><div class="line">  -d &apos;&#123;</div><div class="line">  &quot;attachments&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;fallback&quot;: &quot;Required plain-text summary of the attachment.&quot;,</div><div class="line">      &quot;color&quot;: &quot;#36a64f&quot;,</div><div class="line">      &quot;pretext&quot;: &quot;Optional text that appears above the attachment block&quot;,</div><div class="line">      &quot;author_name&quot;: &quot;Bobby Tables&quot;,</div><div class="line">      &quot;author_link&quot;: &quot;http://flickr.com/bobby/&quot;,</div><div class="line">      &quot;author_icon&quot;: &quot;http://flickr.com/icons/bobby.jpg&quot;,</div><div class="line">      &quot;title&quot;: &quot;Slack API Documentation&quot;,</div><div class="line">      &quot;title_link&quot;: &quot;https://api.slack.com/&quot;,</div><div class="line">      &quot;text&quot;: &quot;Optional text that appears within the attachment&quot;,</div><div class="line">      &quot;fields&quot;: [</div><div class="line">        &#123;</div><div class="line">          &quot;title&quot;: &quot;Priority&quot;,</div><div class="line">          &quot;value&quot;: &quot;High&quot;</div><div class="line">        &#125;</div><div class="line">      ],</div><div class="line">      &quot;image_url&quot;: &quot;http://my-website.com/path/to/image.jpg&quot;,</div><div class="line">      &quot;thumb_url&quot;: &quot;http://example.com/path/to/thumb.png&quot;,</div><div class="line">      &quot;footer&quot;: &quot;Slack API&quot;,</div><div class="line">      &quot;footer_icon&quot;: &quot;https://platform.slack-edge.com/img/default_application_icon.png&quot;,</div><div class="line">      &quot;ts&quot;: 1</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure><h2><span id="slack-message-만들기">Slack Message 만들기</span></h2><h3><span id="web-hook-연결">Web Hook 연결</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SlackTargetEnum &#123;</div><div class="line"></div><div class="line">    CH_BOT(<span class="string">"발급받은 Web Hook URL"</span>, <span class="string">"채널 이름"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String webHookUrl;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String channel;</div><div class="line"></div><div class="line"></div><div class="line">    SlackTargetEnum(String webHookUrl, String channel) &#123;</div><div class="line">        <span class="keyword">this</span>.webHookUrl = webHookUrl;</div><div class="line">        <span class="keyword">this</span>.channel = channel;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>슬랙 Web Hook URL 을 입력해주세요</p><h3><span id="dto-만들기">DTO 만들기</span></h3><p>Attachments JSON을 DTO로 만들어 보겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Attachments</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Attachment&gt; attachments;</div><div class="line"></div><div class="line">    <span class="meta">@Builder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Attachments</span><span class="params">(List&lt;Attachment&gt; attachments)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.attachments = attachments;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Attachment</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String fallback;</div><div class="line">    <span class="keyword">private</span> String color;</div><div class="line">    <span class="keyword">private</span> String pretext;</div><div class="line">    <span class="keyword">private</span> String author_name;</div><div class="line">    <span class="keyword">private</span> String author_link;</div><div class="line">    <span class="keyword">private</span> String author_icon;</div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line">    <span class="keyword">private</span> String title_link;</div><div class="line">    <span class="keyword">private</span> String text;</div><div class="line">    <span class="keyword">private</span> String image_url;</div><div class="line">    <span class="keyword">private</span> String thumb_url;</div><div class="line">    <span class="keyword">private</span> String footer;</div><div class="line">    <span class="keyword">private</span> String footer_icon;</div><div class="line">    <span class="keyword">private</span> Long ts;</div><div class="line">    <span class="keyword">private</span> List&lt;Field&gt; fields;</div><div class="line"></div><div class="line">    <span class="meta">@Builder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Attachment</span><span class="params">(String fallback, String color, String pretext, String author_name, String author_link, String author_icon, String title, String title_link, String text, String image_url, String thumb_url, String footer, String footer_icon, Long ts, List&lt;Field&gt; fields)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.fallback = fallback;</div><div class="line">        <span class="keyword">this</span>.color = color;</div><div class="line">        <span class="keyword">this</span>.pretext = pretext;</div><div class="line">        <span class="keyword">this</span>.author_name = author_name;</div><div class="line">        <span class="keyword">this</span>.author_link = author_link;</div><div class="line">        <span class="keyword">this</span>.author_icon = author_icon;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">        <span class="keyword">this</span>.title_link = title_link;</div><div class="line">        <span class="keyword">this</span>.text = text;</div><div class="line">        <span class="keyword">this</span>.image_url = image_url;</div><div class="line">        <span class="keyword">this</span>.thumb_url = thumb_url;</div><div class="line">        <span class="keyword">this</span>.footer = footer;</div><div class="line">        <span class="keyword">this</span>.footer_icon = footer_icon;</div><div class="line">        <span class="keyword">this</span>.ts = ts;</div><div class="line">        <span class="keyword">this</span>.fields = fields;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="controller">Controller</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"attachment"</span>, method = POST)</div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">attachment</span><span class="params">(@RequestBody SlackMessageDto.Attachments dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> ResponseEntity.ok(slackSenderManager.send(SlackTargetEnum.CH_BOT, dto));</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="slack-web-hook-보내기">Slack Web Hook 보내기</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">send</span><span class="params">(SlackTargetEnum target, Object object)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        restTemplate.postForEntity(target.getWebHookUrl(), writeValueAsString(object), String.class);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        log.error(<span class="string">"Occur Exception: &#123;&#125;"</span>, e);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>restTemplate 을 이용해서 컨트롤러에서 받은 DTO를 JSON으로 보내주고 있습니다.</strong></p><h2><span id="마무리">마무리</span></h2><p><strong>포스팅 내용을 대충 보시고 실제 코드를 보시는 게 더 빨리 이해하실 수 있을 거 같습니다.</strong> 최대한 간단하게 만들어서 처음 슬랙 봇을 만드시는 분이 편하게 가져다 쓰기 쉽게 만들어 봤습니다. 해당 프로젝트는 에러 발생시 Slack으로 메세징 받게 이어 나갈거 같습니다. Slack-Message 프로젝트로 다시 찾아 뵙겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;프로젝트-설명&quot;&gt;프로젝트 설명&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/cheese10yun/slackbot&quot; rel=&quot;external nofollow noopener nore
      
    
    </summary>
    
    
      <category term="Bot" scheme="https://cheese10yun.github.io/tags/Bot/"/>
    
      <category term="Slack" scheme="https://cheese10yun.github.io/tags/Slack/"/>
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>인텔리제이 Live Template</title>
    <link href="https://cheese10yun.github.io/intellij-live-template/"/>
    <id>https://cheese10yun.github.io/intellij-live-template/</id>
    <published>2018-03-17T15:00:00.000Z</published>
    <updated>2018-03-18T04:23:12.436Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="intellij-live-template">IntelliJ Live Template</span></h2><p>IntelliJ Live Template 이란 코드 템플릿을 미리 지정해서 편하게 코드를 작성할 수 있는 기능입니다. 등록 방법은 아래와 같습니다.</p><h2><span id="template-등록">Template 등록</span></h2><p><img src="https://i.imgur.com/H4qR4aa.png" alt=""></p><ol><li>IntelliJ Preferences</li><li>template 검색</li><li>등록할 스타일 작성 (Markdown template를 등록할 경우 Markdown 항목에 추가)</li><li>Abbreviation: Template key 등록, Description: 간단한 설명 작성</li><li>추가 하고 싶은 Template 등록</li><li><strong>하단의 Define에 사용할곳 반드시 정의</strong> (Markdown 파일에서 사용할 것임으로 Markdown 선책)</li></ol><h2><span id="template-사용법">Template 사용법</span></h2><p><img src="https://i.imgur.com/mZuDMdU.gif" alt=""></p><ul><li>위에서 작성한 <code>key</code>값을 입력하면 Template 불러옵니다.</li></ul><h2><span id="template">Template</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">layout: post</div><div class="line">title: $END$</div><div class="line">subtitle:</div><div class="line">catalog: true</div><div class="line">header-img: https://i.imgur.com/avC1Xor.jpg</div><div class="line">thumbnail:</div><div class="line">date: $date$</div><div class="line">tags:</div><div class="line">  -</div><div class="line">---</div></pre></td></tr></table></figure><ul><li><code>$END$</code> :  Template 을 보시면 코드가 완성되고 포커싱이 <code>title :</code> 쪽으로 가시는 것 볼 수 있씁니다. 키워드를 사용하면 Template 작성후 커서가 자동 이동 됩니다.</li><li><code>$date$</code> : 현재 시간을 자동으로 입력하게 합니다. (IntelliJ에서 작성하면 표시나 WebStorm 에서는 표시가 안되네요)</li></ul><h2><span id="자주사용하는-template">자주사용하는 Template</span></h2><p><img src="https://i.imgur.com/iQ40QYK.gif" alt=""></p><p>제가 가장 많이 사용하는 Template 입니다. <code>TODO</code> 입니다. 코드를 작성하면 추가적으로 필요한 작업, 기타등등 작업들은 모두 TODO로 적어 놓습니다. 해당 날짜와 작성인이 자동으로 작성되는 것을 확인할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;intellij-live-template&quot;&gt;IntelliJ Live Template&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;IntelliJ Live Template 이란 코드 템플릿을 미리 지정해서 편하게 코드를 작성할 수 있는 기능입니다
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Slack + Coveralls 연동</title>
    <link href="https://cheese10yun.github.io/slack-coveralls/"/>
    <id>https://cheese10yun.github.io/slack-coveralls/</id>
    <published>2018-03-16T15:00:00.000Z</published>
    <updated>2018-03-17T05:55:51.274Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://coveralls.io/github/dev-cheese/cheese" rel="external nofollow noopener noreferrer" target="_blank"><img src="https://coveralls.io/repos/github/dev-cheese/cheese/badge.svg" alt="Coverage Status"></a></p><p><strong>본 포스팅은 이미 Travis Ci +  Coveralls 연동이 이루어져있다는 가정하고 Coveralls Slack 연동을 중점으로 다루겠습니다.</strong><br><img src="https://i.imgur.com/sHagJxo.png" alt=""></p><p>Coveralls 소스코드의 커러지를 측정 해주는 도구입니다. Coveralls에 대한 자세한 설명은 <a href="https://blog.outsider.ne.kr/954" rel="external nofollow noopener noreferrer" target="_blank">Coveralls</a> 를 참조해주세요.</p><h2><span id="slack-web-hook-설정">Slack Web Hook 설정</span></h2><p><strong>Incoming WebHooks 설정을 완료 하신경우 Coveralls 설정 으로 바로 넘어가시면 됩니다. Slack Web Hook 이미 한번 설정을 완료해서 스크린샷 화면이 조금 다를 수 있습니다.</strong><br><img src="https://i.imgur.com/78QivsI.png" alt=""><br>Slack Apps 페이지에서 <strong>Incoming WebHooks</strong> 를 설치합니다.</p><p><img src="https://i.imgur.com/i99lWHM.png" alt=""><br>Slack 체널중 Web Hook를 받을 체널을 선택합니다.</p><p><img src="https://i.imgur.com/0dnlJWv.png" alt=""><br>Webhook URL 값을 확인할 수 있습니다. 이 Webhook URL 값으로 Coveralls 리포팅을 슬랙으로 받아 볼 수 있습니다.</p><h2><span id="coveralls-설정">Coveralls 설정</span></h2><p><img src="https://i.imgur.com/YqYWP7U.png" alt="1"></p><ul><li>Coveralls 연동되있는 Repository 왼쪽 상단의 setting 페이지로 이동합니다.</li></ul><p><img src="https://i.imgur.com/Q0vE2HK.png" alt="2"></p><ol><li>WEBHOOK URL:  위에서 발급한 <code>WEBHOOK URL</code> 값을 입력합니다.</li><li>CHANNEL : 위에서 생성한 체널를 입력합니다. 필수는 아닙니다.</li><li>테스트 버튼을 클릭하여 슬랙으로 위 이미지처럼 메세지가 잘 오는지 확인합니다.</li><li>SAVE NOTIFICATION 버튼을 누릅니다.</li></ol><p><img src="https://i.imgur.com/sHagJxo.png" alt=""></p><p><strong>설정을 완료하면 Travis CI 에서 배포 작업이 진행이 완료되면 Slack에서 Coveralls 에대한 리포팅 메세지가 자동으로 오게 됩니다.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://coveralls.io/github/dev-cheese/cheese&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;https://cov
      
    
    </summary>
    
    
      <category term="Slack" scheme="https://cheese10yun.github.io/tags/Slack/"/>
    
      <category term="Coveralls" scheme="https://cheese10yun.github.io/tags/Coveralls/"/>
    
      <category term="Test Coverage" scheme="https://cheese10yun.github.io/tags/Test-Coverage/"/>
    
  </entry>
  
  <entry>
    <title>인텔리제이 리팩토링</title>
    <link href="https://cheese10yun.github.io/intellij-refactoring/"/>
    <id>https://cheese10yun.github.io/intellij-refactoring/</id>
    <published>2018-03-10T15:00:00.000Z</published>
    <updated>2018-03-17T05:49:01.117Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="인텔리제이-리팩토링-기능">인텔리제이 리팩토링 기능</span></h2><p><img src="https://i.imgur.com/Dq0m2Pf.png" alt=""></p><p>인텔리제이의 리팩토링 기능을 이용해서 비교적 쉽게 리팩토링을 할 수 있습니다. 대표적인 리팩토링 기능들을 하나 하나 천천히 살펴 보도록 하겠습니다.</p><p><strong>해당 기능의 단축키는 스크린샷 하단 녹색으로 표시되어있습니다. 단축키 환경이 다른 사용자들은 해당 그림 처럼 Find Action 창에서 리팩토링 키워드를 검색하면 원하는 기능을 쉽게 찾을 수 있습니다. 위 예제는 <code>Extract Method</code> 검색한 이미지 입니다.</strong></p><h2><span id="extract-method-함수-수출-기능">Extract Method : 함수 수출 기능</span></h2><p><img src="https://i.imgur.com/8uhaWJF.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(age &gt; <span class="number">19</span>)&#123;</div><div class="line">    <span class="comment">//메소드 수출전</span></div><div class="line">    System.out.println(<span class="string">"성인 입니다."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">if</span>(isSenior(age))&#123;</div><div class="line">    <span class="comment">//메소드 수출후</span></div><div class="line">    System.out.println(<span class="string">"성인 입니다."</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isSenior</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> age &gt; <span class="number">19</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>메소드로 수출하는 기능으로 가장 많이 사용하는 리팩토링 기능입니다. 단순히 <code>age &gt; 19</code> 으로 구분하는 것보다 <code>isSenior</code> 메소드를 이용해서 묻는 것이 가독성 및 유지보수에서도 좋다고 생각합니다.<br>저는 테스트 코드를 통과하는 코드를 최대한 빠르게 만들고 인텔리제이의 리팩토링 기능을 통해서 클린코드 작업을 진행합니다.</p><h2><span id="change-signature-메소드-파라메터-추가-삭제-및-변경">Change Signature : 메소드 파라메터 추가, 삭제 및 변경</span></h2><p><img src="https://i.imgur.com/bsAUiSX.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//리팩토링 전</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</div><div class="line">    printName(<span class="string">"Yun"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">printName</span><span class="params">(String firstName)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> firstName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//리팩토링 후</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printName</span><span class="params">()</span> </span>&#123;</div><div class="line">    printName(<span class="string">"Yun"</span>, <span class="string">"kim"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">printName</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> firstName + lastName;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>메소드에 파라미터가 추가되는 일은 빈번하게 만나게 됩니다. 이 때 유용하게 사용할수 있는 기능이 <code>Change Signature</code> 기능입니다.  또한 메소드에 추가된 파라메터는 해당 메소드를 호출하는 곳에 일괄적용 됩니다.</p><h2><span id="rename-이름-변경">Rename : 이름 변경</span></h2><p><img src="https://i.imgur.com/N4RVP73.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    printName(<span class="string">"Yun"</span>, <span class="string">"kim"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//리팩토링전</span></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">printName</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> firstName + lastName;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//리팩토링후</span></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">printFullName</span><span class="params">(String firstName, String lastName)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> firstName + lastName;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>클래스, 메소드, 변수 등등 이름을 변경하는 기능입니다. 정말 많이 사용 하는 기능중에 하나입니다. 이름이 변경되면 참조되는 모든 곳에서 일괄 변경 됩니다.</p><h2><span id="extract-variable-변수-수출-기능">Extract Variable : 변수 수출 기능</span></h2><p><img src="https://i.imgur.com/gIBsKZ8.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 리팩토링 전</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printFullName</span><span class="params">()</span> </span>&#123;</div><div class="line">    printFullName(<span class="string">"Yun"</span>, <span class="string">"kim"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//리팩토링 후</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printFullName</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> String yun = <span class="string">"Yun"</span>;</div><div class="line">    printFullName(yun, <span class="string">"kim"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>특정 값을 변수로 수출하는 기능입니다. 기본적으로 <code>final</code> 키워드로 변수가 할당됩니다.변수는 생각보다 변수보다 상수로 사용을 많이 됩니다. 즉 한번 할당된 값을 변경하는 생각보다 흔하지는 않습니다.  그렇기 때문에 저는 일단 상수로 선언하고 나중에 값을 변경할 이유가 생기면 그때 <code>final</code> 키워드를 제거하는 방향으로 사용하고 있습니다.  <code>final</code> 키워드는 상수로 할당된 값이 변경되지 않는다고 명시적으로 선언함으로써 코드를 이해하는데 좋은 역활을 한다고 생각합니다.</p><h2><span id="extract-filed-맴버-필드-수출-기능">Extract Filed : 맴버 필드 수출 기능</span></h2><p><img src="https://i.imgur.com/OFRC3sm.png" alt=""></p><p>변수 수출 기능과 거의 동일 합니다. 특정 값을 멤버 필드로 할당됩니다.</p><h2><span id="extract-constant">Extract Constant</span></h2><p><img src="https://i.imgur.com/09d6IB8.png" alt=""></p><p>변수 수출 기능과 거의 동일 합니다. 특정 값을 static 영역에 할당합니다.</p><h2><span id="pull-members-up">Pull Members up</span></h2><p><img src="https://i.imgur.com/8UDFcwU.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AttackStrategy</span> </span>&#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MissileStrategy</span> <span class="keyword">implements</span> <span class="title">AttackStrategy</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"미사일 공격"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위와 같은 코드일 경우 <code>attack()</code> 메소드를 상위 인터페이의 추상 메소드로 올리는 기능 입니다. 하위 클래스에서는 <code>@Override</code> 어노테이션이 자동으로 추가됩니다.</p><h2><span id="push-members-down">Push Members down</span></h2><p>Pull Members up 기능의 반대 기능입니다. 상위 클래스의 있는 메소드를 하위 클래스의 메소드로 내려줍니다.</p><h2><span id="결론">결론</span></h2><p>위에서 소개한 기능으로 레거시한 코드들을 리팩토링하는 것은 현실적으로 어렵습니다. 하지만 리팩토링을 너무 거창하고 어렵게 시작하는 것보다 반복 적인 코드를 효과적으로 줄이고 코드를 유지보수 및 가독성 좋은 코드를 작성하는 것도 좋은 리팩토링 이라고 생각합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;인텔리제이-리팩토링-기능&quot;&gt;인텔리제이 리팩토링 기능&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/Dq0m2Pf.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;인텔리제이의 리팩토링 기능을 이용해서 비교적
      
    
    </summary>
    
    
      <category term="IntelliJ" scheme="https://cheese10yun.github.io/tags/IntelliJ/"/>
    
      <category term="Refactoring" scheme="https://cheese10yun.github.io/tags/Refactoring/"/>
    
  </entry>
  
  <entry>
    <title>인텔리제이 JPA Console</title>
    <link href="https://cheese10yun.github.io/intellij-jpa-console/"/>
    <id>https://cheese10yun.github.io/intellij-jpa-console/</id>
    <published>2018-01-22T16:30:46.000Z</published>
    <updated>2018-03-17T15:28:58.162Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/oJqtQpV.gif" alt=""></p><p><strong>JPA를 시작하면서 크게 불편했던 점이 쿼리 실행 결과를 바로바로 확인할 수 없는 점이었는데 <code>IntelliJ JPA Console</code> 기능으로 확인해볼 수 있습니다.</strong></p><h2><span id="database-연동">DataBase 연동</span></h2><h3><span id="data-source">Data Source</span></h3><p><img src="https://i.imgur.com/7Uaibtf.png" alt=""></p><ul><li>사용 중인 데이터베이스를 선택합니다.</li></ul><h3><span id="database-정보-입력">Database 정보 입력</span></h3><p><img src="https://i.imgur.com/Lt9fDab.png" alt=""></p><ul><li><code>Name</code>, <code>Host</code>, <code>Database</code>, <code>User</code>, <code>Password</code>를 입력합니다.</li></ul><h2><span id="jpa-연동">JPA 연동</span></h2><h3><span id="jpa-module-추가">JPA Module 추가</span></h3><p><img src="https://i.imgur.com/hnAQEtJ.png" alt=""></p><ol><li><code>Project Structure</code> 설정</li><li><code>Modules</code> 탭이동</li><li>상단 <code>+</code> 클릭 이후 <code>JPA</code> 추가</li><li>하단 <code>+</code> 클릭 이후 <code>Hibernate</code> 추가</li></ol><h3><span id="persistence-추가">Persistence 추가</span></h3><p><img src="https://i.imgur.com/q8l4Pkr.png" alt=""></p><ol><li>위의 작업을 완료했으면 왼쪽 탭에 <code>Persistence</code> 추가됩니다.</li><li><code>Assign Data Sources….</code>를 클릭합니다.</li><li><code>Assign Data Sources</code> 에서 <code>Data Source</code> 항목에 위에 추가해 <code>Data Source</code> 항목을 추가합니다.</li></ol><h2><span id="jpa-console">JPA Console</span></h2><h3><span id="jpa-console-연결">JPA Console 연결</span></h3><p><img src="https://i.imgur.com/230LRUi.png" alt=""></p><ol><li><code>entityManagerFactory</code>를 클릭합니다.</li><li><code>Console</code>를 클릭합니다.</li><li><code>JPA Console</code>를 선택합니다.</li></ol><h3><span id="query">Query</span></h3><p><img src="https://i.imgur.com/oJqtQpV.gif" alt=""><br>JPQL 쿼리를 통해서 결과를 출력했습니다. 다음 포스팅에는 구체적인 사용법을 진행해 보겠습니다</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/oJqtQpV.gif&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JPA를 시작하면서 크게 불편했던 점이 쿼리 실행 결과를 바로바로 확인할 수 없는 점이었는데 &lt;code&gt;IntelliJ JPA 
      
    
    </summary>
    
    
      <category term="IntelliJ" scheme="https://cheese10yun.github.io/tags/IntelliJ/"/>
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="JPA Console" scheme="https://cheese10yun.github.io/tags/JPA-Console/"/>
    
  </entry>
  
  <entry>
    <title>인텔리제이로 Builder Pattern 쉽게 구현하기</title>
    <link href="https://cheese10yun.github.io/intellij-builder-pattern/"/>
    <id>https://cheese10yun.github.io/intellij-builder-pattern/</id>
    <published>2018-01-17T16:25:21.000Z</published>
    <updated>2018-03-17T05:47:41.877Z</updated>
    
    <content type="html"><![CDATA[<p>이미 많은 분들이 빌더 패턴 관련해서 포스팅을 잘 정리해주셔서 빌더 패턴에 대해서 설명 해주기 보다는 인텔리제이 플러그인을 활용해서 좀 쉽게 사용할 수 있는 팁을 포스팅을 해보겠습니다.<br>물론 Lombok을 활용해서 빌더를 손쉽게 사용할 수있지만 Lombok을 사용하지 않고도 쉽게 만들 수 있는 방법을 소개해드리겠습니다.</p><h2><span id="builder-generator-플러그인-설치">Builder Generator 플러그인 설치</span></h2><p><img src="https://i.imgur.com/qlSmnIG.png" alt=""></p><p><strong>Preferences -&gt; Plugins -&gt; Browse Repositories -&gt; Builder Generator 검색 및 설치</strong></p><h2><span id="빌더클래스-생성-방법">빌더클래스 생성 방법</span></h2><p><img src="https://i.imgur.com/vj6km1L.gif" alt=""></p><ul><li><code>command + n</code> 키를 눌러 Builder 를 선택합니다.</li><li>위 화면처럼 Builder 클래스를 생성합니다.</li></ul><h2><span id="빌더-패턴-간단-소개">빌더 패턴 간단 소개</span></h2><h3><span id="member-객체">Member 객체</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name; <span class="comment">//mandatory</span></div><div class="line">    <span class="keyword">private</span> String email; <span class="comment">//mandatory</span></div><div class="line">    <span class="keyword">private</span> String mobile; <span class="comment">//optional</span></div><div class="line">    <span class="keyword">private</span> String address; <span class="comment">//optional</span></div><div class="line">    <span class="keyword">private</span> String password; <span class="comment">//optional</span></div><div class="line">    <span class="keyword">private</span> String state; <span class="comment">//optional</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">//optional</span></div><div class="line"></div><div class="line">    <span class="comment">//Getter, Setter, Constructor</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="문제점">문제점</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Member member = <span class="keyword">new</span> Member(name, email, mobile ....)</div></pre></td></tr></table></figure><ul><li>객체를 생성할 때 어떤 값이 필수 값인지 옵션 값인지 인지 하기 어렵다.</li><li><code>Member member = new Member(name, email, mobile ....)</code> 생성자로 객체를 생성 할 경우 반드시 순서를 맞추야 한다.</li><li><code>Setter</code>로 생성할 경우 Setter 메소드를 많이 작성해야한다.</li></ul><h3><span id="해결">해결</span></h3><ul><li>빌더 패턴을 사용해서 필수 값은 생성자로 옵션 값은 빌더 클래스로 작성한다.</li></ul><h3><span id="memberbuilderclass">MemberBuilder.class</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberBuilder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name; <span class="comment">//mandatory</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String email; <span class="comment">//mandatory</span></div><div class="line">    <span class="keyword">private</span> String mobile; <span class="comment">//optional</span></div><div class="line">    <span class="keyword">private</span> String address; <span class="comment">//optional</span></div><div class="line">    <span class="keyword">private</span> String password; <span class="comment">//optional</span></div><div class="line">    <span class="keyword">private</span> String state; <span class="comment">//optional</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">//optional</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">MemberBuilder</span><span class="params">(String name, String email)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.email = email;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MemberBuilder <span class="title">aMember</span><span class="params">(String name, String email)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MemberBuilder(name, email);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> MemberBuilder <span class="title">withMobile</span><span class="params">(String mobile)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mobile = mobile;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> MemberBuilder <span class="title">withAddress</span><span class="params">(String address)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.address = address;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> MemberBuilder <span class="title">withPassword</span><span class="params">(String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> MemberBuilder <span class="title">withState</span><span class="params">(String state)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.state = state;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> MemberBuilder <span class="title">withAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">build</span><span class="params">()</span> </span>&#123;</div><div class="line">        Member member = <span class="keyword">new</span> Member();</div><div class="line">        member.setName(name);</div><div class="line">        member.setEmail(email);</div><div class="line">        member.setMobile(mobile);</div><div class="line">        member.setAddress(address);</div><div class="line">        member.setPassword(password);</div><div class="line">        member.setState(state);</div><div class="line">        member.setAge(age);</div><div class="line">        <span class="keyword">return</span> member;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>필수 맴버 필드인 <code>name, email</code>에 <code>final</code>을 추가합니다.</li><li>생성자 파라미터에 <code>name, email</code> 추가합니다.</li><li>자동으로 만들어준 <code>name, email</code>의 <code>with</code> 메소드를 제거 합니다.</li></ul><h3><span id="객체-생성">객체 생성</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Member member = MemberBuilder</div><div class="line">                .aMember(<span class="string">"Yun"</span>, <span class="string">"cheese10yun@gmail.com"</span>)</div><div class="line">                .withAddress(<span class="string">"address"</span>)</div><div class="line">                .withAge(<span class="number">20</span>)</div><div class="line">                .withMobile(<span class="string">"010-XXXX-XXXX"</span>)</div><div class="line">                .build();</div></pre></td></tr></table></figure><p><img src="https://i.imgur.com/lNLW4dh.png" alt=""></p><ul><li>필수 값은 생성자로 넘겨 필수 값을 넘겨 필수 값을 인지 하기 쉽습니다.</li><li>옵션 값들은 순서에 상관 없이 .<code>with...()</code> 메소드로 이어나갑니다.</li></ul><h2><span id="결론">결론</span></h2><p>객체를 안전하게 생성하고 쉽게 생성할 수 있다는 장점이 있습니다. 개념도 그렇게 어렵지 않아 가장 만만하게 도입해 볼만한 디자인 패턴인거 같습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이미 많은 분들이 빌더 패턴 관련해서 포스팅을 잘 정리해주셔서 빌더 패턴에 대해서 설명 해주기 보다는 인텔리제이 플러그인을 활용해서 좀 쉽게 사용할 수 있는 팁을 포스팅을 해보겠습니다.&lt;br&gt;
물론 Lombok을 활용해서 빌더를 손쉽게 사용할 수
      
    
    </summary>
    
    
      <category term="IntelliJ" scheme="https://cheese10yun.github.io/tags/IntelliJ/"/>
    
      <category term="Builder Pattern" scheme="https://cheese10yun.github.io/tags/Builder-Pattern/"/>
    
  </entry>
  
  <entry>
    <title>JPA n+1 문제</title>
    <link href="https://cheese10yun.github.io/n-1/"/>
    <id>https://cheese10yun.github.io/n-1/</id>
    <published>2017-12-02T18:13:04.000Z</published>
    <updated>2018-03-17T05:47:09.766Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="jpa-n-1-문제">JPA N + 1 문제</span></h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> o.* m.*</div><div class="line"><span class="keyword">from</span> <span class="keyword">Order</span> o</div><div class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> <span class="keyword">Member</span> m <span class="keyword">on</span> o.MEMBER_ID=m.MEMBER_ID</div><div class="line"><span class="keyword">where</span> o.id =<span class="number">1</span></div></pre></td></tr></table></figure><ul><li>실행된 SQL을 보면 즉시 로딩으로 설정한 member 엔티티를 조인 쿼리로 함꼐 조회한다. 여기까지 보면 글로벌 즉시 로딩 전략이 상당히 좋아보이지만 문제는 JPQL을 사용할 때 발생한다.</li><li>위처럼 즉시 로딩으로 설정했다고 가정하고 JPQL로 조회 해보자</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;Order&gt; orders = em.createQuery(<span class="string">"select o from Order o"</span>, Order.class)</div><div class="line">.getResultList(); <span class="comment">// 연과된 모든 엔티티를 조회한다.</span></div></pre></td></tr></table></figure><ul><li>실행된 SQL은 다음과 같다.</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">Order</span> // JPQL로 실행된 <span class="keyword">SQL</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">Member</span> <span class="keyword">where</span> <span class="keyword">id</span> = ? // EAGER 로 실행된 <span class="keyword">SQL</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">Member</span> <span class="keyword">where</span> <span class="keyword">id</span> = ? // EAGER 로 실행된 <span class="keyword">SQL</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">Member</span> <span class="keyword">where</span> <span class="keyword">id</span> = ? // EAGER 로 실행된 <span class="keyword">SQL</span></div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">Member</span> <span class="keyword">where</span> <span class="keyword">id</span> = ? // EAGER 로 실행된 <span class="keyword">SQL</span></div></pre></td></tr></table></figure><p><strong>JPA가 JPQL을 분석해서 SQL을 생헐 할 때 글로벌 패치 전략을 참고하지 않고 오직 JPQL 자체만 사용한다.</strong> 따라서 즉시 로딩이든 지연 로딩이든 구분하지 않고 JPQL 쿼리 자체에 충실하게 SQL을 만든다.<br>코드를 분석하먄 내부에서 다음과 같은 순서로 동작한다.</p><ol><li><code>select o from Order o</code> JPQL을 분석해서 <code>select * from Order</code> SQL을 생성한다.</li><li>데이터베이스에서 결과를 받아 order 엔티티 인스턴스를 생성한다.</li><li>Order.member의 글로벌 페지 전략이 즉시 로딩이므로 order를 로딩히는 즉시 연관된 member로 로딩해야한다.</li><li>연관된 Member를 영속성 컨텍스트에서 찾는다.</li><li>만약 영속성 컨텍스트에 없으면 <code>select * from member where id?</code> SQL을 조회한 order 엔티티 수만큼 실행한다.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;jpa-n-1-문제&quot;&gt;JPA N + 1 문제&lt;/span&gt;&lt;/h1&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="spring" scheme="https://cheese10yun.github.io/tags/spring/"/>
    
      <category term="N+1" scheme="https://cheese10yun.github.io/tags/N-1/"/>
    
  </entry>
  
  <entry>
    <title>Package.json 파일로 API 버전 설정</title>
    <link href="https://cheese10yun.github.io/packageFile-API/"/>
    <id>https://cheese10yun.github.io/packageFile-API/</id>
    <published>2017-10-13T16:31:24.000Z</published>
    <updated>2018-03-17T05:45:58.474Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="프로젝트-구성">프로젝트 구성</span></h2><p><code>package.json</code> 파일로 API URL을 설정하는 간단한 방법을 포스팅 해보겠습니다.</p><p><img src="https://i.imgur.com/cNL3e5B.png" alt=""></p><p>기본 프로젝트 구성은 WebStorm 으로 Node 프로젝트를 생성한 구조 입니다.</p><h2><span id="pacakgejson-파일">pacakge.json 파일</span></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"api-version"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"node ./bin/www"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>npm</code> 의존성 모듈을 관리하는 <code>pacakge.json</code> 내용입니다. 해당 내용을 보시면 <code>version</code> 이라는 항목이 있습니다. 해당 프로젝트의 버전을 표시하는 정보이며 초기 설정은 <code>0.0.0</code> 입니다. 이 <code>version</code> 을 활용하여 URI path의 API 버전 설정을 진행하겠습니다.</p><h2><span id="appjs">app.js</span></h2><p>프로젝트 구조에 따라 다소 차이가 있겠지만 각종 라운팅 설정 및 미들웨어 설정하는 <code>.js</code> 파일에서 설정을 진행하겠습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> packageFile = <span class="built_in">require</span>(<span class="string">'./package.json'</span>);</div><div class="line"><span class="keyword">const</span> API_VERSION = packageFile.version.split(<span class="string">'.'</span>).shift();</div><div class="line"><span class="keyword">const</span> BASE_URL = <span class="string">`/api/v<span class="subst">$&#123;API_VERSION&#125;</span>`</span>;</div></pre></td></tr></table></figure><ul><li>packageFile을 require 합니다.</li><li>API_VERSION 변수에 <code>package.json</code> 파일의 version 정보 최상단 앞자리만 가져옵니다.</li><li>BASE_URL 변수에 API 버전 정보를 할당합니다.</li></ul><h2><span id="middleware-적용">middleware 적용</span></h2><h3><span id="기존-middleware">기존 middleware</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="string">'/'</span>, index);</div><div class="line">app.use(<span class="string">'/users'</span>, users);</div></pre></td></tr></table></figure><h3><span id="변경-middleware">변경 middleware</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="string">`<span class="subst">$&#123;BASE_URL&#125;</span>/`</span>, index);</div><div class="line">app.use(<span class="string">`<span class="subst">$&#123;BASE_URL&#125;</span>/users`</span>, users);</div></pre></td></tr></table></figure><ul><li>위에서 만든 변수 <code>BASE_URL</code>를 활용해서 미들웨어 URL 을 변경합니다.</li></ul><p><img src="https://i.imgur.com/4j8x1TW.png" alt=""></p><ul><li>정상적으로 작동합니다.</li></ul><h2><span id="api-버전-변경">API 버전 변경</span></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"api-version"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"node ./bin/www"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>package.json 의 version 을 변경하면 BASE_URL 가 변경되어 URL 이 변경됩니다.</li></ul><h2><span id="마무리">마무리</span></h2><p>사실 평소에는 <code>package.json</code> version 정보를 전혀 사용하지 않다가 LoopBack 프레임워크에서 위와 같은 방법으로 API 버전 관리를 하는 것을 보고 포스팅을 해보았습니다. 다른 분들은 어떻게 API 버전 관리를 하는지는 잘 모르겠지만 꽤 직관적이며 쉽게 적용 가능한 부분이라고 생각이 듭니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;프로젝트-구성&quot;&gt;프로젝트 구성&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; 파일로 API URL을 설정하는 간단한 방법을 포스팅 해보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.img
      
    
    </summary>
    
      <category term="Node" scheme="https://cheese10yun.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="API" scheme="https://cheese10yun.github.io/tags/API/"/>
    
      <category term="Package" scheme="https://cheese10yun.github.io/tags/Package/"/>
    
  </entry>
  
  <entry>
    <title>Loopback 게시판 만들기 (1)</title>
    <link href="https://cheese10yun.github.io/loopback-board/"/>
    <id>https://cheese10yun.github.io/loopback-board/</id>
    <published>2017-05-26T15:00:00.000Z</published>
    <updated>2018-03-17T05:47:31.211Z</updated>
    
    <content type="html"><![CDATA[<p>Loopback 으로 게시판을 만드는 프로젝트를 진행하겠습니다. 앞선 포스팅에서 설명 드렸다시피 Loopback은 정말 빠르게 REST API를 만들어 낼 수 있습니다. 회원 가입, 로그인, 로그아웃, ACL, 설정 등 매번 구현해야 하는 귀찮은 로직들을 내부 Model을 사용해서 빠르게 만들 수 있습니다. 하지만 이렇게 말로 설명해 드리는 것보다 웹에 가장 간단한 게시판으로 포스팅을 진행하겠습니다.</p><h2><span id="github">GitHub</span></h2><p><strong><em>프로젝트 소스는 <a href="https://github.com/cheese10yun/loopback-boards" rel="external nofollow noopener noreferrer" target="_blank">Loopback Baord</a> 여기서 확인해주세요</em></strong></p><h2><span id="loopback-설치">Loopback 설치</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g loopback-cli</div></pre></td></tr></table></figure><h2><span id="게시판-프로젝트-생성">게시판 프로젝트 생성</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ lb</div><div class="line">? 애플리케이션 이름은 무엇입니까? loopback-board</div><div class="line">? 프로젝트를 포함시킬 디렉토리 이름 입력: loopback-board</div><div class="line">   create loopback-board/</div><div class="line">     info 작업 디렉토리를 loopback-board(으)로 번경</div><div class="line"></div><div class="line">? 사용하려는 LoopBack 버전은 무엇입니까? 3.x (current)</div><div class="line">? 예상하는 애플리케이션 종류는 무엇입니까? api-server (A LoopBack API server with local User auth)</div></pre></td></tr></table></figure><ul><li>터미널에서 원하시는 디렉토리 이동 이후 lb 명령어를 입력하고 프로젝트 설정을 이어 갑니다.</li><li>버전은 최신 버전 3.X 버전을 선택합니다.</li><li>애플리케이션 종류로는 <code>api-server (A LoopBack API server with local User auth)</code>를 택합니다.</li><li>해당 종류를 택하면 내부 <code>User</code> 기반으로 로그인, 로그아웃, 회원 가입 등등 로직을 구현 해줍니다.</li></ul><h2><span id="데이터베이스-연결">데이터베이스 연결</span></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"db"</span>: &#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"db"</span>,</div><div class="line">    <span class="attr">"connector"</span>: <span class="string">"memory"</span>,</div><div class="line">    <span class="attr">"file"</span>: <span class="string">"memoryDBFile"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>datasources.json</code> 파일에 위의 내용을 추가합니다.</li><li>본 포스팅에서는 설치 없이 사용할수 있는 메모리 <code>In-memory db</code>를 이용하겠습니다.</li><li>데이터베이스를 <code>memoryDBFile</code> 파일에 저장하여 <code>In-memory db</code>를 편리하게 사용할 수 있습니다.</li></ul><h2><span id="게시판-모델-생성">게시판 모델 생성</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">? 모델 이름 입력: board</div><div class="line">? board을(를) 첨부할 데이터 소스 선택: db (memory)</div><div class="line">? 모델 기본 클래스 선택 PersistedModel</div><div class="line">? REST API를 통해 board을(를) 공개합니까? Yes</div><div class="line">? 사용자 정의 복수형 양식(REST URL 빌드에 사용됨):</div><div class="line">? 공통 모델 또는 서버만 해당? 공통</div><div class="line">지금 일부 board 특성을 추가하십시오.</div><div class="line"></div><div class="line">완료된 경우 비어 있는 특성 이름을 입력하십시오.</div><div class="line">? 특성 이름: title</div><div class="line">   invoke   loopback:property</div><div class="line">? 특성 유형: string</div><div class="line">? 필수 여부 Yes</div><div class="line">? 기본값[없는 경우 공백으로 두기]:</div><div class="line"></div><div class="line">다른 board 특성을 추가하십시오.</div><div class="line">완료된 경우 비어 있는 특성 이름을 입력하십시오.</div><div class="line">? 특성 이름: content</div><div class="line">   invoke   loopback:property</div><div class="line">? 특성 유형: string</div><div class="line">? 필수 여부 Yes</div></pre></td></tr></table></figure><ul><li>Loppback의 핵심 개념인 Model을 생성합니다.</li><li>위에서 설정한 <code>db</code>를 선택합니다.</li><li>기타 설정들은 위의 예시와 동일하게 설정합니다.</li><li>위의 작업을 진행하면 <code>board.json</code>의 <code>properties</code> 항목에 추가 됩니다.</li></ul><h3><span id="boardjson">board.json</span></h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">....</div><div class="line">"properties": &#123;</div><div class="line">  "title": &#123;</div><div class="line">    "type": "string",</div><div class="line">    "required": true</div><div class="line">  &#125;,</div><div class="line">  "content": &#123;</div><div class="line">    "type": "string",</div><div class="line">    "required": true</div><div class="line">  &#125;,</div><div class="line">  "createdDt": &#123;</div><div class="line">    "type": "date",</div><div class="line">    "required": false,</div><div class="line">    "description": "생성 날짜",</div><div class="line">    "defaultFn": "now"</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure><ul><li>위에서 작성한 <code>title</code>, <code>content</code> 프로퍼티가 추가되었습니다.</li><li>모델을 생성할 때 프로퍼티를 생성할 수 있고, 직접 해당 모델의 json 파일에 작성할 수 있습니다.</li><li><code>createdDt</code> 프로퍼티는 직접 작성합니다.</li><li><code>&quot;defaultFn&quot;: &quot;now&quot;</code> 옵션을 주면 현재 시간이 자동으로 입력됩니다.</li></ul><h2><span id="게시판-acl-설정">게시판 ACL 설정</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ lb acl</div><div class="line">? ACL 항목을 적용할 모델 선택: (all existing models)</div><div class="line">? ACL 범위 선택: 모든 메소드 및 특성</div><div class="line">? 액세스 유형 선택: All (match all types)</div><div class="line">? 역할 선택 All users</div><div class="line">? 적용할 권한 선택 Explicitly deny access</div></pre></td></tr></table></figure><ul><li>Loopback은 ACL 설정도 간편합니다.</li><li><code>lb acl</code> 명령어로 작업을 진행합니다.</li><li>위 설정은 모든 모델에 대한 ACL 거부하는 설정입니다.</li><li>일단 막아 놓고 하나하나 풀어주는게 보안에 안전합니다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ lb acl</div><div class="line">? ACL 항목을 적용할 모델 선택: board</div><div class="line">? ACL 범위 선택: 모든 메소드 및 특성</div><div class="line">? 액세스 유형 선택: Read</div><div class="line">? 역할 선택 All users</div><div class="line">? 적용할 권한 선택 Explicitly grant access</div></pre></td></tr></table></figure><ul><li><code>board</code>에 대한 ACL 설정을 진행합니다.</li><li>모든 사용자는 <code>board</code>를 읽을 수 있습니다.</li><li>로그인하지 않은 사용자도 게시글을 볼 수 있게하는 설정입니다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ lb acl</div><div class="line">? ACL 항목을 적용할 모델 선택: board</div><div class="line">? ACL 범위 선택: 단일 메소드</div><div class="line">? 메소드 이름 입력 create</div><div class="line">? 역할 선택 Any authenticated user</div><div class="line">? 적용할 권한 선택 Explicitly grant access</div></pre></td></tr></table></figure><ul><li>로그인한 사용자만이 <code>board</code>를 작성할 수 있습니다.</li></ul><h2><span id="게시판-acl-설정-코드">게시판 ACL 설정 코드</span></h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">"acls": [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"accessType"</span>: <span class="string">"*"</span>,</div><div class="line">      <span class="attr">"principalType"</span>: <span class="string">"ROLE"</span>,</div><div class="line">      <span class="attr">"principalId"</span>: <span class="string">"$everyone"</span>,</div><div class="line">      <span class="attr">"permission"</span>: <span class="string">"DENY"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"accessType"</span>: <span class="string">"EXECUTE"</span>,</div><div class="line">      <span class="attr">"principalType"</span>: <span class="string">"ROLE"</span>,</div><div class="line">      <span class="attr">"principalId"</span>: <span class="string">"$authenticated"</span>,</div><div class="line">      <span class="attr">"permission"</span>: <span class="string">"ALLOW"</span>,</div><div class="line">      <span class="attr">"property"</span>: <span class="string">"create"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"accessType"</span>: <span class="string">"READ"</span>,</div><div class="line">      <span class="attr">"principalType"</span>: <span class="string">"ROLE"</span>,</div><div class="line">      <span class="attr">"principalId"</span>: <span class="string">"$everyone"</span>,</div><div class="line">      <span class="attr">"permission"</span>: <span class="string">"ALLOW"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"accessType"</span>: <span class="string">"WRITE"</span>,</div><div class="line">      <span class="attr">"principalType"</span>: <span class="string">"ROLE"</span>,</div><div class="line">      <span class="attr">"principalId"</span>: <span class="string">"$owner"</span>,</div><div class="line">      <span class="attr">"permission"</span>: <span class="string">"ALLOW"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">...</div></pre></td></tr></table></figure><ul><li>위의 ACL 작업을 진행하면 <code>board.json</code> 파일에 <code>&quot;acls&quot;</code> 위와 같이 추가된것을 확인할 수 있습니다.</li><li><code>&quot;accessType&quot;: &quot;WRITE&quot;,</code>은 수동으로 작성합니다.</li><li>해당 조건은 해당 글의 소유자만이 접근할 수 있는 설정입니다.</li><li>해당 글에 수정, 삭제에 관련 ACL 설정으로 보시면 편합니다.</li></ul><h2><span id="회원-가입">회원 가입</span></h2><p><img src="http://i.imgur.com/Enk0Eic.png" alt=""></p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"username"</span>: <span class="string">"yun"</span>,</div><div class="line">  <span class="attr">"email"</span>: <span class="string">"yun@test.com"</span>,</div><div class="line">  <span class="attr">"password"</span>:<span class="string">"123123"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>해당 회원 가입을 Swagger 문서를 통해서 진행합니다.</li></ul><h2><span id="로그인">로그인</span></h2><p><img src="http://i.imgur.com/tHepa6F.png" alt=""></p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"email"</span>: <span class="string">"yun@test.com"</span>,</div><div class="line">  <span class="attr">"password"</span>:<span class="string">"123123"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>로그인에 성공하면 AccessToken 값을 리턴 받습니다.</li><li>상단의 토큰 화면에 이 값을 입력합니다.</li></ul><h2><span id="게시글-작성">게시글 작성</span></h2><p><img src="http://i.imgur.com/G60l3fm.png" alt=""></p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"title"</span>: <span class="string">"게시글"</span>,</div><div class="line">  <span class="attr">"content"</span>: <span class="string">"내용 블라...."</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="비-로그인-사용자가-게시글을-작성할-경우">비 로그인 사용자가 게시글을 작성할 경우</span></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"error"</span>: &#123;</div><div class="line">    <span class="attr">"statusCode"</span>: <span class="number">401</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"Error"</span>,</div><div class="line">    <span class="attr">"message"</span>: <span class="string">"Authorization Required"</span>,</div><div class="line">    <span class="attr">"code"</span>: <span class="string">"AUTHORIZATION_REQUIRED"</span>,</div><div class="line">    <span class="attr">"stack"</span>: <span class="string">"Error: Authorization Required..."</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>접근권한에 대한 에러 메세지를 포함하여 <code>statusCode</code> 401를 리턴 합니다.</li></ul><h2><span id="게시글-조회">게시글 조회</span></h2><p><img src="http://i.imgur.com/8Klt8zq.png" alt=""></p><h2><span id="마무리">마무리</span></h2><p>Loopback을 통해서 정말 간단하게 게시판을 만들어 보았습니다. 처음 Loopback을 공부할때는 <code>In-memory DB</code>를 추천합니다. 별다른 설정없이 데이터베이스 설정을 완료 할수 있습니다. 또한 ORM을 지원하기 때문에 이후에 다른 데이터베이스로 크게 무리 없이 변경 가능합니다. 앞으로도 Loopback 관련된 주제를 포스팅 진행해보겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Loopback 으로 게시판을 만드는 프로젝트를 진행하겠습니다. 앞선 포스팅에서 설명 드렸다시피 Loopback은 정말 빠르게 REST API를 만들어 낼 수 있습니다. 회원 가입, 로그인, 로그아웃, ACL, 설정 등 매번 구현해야 하는 귀찮은
      
    
    </summary>
    
      <category term="LoopBack" scheme="https://cheese10yun.github.io/categories/LoopBack/"/>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="JavaScript" scheme="https://cheese10yun.github.io/tags/JavaScript/"/>
    
      <category term="LoopBack" scheme="https://cheese10yun.github.io/tags/LoopBack/"/>
    
  </entry>
  
  <entry>
    <title>Loopback 시작하기</title>
    <link href="https://cheese10yun.github.io/loopback-begin/"/>
    <id>https://cheese10yun.github.io/loopback-begin/</id>
    <published>2017-05-04T15:00:00.000Z</published>
    <updated>2018-03-17T05:47:31.206Z</updated>
    
    <content type="html"><![CDATA[<p>최근 이직을 하게 되어 이렇게 오랜만에 포스팅하게 되었습니다. 바쁘다는 핑계로 미루다 보면 계속 못할 거 같아 많은 준비는 못 했지만 이번 회사에서 처음 접하게 된 Loopback Framework를 간단하게 정리하겠습니다.</p><p><strong>공식 문서에 상세한 내용이 나와 있어 이론보다는 실습 위주로 설명하겠습니다 1개월 정도밖에 사용해보지 않은 프레임워크라 이론적인 측면을 자세히 설명하기가 어려운 점이 있습니다.</strong></p><h3><span id="loopback-특징">Loopback 특징</span></h3><ul><li>정말 빠르게 REST API를 만들수 있습니다.</li><li>기본적으로 API Document를 Swagger 만들어줍니다.</li><li>CLI를 통해서 편리하게 모델 생성, 정의 접근 권한 등등 작업을 진행할 수 있습니다.</li><li>다양한 데이터베이스를 ORM으로 쉽게 관리할 수 있습니다.</li></ul><h3><span id="loopback-설치">Loopback 설치</span></h3><ul><li>기본적으로 Node, NPM이 설치되있는 환경이라 가정하겠습니다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g loopback-cli</div></pre></td></tr></table></figure><h3><span id="hello-world-프로젝트-설정">Hello world 프로젝트 설정</span></h3><p><strong>루프백의 기초적인 특징을 알아보겠습니다.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ lb</div><div class="line">? 애플리케이션 이름은 무엇입니까? hello-world</div><div class="line">? 프로젝트를 포함시킬 디렉토리 이름 입력: hello-world</div><div class="line">  create hello-world/</div><div class="line">    info 작업 디렉토리를 hello-world(으)로 번경</div><div class="line"></div><div class="line">? 사용하려는 LoopBack 버전은 무엇입니까? 3.x (current)</div><div class="line">? 예상하는 애플리케이션 종류는 무엇입니까? hello-world (A project containing a controller, includi</div><div class="line">ng a single vanilla Message and a single remote method)</div></pre></td></tr></table></figure><ul><li>터미널에서 원하시는 디렉토리 이동 이후 lb 명령어를 입력하고 프로젝트 설정을 이어 갑니다.</li><li>프러젝트 이름, 디렉토리 이름 등 간단하게 설정합니다.</li><li>버전은 3.x 최신 버전을 선택합니다.</li><li>예상하는 애플리케이션 종류는  hello-world를 선택합니다.</li></ul><h3><span id="hello-world-프로젝트-실행">Hello world 프로젝트 실행</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> hello-world/</div><div class="line">$ node .</div></pre></td></tr></table></figure><ul><li>위에서 <code>CLI</code>로 생성한 프로젝트 디렉토리로 이동합니다.</li><li><code>node .</code> 명령어로 프로젝트를 실행 합니다.</li><li><code>http://0.0.0.0:3000/explorer</code>로 이동합니다.</li><li>API Document <code>Swagger</code>가 정상적으로 출력되면 아래 그림과 같습니다.</li></ul><h3><span id="api-document">API Document</span></h3><p><img src="http://i.imgur.com/D9cINil.png" alt=""></p><ul><li>Loopback 기본 <code>User</code>모델을 기반으로 User API를 만들어 줍니다.</li><li>User API는 회원 가입, 로그인, 로그아웃, 회원 정보 수정, 등등 User에 대한 REST API가 있습니다.</li></ul><h4><span id="post-users-회원-가입">POST /Users (회원 가입)</span></h4><p><img src="http://i.imgur.com/ako0hjq.png" alt=""></p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"realm"</span>: <span class="string">"string"</span>,</div><div class="line">  <span class="attr">"username"</span>: <span class="string">"loopback"</span>,</div><div class="line">  <span class="attr">"email"</span>: <span class="string">"loopback@loopback.com"</span>,</div><div class="line">  <span class="attr">"password"</span>: <span class="string">"loopback"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>data</code>에 JSON 타입으로 해당 데이터를 입력합니다.</li><li><strong><em>기본설정인 In-memory db에 저장됩니다.</em></strong></li></ul><h4><span id="post-userslogin-로그인">POST /Users/login (로그인)</span></h4><p><img src="http://i.imgur.com/0W8k2M9.png" alt=""></p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"email"</span>: <span class="string">"loopback@loopback.com"</span>,</div><div class="line">  <span class="attr">"password"</span>: <span class="string">"loopback"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>credentials</code> 위에서 가입한 email, password 정보를 JSON 타입으로 입력합니다.</li><li>회원 정보가 일치할 경우 <code>Response Body</code>에 <code>AccessToekn</code> 정보를 넘겨 줍니다.</li><li><code>AccessToekn.id</code>의 값 <code>KIjxd....</code>을 오른쪽 상단 ToKen Set에 입력합니다.</li><li>loopback에서는 기본적으로 인증처리를 AccessToekn 방식으로 지원합니다.</li><li><code>AccessToekn</code> 모델 또한 Loopback의 기본 제공 모델중 하나입니다.</li></ul><h4><span id="get-usersid-해당-회원-조회">GET /Users/{id} (해당 회원 조회)</span></h4><p><img src="http://i.imgur.com/gWBT25M.png" alt=""></p><ul><li><code>id</code> 파라마터에 <code>AccessToekn</code>에서 발급 받은 <code>userId</code>를 입력합니다.</li><li>자신의 정보를 조회할 수 있습니다.</li><li>자신의 이외의 회원 정보를 조회할 경우 아래와 같은 <code>StatusCode</code> 401를 리턴 받습니다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"error"</span>: &#123;</div><div class="line">    <span class="attr">"statusCode"</span>: <span class="number">401</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"Error"</span>,</div><div class="line">    <span class="attr">"message"</span>: <span class="string">"권한 필수"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="결론">결론</span></h3><p>루프백에서 기본적으로 모델을 생성하고 모델 간의 관계를 정의하면 기본적인 CURD REST API를 자동으로 만들어 줍니다. 또한, Swagger를 이용해서 API Document 또한 자동으로 만들어 주어 정말 빠르게 API를 개발할 수 있게 해줍니다. 또 특정 API에 대한 접근 권한 및 인증 처리도 정말 간단하게 이루어지고, 이 밖에도 다양한 장점들로 빠르게 계발할 수 있도록 도와줍니다. 이러한 장점들을 한 번에 소개하기는 힘들어 해당 파트 마다 소개를 이어 나갈 거 같습니다. 오늘 포스팅한 내용은 부실하지만 이렇게라도 시작을 하지 않으면 계속 늦어질 거 같아 빠르게 정리해보았습니다. 앞으로는 간단한 게시판을 만들면서 Loopback의 장점들을 소개할 예정입니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;최근 이직을 하게 되어 이렇게 오랜만에 포스팅하게 되었습니다. 바쁘다는 핑계로 미루다 보면 계속 못할 거 같아 많은 준비는 못 했지만 이번 회사에서 처음 접하게 된 Loopback Framework를 간단하게 정리하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;str
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="JavaScript" scheme="https://cheese10yun.github.io/tags/JavaScript/"/>
    
      <category term="LoopBack" scheme="https://cheese10yun.github.io/tags/LoopBack/"/>
    
  </entry>
  
  <entry>
    <title>AWS S3 업로드시 이미지 최적화</title>
    <link href="https://cheese10yun.github.io/aws-s3-imgage/"/>
    <id>https://cheese10yun.github.io/aws-s3-imgage/</id>
    <published>2017-03-03T15:00:00.000Z</published>
    <updated>2018-03-17T05:48:00.745Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>AWS S3 이미지 업로드시 이미지 최적화를 진행하고 업로드하는 것이 브라우저에서의 속도가 크게 도움이 됩니다.</em></strong> <code>formidable</code> 업로드 , <code>AWS-S3</code> 업로드는 이 전 포스팅에서 한번 다뤘기 때문에 간단하게 설명하고 이미지 최적화 적업에 대해서 자세히 포스팅하겠습니다.<br><strong><em><a href="https://github.com/cheese10yun/AWS_S3_Image_Optimization_" rel="external nofollow noopener noreferrer" target="_blank">Github</a>클릭해서 전체 소스를 보시는 것을 권장합니다.</em></strong></p><h2><span id="작업순서">작업순서</span></h2><ol><li><code>formidable</code> 모듈로 이미지 업로드 진행</li><li><code>imagemin</code> 모듈로 업로드된 이미지 최적화 진행</li><li><code>aws-sdk</code> 모듈을로 최적화 작업이 완료된 이미지 S3에 업로드</li></ol><h2><span id="필수-패키지-설치">필수 패키지 설치</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install --save async</div><div class="line">npm install --save aws-sdk</div><div class="line">npm install --save imagemin</div><div class="line">npm install --save imagemin-pngquant</div><div class="line">npm install --save formidable</div></pre></td></tr></table></figure><h2><span id="uploadservicejs-설명">UploadService.js 설명</span></h2><h3><span id="formidable-모듈을-이용한-이미지-업로드">formidable 모듈을 이용한 이미지 업로드</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Upload.formidable = <span class="function">(<span class="params">req, callback</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">let</span> _fields;</div><div class="line"></div><div class="line">  form.parse(req, <span class="function"><span class="keyword">function</span> (<span class="params">err, fields</span>) </span>&#123;</div><div class="line">    _fields = fields;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  form.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    callback(err, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  form.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    callback(<span class="literal">null</span>, <span class="keyword">this</span>.openedFiles, _fields);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ul><li><code>form.on('error')</code> formidable 업로드 중 오류 발생시 <code>callback</code>으로 <code>err</code> 전달</li><li><code>form.on('end')</code> formidable 업로드가 오류 없이 완료되면 <code>callback</code>으로 파일정보와, 필드값 전달</li></ul><h3><span id="imagemin-모듈을-이용한-이미지-최적화">imagemin 모듈을 이용한 이미지 최적화</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Upload.optimize = <span class="function">(<span class="params">files, callback</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">async</span>.each(files, (file, cb) =&gt; &#123;</div><div class="line">    imagemin([file.path], <span class="string">`<span class="subst">$&#123;ROOT_PATH&#125;</span>/temp/`</span>, &#123;</div><div class="line">      plugins: [</div><div class="line">        imageminPngquant(&#123;<span class="attr">quality</span>: <span class="string">'0-80'</span>, <span class="attr">verbose</span>: <span class="literal">false</span>, <span class="attr">floyd</span>: <span class="number">1</span>&#125;)</div><div class="line">      ]</div><div class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      cb();</div><div class="line">    &#125;)</div><div class="line">  &#125;, (err) =&gt; &#123;</div><div class="line">    callback(err)</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ul><li><code>async.each</code>으로 업로드할 파일의 개수만큼 이미지 최적화 적업 진행</li><li><code>imagemin([최적화할 이미지 경로(배열 타입이여야함)], 최적화 이후 저장될 이미지 경로, 이미지 최적화 작업)</code></li><li>위의 예제는 업로된 경로와 최적화가 이루어지는 경로가 동일하여 덮어쓰여 집니다.</li><li>이미지 최적화 플러그인 <code>imageminPngquant</code> 사용</li></ul><h3><span id="imageminpngquant-플러그인">imageminPngquant 플러그인</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line">imageminPngquant(&#123;<span class="attr">quality</span>: <span class="string">'0-80'</span>, <span class="attr">verbose</span>: <span class="literal">false</span>, <span class="attr">floyd</span>: <span class="number">1</span>&#125;)</div><div class="line">]</div></pre></td></tr></table></figure><ul><li><code>floyd</code> 이미지 디더링 작업 사용 <code>Type: boolean, Default: false</code></li><li><code>quality</code> 이미지 퀄리 지정 사용 <code>Type: string</code> 0~100 사용 가능</li><li><code>verbose</code> 불필효한 메타정보 제거 사용 <code>Type: boolean, Default: false</code></li><li><code>imageminPngquant</code> 의 다양한 속성은 <a href="https://www.npmjs.com/package/imagemin-pngquant" rel="external nofollow noopener noreferrer" target="_blank">imageminPngquant</a> 에서 확인 할 수 있습니다.</li><li><code>imageminPngquant</code> 플러그인 이외에도 다양한 플러그인을 사용해서 이미지에 대한 다양한 작업들을 진행할 수 있습니다.</li></ul><h3><span id="최적화-완료된-이미지-s3-업로드">최적화 완료된 이미지 S3 업로드</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Upload.s3 = <span class="function">(<span class="params">files, key, callback</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">async</span>.each(files, (file, cb) =&gt; &#123;</div><div class="line">    params.Key = key + file.name;</div><div class="line">    params.Body = <span class="built_in">require</span>(<span class="string">'fs'</span>).createReadStream(file.path);</div><div class="line"></div><div class="line">    S3.upload(params, (err, result) =&gt; &#123;</div><div class="line">      cb(err, result);</div><div class="line">    &#125;);</div><div class="line">  &#125;, (err, result) =&gt; &#123;</div><div class="line">    callback(err, result);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ul><li><code>async.each</code>으로 업로드할 파잇의 개수만큼 S3에 업로드 작업 진행</li><li><code>files</code> 업로드할 파일들의 정보</li><li><code>params.Key</code> S3에 업로드 될 경로와 파일이름을 지정합니다.</li><li><code>params.Body</code> 이미지 최적화 작업이 끝난 파일의 경로를 입력합니다.</li><li><code>S3.upload(...)</code> 실질적인 S3 이미지 업로드가 진행됩니다. <code>cb(err, result)</code>으로 에러가 발생하면 즉시 정지하고, 에러가 발생하지 않으면 파일의 개수만큼 업로드를 반복합니다.</li><li><a href="https://cheese10yun.github.io/Node-AWS-S3-Upload">Yun Blog Node AWS S3 업로드</a> 자세한 설명은 참고</li></ul><h2><span id="router-에서-사용법">router 에서 사용법</span></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">router.post(<span class="string">'/upload'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> tasks = [</div><div class="line">    (callback) =&gt; &#123;</div><div class="line">      Upload.formidable(req, (err, files, fields) =&gt; &#123;</div><div class="line">        callback(err, files, fields);</div><div class="line">      &#125;);</div><div class="line">    &#125;,</div><div class="line">    (files, fields, callback) =&gt; &#123;</div><div class="line">      Upload.optimize(files, (err) =&gt; &#123;</div><div class="line">        callback(err, files, fields);</div><div class="line">      &#125;);</div><div class="line">    &#125;,</div><div class="line">    (files, fields, callback) =&gt; &#123;</div><div class="line">      Upload.s3(files, <span class="string">'channel/test/'</span>, (err, result) =&gt; &#123;</div><div class="line">        callback(err, result)</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  ];</div><div class="line">  <span class="keyword">async</span>.waterfall(tasks, (err, result) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (!err) &#123;</div><div class="line">      res.json(&#123;<span class="attr">success</span>: <span class="literal">true</span>, <span class="attr">msg</span>: <span class="string">'업로드 성공'</span>&#125;)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      res.json(&#123;<span class="attr">success</span>: <span class="literal">false</span>, <span class="attr">msg</span>: <span class="string">'업로드 실패'</span>&#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3><span id="tasks-작업은-uploadservice-모듈로-진행">tasks 작업은 UploadService 모듈로 진행</span></h3><ul><li>위에서 작성한 <code>UploadService.js</code> 모듈로 아래의 작업들이 진행됩니다.</li><li><code>formidable</code> 메소드로 이미지 업로드 진행</li><li><code>optimize</code> 메소드로 이미지 최적화 진행</li><li><code>s3</code> 메서드로 s3 업로드 진행</li><li><code>async.waterfall</code> 으로 위 작업 순차 진행</li></ul><h2><span id="사이즈-비교">사이즈 비교</span></h2><table><thead><tr><th style="text-align:left">원본</th><th style="text-align:left">imageOptim App</th><th style="text-align:left">imagemin</th></tr></thead><tbody><tr><td style="text-align:left">10,645,070 byte</td><td style="text-align:left">8,499,904 byte</td><td style="text-align:left">2,858,674 byte</td></tr><tr><td style="text-align:left">473,459 byte</td><td style="text-align:left">282,029 byte</td><td style="text-align:left">177,423 byte</td></tr><tr><td style="text-align:left">421,698 byte</td><td style="text-align:left">258,743 byte</td><td style="text-align:left">189,266 byte</td></tr><tr><td style="text-align:left">382,774 byte</td><td style="text-align:left">232,684 byte</td><td style="text-align:left">182,071 byte</td></tr><tr><td style="text-align:left">467,184 byte</td><td style="text-align:left">282,368 byte</td><td style="text-align:left">164,739 byte</td></tr></tbody></table><p><strong>imageOptim App은 맥에서 사용하는 이미지 최적화 툴입니다.</strong></p><ul><li>이미지 사이즈(가로세로 크기)는 변경되지 않습니다.</li><li>bit color 값은 8bit로 수정됩니다.</li><li>이미지에 대한 지식이 없어 비포 에프터 사진을 첨부했습니다.</li></ul><h3><span id="원본-이미지">원본 이미지</span></h3><p><img src="http://i.imgur.com/mx9UTs2.png" alt=""></p><h3><span id="최적화-이미지">최적화 이미지</span></h3><p><img src="http://i.imgur.com/4pEMLxw.png" alt=""></p><h3><span id="마무리">마무리</span></h3><p>최근에 이미지 S3 업로드시 이미지 최적화 해야 할 작업이 있어서 코드를 만들고 간단하게 정리해보았습니다. 아직 프로덕션에 사용하는 코드는 아니라서 그렇게 안전한 코드는 아닌점… 미리 말씀드립니다. 이 플러그인 외에도 이미지 크롭, 이미지 해상도 조정 등 다양한 플러그인들이 많아 좀 더 검색해보시고 적용하시면 보다 좋을 거 같습니다. 부디 도움이 조금이라도 되셨기를 바랍니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;AWS S3 이미지 업로드시 이미지 최적화를 진행하고 업로드하는 것이 브라우저에서의 속도가 크게 도움이 됩니다.&lt;/em&gt;&lt;/strong&gt; &lt;code&gt;formidable&lt;/code&gt; 업로드 , &lt;code&gt;AWS-S3&lt;/code
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="AWS" scheme="https://cheese10yun.github.io/tags/AWS/"/>
    
      <category term="imagemin" scheme="https://cheese10yun.github.io/tags/imagemin/"/>
    
      <category term="S3" scheme="https://cheese10yun.github.io/tags/S3/"/>
    
      <category term="JavaScript" scheme="https://cheese10yun.github.io/tags/JavaScript/"/>
    
      <category term="Image" scheme="https://cheese10yun.github.io/tags/Image/"/>
    
      <category term="Upload" scheme="https://cheese10yun.github.io/tags/Upload/"/>
    
  </entry>
  
  <entry>
    <title>Node.JS로 카카오봇 만들기</title>
    <link href="https://cheese10yun.github.io/kakao-bot-node/"/>
    <id>https://cheese10yun.github.io/kakao-bot-node/</id>
    <published>2017-02-15T15:00:00.000Z</published>
    <updated>2018-03-17T05:47:31.200Z</updated>
    
    <content type="html"><![CDATA[<iframe src="https://ghbtns.com/github-btn.html?user=cheese10yun&repo=KaKaoBot-Node&type=star&count=true&size=large" frameborder="0" scrolling="0" width="160px" height="30px"></iframe><iframe src="https://ghbtns.com/github-btn.html?user=cheese10yun&type=follow&count=true&size=large" frameborder="0" scrolling="0" width="220px" height="30px"></iframe><p><strong>전체소스는 <a href="https://github.com/cheese10yun/Node-Boot" rel="external nofollow noopener noreferrer" target="_blank">GitHub branch develop-base</a>에서 확인할 수 있습니다.</strong></p><h2><span id="옐로우-아이디-등록-링크">옐로우 아이디 등록 </span></h2><p><img src="http://i.imgur.com/68DXtkf.png" alt="옐로우아이디 등록"></p><p><img src="http://i.imgur.com/J9bloey.png" alt="옐로우아이디 경고"></p><p><strong>해당 프로필은 하번 설정하면 변경이 불가능합니다. 이 작업이 완료되면 2 ~ 3일 이후에 옐로우아이디가 발급됩니다. 발급되기 전까지 Node API 서버를 구성합니다. 자세한 설명은 아래에 있습니다.</strong></p><p><img src="http://i.imgur.com/NDfHewo.png" alt="API형 자동읍답 선택"></p><p><strong>API형 자동읍답 설정하기 선택</strong></p><p><img src="http://i.imgur.com/YDxMB6D.png" alt=""></p><p><strong>앱 등록 절차를 진행합니다.</strong></p><p><strong>앱등록시 반드시 keyboard API가 동작해야합니다. 아래의 노드 서버 설정을 완료하고 API TEST를 진행합니다.</strong></p><p><img src="http://i.imgur.com/JUFtFR8.png" alt="API TEST"></p><h2><span id="카카오-봇-api-간단설명">카카오 봇 API 간단설명</span></h2><h3><span id="용어-설명">용어 설명</span></h3><h4><span id="수신-api">수신 API</span></h4><ul><li>카카오톡 이용자가 플러스친구, 옐로아이디에게 보낸 메시지를 전달 받은 후 응답을 할 수 있는 API 입니다. http(s) restful api를 통하여 카카오 API 서버 -&gt; 파트너 서버를 호출합니다.</li></ul><h4><span id="app_key">app_key</span></h4><ul><li>플러스친구/옐로아이디에서 자동응답을 위한 앱 등록시 프로필별로 발급되는 고유 키 값입니다. 자동응답 기능만 이용하시는 경우 사용되지 않으며, 일부 app_secret을 통한 별도 인증이 필요한 일부 프로필에만 사용됩니다.</li></ul><h4><span id="app_secret">app_secret</span></h4><ul><li>인증을 위해 app_key와 조합하여 사용되는 키 값입니다. 자동응답 기능만 이용하시는 경우 사용되지 않으며, 일부 app_secret을 통한 별도 인증이 필요한 일부 프로필에만 사용됩니다.</li></ul><h4><span id="user_key">user_key</span></h4><ul><li>특정 카카오톡 이용자를 구분하기 위한 key 입니다. 카카오에서는 이용자의 개인정보를 외부에 제공하지 않으므로, 외부 파트너사에서 카카오톡 이용자를 구분하기 위해서는 카카오로부터 API를 통해 user_key를 response로 받아야 합니다. user_key는 특정 카카오톡 이용자에 대해 프로필별로 각기 다르게 발급됩니다. 따라서 user_key는 해당 프로필에 대해서만 유효합니다. 카카오톡 이용자가 프로필을 차단했다가 다시 추가한 경우에는 user_key가 갱신되지 않으며, 이용자가 카카오톡 탈퇴 후 재가입한 경우 갱신됩니다.</li></ul><h3><span id="api-설정">API 설정</span></h3><table><thead><tr><th>URL</th><th>method</th><th>설명</th></tr></thead><tbody><tr><td>/keyboard</td><td>GET</td><td>키보드 영역에 표현될 버튼에 대한 정보. 생략시 text 타입이 선택된다</td></tr><tr><td>/message</td><td>POST</td><td>자동응답 명령어에 대한 응답 메시지의 내용</td></tr><tr><td>/friend</td><td>POST</td><td>특정 카카오톡 이용자가 플러스친구/옐로아이디를 친구로 추가하거나 차단하는 경우 해당 정보를 파트너사 서버로 전달하는 API입니다.</td></tr><tr><td>/friend</td><td>DELETE</td><td>특정 카카오톡 이용자가 플러스친구/옐로아이디를 친구로 추가하거나 차단하는 경우 해당 정보를 파트너사 서버로 전달하는 API입니다.</td></tr><tr><td>/chat_room/:user_key</td><td>DELETE</td><td>사용자가 채팅방 나가기를 해서 채팅방을 목록에서 삭제했을 경우 해당 정보를 파트</td></tr></tbody></table><p><a href="https://github.com/plusfriend/auto_reply" rel="external nofollow noopener noreferrer" target="_blank">출저 : 카카오톡 플러스친구/옐로아이디 API v. 2.0 개요</a></p><h2><span id="node-api-설정">Node API 설정</span></h2><h3><span id="node-keyboard-api">Node keyboard API</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">router.get(<span class="string">'/keyboard'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> menu = &#123;</div><div class="line">      type: <span class="string">'buttons'</span>,</div><div class="line">      buttons: [<span class="string">"메뉴1"</span>, <span class="string">"메뉴2"</span>, <span class="string">"메뉴3"</span>]</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  res.set(&#123;</div><div class="line">      <span class="string">'content-type'</span>: <span class="string">'application/json'</span></div><div class="line">  &#125;).send(<span class="built_in">JSON</span>.stringify(menu));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3><span id="response">Response</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"type"</span>: <span class="string">"buttons"</span>,</div><div class="line">  <span class="attr">"buttons"</span>: [</div><div class="line">    <span class="string">"메뉴1"</span>,</div><div class="line">    <span class="string">"메뉴2"</span>,</div><div class="line">    <span class="string">"메뉴3"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="스크린샷">스크린샷</span></h3><p><img src="http://i.imgur.com/y792Ihv.png?1" alt=""></p><h3><span id="node-message-api">Node Message API</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">router.post(<span class="string">'/message'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> _obj = &#123;</div><div class="line">        user_key: req.body.user_key,</div><div class="line">        type: req.body.type,</div><div class="line">        content: req.body.content</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">let</span> massage = &#123;</div><div class="line">        <span class="string">"message"</span>: &#123;</div><div class="line">            <span class="string">"text"</span>: <span class="string">'응답 메세지...'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">"keyboard"</span>: &#123;</div><div class="line">            <span class="string">"type"</span>: <span class="string">"buttons"</span>,</div><div class="line">            <span class="string">"buttons"</span>: [</div><div class="line">                <span class="string">"메뉴1"</span>,</div><div class="line">                <span class="string">"메뉴2"</span>,</div><div class="line">                <span class="string">"메뉴3"</span></div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    res.set(&#123;</div><div class="line">        <span class="string">'content-type'</span>: <span class="string">'application/json'</span></div><div class="line">    &#125;).send(<span class="built_in">JSON</span>.stringify(massage));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><code><b>let massage ={…}</b></code>에 따라서 메세지 형태가 결정됩니다</p><ul><li>기본</li><li>라벨</li><li>포토라벨</li></ul><h3><span id="기본">기본</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"message"</span>: &#123;</div><div class="line">    <span class="attr">"text"</span>: <span class="string">"메뉴1를 선택했습니다."</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"keyboard"</span>: &#123;</div><div class="line">    <span class="attr">"type"</span>: <span class="string">"buttons"</span>,</div><div class="line">    <span class="attr">"buttons"</span>: [</div><div class="line">      <span class="string">"메뉴1"</span>,</div><div class="line">      <span class="string">"메뉴2"</span>,</div><div class="line">      <span class="string">"메뉴3"</span>,</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="라벨형">라벨형</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"message"</span>: &#123;</div><div class="line">    <span class="attr">"text"</span>: <span class="string">"메뉴2를 선택했습니다."</span>,</div><div class="line">    <span class="attr">"message_button"</span>: &#123;</div><div class="line">      <span class="attr">"label"</span>: <span class="string">"라벨입니다."</span>,</div><div class="line">      <span class="attr">"url"</span>: <span class="string">"https://cheese10yun.github.io/"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"keyboard"</span>: &#123;</div><div class="line">    <span class="attr">"type"</span>: <span class="string">"buttons"</span>,</div><div class="line">    <span class="attr">"buttons"</span>: [</div><div class="line">      <span class="string">"메뉴1"</span>,</div><div class="line">      <span class="string">"메뉴2"</span>,</div><div class="line">      <span class="string">"메뉴3"</span>,</div><div class="line">      <span class="string">"메뉴4"</span>,</div><div class="line">      <span class="string">"메뉴5"</span></div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="기본-amp-라벨형-스크린샷">기본 &amp; 라벨형 스크린샷</span></h3><p><img src="http://i.imgur.com/QEAHMC7.png?1" alt=""></p><ul><li>메뉴1 기본</li><li>메뉴2 라벨</li></ul><h3><span id="포토형">포토형</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"message"</span>: &#123;</div><div class="line">    <span class="attr">"text"</span>: <span class="string">"메뉴3를 선택했습니다."</span>,</div><div class="line">    <span class="attr">"photo"</span>: &#123;</div><div class="line">      <span class="attr">"url"</span>: <span class="string">"http://i.imgur.com/tvuH0ZJ.png"</span>,</div><div class="line">      <span class="attr">"width"</span>: <span class="number">640</span>,</div><div class="line">      <span class="attr">"height"</span>: <span class="number">480</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"message_button"</span>: &#123;</div><div class="line">      <span class="attr">"label"</span>: <span class="string">"라벨입니다"</span>,</div><div class="line">      <span class="attr">"url"</span>: <span class="string">"https://cheese10yun.github.io/"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"keyboard"</span>: &#123;</div><div class="line">    <span class="attr">"type"</span>: <span class="string">"buttons"</span>,</div><div class="line">    <span class="attr">"buttons"</span>: [</div><div class="line">      <span class="string">"메뉴1"</span>,</div><div class="line">      <span class="string">"메뉴2"</span>,</div><div class="line">      <span class="string">"메뉴3"</span>,</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="포토형-메세지-스크린샷">포토형 메세지 스크린샷</span></h3><p><img src="http://i.imgur.com/pJLjWvK.png?1" alt=""></p><p><strong>라벨을 터치하면 등록된 URL 주소로 이동합니다.</strong></p><h3><span id="node-friend-api">Node friend API</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">router.post(<span class="string">'/friend'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> user_key = req.body.user_key;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;user_key&#125;</span>님이 쳇팅방에 참가했습니다.`</span>);</div><div class="line">    </div><div class="line">    res.set(&#123;</div><div class="line">        <span class="string">'content-type'</span>: <span class="string">'application/json'</span></div><div class="line">    &#125;).send(<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">success</span>:<span class="literal">true</span>&#125;));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.delete(<span class="string">'/friend'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> user_key = req.body.user_key;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;user_key&#125;</span>님이 쳇팅방을 차단했습니다.`</span>);</div><div class="line">    </div><div class="line">    res.set(&#123;</div><div class="line">        <span class="string">'content-type'</span>: <span class="string">'application/json'</span></div><div class="line">    &#125;).send(<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">success</span>:<span class="literal">true</span>&#125;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3><span id="node-chat_room-api">Node chat_room API</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">router.delete(<span class="string">'/chat_room/:user_key'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> user_key = req.params.user_key;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;user_key&#125;</span>님이 쳇팅방에서 나갔습니다.`</span>);</div><div class="line"></div><div class="line">    res.set(&#123;</div><div class="line">        <span class="string">'content-type'</span>: <span class="string">'application/json'</span></div><div class="line">    &#125;).send(<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">success</span>:<span class="literal">true</span>&#125;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>나머지 API들은 간단하게 작성합니다.</p><h3><span id="마무리">마무리</span></h3><p>학교 식단 및 통학 버스 알림 봇을 만들다가 기본 구조를 갖는 소스코드를 올리는 것도 좋을 거 같아서 기존 프로젝트에서 불필요 소스코드를 제거하고 올린 거라 좀 어색한 부분이 있네요. 비슷한 프로젝트를 진행하실 분들은 다른 master branch를 참조하세요.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe src=&quot;https://ghbtns.com/github-btn.html?user=cheese10yun&amp;repo=KaKaoBot-Node&amp;type=star&amp;count=true&amp;size=large&quot; frameborder=&quot;0&quot; scrolli
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="Kakao" scheme="https://cheese10yun.github.io/tags/Kakao/"/>
    
      <category term="Bot" scheme="https://cheese10yun.github.io/tags/Bot/"/>
    
  </entry>
  
  <entry>
    <title>npm sudo 권한으로 설치시 오류 해결</title>
    <link href="https://cheese10yun.github.io/npm-sudo-err/"/>
    <id>https://cheese10yun.github.io/npm-sudo-err/</id>
    <published>2017-02-10T15:00:00.000Z</published>
    <updated>2018-03-17T05:47:09.739Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-bash: sodu: <span class="built_in">command</span> not found</div></pre></td></tr></table></figure><p>NPM으로 모듈을 설치할 때 <code><b>sudo</b></code> 권한으로 설치할 경우 위와 같은 오류가 발생할 경우가 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo ln -s /usr/<span class="built_in">local</span>/bin/node /usr/bin/node</div><div class="line">sudo ln -s /usr/<span class="built_in">local</span>/lib/node /usr/lib/node</div><div class="line">sudo ln -s /usr/<span class="built_in">local</span>/bin/npm /usr/bin/npm</div><div class="line">sudo ln -s /usr/<span class="built_in">local</span>/bin/node-waf /usr/bin/node-waf</div></pre></td></tr></table></figure><p>위의 명령어를 입력하면 sudo npm으로 설치를 진행할 수 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line
      
    
    </summary>
    
    
      <category term="NPM" scheme="https://cheese10yun.github.io/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>Node AWS S3 업로드</title>
    <link href="https://cheese10yun.github.io/Node-AWS-S3-Upload/"/>
    <id>https://cheese10yun.github.io/Node-AWS-S3-Upload/</id>
    <published>2017-02-07T15:00:00.000Z</published>
    <updated>2018-03-17T05:47:09.756Z</updated>
    
    <content type="html"><![CDATA[<p>Node.Js에서 AWS S3업로드 예제입니다. 본 예제의 전체 소스는 <a href="https://github.com/cheese10yun/node-yun" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a>에서 참고할 수 있습니다.<br><strong><em>S3에 관련된 설정이 완료됐다는 가정하에 포스팅을 진행하겠습니다.</em></strong></p><h4><span id="필수-패키지-설치">필수 패키지 설치</span></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install formidable --save</div><div class="line">npm install async --save</div><div class="line">npm install aws-sdk --save</div></pre></td></tr></table></figure><ul><li><code><b>formidable</b></code> 파일 업로드를 위한 모듈</li><li><code><b>async</b></code>순차 실행을 위한 모듈</li><li><code><b>aws-sdk</b></code> S3 업로드를 위한 모듈</li></ul><p><code><b>HTML Form</b></code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">action</span>=<span class="string">"/api/v1/upload"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>  <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"img_files[]"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure><p>HTML 입력폼 소스입니다. 간단함으로 넘어가겠습니다.</p><p><code><b>upload API</b></code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Upload = <span class="built_in">require</span>(<span class="string">'../service/UploadService'</span>),</div><div class="line">router.post(<span class="string">'/upload'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> tasks = [</div><div class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">            Upload.formidable(req, <span class="function"><span class="keyword">function</span> (<span class="params">err, files, field</span>) </span>&#123;</div><div class="line">                callback(err, files);</div><div class="line">            &#125;)</div><div class="line">        &#125;,</div><div class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">files, callback</span>) </span>&#123;</div><div class="line">            Upload.s3(files, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">                callback(err, files);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    ];</div><div class="line">    <span class="keyword">async</span>.waterfall(tasks, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!err)&#123;</div><div class="line">            res.json(&#123;<span class="attr">success</span>:<span class="literal">true</span>, <span class="attr">msg</span>:<span class="string">'업로드 성공'</span>&#125;)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            res.json(&#123;<span class="attr">success</span>:<span class="literal">false</span>, <span class="attr">msg</span>:<span class="string">'실패'</span>, <span class="attr">err</span>:err&#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>해당 upload 라우터로 요청이 들어오면 <code><b>tasks[…]</b></code>의 작업들이 <code><b>async</b></code><br>모듈로 순차적으로 실행 됩니다. <code><b>tasks[…]</b></code> 작업순서는 다음과 같습니다.</p><ol><li><strong><code><b>formidable</b></code> 모듈를 이용해서 Node 서버로 파일을 업로드 시킵니다.</strong></li><li><strong><code><b>aws-sdk</b></code> 모듈를 이용해서 AWS S3로 파일을 업로드 시킵니다.</strong></li><li><strong><code><b>tasks[…]</b></code> 작업의 결과를 JSON타입으로 클라이언트에게 응답합니다.</strong></li></ol><p>세부적인 작업은 <code><b>UploadService.js</b></code>에서 <code><b>callback</b></code>으로 진행됩니다.<br>아래에서 설명을 계속 진행하겠습니다.</p><p><code><b>UploadService.js S3 &amp; formidable설정 </b></code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span></div><div class="line">    formidable = <span class="built_in">require</span>(<span class="string">'formidable'</span>),</div><div class="line">    AWS = <span class="built_in">require</span>(<span class="string">'aws-sdk'</span>),</div><div class="line">    Upload = &#123;&#125;;</div><div class="line">AWS.config.region = <span class="string">'ap-northeast-2'</span>; <span class="comment">//지역 서울 설정</span></div><div class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> AWS.S3();</div><div class="line"><span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm(&#123;</div><div class="line">    encoding: <span class="string">'utf-8'</span>,</div><div class="line">    multiples: <span class="literal">true</span>,</div><div class="line">    keepExtensions: <span class="literal">false</span> <span class="comment">//확장자 제거</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">/*S3 버킷 설정*/</span></div><div class="line"><span class="keyword">var</span> params = &#123;</div><div class="line">    Bucket: <span class="string">'BucketName'</span>,</div><div class="line">    Key: <span class="literal">null</span>,</div><div class="line">    ACL: <span class="string">'public-read'</span>,</div><div class="line">    Body: <span class="literal">null</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><code><b>aws_access_key_id, aws_secret_access_key</b></code>값을 소스코드에 입력하시는 것은 보안상 바람직하지 않습니다.<br><a href="http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html" rel="external nofollow noopener noreferrer" target="_blank">AWS Document</a>를 참고하세요.</p><p><code><b>var params = {…}</b></code> 객체는 AWS S3업로드에 대한 정보 입니다.</p><ul><li>Bucket :  S3 Bucket 이름을 지정합니다.</li><li>Key : S3의 경로 및 파일 이름을 지정합니다.</li><li>ACL : 파일 권한에 대한 설정입니다.</li><li>Body : 업로드할 파일의 경로를 지정합니다.</li></ul><p><code><b>UploadService.js 업로드 로직</b></code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Upload.formidable = <span class="function"><span class="keyword">function</span> (<span class="params">req, callback</span>) </span>&#123;</div><div class="line">    form.parse(req, <span class="function"><span class="keyword">function</span> (<span class="params">err, fields, files</span>) </span>&#123;</div><div class="line">    &#125;);</div><div class="line">    form.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        callback(err, <span class="literal">null</span>);</div><div class="line">    &#125;);</div><div class="line">    form.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        callback(<span class="literal">null</span>, <span class="keyword">this</span>.openedFiles);</div><div class="line">    &#125;);</div><div class="line">    form.on(<span class="string">'aborted'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        callback(<span class="string">'form.on(aborted)'</span>, <span class="literal">null</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line">Upload.s3 = <span class="function"><span class="keyword">function</span> (<span class="params">files, callback</span>) </span>&#123;</div><div class="line">    params.Key = <span class="string">'test/'</span>+files[<span class="number">0</span>].name;</div><div class="line">    params.Body = <span class="built_in">require</span>(<span class="string">'fs'</span>).createReadStream(files[<span class="number">0</span>].path);</div><div class="line">    s3.upload(params, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">        callback(err, result);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"><span class="built_in">module</span>.exports = Upload;</div></pre></td></tr></table></figure><p>가장 핵심인 업로드 로직입니다. <code><b>formidable</b></code>, <code><b>s3</b></code> 메서드는 <code><b>callback</b></code> 메서드로<br>각작업의 결과를 넘겨줍니다.</p><p><code><b>formidable 메서드 설명</b></code><br>라우터에서 넘겨준 <code><b>req</b></code> 객체를 기반으로 파일 업로드를 진행합니다.<br>파일 업로드 중 에러가 발생하게 되면 <code><b>form.on(‘error’, …)</b></code> 메서드를 통해서 에러를 <code><b>callback</b></code>으로 넘겨줍니다.</p><p>파일 업로드가 정상적으로 완료되면 <code><b>form.end(null, …)</b></code>메서드가 호출되고 업로드한 파일의 정보(파일 사이즈, 파일 이름, 파일 경로 등등)가 <code><b>callback</b></code> 메서드를 통해서 으로 넘어가게 됩니다.</p><h6><span id="s3-메서드-설명"><code><b>s3</b></code> 메서드 설명</span></h6><p><code><b>async.waterfall</b></code>를 통해서 넘겨받은 <code><b>files</b></code> 객체에는 위에서 설명한 파일 정보가 들어있는 객체입니다.</p><ul><li><code><b>params.Body</b></code>값에는 위에서 업로드한 파일을 넘겨줍니다.</li><li><code><b>params.Key</b></code>값에는 실제 S3에 업로드될 path + 파일 이름을 작성합니다.</li></ul><h4><span id="실행-화면">실행 화면</span></h4><p><img src="https://i.imgur.com/P0bMJdM.png" alt=""><br><img src="https://i.imgur.com/u2qStuu.png" alt=""></p><p><code><b>params.Key</b></code> 값은 <code><b>test/[filename]</b></code> 입니다.<br><code><b>test/</b></code>는 경로로 인식되며 해당 경로가 없는 경우에는 디렉터리를 자동으로 생성해서 파일을 목적지까지 안전하게? 전달됩니다.</p><h4><span id="마무리">마무리</span></h4><p>회사에서 AWS S3업로드를 리펙토링 작업이 있어서 간단하게 정리해봤습니다.<br>추가로 작업한 부분도 포스팅할 예정입니다.<br>아무래도 AWS S3 이미지 업로드시 이미지를 최적화시키는 것이 될듯합니다.<br>앞으로 계속 찾아뵙겠습니다.<br>RSS 링크도 하단에 추가하였으니 추가해주시면 감사하겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Node.Js에서 AWS S3업로드 예제입니다. 본 예제의 전체 소스는 &lt;a href=&quot;https://github.com/cheese10yun/node-yun&quot; rel=&quot;external nofollow noopener noreferrer&quot; tar
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="AWS" scheme="https://cheese10yun.github.io/tags/AWS/"/>
    
      <category term="imagemin" scheme="https://cheese10yun.github.io/tags/imagemin/"/>
    
      <category term="S3" scheme="https://cheese10yun.github.io/tags/S3/"/>
    
      <category term="Image Upload" scheme="https://cheese10yun.github.io/tags/Image-Upload/"/>
    
  </entry>
  
  <entry>
    <title>Node 다른 서버 API 호출</title>
    <link href="https://cheese10yun.github.io/API-CALL/"/>
    <id>https://cheese10yun.github.io/API-CALL/</id>
    <published>2017-02-04T15:00:00.000Z</published>
    <updated>2018-03-17T05:48:04.566Z</updated>
    
    <content type="html"><![CDATA[<p>노드 서버에서 다른 API를 호출하는 방법을 소개해드리겠습니다. 물론 프론트에서 Ajax를 이용해서 다른 서버의 API를 간단하게 호출할 수 있지만 Ajax로 간단하게 호출할 수 있지만, 해당 API를 호출한 이후 자신의 서버에 해당 기록을 남겨야 하는 경우는 프론트가 아닌 백에서 처리해야 합니다.</p><p><strong><em>저희 서비스 예를 들어 설명하면 노드 서버에서 제휴 모바일 게임의 포인트를 Credit 할 수 있는 기능이 있습니다. 이때 게임 서버의 API를 호출을 Node 서버에서 진행해야 해당 기록을 데이터베이스에 남길 수 있습니다.</em></strong></p><p><strong>전체소스는 <a href="https://github.com/cheese10yun/node-yun" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에서 확인할수있습니다. 전체소스를 보시는 것을 권장합니다.</strong></p><h6><span id="필수-패키지-설치">필수 패키지 설치</span></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install request --save</div></pre></td></tr></table></figure><h6><span id="전체-소스">전체 소스</span></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">callee</span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">API_Call</span>(<span class="params">callee</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> OPTIONS = &#123;</div><div class="line">            headers: &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>&#125;,</div><div class="line">            url: <span class="literal">null</span>,</div><div class="line">            body: <span class="literal">null</span></div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">const</span> PORT = <span class="string">'3500'</span>;</div><div class="line">        <span class="keyword">const</span> BASE_PATH = <span class="string">'/api/v1'</span>;</div><div class="line">        <span class="keyword">var</span> HOST = <span class="literal">null</span>;</div><div class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (callee) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">'dev'</span>:</div><div class="line">                    HOST = <span class="string">'https://dev-api.com'</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'prod'</span>:</div><div class="line">                    HOST = <span class="string">'https://prod-api.com'</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'another'</span>:</div><div class="line">                    HOST = <span class="string">'http://localhost'</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    HOST = <span class="string">'http://localhost'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)(callee);</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            login : <span class="function"><span class="keyword">function</span> (<span class="params">user_id, password, callback</span>) </span>&#123;</div><div class="line">                OPTIONS.url = HOST + <span class="string">':'</span> + PORT + BASE_PATH + <span class="string">'/login'</span>;</div><div class="line">                OPTIONS.body = <span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">                    <span class="string">"user_id"</span>: user_id,</div><div class="line">                    <span class="string">"password"</span>: password</div><div class="line">                &#125;);</div><div class="line">                request.post(OPTIONS, <span class="function"><span class="keyword">function</span> (<span class="params">err, res, result</span>) </span>&#123;</div><div class="line">                    statusCodeErrorHandler(res.statusCode, callback, result);</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">statusCodeErrorHandler</span>(<span class="params">statusCode, callback , data</span>) </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (statusCode) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">200</span>:</div><div class="line">                callback(<span class="literal">null</span>, <span class="built_in">JSON</span>.parse(data));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                callback(<span class="string">'error'</span>, <span class="built_in">JSON</span>.parse(data));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> INSTANCE;</div><div class="line">    <span class="keyword">if</span> (INSTANCE === <span class="literal">undefined</span>) &#123;</div><div class="line">        INSTANCE = <span class="keyword">new</span> API_Call(callee);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> INSTANCE;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h6><span id="host-설정">HOST 설정</span></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (callee) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'dev'</span>:</div><div class="line">            HOST = <span class="string">'https://dev-api.com'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'prod'</span>:</div><div class="line">            HOST = <span class="string">'https://prod-api.com'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'another'</span>:</div><div class="line">            HOST = <span class="string">'http://localhost'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            HOST = <span class="string">'http://localhost'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;)(callee);</div></pre></td></tr></table></figure><p>즉시 실행 함수로 감싸고 switch 문을 실행시킵니다. <strong><em>타 서버의 API 주소도 dev, prod, etc 등등 각기 다르므로 유동적으로 변경할 수 있게 설정합니다.</em></strong><br><code><b>var API_Call = require(’…/service/API_Call’)(‘another’);</b></code> 이런 식으로 모듈을 require 시킬 때 해당 API 서버를 쉽게 정할 수 있습니다.</p><h6><span id="타-서버의-api-정보-설정">타 서버의 API 정보 설정</span></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">API_Call</span>(<span class="params">callee</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> OPTIONS = &#123;</div><div class="line">        headers: &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>&#125;,</div><div class="line">        url: <span class="literal">null</span>,</div><div class="line">        body: <span class="literal">null</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">const</span> PORT = <span class="string">'3500'</span>;</div><div class="line">    <span class="keyword">const</span> BASE_PATH = <span class="string">'/api/v1'</span>;</div><div class="line">    <span class="keyword">var</span> HOST = <span class="literal">null</span>;</div></pre></td></tr></table></figure><ul><li>headers: JSON으로 API를 받을 예정이니 Content-Type을 JSON 으로 설정합니다.</li><li>url : 해당 API의 URL을 의마합니다. 특정 요청에 따라서 달라질 예정이니 null 처리했습니다.</li><li>body : POST,PUT, DEL 등 body값을 전달해주는 객체로 사용됩니다.</li><li>HOST, PORT, BASE_PATH = <a href="http://localhost:3500/api/v1" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3500/api/v1</a> 로 됩니다.</li></ul><h6><span id="로그인-api를-호출-오는-로직으로-간단하게-설명해드리겠습니다">로그인 API를 호출 오는 로직으로 간단하게 설명해드리겠습니다.</span></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    login : <span class="function"><span class="keyword">function</span> (<span class="params">user_id, password, callback</span>) </span>&#123;</div><div class="line">        OPTIONS.url = HOST + <span class="string">':'</span> + PORT + BASE_PATH + <span class="string">'/login'</span>;</div><div class="line">        OPTIONS.body = <span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">            <span class="string">"user_id"</span>: user_id,</div><div class="line">            <span class="string">"password"</span>: password</div><div class="line">        &#125;);</div><div class="line">        request.post(OPTIONS, <span class="function"><span class="keyword">function</span> (<span class="params">err, res, result</span>) </span>&#123;</div><div class="line">            statusCodeErrorHandler(res.statusCode, callback, result);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>이전 블로그에서 포스팅했던 API인 <a href="https://cheese10yun.github.io/passport-mysql">Login API</a>를 호출해보겠습니다. 최종적인 url 값인 <code><b><a href="http://localhost:3500/api/v1/login" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3500/api/v1/login</a></b></code>로body 값으로 넘길 user_id, password를 바인딩 시켜줍니다.</p><p>타 서버의 API를 호출이 완료되면 <code><b>statusCodeErrorHandler</b></code> 메서드를 통해서 에러 핸들링 작업을 진행하게 됩니다.</p><p><strong><em>예제는 같은 로컬 서버의 API를 호출하는 예제 이긴 합니다.(다른 서버를 못구해서… 어쩔수업싱 로컬을 호출했습니다.)</em></strong></p><p><code><b>statusCodeErrorHandler</b></code> 에러 헨들링</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">statusCodeErrorHandler</span>(<span class="params">statusCode, callback , data</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (statusCode) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">200</span>:</div><div class="line">            callback(<span class="literal">null</span>, <span class="built_in">JSON</span>.parse(data));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            callback(<span class="string">'error'</span>, <span class="built_in">JSON</span>.parse(data));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>메서드는 로직은 간단합니다. <code><b>statusCode</b></code>를 넘겨 받고 <code><b>statusCode</b></code>200일 경우는 callback으로 결괏값을 넘겨줍니다. 200 이 아닌 경우에는 각각의 환경에 맞게 구현하시면 됩니다.</p><ul><li>200 성공</li><li>400 Bad Request - field validation 실패시</li><li>401 Unauthorized - API 인증,인가 실패</li><li>404 Not found ? 해당 리소스가 없음</li><li>500 Internal Server Error - 서버 에러</li></ul><p><strong>최소 위의 5개 정도의 StatusCode에 알맞은 로직을 추가하는 것을 권장합니다.</strong></p><h6><span id="api-호출">API 호출</span></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> API_Call = <span class="built_in">require</span>(<span class="string">'../service/API_Call'</span>)(<span class="string">'another'</span>);</div><div class="line">router.post(<span class="string">'/login/another/api'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span></div><div class="line">        user_id = req.body.user_id,</div><div class="line">        password = req.body.password;</div><div class="line"></div><div class="line">    API_Call.login(user_id, password, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!err) &#123;</div><div class="line">            res.json(result);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            res.json(err);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><code><b>API_Call.js</b></code>를 require 시킬 경우 <code><b>(‘another’)</b></code>를 인자로 넘겨주게되면<br>위에서 설명한 <code><b>HOST 설정</b></code>에서 HOST가 결정됩니다.</p><p><code><b><a href="http://localhost:3500/api/v1/login/another/api" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3500/api/v1/login/another/api</a></b></code>를 호출하게되면 넘겨 받은 user_id, password를 <code><b>API_Call.login</b></code>에게<br>전달되고  <code><b>statusCodeErrorHandler</b></code>를 통해서 최종적으로 callback으로 <code><b>err, result</b></code>를 JSON으로 클라이언트에게 넘겨집니다.</p><p><img src="https://i.imgur.com/BpezpxV.png" alt=""></p><p><strong>Postman을 이용해서 api/v1/login/another/api 를 호출한 결과입니다.</strong></p><h6><span id="마무리">마무리</span></h6><p>역시 소스 코드가 길어지면 코드 설명이 산으로 가는 듯합니다.<br>역량 부족이겠죠… 애초에 구상했던 코드는 아주 간단했는데 욕심을 부려서 조금 더 넣다 보니 제가 봐도 설명 부분이 부족하다는 것이 느껴지네요.<br>그래도 조금이라도 도움이 됬으면 합니다. 긴글 읽어주셔서 감사합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;노드 서버에서 다른 API를 호출하는 방법을 소개해드리겠습니다. 물론 프론트에서 Ajax를 이용해서 다른 서버의 API를 간단하게 호출할 수 있지만 Ajax로 간단하게 호출할 수 있지만, 해당 API를 호출한 이후 자신의 서버에 해당 기록을 남겨
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="API" scheme="https://cheese10yun.github.io/tags/API/"/>
    
      <category term="Call" scheme="https://cheese10yun.github.io/tags/Call/"/>
    
  </entry>
  
  <entry>
    <title>블로그를 시작하려는 당신에게(2)</title>
    <link href="https://cheese10yun.github.io/blog-start-part2/"/>
    <id>https://cheese10yun.github.io/blog-start-part2/</id>
    <published>2017-01-30T15:00:00.000Z</published>
    <updated>2018-03-17T05:47:51.353Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cheese10yun.github.io/blog-start">블로그를 시작하려는 당신에게(1)</a>에서는 블로그를 선택하는 과정을 말했다면 이번 포스팅은 블로그를 많은 사람이 볼 수 있도록 노출 시키는 방법에 대해서 다루어보겠다.</p><p>이왕 시작한 블로그 많은 사람이 보는 게 좀 더 좋지 않겠는가?<del><b>누구나 관종의 피는 가지고 있으니 말이다.</b></del></p><p><strong>네이버 웹마스터 도구, 구글 웹마스터, 구글 에널틱스를 블로그를 노출 시키고 관리해 보자.</strong></p><h3><span id="네이버-웹마스터-도구">네이버 웹마스터 도구</span></h3><p><strong>네이버 웹마스터</strong>에들어가서 사이트를 추가 시킨다.</p><p><img src="https://i.imgur.com/iJNq0q1.png" alt=""></p><p><strong>등록 절차는 간단하니 다루지 않겠다. (사실 스크린샷을 깜빡하고 못 찍었다.)</strong></p><h4><span id="검증에서-웹-페이지-최적화-검사를-진행한다">검증에서 웹 페이지 최적화 검사를 진행한다.</span></h4><p><img src="https://i.imgur.com/IVQHkGT.png" alt=""></p><p>검색결과가 표시되고 문제가 있는 경우는 빨간색으로 X 표시가 나타난다. <strong><em>그 빨간색 표시를 중점으로 개선작업을 진행하면 된다. ?를 클릭하면 친절하게 개선방법을 네이버에서 제안해준다. 대표적인 설정만 짚고 넘어가겠다.</em></strong></p><p><img src="https://i.imgur.com/GfExIWL.png" alt=""></p><h5><span id="오픈-그래프-정보-amp-소셜-미디어">오픈 그래프 정보 &amp; 소셜 미디어</span></h5><p>오픈 그래프 &amp; 소셜미디어 태그는 사이트가 소셜 미디어로 공유될 때 우선적으로 활용되는 정보로, 아래 그림 처럼 미리 사이트를 보여주는 기능이다.</p><p><img src="https://i.imgur.com/e2onpRV.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--오픈 그래프 정보--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:type"</span> <span class="attr">content</span>=<span class="string">"blog"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:title"</span> <span class="attr">content</span>=<span class="string">"Yun Blog"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:description"</span> <span class="attr">content</span>=<span class="string">"Node.js....."</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:image"</span> <span class="attr">content</span>=<span class="string">"https:...images/cover4.jpg"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:url"</span> <span class="attr">content</span>=<span class="string">"https://cheese10yun.github.io/"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--소셜 미디어--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:card"</span> <span class="attr">content</span>=<span class="string">"summary"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:title"</span> <span class="attr">content</span>=<span class="string">"Yun Blog"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:url"</span> <span class="attr">content</span>=<span class="string">"https://cheese10yun.github.io/"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:image"</span> <span class="attr">content</span>=<span class="string">"https:../images/cover4.jpg"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:description"</span> <span class="attr">content</span>=<span class="string">"...."</span> /&gt;</span></div></pre></td></tr></table></figure><p><strong>해당 테그가 추가안되있는 경우에는 추가시키자.</strong></p><p><img src="/img/blog-start-2/2.png" alt=""></p><p><strong>블로그에 글이 추가되면 네이버 검색로봇이 웹 페이지에 접근해 정보를 수집해가 자동으로 블로그를 네이버에 노출 시켜준다. 설정은 아주 간단하다.</strong></p><h5><span id="robotstxt-설정">robots.txt 설정</span></h5><p><img src="https://i.imgur.com/vyJsG6s.png" alt=""></p><p>검증 탭의 <strong>robots.txt</strong> 에서 설정이 가능하다.<br>네이버에서 해당 robots.txt 파일을 작성해주고 그것을 <strong><em>복사해서 robots.txt을 root에 위치시킨다.</em></strong></p><p>작업이 완료되면 robots.txt 검사를 진행한다. 정상 처리되었으면 ~~수집이 가능합니다. 라는 alert 창을 확인할 수가 있을 것이다.</p><h5><span id="rss-제출">RSS 제출</span></h5><p><img src="https://i.imgur.com/TH3OBbT.png" alt=""></p><p>요청에 RSS 제출 텝에서 RSS 제출해준다.</p><h4><span id="웹-페이지-최적화-검사">웹 페이지 최적화 검사</span></h4><p>위의 작업을 완료하면 다시 웹 페이지 최적화 작업을 진행하고 안 돼 있는 부분이 있다면 네이버에서 제안해주는 작업을 진행한다.</p><h3><span id="마무리">마무리</span></h3><p>생각보다 정리해야할 내용이 많아 구글 웹마스터, 구글 에널틱스는 다음 포스팅에서 다루겠습니다… 분량 조절 실패</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://cheese10yun.github.io/blog-start&quot;&gt;블로그를 시작하려는 당신에게(1)&lt;/a&gt;에서는 블로그를 선택하는 과정을 말했다면 이번 포스팅은 블로그를 많은 사람이 볼 수 있도록 노출 시키는 방법에 대해
      
    
    </summary>
    
    
      <category term="Blog" scheme="https://cheese10yun.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>Node Mysql Multiple Insert</title>
    <link href="https://cheese10yun.github.io/mysql-multiple-insert/"/>
    <id>https://cheese10yun.github.io/mysql-multiple-insert/</id>
    <published>2017-01-30T15:00:00.000Z</published>
    <updated>2018-03-17T05:47:31.215Z</updated>
    
    <content type="html"><![CDATA[<p>데이터베이스에 여러 개의 Insert를 할 일은 정말 많습니다. 저희는 대체로 타 게임회사의 데이터를 벌크로 내려받아야 하는 경우가 있어 여러 번의 Insert 작업을 진행하게 됩니다.<br>이러한 경우에 <strong><em>반복문을 사용하지 않고 여러 개를 Insert 하는 방법을 소개해드리겠습니다.</em></strong></p><p><img src="https://i.imgur.com/0v9jD2z.png" alt=""><br>위와 같은 데이터베이스 구조일 경우의 예로 설명을 진행하겠습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stmt_multiple_insert = <span class="string">'insert into `user` (`user_id`, `password`, `nickname`, `email`, `signup_dt`) values ?;'</span>; <span class="comment">// 쿼리문</span></div><div class="line"><span class="keyword">var</span> values = [</div><div class="line">    [<span class="string">'user_001'</span>, <span class="string">'pw_01'</span>, <span class="string">'name_01'</span>, <span class="string">'email_01@a.com'</span>, <span class="string">'2016-10-10'</span>],</div><div class="line">    [<span class="string">'user_002'</span>, <span class="string">'pw_02'</span>, <span class="string">'name_02'</span>, <span class="string">'email_02@a.com'</span>, <span class="string">'2016-10-10'</span>],</div><div class="line">    [<span class="string">'user_003'</span>, <span class="string">'pw_03'</span>, <span class="string">'name_03'</span>, <span class="string">'email_03@a.com'</span>, <span class="string">'2016-10-10'</span>],</div><div class="line">    [<span class="string">'user_004'</span>, <span class="string">'pw_04'</span>, <span class="string">'name_04'</span>, <span class="string">'email_04@a.com'</span>, <span class="string">'2016-10-10'</span>],</div><div class="line">    [<span class="string">'user_005'</span>, <span class="string">'pw_05'</span>, <span class="string">'name_05'</span>, <span class="string">'email_05@a.com'</span>, <span class="string">'2016-10-10'</span>]</div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">var</span> str_query = connection.query(stmt_multiple_insert, [values], <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(err);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(str_query.sql);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>구조는 간단합니다. <strong><em>쿼리문은 입력값과 1:1로 대응시키고, 입력값은</em></strong> <code><b>var values</b></code> <strong><em>처럼 배열형태로 선언합니다.</em></strong></p><p><code><b>var str_query = connection.query(…)</b></code> 이렇게 connection 객체를 변수로 할당시키고 <code><b>console.log(str_query.sql)</b></code><br>으로 해당 쿼리를 확인할 수 있습니다.</p><p>쿼리문을 확인하기 위한 작업이라서 실제 배포하는 소스코드에서는 사용하지 않는 것을 권장합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//해당 쿼리문</div><div class="line">insert into `user` (`user_id`, `password`, `nickname`, `email`, `signup_dt`) values</div><div class="line">(&apos;user_001&apos;, &apos;pw_01&apos;, &apos;name_01&apos;, &apos;email_01@a.com&apos;, &apos;2016-10-10&apos;),</div><div class="line">(&apos;user_002&apos;, &apos;pw_02&apos;, &apos;name_02&apos;, &apos;email_02@a.com&apos;, &apos;2016-10-10&apos;),</div><div class="line">(&apos;user_003&apos;, &apos;pw_03&apos;, &apos;name_03&apos;, &apos;email_03@a.com&apos;, &apos;2016-10-10&apos;),</div><div class="line">(&apos;user_004&apos;, &apos;pw_04&apos;, &apos;name_04&apos;, &apos;email_04@a.com&apos;, &apos;2016-10-10&apos;),</div><div class="line">(&apos;user_005&apos;, &apos;pw_05&apos;, &apos;name_05&apos;, &apos;email_05@a.com&apos;, &apos;2016-10-10&apos;);</div></pre></td></tr></table></figure><h3><span id="마무리">마무리</span></h3><p>뭐 별 내용이 없네요…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;데이터베이스에 여러 개의 Insert를 할 일은 정말 많습니다. 저희는 대체로 타 게임회사의 데이터를 벌크로 내려받아야 하는 경우가 있어 여러 번의 Insert 작업을 진행하게 됩니다.&lt;br&gt;
이러한 경우에 &lt;strong&gt;&lt;em&gt;반복문을 사용하지
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="Mysql" scheme="https://cheese10yun.github.io/tags/Mysql/"/>
    
      <category term="Multiple Insert" scheme="https://cheese10yun.github.io/tags/Multiple-Insert/"/>
    
  </entry>
  
  <entry>
    <title>블로그를 시작하려는 당신에게</title>
    <link href="https://cheese10yun.github.io/blog-start/"/>
    <id>https://cheese10yun.github.io/blog-start/</id>
    <published>2017-01-27T15:00:00.000Z</published>
    <updated>2018-03-17T05:47:58.640Z</updated>
    
    <content type="html"><![CDATA[<p>블로그 포스팅을 하면서 이것저것 불편 하점을 느끼다 보니 <strong>Brunch</strong>에서 <strong>Tistory</strong>로 또 <strong>Tistory</strong>에서 <strong>GitHub Page</strong><br>로 어느덧 3번의 블로그 이전을 강행? 하게 되었다.</p><blockquote><p>개발자란 조금 더 게을러 지기 위해 더 부지런해지는 거 같다…<br>나도 이제 좀 게을러지고 싶다…</p></blockquote><p>각 블로그 사이트들은 장단점이 있고 그것을 모르고 사용했으니 당연한 결과를 맞이했다고 생각한다.</p><p>이번 포스팅의 주제는 내가 경험한 각 블로그 사이트들의 장단점들을 정리 정도 되겠다. 물론 어디까지나 기술 블로그라는 카테고리 안에서 <strong>Brunch, Tistory, GitHub Page</strong>의 장단점을 소개할 것이다.<br><del>각 블로그 사이트들은 한 달 정도밖에 사용 한 건 비밀</del></p><h2><span id="brunch">Brunch</span></h2><p><img src="https://i.imgur.com/vFOrEl9.png" alt=""><br>브런치는 정말 심플하다. 글자 폰트, 인용구, 사진첨부, 외부 링크 추가는 정말 단순하고 간단하며 아름답다.<br>어떻게 보면 다른 블로그 사이트들보다 기능이 적어 보일 수 있으나, <strong><em>이러한 심플한 기능들로 포스팅 내용을 통일성 있게 유지 할 수 있고, 사용자는 많은 것을 생각하게 하지 않고 포스팅할 주제에 최대한 집중할 수 있게 해준다.</em></strong></p><h3><span id="통계기능">통계기능</span></h3><p><img src="https://i.imgur.com/ErnweLf.png" alt=""><br>검색어 유입경로, 글자별 조회 수, 소셜 공유 횟수 등 내 글에 대한 간단한 통계도 심플하게 표현해주고 있어 포스팅후 보는 재미가 쏠쏠하다. 그리고 검색 노출도 잘되는 편이다.</p><h3><span id="맞춤법-검사기능">맞춤법 검사기능</span></h3><p><img src="https://i.imgur.com/gFi6ggt.png" alt=""><br>맞춤법 및 띄어쓰기를 많이 틀리는 나로서는 필수적인 기능이다. 발행하기 전 한 번만 검사를 진행하면 되니 정말 편리하다.</p><h2><span id="하지만">하지만…</span></h2><p><strong><em>내가 Brunch 떠나게 된 가장 큰 이유는 소스코드를 올리는 것이 너무 불편하다는 것이다.</em></strong><br>위에서 설명했듯이 브런치는 통일성 있게 포스팅 내용을 유지하기 위해서 사용자의 커스텀마이징을 거의 지원하지 않기 때문에<br>다른 사용자는 스크린샷을 그대로 올리던가, 코드를 좀 정렬을 해서 올린다.</p><p>Brunch는 정말 단순하고, 통일성 있으며 사용자에게 포스팅할 주제만 집중하게 해주는 좋은 플랫폼이다.<br>하지만 소스코드를 많이 올리는 개발 블로그로는 <strong><em>내 개인적인 생각은 별로다.</em></strong></p><p>물론 코드를 많이 안 올 리는 기술 블로그로는 정말 괜찮은 플랫폼이라고 생각한다.</p><h2><span id="tistory">Tistory</span></h2><p>위에서 설명한 소스코드 문제 때문에 Tistroy로 이전을 했다. 물론 또 GitHub Page로 이전했지만…</p><p>티스토리는 뭐가 <strong><em>&quot;니네들이 뭘 좋아하는지 몰라서 일단 다 준비해봤어&quot;</em></strong> 느낌이랄까? 브런치와는 상당히 대조적인 모습이다. 그럼 티스토리의 특징들을 살펴보자</p><h3><span id="편리한-스킨-변경">편리한 스킨 변경</span></h3><p><img src="https://i.imgur.com/gFi6ggt.png" alt=""></p><p>다양한 스킨을 클릭 몇 번으로 변경이 가능하다. 물론 나한테는 큰 의미가 있는 기능은 아니지만 편리한 기능은 분명하다.</p><h3><span id="다양한-플러그인">다양한 플러그인</span></h3><p><img src="https://i.imgur.com/XcQt4mQ.png" alt=""></p><p>다양한 플러그인들을 쉽게 설치할 수 있다. 방문 통계, 글 내보내기 기능(쉽게 소셜 플랫폼을 이용해서 공유시키는 기능) 등등을 쉽게 지원받을 수 있다.</p><h3><span id="htmlcss-편집">HTML/CSS  편집</span></h3><p><img src="https://i.imgur.com/XRq4Xgm.png" alt=""></p><p>사용자가 직접 블로그를 수정할 수 있는 기능을 제공해준다.</p><h3><span id="하지만">하지만</span></h3><p>내가 경험한 티스토리는 일반인(비 개발자)들에게 편리하게 블로그에 대한 다양한 커스텀마이징을 제공해준다.<br>비 개발자 분들에게는 티스토리는 내 입맛대로 편리하게 고칠 수 있는 블로그 플랫폼이다.<br><strong><em>하지만 나는 개발자고 이들이 제공해주는 방법을 통해서 변경하는 것은 더 시간이 걸리고 귀찮다.</em></strong></p><p><img src="https://i.imgur.com/jdEEavP.png" alt=""><br><strong><em>무엇 보다도 티스토리에서 깃허브 페이지로 옮긴 결정적인 이유는 생산성의 문제이다.</em></strong></p><p>포스팅을 하면 소스코드를 올리던지, 특정 부분을 강조시킨다 던지 등의 다양한 작업을 할 때마다.<br>위의 이벤트를 마우스로 누르고 글 쓰고 또 누르고 글을 쓰고 이러다 보니 생산성이 현저하게 떨어진다.<br><strong><em>포스팅내용을 통일성 있게 유지해야 하는 건 사용자의 몫인것이다.</em></strong></p><p>그래서 한번더 블로그 이전을 하게 되는데…</p><h2><span id="github-page-amp-jekyll">GitHub Page &amp; Jekyll</span></h2><p><img src="https://i.imgur.com/jdEEavP.png" alt=""></p><ul><li><strong><em>소스코드 올리는 것이 편리해야 한다.</em></strong></li><li><strong><em>포스팅 생산성이 좋아야한다.</em></strong></li><li><strong><em>글을 통일성 있게 작성할 수 있어야 한다.</em></strong></li></ul><p>위의 블로그 플랫폼에서 불만이 있었고, 나는 위의 요구사항에 만족하는 블로그 플랫폼을 찾던 중 <strong>GitHub Page</strong>가 제격이라는 생각이 들었다.</p><p><strong>GitHub Page</strong>는 GitHub 저장소의 내용을 웹 페이지로 공짜로 서비스해주는 기능으로 주로 스택틱한 컨텐츠<br>(오픈소스 기술문서)를 주로 서비스합니다. 하지만 여기에 <strong>Jekyll</strong>를 결합하면 다이나믹한 블로그를 만들 수 있다.</p><h3><span id="원큐에-해결">원큐에 해결</span></h3><p>아래 그림처럼 <strong><a href="http://xxx.md" rel="external nofollow noopener noreferrer" target="_blank">xxx.md</a></strong>로 글을 작성하면 <strong><em>Jekyll가 미리 정의된 형식에 맞게 HTML로 알아서 변경시켜준다.</em></strong></p><p><img src="https://i.imgur.com/f9D6CqI.png" alt=""><br><img src="https://i.imgur.com/pCeiCwT.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hello, GitHub Page'</span>); <span class="comment">//위의 소스코드가 최종적으로 나타나는 형태</span></div></pre></td></tr></table></figure><p><strong>마크다운 문법을 통해서 소스코드 올리는 것, 포스팅 생산성, 통일성 있는 글 작성 등 그동안 내가 불편했던 문제를 다 해결했다.</strong></p><h3><span id="장점">장점</span></h3><ul><li>위에서 설명했듯이 마크다운 문법을 통해서 블로그 포스팅을 작성하니 생산성은 정말 좋다.</li><li>Git을 통해서 블로그 형상관리를 하게 되니 중간중간 글 저장 하기가 편리하다.</li><li>GitHub와 친해질 수 있다.</li><li>IDE를 통해서 포스팅을 하니 근무시간에도 자유스럽게 작성할 수 있다. (다들 내가 일하는 줄안다)</li></ul><h3><span id="단점">단점</span></h3><ul><li>설정하기 좀 귀찮다.</li><li>하나부터 열까지 내가 다 설정해야 한다.</li><li>기초 지식이 조금 필요하다.</li><li>여차하면 필요기능을 내가 만들어야 한다.</li><li>블로그 노출이 상대적으로 안되는 편이다.</li><li>방문자 통계 기능이 없다.</li></ul><h3><span id="나의-생각">나의 생각</span></h3><p>위에서 말했듯이 <strong><em>&quot;개발자는 게을러지기 위해서 좀 더 부지런해야 한다.&quot;</em></strong> 말은 내 인생 지론 중에 하나다.<br>앞으로 게을러지기 위해서 나는 조금 더 부지런하게 설정했고 3번의 블로그 이전을 경험한 나름 베테랑 삽질 블로거가 되었다…</p><p>또 블로그 노출이 안 되는 점, 통계 기능이 없는 점은<br><strong><em>구글 웹 마스터, 네이버 웹 마스터, 구글 에널틱스</em></strong>를 통해서 해결할 수 있다.<br>이 내용은 다음 포스팅에서 다룰 예정이니 자주 와주세요 ^^</p><h3><span id="그래서-결론은">그래서 결론은?</span></h3><p>어디까지나 저의 견해이고 다른 블로그 플랫폼에 대해서 비난하려는 의도는 없습니다.<br>개발 기술 블로그 사이트 플랫폼 중에서 나는 이런 점이 불편했고, 이런 이런 점 때문에 GitHub Page에 정착했다.<br>라는 작은 저의 블로그 이전에 대한 회고록? 이였습니다.</p><p>지금 블로그를 시작하려는 당신에게 가장 해주고 싶은 말은 <strong><em>&quot;일단 시작해라.&quot;</em></strong> 입니다.<br>블로그를 하시면서 불편한 점이 있으면 저처럼 다른 플랫폼을 찾아보게 될 것이고,<br>아니면 다른 해결 방안을 찾을 수도 있을 것입니다. <strong><em>그러니 지금 시작해보세요. 완벽한 준비는 없습니다.</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;블로그 포스팅을 하면서 이것저것 불편 하점을 느끼다 보니 &lt;strong&gt;Brunch&lt;/strong&gt;에서 &lt;strong&gt;Tistory&lt;/strong&gt;로 또 &lt;strong&gt;Tistory&lt;/strong&gt;에서 &lt;strong&gt;GitHub Page&lt;/str
      
    
    </summary>
    
    
  </entry>
  
</feed>
