<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yun Blog</title>
  <icon>https://www.gravatar.com/avatar/d313a2c442931458ed624a3999d75011</icon>
  <subtitle>기술 블로그</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://cheese10yun.github.io/"/>
  <updated>2019-07-07T05:36:18.451Z</updated>
  <id>https://cheese10yun.github.io/</id>
  
  <author>
    <name>Yun</name>
    <email>cheese10yun@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Actuator 기초 설정</title>
    <link href="https://cheese10yun.github.io/spring-actuator/"/>
    <id>https://cheese10yun.github.io/spring-actuator/</id>
    <published>2019-07-03T17:27:00.000Z</published>
    <updated>2019-07-07T05:36:18.451Z</updated>
    
    <content type="html"><![CDATA[<p><strong>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/actuator" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에 공개되어 있습니다.</strong></p><p>스프링은 Actuator를 이용해서 애플리케이션 상태를 종합적으로 모니터링할 수 있습니다.</p><h2><span id="의존성-주입">의존성 주입</span></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-actuator'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="actuator-호출">actuator 호출</span></h2><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/actuator/images/postman-api-call.png" alt=""></p><p><code>http://localhost:8890/actuator</code>를 호출하면 위와 같은 Response를 받을 수 있습니다. 기본 설정으로는 모든 endpoint가 노출돼있지는 않습니다. 모든 endpoint를 노출하도록 설정해보겠습니다.</p><h2><span id="endpoints-전체-노출">endpoints 전체 노출</span></h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># application.yml</span></div><div class="line"><span class="attr">management:</span></div><div class="line"><span class="attr">  endpoints:</span></div><div class="line"><span class="attr">    web:</span></div><div class="line"><span class="attr">      exposure:</span></div><div class="line"><span class="attr">        include:</span> <span class="string">"*"</span></div></pre></td></tr></table></figure><p><code>application.yml</code> 설정을 변경하고 다시 <code>/actuator</code> 호출하면 아래 Response와 같습니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"_links"</span>: &#123;</div><div class="line">        <span class="attr">"self"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"auditevents"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/auditevents"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"beans"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/beans"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"caches-cache"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/caches/&#123;cache&#125;"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"caches"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/caches"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"health"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/health"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"health-component"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/health/&#123;component&#125;"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"health-component-instance"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/health/&#123;component&#125;/&#123;instance&#125;"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"conditions"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/conditions"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"configprops"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/configprops"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"env"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/env"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"env-toMatch"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/env/&#123;toMatch&#125;"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"info"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/info"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"loggers"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/loggers"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"loggers-name"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/loggers/&#123;name&#125;"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"heapdump"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/heapdump"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"threaddump"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/threaddump"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"metrics-requiredMetricName"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/metrics/&#123;requiredMetricName&#125;"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"metrics"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/metrics"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"scheduledtasks"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/scheduledtasks"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"httptrace"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/httptrace"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"mappings"</span>: &#123;</div><div class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/mappings"</span>,</div><div class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><table><thead><tr><th>경로</th><th>설명</th></tr></thead><tbody><tr><td>/beans</td><td>초기화된 모든 스프링 빈의 목록을 표시</td></tr><tr><td>/env</td><td>스프링 설정 가능한 환경 속성 목록욜 표시, OS 환경 변수 및 컨피규레이션 파일의 속성 목록</td></tr><tr><td>/health</td><td>애플리케이션 상태 정보 표시</td></tr><tr><td>/info</td><td>애플리케이션의 임의 정보 표시 properties 등</td></tr><tr><td>/loggers</td><td>로거 컨피규레이션 정보를 표시하고 수정</td></tr><tr><td>/metrics</td><td>매트릭스 정보를 표시(메모리, 실행중인 스레드 수, REST 메서드 응답 시간)</td></tr><tr><td>/trace</td><td>트레이스 정뵤 표시(기본적으로 마지막 100개의 HTTP Request)</td></tr></tbody></table><p>다양한 정보들이 포함되어 있습니다. 필요한 정보들을 확인한 후 아래와 같이 필요한 정보들만 노출할 수 있습니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="attr">management:</span></div><div class="line"><span class="attr">  endpoints:</span></div><div class="line"><span class="attr">    web:</span></div><div class="line"><span class="attr">      exposure:</span></div><div class="line"><span class="attr">        include:</span></div><div class="line"><span class="bullet">          -</span> <span class="string">"info"</span></div><div class="line"><span class="bullet">          -</span> <span class="string">"health"</span></div><div class="line"><span class="bullet">          -</span> <span class="string">"httptrace"</span></div></pre></td></tr></table></figure><p><code>application.yml</code> 변경이후 다시 <code>/actuator</code>을 호출하면 <code>include</code>에 포함시킨 endpoint만 Response 받게 됩니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"_links"</span>: &#123;</div><div class="line">    <span class="attr">"self"</span>: &#123;</div><div class="line">      <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator"</span>,</div><div class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"health"</span>: &#123;</div><div class="line">      <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/health"</span>,</div><div class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"health-component"</span>: &#123;</div><div class="line">      <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/health/&#123;component&#125;"</span>,</div><div class="line">      <span class="attr">"templated"</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"health-component-instance"</span>: &#123;</div><div class="line">      <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/health/&#123;component&#125;/&#123;instance&#125;"</span>,</div><div class="line">      <span class="attr">"templated"</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"info"</span>: &#123;</div><div class="line">      <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/info"</span>,</div><div class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"httptrace"</span>: &#123;</div><div class="line">      <span class="attr">"href"</span>: <span class="string">"http://localhost:8890/actuator/httptrace"</span>,</div><div class="line">      <span class="attr">"templated"</span>: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="info-git-info-노출하기">Info Git Info 노출하기</span></h2><p>기본 설정에서 <code>actuator/info</code> 호출시 아무 정보도 Response를 하지 않습니다. plugin을 이용하면 git에 대한 정보를 쉽게 노출할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    ...</div><div class="line">    dependencies &#123;</div><div class="line">        ...</div><div class="line">        classpath &quot;gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.0.0&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">apply plugin: &quot;com.gorylenko.gradle-git-properties&quot;</div></pre></td></tr></table></figure><p>필요한 디펜던시를 추가합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">management:</span></div><div class="line">  <span class="string">...</span></div><div class="line"><span class="attr">  info:</span></div><div class="line"><span class="attr">    git:</span></div><div class="line"><span class="attr">      mode:</span> <span class="string">SIMPLE</span> <span class="comment"># FULL or SIMPLE</span></div></pre></td></tr></table></figure><p>git 정보에 대한 mode를 SMPLE, FULL을 지정할 수 있습니다. 이후에 서버를 실행시키면 아래 그림처럼 <code>git.properties</code> 파일에 Git에 대한 정보가 담겨있습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/actuator/images/actuator-info-git-file.png" alt=""></p><h3><span id="simple-mode">SIMPLE Mode</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"git"</span>: &#123;</div><div class="line">    <span class="attr">"commit"</span>: &#123;</div><div class="line">      <span class="attr">"time"</span>: <span class="string">"2019-07-02T16:31:35Z"</span>,</div><div class="line">      <span class="attr">"id"</span>: <span class="string">"293e840"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"branch"</span>: <span class="string">"master"</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure><h3><span id="full-mode">FULL Mode</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"git"</span>: &#123;</div><div class="line">    <span class="attr">"build"</span>: &#123;</div><div class="line">      <span class="attr">"host"</span>: <span class="string">"yun"</span>,</div><div class="line">      <span class="attr">"version"</span>: <span class="string">"0.0.1-SNAPSHOT"</span>,</div><div class="line">      <span class="attr">"time"</span>: <span class="string">"2019-07-03T16:49:41Z"</span>,</div><div class="line">      <span class="attr">"user"</span>: &#123;</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"Yun"</span>,</div><div class="line">        <span class="attr">"email"</span>: <span class="string">"cheese10yun@gmail.com"</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"branch"</span>: <span class="string">"master"</span>,</div><div class="line">    <span class="attr">"commit"</span>: &#123;</div><div class="line">      <span class="attr">"message"</span>: &#123;</div><div class="line">        <span class="attr">"short"</span>: <span class="string">"오타 수정"</span>,</div><div class="line">        <span class="attr">"full"</span>: <span class="string">"오타 수정\n"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"id"</span>: &#123;</div><div class="line">        <span class="attr">"describe"</span>: <span class="string">""</span>,</div><div class="line">        <span class="attr">"abbrev"</span>: <span class="string">"293e840"</span>,</div><div class="line">        <span class="attr">"full"</span>: <span class="string">"293e840b752531eafb1be55e9cec78113743dd8d"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="attr">"time"</span>: <span class="string">"2019-07-02T16:31:35Z"</span>,</div><div class="line">      <span class="attr">"user"</span>: &#123;</div><div class="line">        <span class="attr">"email"</span>: <span class="string">"cheese10yun@gmail.com"</span>,</div><div class="line">        <span class="attr">"name"</span>: <span class="string">"Yun"</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"closest"</span>: &#123;</div><div class="line">      <span class="attr">"tag"</span>: &#123;</div><div class="line">        <span class="attr">"name"</span>: <span class="string">""</span>,</div><div class="line">        <span class="attr">"commit"</span>: &#123;</div><div class="line">          <span class="attr">"count"</span>: <span class="string">""</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"dirty"</span>: <span class="string">"true"</span>,</div><div class="line">    <span class="attr">"remote"</span>: &#123;</div><div class="line">      <span class="attr">"origin"</span>: &#123;</div><div class="line">        <span class="attr">"url"</span>: <span class="string">"https://github.com/cheese10yun/blog-sample.git"</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"tags"</span>: <span class="string">""</span>,</div><div class="line">    <span class="attr">"total"</span>: &#123;</div><div class="line">      <span class="attr">"commit"</span>: &#123;</div><div class="line">        <span class="attr">"count"</span>: <span class="string">"212"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>mode</code>에 따라서 출력되는 정보가 다릅니다.</p><h2><span id="health-database">Health Database</span></h2><p>기본 설정에서 <code>/actuator/health</code>를 호출하면 아래와 같은 응답 정보를 받을 수 있습니다. (데이터베이스 정보를 표시하기 위해서 H2 의존성을 추가했습니다.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;status&quot;: &quot;UP&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>데이터베이스에 대한 정보를 추가적으로 확인하기 위해서는 <code>application.yml</code>을 추가적으로 설정하면 됩니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="attr">management:</span></div><div class="line">  <span class="string">...</span></div><div class="line"><span class="attr">  endpoint:</span></div><div class="line"><span class="attr">    health:</span></div><div class="line"><span class="attr">      enabled:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      show-details:</span> <span class="string">always</span></div></pre></td></tr></table></figure><p>위 설정을 추가하시고 <code>/actuator/health</code>를 다시 호출하면 아래와 같은 Response를 확인할 수 있습니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"status"</span>: <span class="string">"UP"</span>,</div><div class="line">  <span class="attr">"details"</span>: &#123;</div><div class="line">    <span class="attr">"db"</span>: &#123;</div><div class="line">      <span class="attr">"status"</span>: <span class="string">"UP"</span>,</div><div class="line">      <span class="attr">"details"</span>: &#123;</div><div class="line">        <span class="attr">"database"</span>: <span class="string">"H2"</span>,</div><div class="line">        <span class="attr">"hello"</span>: <span class="number">1</span></div><div class="line">      &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"diskSpace"</span>: &#123;</div><div class="line">      <span class="attr">"status"</span>: <span class="string">"UP"</span>,</div><div class="line">      <span class="attr">"details"</span>: &#123;</div><div class="line">        <span class="attr">"total"</span>: <span class="number">500068036608</span>,</div><div class="line">        <span class="attr">"free"</span>: <span class="number">389070479360</span>,</div><div class="line">        <span class="attr">"threshold"</span>: <span class="number">10485760</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="base-path-변경하기">Base Path 변경하기</span></h2><p>기본으로 제공해주는 URL 정보는 변경해서 사용하는 것이 바람직합니다. <code>base-path</code> 속성을 이용하면 endpoint base path를 변경할 수 있습니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">management:</span></div><div class="line"><span class="attr">  endpoints:</span></div><div class="line">    <span class="string">...</span></div><div class="line"><span class="attr">    web:</span></div><div class="line"><span class="attr">      base-path:</span> <span class="string">"/system"</span></div></pre></td></tr></table></figure><p><code>base-path</code>을 변경하면 아래와 같이 endpoint base path가 변경되는 것을 확인할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/actuator/images/actuator-base-path.png" alt=""></p><h2><span id="intellij-endpint">IntelliJ Endpint</span></h2><p>IntelliJ를 이용하면 Actuator를 더욱 잘 활용할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/actuator/images/endpoint-mapping.png" alt=""></p><p>Run/Debug Tab에서 Endpoints에서는 전체 Request Mapping를 볼 수 있습니다. 실제 <code>Run HTTP Request</code>를 이용하면 요청을 보낼 수 있습니다.</p><p>우 클릭 이후 Edit을 활용하면 실제 매핑된 Controller 코드로 이동되어 컨트롤러에 있는 특정 Request Mapping 정보를 쉽게 찾을 수 있습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/actuator/images/endpoints-beans.png" alt=""></p><p><code>Beans</code> Tab에서는 등록돼있는 Bean들을 볼 수 있습니다. 스프링 부트에서는 특정 빈의 유무에 따라서 설정들이 변경되는 일이 많기 때문에 디버깅 시 유용하게 사용할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/actuator/images/endpoints-heath.png" alt=""></p><p><code>Health</code> Tab에서는 위에서 확인한 heath 정보도 확인할 수 있습니다. Http 요청을 보내서 확인하는 것보다는 인텔리 제이에서 확인하는 것이 개인적으로는 편리한 거 같습니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/actuator/images/intellij-api-call.gif" alt=""></p><p>Controller에서 HTTP Call을 위 그림처럼 진행할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/actuator&quot; rel=&quot;external nofollow noopener noreferrer&quot; targ
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Actuator" scheme="https://cheese10yun.github.io/tags/Actuator/"/>
    
  </entry>
  
  <entry>
    <title>인텔리제이 Spring Boot Run Gradle에게 위임하기</title>
    <link href="https://cheese10yun.github.io/intellij-delegate-gradle/"/>
    <id>https://cheese10yun.github.io/intellij-delegate-gradle/</id>
    <published>2019-07-02T16:05:00.000Z</published>
    <updated>2019-07-03T15:49:56.357Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/out-dir.png" alt=""></p><p>인텔리제이에서 Gradle Spring Boot Run을 실행시킬 경우 out 디렉토리가 생성됩니다. Gradle 플러그들이나 Task 작업에 추가적인 것들이 <code>out</code> 디렉토리에 반영이 되지 않습니다. 인텔리제이에서는 Sprong Boot Run 작업을 Gradle에게 위임하는 옵션이 있습니다. 이 옵션으로 인텔리제이에서 Gradle을 사용하여 Run을 동작시킬수 있습니다.</p><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/intellij-delegate-build.png" alt=""></p><p>preference -&gt; Gradle -&gt; Runner -&gt; Delegate IDE … CheckBox를 선택</p><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/non-out-dir.png" alt=""></p><p>이제 인텔리제이를 실행하더라도 <code>out</code> 디렉토리가 생성되지 않은것을 확인할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://github.com/cheese10yun/IntelliJ/raw/master/assets/out-dir.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;인텔리제이에서 Gradle Spring Boot Run을 실행시킬 경우 o
      
    
    </summary>
    
    
      <category term="Gradle" scheme="https://cheese10yun.github.io/tags/Gradle/"/>
    
      <category term="IntelliJ" scheme="https://cheese10yun.github.io/tags/IntelliJ/"/>
    
      <category term="Tip" scheme="https://cheese10yun.github.io/tags/Tip/"/>
    
  </entry>
  
  <entry>
    <title>Spring Guide - Directory</title>
    <link href="https://cheese10yun.github.io/spring-guide-directory/"/>
    <id>https://cheese10yun.github.io/spring-guide-directory/</id>
    <published>2019-06-15T15:45:00.000Z</published>
    <updated>2019-06-15T15:42:58.335Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/spring-guide" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><p>패키지 구성은 크게 레이어 계층형, 도메인형 이렇게 2 가지 유형이 있다고 생각합니다. 각 유형별로 간단하게 설명하고 제 개인적인 Best Practices를 설명하겠습니다.</p><h2><span id="계층형">계층형</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">└── src</div><div class="line">    ├── main</div><div class="line">    │   ├── java</div><div class="line">    │   │   └── com</div><div class="line">    │   │       └── example</div><div class="line">    │   │           └── demo</div><div class="line">    │   │               ├── DemoApplication.java</div><div class="line">    │   │               ├── config</div><div class="line">    │   │               ├── controller</div><div class="line">    │   │               ├── dao</div><div class="line">    │   │               ├── domain</div><div class="line">    │   │               ├── exception</div><div class="line">    │   │               └── service</div><div class="line">    │   └── resources</div><div class="line">    │       └── application.properties</div></pre></td></tr></table></figure><p>계층형 구조는 각 계층을 대표하는 디렉터리를 기준으로 코드들이 구성됩니다. 계층형 구조의 장점은 해당 프로젝트에 이해가 상대적으로 낮아도 전체적인 구조를 빠르게 파악할 수 있는 장점이 있습니다. 단점으로는 디렉터리에 클래스들이 너무 많이 모이게 되는 점입니다.</p><h2><span id="도메인형">도메인형</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">└── src</div><div class="line">    ├── main</div><div class="line">    │   ├── java</div><div class="line">    │   │   └── com</div><div class="line">    │   │       └── example</div><div class="line">    │   │           └── demo</div><div class="line">    │   │               ├── DemoApplication.java</div><div class="line">    │   │               ├── coupon</div><div class="line">    │   │               │   ├── controller</div><div class="line">    │   │               │   ├── domain</div><div class="line">    │   │               │   ├── exception</div><div class="line">    │   │               │   ├── repository</div><div class="line">    │   │               │   └── service</div><div class="line">    │   │               ├── member</div><div class="line">    │   │               │   ├── controller</div><div class="line">    │   │               │   ├── domain</div><div class="line">    │   │               │   ├── exception</div><div class="line">    │   │               │   ├── repository</div><div class="line">    │   │               │   └── service</div><div class="line">    │   │               └── order</div><div class="line">    │   │                   ├── controller</div><div class="line">    │   │                   ├── domain</div><div class="line">    │   │                   ├── exception</div><div class="line">    │   │                   ├── repository</div><div class="line">    │   │                   └── service</div><div class="line">    │   └── resources</div><div class="line">    │       └── application.properties</div></pre></td></tr></table></figure><p>도메인 디렉터리 기준으로 코드를 구성합니다. 도메인형의 장점은 관련된 코드들이 응집해 있는 장점이 있습니다. 단점으로는 프로젝트에 대한 이해도가 낮을 경우 전체적인 구조를 파악하기 어려운 점이 있습니다.</p><h2><span id="개인적인-best-practices">개인적인 Best Practices</span></h2><p><strong>저는 도메인형이 더 좋은 구조라고 생각합니다.</strong> 이전부터 도메인형을 선호했었지만 이러한 디렉터리 구조는 어느 정도 취향 차이라고 생각해 왔었습니다. <strong>하지만 최근 들어 취향 차이를 넘어 도메인형 디렉터리 구조가 더 효과적</strong>이라고 확신이 들어 이 주제로 포스팅을 해야겠다는 생각을 했습니다.</p><h3><span id="너무-많은-클래스">너무 많은 클래스</span></h3><p>계층형 같은 경우 Controller, Service 등에 너무 많은 클래스들이 밀집하게 됩니다. 많게는 30 ~ 40의 클래스들이 xxxxController, xxxxService 같은 패턴으로 길게 나열되어 프로젝트 전체적인 구조는 상단 디렉터리 몇 개로 빠르게 파악할 수 있지만 그 이후로는 파악하기가 더 힘들어지게 됩니다.</p><h3><span id="관련-코드의-응집">관련 코드의 응집</span></h3><p>관련된 코드들이 응집해 있으면 자연스럽게 연관돼 있는 자연스럽게 코드 스타일, 변수, 클래스 이름 등을 참고하게 되고 비슷한 코드 스타일과 패턴으로 개발할 수 있게 될 환경이 자연스럽게 마련된다고 생각합니다.</p><p>계층형 구조일 경우 수신자에 대한 클래스명을 Receiver로 지정했다면, 너무 많은 클래스들로 Receiver에 대한 클래스가 자연스럽게 인식하지 않게 되고 Recipient 같은 클래스 명이나 네이밍을 사용하게 됩니다. 반변 도메인형은 관련된 코드들이 응집해있기 때문에 자연스럽게 기존 코드를 닮아갈 수 있다고 생각합니다.</p><p>또 해당 디렉터리가 컨텍스트를 제공해줍니다. order라는 디렉터리에 Receiver 클래스가 있는 경우 주문을 배송받는 수취인이라는 컨텍스트를 제공해줄 수 있습니다. (물론 OrderReceiver라고 더 구체적으로 명명하는 게 더 좋은 네이밍이라고 생각합니다.)</p><h3><span id="최근-기술-동향">최근 기술 동향</span></h3><p>도메인 주도 개발, ORM, 객체지향 프로그래밍 등에서 도메인형 구조가 더 적합하다고 생각합니다. 도메인 주도 개발에서 Root Aggregate 같은 표현은 계층형보다 도메인형으로 표현했을 경우 훨씬 더 직관적이며 해당 도메인을 이해하는 것에도 효율적입니다.</p><h2><span id="도메인형-디렉토리-구조">도메인형 디렉토리 구조</span></h2><p>도메인 계층으로 디렉터리 구조를 몇몇 프로젝트에서 진행해 보았지만 그때마다 더 좋은 구조를 찾게 되기 조금 더 발전시키는 가정이다 보니 아직은 아주 명확한 근거를 기반으로 하지는 못하고 있습니다. 약간 코에 걸면 코걸이 느낌이 있습니다.</p><h3><span id="전체적인-구조">전체적인 구조</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">└── src</div><div class="line">    ├── main</div><div class="line">    │   ├── java</div><div class="line">    │   │   └── com</div><div class="line">    │   │       └── spring</div><div class="line">    │   │           └── guide</div><div class="line">    │   │               ├── ApiApp.java</div><div class="line">    │   │               ├── SampleApi.java</div><div class="line">    │   │               ├── domain</div><div class="line">    │   │               │   ├── coupon</div><div class="line">    │   │               │   │   ├── api</div><div class="line">    │   │               │   │   ├── application</div><div class="line">    │   │               │   │   ├── dao</div><div class="line">    │   │               │   │   ├── domain</div><div class="line">    │   │               │   │   ├── dto</div><div class="line">    │   │               │   │   └── exception</div><div class="line">    │   │               │   ├── member</div><div class="line">    │   │               │   │   ├── api</div><div class="line">    │   │               │   │   ├── application</div><div class="line">    │   │               │   │   ├── dao</div><div class="line">    │   │               │   │   ├── domain</div><div class="line">    │   │               │   │   ├── dto</div><div class="line">    │   │               │   │   └── exception</div><div class="line">    │   │               │   └── model</div><div class="line">    │   │               │       ├── Address.java</div><div class="line">    │   │               │       ├── Email.java</div><div class="line">    │   │               │       └── Name.java</div><div class="line">    │   │               ├── global</div><div class="line">    │   │               │   ├── common</div><div class="line">    │   │               │   │   ├── request</div><div class="line">    │   │               │   │   └── resonse</div><div class="line">    │   │               │   ├── config</div><div class="line">    │   │               │   │   ├── SwaggerConfig.java</div><div class="line">    │   │               │   │   ├── properties</div><div class="line">    │   │               │   │   ├── resttemplate</div><div class="line">    │   │               │   │   └── security</div><div class="line">    │   │               │   ├── error</div><div class="line">    │   │               │   │   ├── ErrorResponse.java</div><div class="line">    │   │               │   │   ├── GlobalExceptionHandler.java</div><div class="line">    │   │               │   │   └── exception</div><div class="line">    │   │               │   └── util</div><div class="line">    │   │               └── infra</div><div class="line">    │   │                   ├── email</div><div class="line">    │   │                   └── sms</div><div class="line">    │   │                       ├── AmazonSmsClient.java</div><div class="line">    │   │                       ├── SmsClient.java</div><div class="line">    │   │                       └── dto</div><div class="line">    │   └── resources</div><div class="line">    │       ├── application-dev.yml</div><div class="line">    │       ├── application-local.yml</div><div class="line">    │       ├── application-prod.yml</div><div class="line">    │       └── application.yml</div></pre></td></tr></table></figure><p>전체적인 구조는 도메인을 담당하는 디렉터리 domain, 전체적인 설정을 관리하는 global, 외부 인프라스트럭처를 관리하는 infra를 기준으로 설명을 드리겠습니다.</p><h3><span id="domain">Domain</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">├── domain</div><div class="line">│   ├── member</div><div class="line">│   │   ├── api</div><div class="line">│   │   │   └── MemberApi.java</div><div class="line">│   │   ├── application</div><div class="line">│   │   │   ├── MemberProfileService.java</div><div class="line">│   │   │   ├── MemberSearchService.java</div><div class="line">│   │   │   ├── MemberSignUpRestService.java</div><div class="line">│   │   │   └── MemberSignUpService.java</div><div class="line">│   │   ├── dao</div><div class="line">│   │   │   ├── MemberFindDao.java</div><div class="line">│   │   │   ├── MemberPredicateExecutor.java</div><div class="line">│   │   │   ├── MemberRepository.java</div><div class="line">│   │   │   ├── MemberSupportRepository.java</div><div class="line">│   │   │   └── MemberSupportRepositoryImpl.java</div><div class="line">│   │   ├── domain</div><div class="line">│   │   │   ├── Member.java</div><div class="line">│   │   │   └── ReferralCode.java</div><div class="line">│   │   ├── dto</div><div class="line">│   │   │   ├── MemberExistenceType.java</div><div class="line">│   │   │   ├── MemberProfileUpdate.java</div><div class="line">│   │   │   ├── MemberResponse.java</div><div class="line">│   │   │   └── SignUpRequest.java</div><div class="line">│   │   └── exception</div><div class="line">│   │       ├── EmailDuplicateException.java</div><div class="line">│   │       ├── EmailNotFoundException.java</div><div class="line">│   │       └── MemberNotFoundException.java</div><div class="line">│   └── model</div><div class="line">│       ├── Address.java</div><div class="line">│       ├── Email.java</div><div class="line">│       └── Name.java</div></pre></td></tr></table></figure><p><code>model</code> 디렉터리는 Domain Entity 객체들이 공통적으로 사용할 객체들로 구성됩니다. 대표적으로 <code>Embeddable</code> 객체, <code>Enum</code> 객체 등이 있습니다.</p><p><code>member</code> 디렉터리는 간단한 것들부터 설명하겠습니다.</p><ul><li>api : 컨트롤러 클래스들이 존재합니다. 외부 rest api로 프로젝트를 구성하는 경우가 많으니 api라고 지칭했습니다. Controller 같은 경우에는 ModelAndView를 리턴하는 느낌이 있어서 명시적으로 api라고 하는 게 더 직관적인 거 같습니다.</li><li>domain : 도메인 엔티티에 대한 클래스로 구성됩니다. 특정 도메인에만 속하는 <code>Embeddable</code>, <code>Enum</code> 같은 클래스도 구성됩니다.</li><li>dto : 주로 Request, Response 객체들로 구성됩니다.</li><li>exception : 해당 도메인이 발생시키는 Exception으로 구성됩니다.</li></ul><h4><span id="application">application</span></h4><p>application 디렉터리는 도메인 객체와 외부 영역을 연결해주는 파사드와 같은 역할을 주로 담당하는 클래스로 구성됩니다. 대표적으로 데이터베이스 트랜잭션을 처리를 진행합니다. service 계층과 유사합니다. 디렉터리 이름을 service로 하지 않은 이유는 service로 했을 경우 xxxxService로 클래스 네임을 해야 한다는 강박관념이 생기기 때문에 application이라고 명명했습니다.</p><h4><span id="dao">dao</span></h4><p>repository 와 비슷합니다. repository로 하지 않은 이유는 조회 전용 구현체들이 작성 많이 작성되는데 이러한 객체들은 DAO라는 표현이 더 직관적이라고 판단했습니다. <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Querydsl를 이용해서 Repository 확장하기(1), (2)</a>처럼 Reopsitory를 DAO처럼 확장하기 때문에 dao 디렉터리 명이 더 직관적이라고 생각합니다.</p><h3><span id="global">global</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">├── global</div><div class="line">│   ├── common</div><div class="line">│   │   ├── request</div><div class="line">│   │   └── resonse</div><div class="line">│   │       └── Existence.java</div><div class="line">│   ├── config</div><div class="line">│   │   ├── SwaggerConfig.java</div><div class="line">│   │   ├── properties</div><div class="line">│   │   ├── resttemplate</div><div class="line">│   │   │   ├── RestTemplateClientHttpRequestInterceptor.java</div><div class="line">│   │   │   ├── RestTemplateConfig.java</div><div class="line">│   │   │   └── RestTemplateErrorHandler.java</div><div class="line">│   │   └── security</div><div class="line">│   ├── error</div><div class="line">│   │   ├── ErrorResponse.java</div><div class="line">│   │   ├── GlobalExceptionHandler.java</div><div class="line">│   │   └── exception</div><div class="line">│   │       ├── BusinessException.java</div><div class="line">│   │       ├── EntityNotFoundException.java</div><div class="line">│   │       ├── ErrorCode.java</div><div class="line">│   │       └── InvalidValueException.java</div><div class="line">│   └── util</div></pre></td></tr></table></figure><p>global은 프로젝트 전방위적으로 사용되는 객체들로 구성됩니다. global로 지정한 이유는 common, util, config 등 프로젝트 전체에서 사용되는 클래스들이 global이라는 디렉터리에 모여 있는 것이 좋다고 생각했습니다.</p><ul><li>common : 공통으로 사용되는 Value 객체들로 구성됩니다. 페이징 처리를 위한 Request, 공통된 응답을 주는 Response 객체들이 있습니다.</li><li>config : 스프링 각종 설정들로 구성됩니다.</li><li>error : 예외 핸들링을 담당하는 클래스로 구성됩니다. <a href="https://github.com/cheese10yun/spring-guide/blob/master/docs/exception-guide.md" rel="external nofollow noopener noreferrer" target="_blank">Exception Guide</a>에서 설명했던 코드들이 있습니다.</li><li>util : 유틸성 클래스들이 위치합니다.</li></ul><p>그 밖에도 global 하게 설정하는 것들을 global 디렉터리에 위치 시키면 될 거 같습니다.</p><h3><span id="infra">infra</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">└── infra</div><div class="line">    ├── email</div><div class="line">    └── sms</div><div class="line">        ├── AmazonSmsClient.java</div><div class="line">        ├── KtSmsClient.java</div><div class="line">        ├── SmsClient.java</div><div class="line">        └── dto</div><div class="line">            └── SmsRequest.java</div></pre></td></tr></table></figure><p>infra 디렉터리는 인프라스트럭처 관련된 코드들로 구성됩니다. 인프라스트럭처는 대표적으로 이메일 알림, SMS 알림 등 외부 서비스에 대한 코드들이 존재합니다. 그렇기 때문에 domain, global에 속하지 않습니다. global로 볼 수는 있지만 이 계층도 잘 관리해야 하는 대상이기에 별도의 디렉터리 했습니다.</p><p>인프라스트럭처는 대체성을 강하게 갔습니다. SMS 메시지를 보내는 클라이언트를 국내 사용자에게는 KT SMS, 해외 사용자에게는 Amazon SMS 클라이언트를 이용해서 보낼 수 있습니다.</p><p>만약 국내 서비스만 취급한다고 하더라도 언제 다른 플랫폼으로 변경될지 모르니 이런 인프라스트럭처는 기계적으로 인터페이스를 두고 개발하는 것이 좋습니다. 이런 측면에서 infra 디렉터리로 분리 시켜 관련 코드들을 모았습니다.</p><h2><span id="결론">결론</span></h2><p>도메인형 기준으로 디렉터리를 구성하디보니 도메인 디렉터리에 속하지 않은 config, util, error, common, infra 등을 어느 디렉터리에 위치시켜야 할지 고민을 했었고 global, infra로 분리해서 도메인에 속하지 않은 코드들을 위치 시켰습니다. 그러기 때문에 도메인형이라는 큰 틀에서는 어느 정도 자유롭게 구성을 하는 것이 좋습니다.</p><p>특히 DDD의 Root Aggregate 기준으로 디렉터리들이 위치하는 경우 디렉터리 위치만으로도 개발자에게 많은 컨텍스트를 전달해줄 수 있다고 생각합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-guide&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Git
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Guide" scheme="https://cheese10yun.github.io/tags/Guide/"/>
    
      <category term="Directory" scheme="https://cheese10yun.github.io/tags/Directory/"/>
    
  </entry>
  
  <entry>
    <title>Spring-JPA Best Practices step-16 - Querydsl를 이용해서 Repository 확장하기 (2)</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-16/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-16/</id>
    <published>2019-06-12T16:30:00.000Z</published>
    <updated>2019-06-13T13:16:52.963Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><p>JpaRepository의 쿼리 메서드를 통해서 간단한 쿼리들을 아래 예제 처럼 쉽게 만들수 있습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Account</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">existsByEmail</span><span class="params">(Email email)</span></span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">exsistByxxx</span><span class="params">(...)</span></span></div><div class="line"><span class="function"></span></div><div class="line"><span class="function">  <span class="keyword">long</span> <span class="title">countByEmail</span><span class="params">(Email email)</span></span>;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">long</span> <span class="title">countByxxx</span><span class="params">(...)</span></span></div><div class="line"><span class="function">&#125;</span></div></pre></td></tr></table></figure><p>유사한 쿼리가 필요해지면 쿼리 메서드를 지속적으로 추가해야 하는 단점이 있습니다. 이런 경우에 <code>QuerydslPredicateExecutor</code>를 사용하면 매우 효과적입니다.</p><h2><span id="querydslpredicateexecutor">QuerydslPredicateExecutor</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QuerydslPredicateExecutor</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">  ....</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">(Predicate predicate)</span></span>;            </div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(Predicate predicate)</span></span>;        </div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>QuerydslPredicateExecutor</code> 코드의 일부입니다. <code>Predicate</code>를 매개변수로 받고 있기 때문에 Predicate를 통해서 새로운 쿼리를 만들수 있습니다.</p><h2><span id="accountrepository-적용하기">AccountRepository 적용하기</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Account</span>, <span class="title">Long</span>&gt;, <span class="title">AccountSupportRepository</span>,</span></div><div class="line"><span class="class">    <span class="title">QuerydslPredicateExecutor</span>&lt;<span class="title">Account</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">        ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>AccountSupportRepository</code>는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices/blob/master/doc/step-15.md" rel="external nofollow noopener noreferrer" target="_blank">step-15: Querydsl를 이용해서 Repository 확장하기(1)</a> 에서 추가한 코드이고 <code>QuerydslPredicateExecutor&lt;Account&gt;</code> 코드만 추가하면 완료 됩니다.</p><h2><span id="querydslpredicateexecutor-사용하기">QuerydslPredicateExecutor 사용하기</span></h2><p><img src="https://github.com/cheese10yun/spring-jpa-best-practices/raw/master/images/AccountRepository2.png" alt=""></p><p><code>AccountRepository</code>는 <code>QuerydslPredicateExecutor</code>를 구현하고 있음으로 별다른 코드 없이 우리는 <code>AccountRepository</code>를 통해서 <code>QuerydslPredicateExecutor</code>의 메서드를 사용할 수 있습니다. 이것은 우리가 <code>AccountRepository</code>가 아무 메서드가 없어도 <code>JpaRepository</code>에 있는 findById, findAll 같은 메서드를 사용할 수 있는 이유와 동일합니다.</p><h3><span id="test-code">Test Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@DataJpaTest</span></div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRepositoryTest</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> AccountRepository accountRepository;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> QAccount qAccount = QAccount.account;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">predicate_test_001</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//given</span></div><div class="line">    <span class="keyword">final</span> Predicate predicate = qAccount.email.eq(Email.of(<span class="string">"test001@test.com"</span>));</div><div class="line"></div><div class="line">    <span class="comment">//when</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> exists = accountRepository.exists(predicate);</div><div class="line"></div><div class="line">    <span class="comment">//then</span></div><div class="line">    assertThat(exists).isTrue();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">predicate_test_002</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//given</span></div><div class="line">    <span class="keyword">final</span> Predicate predicate = qAccount.firstName.eq(<span class="string">"test"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//when</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">boolean</span> exists = accountRepository.exists(predicate);</div><div class="line"></div><div class="line">    <span class="comment">//then</span></div><div class="line">    assertThat(exists).isFalse();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">predicate_test_003</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">//given</span></div><div class="line">    <span class="keyword">final</span> Predicate predicate = qAccount.email.value.like(<span class="string">"test%"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//when</span></div><div class="line">    <span class="keyword">final</span> <span class="keyword">long</span> count = accountRepository.count(predicate);</div><div class="line"></div><div class="line">    <span class="comment">//then</span></div><div class="line">    assertThat(count).isGreaterThan(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Predicate 객체 생성을 통해서 쿼리메서드 코드 추가 없이 다양한 쿼리들을 쉽게 만들 수 있습니다.</p><p><img src="https://github.com/cheese10yun/spring-jpa-best-practices/raw/master/images/test-result.png" alt=""></p><p><code>predicate_test_001</code> 테스트 코드에 대한 실제 쿼리 내용입니다. 해당 쿼리가 어떻게 출력되는지 직접 눈으로 확인하는 습관을 갖는 것이 좋습니다.</p><h2><span id="결론">결론</span></h2><p>조회용 쿼리를 만드는 것은 실제 현업에서 많은 업무 비중을 차지하다 보니 작업자들은 다양한 조회 전용 구현체들을 우후죽순처럼 만들게 됩니다. 이렇게 되면 중복 코드가 많이 발생하게 되고, 구현체가 늘어나는 만큼 의존 관계도 자연스게 높아지게 됩니다.</p><p>이러한 문제를 위와 같이 객체지향 관점으로 풀어내어 <code>AccountRepository</code> 인터페이스를 통해서 DAO가 재공되고 세부 구현들을 숨길 수 있게 설계하는 것이 바람직하다고 생각합니다.</p><p><strong>단순하게 JPA를 잘 활용하는 것보다 위에서 언급한 내용을 조금 더 깊게 생각해보는 것이 이 포스팅에 취지입니다.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-jpa-best-practices&quot; rel=&quot;external nofollow noopener noreferrer&quot; target
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
      <category term="QueryDsl" scheme="https://cheese10yun.github.io/tags/QueryDsl/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 기반 멀티 모듈 구성하기</title>
    <link href="https://cheese10yun.github.io/gradle-multi-module/"/>
    <id>https://cheese10yun.github.io/gradle-multi-module/</id>
    <published>2019-06-10T15:32:00.000Z</published>
    <updated>2019-06-10T15:33:17.454Z</updated>
    
    <content type="html"><![CDATA[<p>전체 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/multi-module" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에서 확인할 수 있습니다.</p><h2><span id="멀티-모듈-구성">멀티 모듈 구성</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">├── admin-api</div><div class="line">│   ├── out</div><div class="line">│   └── src</div><div class="line">├── api</div><div class="line">│   ├── out</div><div class="line">│   └── src</div><div class="line">├── build.gradle</div><div class="line">├── core</div><div class="line">│   ├── build</div><div class="line">│   ├── out</div><div class="line">│   └── src</div><div class="line">├── gradle</div><div class="line">│   └── wrapper</div><div class="line">├── gradlew</div><div class="line">├── gradlew.bat</div><div class="line">└── settings.gradle</div></pre></td></tr></table></figure><ul><li>admin-api : admin 관련 API</li><li>api : 일반 유저 api</li><li>core : domain 및 공통 모듈</li></ul><h2><span id="buildgradle-스프링-디펜던시-정의">build.gradle : 스프링 디펜던시 정의</span></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">buildscript</span> &#123;</div><div class="line">    ext &#123;</div><div class="line">        springBootVersion = <span class="string">'2.1.5.RELEASE'</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">repositories</span> &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">dependencies</span> &#123;</div><div class="line">        <span class="keyword">classpath</span>(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;"</span>)</div><div class="line">        <span class="keyword">classpath</span> <span class="string">"io.spring.gradle:dependency-management-plugin:1.0.6.RELEASE"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>기본적인 스프링 디펜던시를 정의 합니다.</p><h2><span id="settingsgradle">settings.gradle</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">pluginManagement &#123;</div><div class="line">    repositories &#123;</div><div class="line">        gradlePluginPortal()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">rootProject.name = &apos;multi&apos;</div><div class="line"></div><div class="line">include &apos;core&apos;</div><div class="line">include &apos;api&apos;</div><div class="line">include &apos;admin-api&apos;</div></pre></td></tr></table></figure><p>추가할 서브모듈을 include 합니다.</p><h2><span id="buildgradle-subprojects-project-정의">build.gradle : subprojects, project 정의</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">subprojects &#123;</div><div class="line">    apply plugin: &apos;java&apos;</div><div class="line">    apply plugin: &apos;eclipse&apos;</div><div class="line">    apply plugin: &apos;org.springframework.boot&apos;</div><div class="line">    apply plugin: &apos;io.spring.dependency-management&apos;</div><div class="line"></div><div class="line">    group = &apos;com.module&apos;</div><div class="line">    version = &apos;0.0.1-SNAPSHOT&apos;</div><div class="line">    sourceCompatibility = &apos;1.8&apos;</div><div class="line"></div><div class="line">    repositories &#123;</div><div class="line">        mavenCentral()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 서브 모듈에 공통으로 의존성을 추가 시킬 디펜던시를 정의합니다.</div><div class="line">    dependencies &#123;</div><div class="line">        compileOnly &apos;org.projectlombok:lombok&apos;</div><div class="line">        annotationProcessor &apos;org.projectlombok:lombok&apos;</div><div class="line">        implementation &apos;org.springframework.boot:spring-boot-starter-actuator&apos;</div><div class="line">        implementation &apos;org.springframework.boot:spring-boot-starter-data-jpa&apos;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">   // 해당 task로 서브 모듈 추가시 기초적인 디렉토리를 자동으로 생성해줍니다.</div><div class="line">    task initSourceFolders &#123;</div><div class="line">        sourceSets*.java.srcDirs*.each &#123;</div><div class="line">            if (!it.exists()) &#123;</div><div class="line">                it.mkdirs()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        sourceSets*.resources.srcDirs*.each &#123;</div><div class="line">            if (!it.exists()) &#123;</div><div class="line">                it.mkdirs()</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">// project를 정의합니다. 공통으로 사용되는 core 모듈을 추가해 줍니다.</div><div class="line">project(&apos;:core&apos;) &#123;</div><div class="line">    dependencies &#123;</div><div class="line">        compile(&apos;com.h2database:h2&apos;)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">project(&apos;:api&apos;) &#123;</div><div class="line">    dependencies &#123;</div><div class="line">        compile project(&apos;:core&apos;)</div><div class="line">        implementation &apos;org.springframework.boot:spring-boot-starter-web&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">project(&apos;:admin-api&apos;) &#123;</div><div class="line">    dependencies &#123;</div><div class="line">        compile project(&apos;:core&apos;)</div><div class="line">        implementation &apos;org.springframework.boot:spring-boot-starter-web&apos;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>해당 gradle 파일을 작성하면 <a href="#gradle-%EA%B8%B0%EB%B0%98-%EB%A9%80%ED%8B%B0-%EB%AA%A8%EB%93%88">Gradle 기반 멀티 모듈</a> 처럼 자동으로 디렉토리가 생성됩니다.</p><h2><span id="core-module">Core Module</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"member"</span>)</div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Id</span></div><div class="line">  <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</div><div class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line"></div><div class="line">  <span class="meta">@Column</span>(name = <span class="string">"name"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">  <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Member</span>, <span class="title">Long</span>&gt; </span>&#123;&#125;</div></pre></td></tr></table></figure><p>간단한 Entity, Repository를 만듭니다.</p><h2><span id="api-module">Api Module</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/members"</span>)</div><div class="line"><span class="meta">@RequiredArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberApi</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MemberRepository memberRepository;</div><div class="line"></div><div class="line">  <span class="meta">@PostMapping</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Member <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Member member = <span class="keyword">new</span> Member(<span class="string">"test"</span>);</div><div class="line">    <span class="keyword">return</span> memberRepository.save(member);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@GetMapping</span></div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;Member&gt; <span class="title">getMembers</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> memberRepository.findAll();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/blog-sample/blob/master/multi-module/imags/create-member.png?raw=true" alt=""><br><img src="https://github.com/cheese10yun/blog-sample/blob/master/multi-module/imags/get-members.png?raw=true" alt=""></p><p>Member 생성, 조회가 제대로 동작하는 것을 보아 Core 모듈에 있는 MemberRepository가 제대로 동작하는 것을 확인할 수 있습니다.</p><h2><span id="admin-module">Admin Module</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/members"</span>)</div><div class="line"><span class="meta">@RequiredArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberApi</span> </span>&#123;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MemberRepository memberRepository;</div><div class="line"></div><div class="line">  <span class="meta">@GetMapping</span></div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;Member&gt; <span class="title">getMembers</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> memberRepository.findAll();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@PostMapping</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Member <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Member member = <span class="keyword">new</span> Member(<span class="string">"test"</span>);</div><div class="line">    <span class="keyword">return</span> memberRepository.save(member);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/cheese10yun/blog-sample/master/multi-module/imags/admin-member.png" alt=""></p><p>Admin 모듈도 동일하게 API 구성하고 테스트 하여도 동일합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;전체 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/multi-module&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Gradle" scheme="https://cheese10yun.github.io/tags/Gradle/"/>
    
      <category term="Module" scheme="https://cheese10yun.github.io/tags/Module/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 여러 서버 실행 하기</title>
    <link href="https://cheese10yun.github.io/intellij-boot-run-config/"/>
    <id>https://cheese10yun.github.io/intellij-boot-run-config/</id>
    <published>2019-05-26T10:25:00.000Z</published>
    <updated>2019-05-26T10:23:45.755Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>(IntelliJ 사용법 Tip 전체 보기[<a href="https://github.com/cheese10yun/IntelliJ" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/cheese10yun/IntelliJ</a>]</p></blockquote><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/configuration-run.png" alt=""></p><ol><li>단축키 cmd + F11로 <code>edit configuration</code> 검색합니다.</li><li>해당 <code>edit configuration</code> 으로 들어갑니다.</li></ol><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/configruration-run-setting.png" alt=""></p><ol><li>왼쪽 상단의 <code>+</code> 버튼을 클릭합니다.</li><li><code>Spring Boot</code>을 선택합니다.</li><li>상단의 <code>Name</code> 이름을 지정합니다.</li><li><code>VM options</code>에 <code>-Dserver.port=8081</code>을 지정합니다.</li><li>동일한 방법으로 다른 Port도 등록합니다.</li></ol><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/spring-boot-run.png" alt=""></p><ol><li>ctrl + alt + r 단축키로 Run을 실행합니다.</li><li>위에서 등록한 2개의 Application을 선택합니다.</li></ol><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/spring-boot-run-result.png" alt=""><br>위에서 등록한 Application 2개가 실행되는것을 확인할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;(IntelliJ 사용법 Tip 전체 보기[&lt;a href=&quot;https://github.com/cheese10yun/IntelliJ&quot; rel=&quot;external nofollow noopener noreferrer&quot; target
      
    
    </summary>
    
    
      <category term="IntelliJ" scheme="https://cheese10yun.github.io/tags/IntelliJ/"/>
    
      <category term="Tip" scheme="https://cheese10yun.github.io/tags/Tip/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Config 살펴보기</title>
    <link href="https://cheese10yun.github.io/spring-cloud-config/"/>
    <id>https://cheese10yun.github.io/spring-cloud-config/</id>
    <published>2019-05-25T14:40:00.000Z</published>
    <updated>2019-05-25T14:46:27.322Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://acornpub.co.kr/book/mastering-spring-5.0" rel="external nofollow noopener noreferrer" target="_blank">스프링 5.0 마스터</a>를보고 정리한 자료 입니다. 전체 코드는 <a href="https://github.com/cheese10yun/msa-study-sample/blob/master/docs/config.md" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에서 확인할 수 있습니다.</p></blockquote><p>스프링 클라우드 컨피그는 중앙 집중식 마이크로서비스 구성을 지원한다. 여기서 두 가지 중요한 구성 요소의 조합이다.</p><ul><li>스프링 클라우드 컨피그 서버 : 버전 관리 리포지토리로 백업된 중앙 집중식 구성 노출을 지원한다.</li><li>스프링 클라우드 컨피그 클라이언트 : 애플리케이션이 스프링 클라우드 컨피그 서버에 연결하도록 지원한다.</li></ul><p><img src="https://github.com/cheese10yun/spring-msa-demo/raw/master/assets/msa-config-server.png" alt=""></p><h2><span id="github-repository-연결">GitHub Repository 연결</span></h2><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/github-img.png" alt=""></p><p>GitHub Repository에</p><ul><li>micoroservice-a-default.yml</li><li>micoroservice-a-dev.yml</li></ul><p>아래 처럼 작성합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">application:</span></div><div class="line"><span class="attr">  message:</span> <span class="string">"Message From &#123;ENV&#125; Local Git Repository"</span></div></pre></td></tr></table></figure><p><code>{ENV}</code>에 ddefault, dev 환경에 맞는 값을 작성합니다.</p><h2><span id="config-server">Config Server</span></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">implementation <span class="string">'org.springframework.cloud:spring-cloud-config-server'</span></div><div class="line">implementation <span class="string">'org.springframework.boot:spring-boot-starter-actuator'</span></div></pre></td></tr></table></figure><p>config server 의존 성을 추가합니다. actuator도 편의를 위해서 추가합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8888</span></div><div class="line"></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">"config-server"</span></div><div class="line"></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    config:</span></div><div class="line"><span class="attr">      server:</span></div><div class="line"><span class="attr">        git:</span></div><div class="line"><span class="attr">          uri:</span> <span class="string">"https://github.com/cheese10yun/msa-study-sample"</span></div></pre></td></tr></table></figure><p>config server는 8888 port를 사용하는 관례가 있어 port를 8888로 지정합니다. Github Repository URI 주소를 입력합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableConfigServer</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigServerApplication</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    SpringApplication.run(ConfigServerApplication.class, args);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>@EnableConfigServer</code> 어노테이션을 추가만 하면 별다른 설정없이 Config Server가 설정됩니다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/intellj-actuator.png" alt=""><br>actuator 의존성이 있으면 IntellJ Endpoints -&gt; Mappings에서 현재 서버의 API mapping 정보를 쉽게 확인할 수 있습니다.</p><p>마우스 왼쪽 클릭을 한 이후에 Open In Http Request…를 클릭하면 쉽게 HTTP 콜을 할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/http-call.png" alt=""></p><p>URL 형식은 /{appliation-name}/{profile}/{label}입니다. 위에서 등록한 <code>micoroservice-a-default.yml</code>을 확인해보기 위해서 <code>http://localhost:8888/microservice-a/default</code>을 호출합니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"microservice-a"</span>,</div><div class="line">  <span class="attr">"profiles"</span>: [</div><div class="line">    <span class="string">"default"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"label"</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"c03eecc5d8eabefc4b2a8f085789f42bd5317366"</span>,</div><div class="line">  <span class="attr">"state"</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">"propertySources"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"https://github.com/cheese10yun/msa-study-sample/microservice-a-default.yml"</span>,</div><div class="line">      <span class="attr">"source"</span>: &#123;</div><div class="line">        <span class="attr">"application.message"</span>: <span class="string">"Message From Default Local Git Repository"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>응답 값을 보면 해당 properties를 잘 읽어 오는 것을 확인할 수 있습니다.</p><p><code>http://localhost:8888/microservice-a/dev</code>을 호출하면 <code>micoroservice-a-dev.yml</code>의 값을 제대로 읽어 오는지 확인할 수 있습니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"microservice-a"</span>,</div><div class="line">  <span class="attr">"profiles"</span>: [</div><div class="line">    <span class="string">"dev"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"label"</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"c03eecc5d8eabefc4b2a8f085789f42bd5317366"</span>,</div><div class="line">  <span class="attr">"state"</span>: <span class="literal">null</span>,</div><div class="line">  <span class="attr">"propertySources"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"https://github.com/cheese10yun/msa-study-sample/microservice-a-dev.yml"</span>,</div><div class="line">      <span class="attr">"source"</span>: &#123;</div><div class="line">        <span class="attr">"application.message"</span>: <span class="string">"Message From Default Dev Git Repository"</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="client">Client</span></h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    implementation <span class="string">'org.springframework.cloud:spring-cloud-config-client'</span></div><div class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-actuator'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>필요한 의존성을 추가합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"application"</span>)</div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@Setter</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfiguration</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> String message;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>프로퍼티를 읽을 ConfigurationProperties 객체를 만듭니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequiredArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomeController</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ApplicationConfiguration applicationConfiguration;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/message"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">welcome</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">    map.put(<span class="string">"message"</span>, applicationConfiguration.getMessage());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> map;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>해당 메시지를 확인할 수 있는 컨트롤러를 만듭니다. <code>getMessage()</code> 메시지는 각 환경마다 다른 메시지를 출력합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"></div><div class="line"><span class="attr">  profiles:</span></div><div class="line"><span class="attr">    active:</span> <span class="string">&#123;ENV&#125;</span></div><div class="line"></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    config:</span></div><div class="line"><span class="attr">      uri:</span> <span class="attr">http://localhost:8888</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">microservice-a</span></div></pre></td></tr></table></figure><p>파일명은 <code>bootstrap.yml</code>으로 지정합니다. <code>active</code>는 각 환경마다 지정합니다. dev으로 지정하고 <code>http://127.0.0.1:8080/message</code> API를 호출해보겠습니다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/message-call.png" alt=""></p><p>이것도 인텔리제이를 이용해서 호출하면 간편합니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"message"</span>: <span class="string">"Message From Default Dev Git Repository"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>Dev</code> 메시지가 출력되는 것을 확인 할 수 있습니다. <code>profiles</code>을 <code>default</code> 으로 지정하면 메시지에는 local 이라는 문자가 출력됩니다.</p><h2><span id="refresh">Refresh</span></h2><p>마이크로서비스 A의 properties의 변경이 생겼을 경우 Refresh API를 호출해서 설정을 변경할 수 있다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/json-1.png" alt=""></p><p>message API를 호출하면 기존 메시지가 그대로 출력된다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># microservice-a-default.yml</span></div><div class="line"><span class="attr">application:</span></div><div class="line"><span class="attr">  message:</span> <span class="string">"Message From Default Local Git Repository (Properties update...)"</span></div></pre></td></tr></table></figure><p><code>microservice-a-default.yml</code> 메시지를 위와 같이 변경한 이후에</p><p>POST <a href="http://127.0.0.1:8080/actuator/refresh%EC%9D%84" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:8080/actuator/refresh을</a> 호출하면</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[</div><div class="line">  &quot;config.client.version&quot;,</div><div class="line">  &quot;application.message&quot;</div><div class="line">]</div></pre></td></tr></table></figure><p>Response으로 application.message의 변경을 알려준다. 이후 message api를 호출하면 아래 그림처럼 변경된 Response를 확인 할 수 있다.</p><p><img src="https://github.com/cheese10yun/msa-study-sample/raw/master/static/json-2.png" alt=""></p><h2><span id="결론">결론</span></h2><p>Github Repository와 같은 버전 관리 리포지토리로 백업된 중앙 집중 구성으로 properties를 제공해줍니다. 또 Properties 설정 및 단순한 설정으로 클라이언트 애플리케이션이 스프링 클라우드 컨피그 서버에 쉽게 연결되도록 지원해줍니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://acornpub.co.kr/book/mastering-spring-5.0&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;스프링 5.
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Cloud" scheme="https://cheese10yun.github.io/tags/Cloud/"/>
    
      <category term="Config" scheme="https://cheese10yun.github.io/tags/Config/"/>
    
      <category term="MSA" scheme="https://cheese10yun.github.io/tags/MSA/"/>
    
  </entry>
  
  <entry>
    <title>Rabbit MQ 기초 사용법</title>
    <link href="https://cheese10yun.github.io/spring-rabbitmq/"/>
    <id>https://cheese10yun.github.io/spring-rabbitmq/</id>
    <published>2019-05-17T13:50:00.000Z</published>
    <updated>2019-06-20T16:39:02.471Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/rabbitmq-sample" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에 공개되어 있습니다.</p></blockquote><h2><span id="rabbmit-mq란">Rabbmit MQ란 ?</span></h2><p>래빗MQ는 오픈소스 AMQP 브로커다. AMQP는 유선을 통해 전송되는 메시지 형식을 포함하는 개발형 프로토컬이며, JMS와 같은 다른 메시징 솔루션에 비해 인기가 높다.</p><p>JMS는  API, AMQP는 프로토콜이다. JMS는 메시지의 형식이 아닌 브로커와 통신하는 방법을 정의한다. 또한 자바 애플리케이션에만 국한돼 있다. AMQP는 브로커와 통신하는 방법에 대해서 논하지 않지만. 메시지가 유선을 통해 큐에 어떻게 넣고 꺼내지는지에 대해 정의한다.</p><p>서로 다른 두 가지 애플리케이션을 생각해보자, 둘 다 자바면 JVMS를 통해 통신할 수 있지만 이중에 하나가 루비라면 JMS는 사용하지 못할것이다.</p><p>JMS 발송 브로커는 매시지 전송을 위해 AMQP를 사용할 수 있어 JMS와 AMQP의 차이점을 더 확연하게 해준다.</p><h2><span id="amqp-기본사항">AMQP 기본사항</span></h2><p>AMQP-기반 생상자는 큐에 직접 게시하지 않고 익스체인지에 게시한다. 큐가 선언되면 익스체인지에 바인딩돼야 한다. 여러 큐를 동일한 익스체인지에 바인딩해 토픽 개념을 애쿨레이션 할 수 있다.</p><p>토픽 익스체인지를 통해 라우팅 키는 <code>comment.*</code>와 같은 와일드 카드를 사용할 수 있다. 이 상황은 사용자가 조건을 제공할 때 까지 실제 라우팅 키를 알 수 없는 클라이언트에 가장 적합하다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RabbitListener</span>(bindings = <span class="meta">@QueueBinding</span>(</div><div class="line">    value = <span class="meta">@Queue</span>,</div><div class="line">    exchange = <span class="meta">@Exchange</span>(value = <span class="string">"learning-spring-boot"</span>),</div><div class="line">    key = <span class="string">"comments.new"</span></div><div class="line">))</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Comment comment)</span></span>&#123;</div><div class="line">    commentRepository.save(comment)</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>@RabbitListener</code> 어노테이션은 메시지를 사용하는 방법을 등록하는 가장 쉬운 방법이다.</li><li><code>@QueueBinding</code> 어노테이션은 큐와 익스체인지를 즉시 선언하는 가장 쉬운 방법이다. 이 경우 이 메서드에 대한 익명 큐를 생성하고 leaning-spring-boot 익스체인지에 바인딩한다.</li><li>이 메서드는 라우팅 키는 <code>comments.new</code>이며, 이는 leanirng-spring-boot 익스체인지에 게시된 메시지가 이 메서드를 호출하게 한다는 것을 의미한다.</li><li><code>@RabbitListener</code> 메서드는 스프링 AMQP Message 스프링 메시징 Message 다양한 메시지 헤더, 평범하고 오래된 자바 객체를 받을 수 있다.</li><li>메서드 자체는 <code>CommentWriterRepository</code>를 호출해서 실제로 데이터 저장소에 코멘드틀 저장한다.</li></ul><p>래빗MQ를 사용하려면 일반적으로 @EnableRabbit이 필요하지만 스프링 부트 덕분에 Spring-boot-stater-amqp가 클래스 패스에 있으면 자동으로 활성화된다.</p><p>@RabbitListener를 사용하면 운영에 필요한 모든 익스체인지와 큐를 동적으로 생성할 수 있다는 점이다.</p><p>스프링 AMQP 메시지 객체를 제공하기 위해 메서드 시그니처를 선언했다면 바이트 배열을 풀수 있을 것이다. <strong>그러나 스프링 AMQP는 도메인 객체를 직렬화하는 기능이 제한돼 있다. 아무런 노력을 기울리지 않고도 간단한 문자열과 직렬화 처리할 수 있다.</strong></p><h2><span id="rabbitmq와-amqp">RabbitMQ와 AMQP</span></h2><blockquote><p>출처 <a href="http://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220419853534&amp;parentCategoryNo=&amp;categoryNo=6&amp;viewDate=&amp;isShowPopularPosts=false&amp;from=postView" rel="external nofollow noopener noreferrer" target="_blank">티몬의 개발이야기 RabbitMQ와 Spring AMQP를 이용한 간단한 작업 큐 만들기</a></p></blockquote><h3><span id="amqp">AMQP</span></h3><p>프로그래밍에서 MQ는 프로세스 또는 프로그램 인스턴스가 데이터를 서로 교환할 때 사용하는 방법을 말한다. 이러한 MQ를 오픈소스에 기반한 표준 프로토콜이 AMQP이다. AMQP 자체가 프로토콜을 의미하기 때문에 이 프로토콜을 구현한 MQ 제품들은 여러가지가 있으며 그 중하나가 RabbitMQ이다.</p><h3><span id="amqp의-구성요소와-라우팅-알고리즘">AMQP의 구성요소와 라우팅 알고리즘</span></h3><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/rabbitmq.png" alt=""></p><ul><li>AMQP의 라우팅 모델은 Exchange, Queue, Binding으로 구성된다.</li></ul><table><thead><tr><th>이름</th><th>설명</th></tr></thead><tbody><tr><td>Exchange</td><td>Publisher(Producer)로부터 수신한 메시지를 큐에 분배하는 라우터 역할</td></tr><tr><td>Queue</td><td>메시지를 메모리나 디스크에 저장했다가 Cusomer에게 메시지를 전달하는 역할</td></tr><tr><td>Binding</td><td>Exchange와 Queue의 관계를 정의한 것</td></tr></tbody></table><h3><span id="exchagne-type">Exchagne Type</span></h3><p>Exchagne Type은 메시지를 어떤 방법으로 라우팅할지 결정하는 일종의 알고리즘 말하며 AMQP에서는 다음과 같은 Exchange Type을 정의하고 있다.</p><table><thead><tr><th>Exchagne Type</th><th>정의</th></tr></thead><tbody><tr><td>Direct exchagne</td><td>Exchagne에 바인된 Queue중에 메시지의 라우팅 키와 매핑되어 있는 Queue로 메시지를 전달한다. 1:1 관계로 Unicast 방식에 접합하며, 주로 라운드 로빈 방식으로 여러 workers(Cusumer)간 Task를 분리에 사용된다.</td></tr><tr><td>Fanout Exchagne</td><td>메시지의 라우팅 키를 무시하고 Exchagne에 바인딩된 모든 Queue에 메시지를 전달한다. 1:N 관계로 메시지를 브로드캐스트하는 용도로 사용된다.</td></tr><tr><td>Topic Exchagne</td><td>Exchagne에 바인딩 된 Queue 중에서 메시지의 라우팅 키가 패턴에 맞는 Queue에세 모두 메시지를 전달한다. Mulicast 방섹에 접합하다.</td></tr><tr><td>Headers Exchagne</td><td>라우팅 키 대신에 메시지 헤더에 여러 속성들을 더해 속성들이 매칭되는 큐에 메시지를 전달한다.</td></tr></tbody></table><h2><span id="rabbit-mq">Rabbit MQ</span></h2><p>RabbitMQ는 AMQP를 구현한 오픈소스 메시지 소프트웨어 Pulisher(Producer)로부터 메시지를 받아 Cunsumer에게 라우트하는 것이 주된 역할이다.</p><blockquote><p>출처 <a href="%5Bhttp://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220419853534&amp;parentCategoryNo=&amp;categoryNo=6&amp;viewDate=&amp;isShowPopularPosts=false&amp;from=postView%5D(http://www.rabbitmq.com/getstarted.htm)">RabibitMQ Tutorials</a></p></blockquote><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/rabbitmq-turorial.png" alt=""></p><h3><span id="rabbit-mq-exchagne-type">Rabbit MQ Exchagne Type</span></h3><table><thead><tr><th>이름</th><th>RabbitMQ 이름</th></tr></thead><tbody><tr><td>Direct Exchange</td><td>(Empty string) and amq.direct</td></tr><tr><td>Fanout Exchange</td><td>anq.fanout</td></tr><tr><td>Topic Exchange</td><td>amq.topic</td></tr><tr><td>Header Exchange</td><td>amq.match(and amq.headers in RabbitMQ)</td></tr></tbody></table><h2><span id="sample-code">Sample Code</span></h2><blockquote><p>전체 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/rabbitmq-sample" rel="external nofollow noopener noreferrer" target="_blank">Blog-Sample Code</a>를 참고하세요</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RabbitMqEvent</span> </span>&#123;</div><div class="line">  String MEMBER_SIGNUPED_EVENT = <span class="string">"signuped.event"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>이벤트 이름을 작성하는 객체입니다. 인터페이스로 관리하는게 효율적으로 보여짐</li></ul><h3><span id="publisher-rabbittemplate">Publisher : RabbitTemplate</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">amqpTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">  RabbitTemplate rabbitTemplate = <span class="keyword">new</span> RabbitTemplate();</div><div class="line">  rabbitTemplate.setConnectionFactory(connectionFactory);</div><div class="line">  rabbitTemplate.setMandatory(<span class="keyword">true</span>);</div><div class="line">  rabbitTemplate.setChannelTransacted(<span class="keyword">true</span>);</div><div class="line">  rabbitTemplate.setReplyTimeout(<span class="number">60000</span>);</div><div class="line">  rabbitTemplate.setMessageConverter(queueMessageConverter());</div><div class="line">  <span class="keyword">return</span> rabbitTemplate;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>이벤트를 Publisher하는 template를 생성합니다.</li><li>ConnectionFactory 의존성 주입을 받아 생성합니다.</li><li>message conveter를 등록시킵니다. 다른 예제들은 Bean으로 등록시는데 딱히 Bean으로 등록시킬 필요는 없어 보입니다.</li><li><code>setChannelTransacted</code> 플래극 값은 Transaction 으로 생성하게 해줍니다. (<code>@Transcational</code> 이 붙은 것처럼 처리됩니다. 만약 데이터베이스의 트랜잭션과 연결된다면 트랜잭션이 전위 된다고 이해했습니다.)</li><li><code>setReplyTimeout</code> amqpTemplate의 timeout을 지정합니다.</li></ul><h3><span id="comsumer-simplerabbitlistenercontainerfactory">Comsumer : SimpleRabbitListenerContainerFactory</span></h3><blockquote><p><a href="https://docs.spring.io/spring-amqp/api/org/springframework/amqp/rabbit/listener/AbstractMessageListenerContainer.html#setDefaultRequeueRejected-boolean-" rel="external nofollow noopener noreferrer" target="_blank">spring-amqp Document</a>을 참고했습니다. 제가 이해한 부분으로 설명하는 것이라 틀린 부분이 있을 수 있습니다.</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line">  <span class="function"><span class="keyword">public</span> SimpleRabbitListenerContainerFactory <span class="title">rabbitListenerContainerFactory</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">      ConnectionFactory connectionFactory)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</div><div class="line">    factory.setConnectionFactory(connectionFactory);</div><div class="line">    factory.setDefaultRequeueRejected(<span class="keyword">false</span>);</div><div class="line">    factory.setMessageConverter(queueMessageConverter());</div><div class="line">    factory.setChannelTransacted(<span class="keyword">true</span>);</div><div class="line">    factory.setAdviceChain(RetryInterceptorBuilder</div><div class="line">        .stateless()</div><div class="line">        .maxAttempts(MAX_TRY_COUNT)</div><div class="line">        .recoverer(<span class="keyword">new</span> RabbitMqExceptionHandler())</div><div class="line">        .backOffOptions(INITIAL_INTERVAL, MULTIPLIER, MAX_INTERVAL)</div><div class="line">        .build());</div><div class="line">    <span class="keyword">return</span> factory;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><ul><li><code>setDefaultRequeueRejected</code> true일 경우 리서너에서 예외가 발생시에 다시 큐에 쌓이게 됩니다. 예외 상황을 해제하기 전까지 무한 반복할 거같아 기본 설정이 false이고 true 변경할 일이 거의 없어 보입니다.</li><li><code>setChannelTransacted</code> 위 설정과 동일합니다.</li><li><code>recoverer</code> 예외를 핸들링할 수 있는 객체를 지정해서 핸들링 할 수 있습니다. 에러 로그, 에러 알림 정도 설정하면 좋을거 같음</li><li><code>maxAttempts</code> 예외가 발생 했을 경우 몇번을 더 재시도 할 횟수를 지정합니다.</li><li><code>backOffOptions</code> 재시도 횟수에 대한 옵션을 지정합니다. <code>3000, 3, 10000</code> 인자값을 지정 했다면 3초 간격으로 3으로 곱해서 최대 10초 까지 재시도 하라는 것입니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">doSignUp</span><span class="params">(<span class="keyword">final</span> SignUpRequest dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Member member = memberRepository.save(dto.toEnttiy());</div><div class="line">    amqpTemplate.convertAndSend(RabbitMqEvent.MEMBER_SIGNUPED_EVENT, SignUpedEvent.of(member));</div><div class="line">    <span class="keyword">return</span> member;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><ul><li><code>convertAndSend</code> 위에서 등록한 template 기반으로 이벤트를 발생시킵니다.</li><li>첫 번째 인자는 이벤트의 이름(스트링 벨류), 이벤트 처리시에 넘겨줄 객체를 바인딩 시킵니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RabbitListener</span>(queues = RabbitMqEvent.MEMBER_SIGNUPED_EVENT)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleSignUpEvent</span><span class="params">(<span class="keyword">final</span> SignUpedEvent event)</span> </span>&#123;</div><div class="line">  log.error(event.toString());</div><div class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>@RabbitListener</code> 어노테이션으로 리슨할 이벤트 이름을 지정합니다.</li><li><code>convertAndSend</code>에서 넘겨준 객체 <code>SignUpedEvent</code>를 매게변수를 받습니다.</li><li><code>IllegalArgumentException();</code> 설정을 통해서 예외를 발생시킵니다. 위에서 설정한 3번의 일정한 반복이 진행되는지 확인 해 봅니다.</li></ul><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/rabbitmq-retry.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">2019-03-03 20:43:57.459 ERROR 58190 --- [cTaskExecutor-1] y.b.rabbitmqsample.event.SignUpListener  : SignUpedEvent(id=1, email=asdasd@asdsad.com, name=asdasd)</div><div class="line">2019-03-03 20:44:00.466 ERROR 58190 --- [cTaskExecutor-1] y.b.rabbitmqsample.event.SignUpListener  : SignUpedEvent(id=1, email=asdasd@asdsad.com, name=asdasd)</div><div class="line">2019-03-03 20:44:09.470 ERROR 58190 --- [cTaskExecutor-1] y.b.rabbitmqsample.event.SignUpListener  : SignUpedEvent(id=1, email=asdasd@asdsad.com, name=asdasd)</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"> Retries exhausted for message (Body:&apos;&#123;&quot;id&quot;:1,&quot;email&quot;:&quot;asdasd@asdsad.com&quot;,&quot;name&quot;:&quot;asdasd&quot;&#125;&apos; MessageProperties [headers=&#123;__TypeId__=yun.blog.rabbitmqsample.event.SignUpedEvent&#125;, contentType=application/json, contentEncoding=UTF-8, contentLength=0, receivedDeliveryMode=PERSISTENT, priority=0, redelivered=false, receivedExchange=, receivedRoutingKey=signuped.event, deliveryTag=1, consumerTag=amq.ctag-XBOTLdkMvnhT6vypyy7HTQ, consumerQueue=signuped.event])</div></pre></td></tr></table></figure><ul><li>3번의 재시도가 시도됨</li><li>등록된 예외 핸들러 <code>RabbitMqExceptionHandler</code> 객체에서 로깅 출력</li></ul><h2><span id="참고">참고</span></h2><ul><li><a href="http://acornpub.co.kr/book/spring-boot-2.0-2e" rel="external nofollow noopener noreferrer" target="_blank">스프링 부트 2.0 마이크로서비스와 리액티브 프로그래밍</a></li><li><a href="https://www.rabbitmq.com/" rel="external nofollow noopener noreferrer" target="_blank">Rabbitmq</a></li><li><a href="http://blog.naver.com/PostView.nhn?blogId=tmondev&amp;logNo=220419853534&amp;parentCategoryNo=&amp;categoryNo=6&amp;viewDate=&amp;isShowPopularPosts=false&amp;from=postView" rel="external nofollow noopener noreferrer" target="_blank">티몬의 개발이야기 RabbitMQ와 Spring AMQP를 이용한 간단한 작업 큐 만들기</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/rabbitmq-sample&quot; rel=&quot;external nofollow noopener norefer
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="RabbitMQ" scheme="https://cheese10yun.github.io/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>Checked Exception을 대하는 자세</title>
    <link href="https://cheese10yun.github.io/checked-exception/"/>
    <id>https://cheese10yun.github.io/checked-exception/</id>
    <published>2019-05-16T16:28:00.000Z</published>
    <updated>2019-06-20T16:39:02.477Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/exception" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에 공개되어 있습니다.</p></blockquote><p>Checked Exception을 처리하는 전략과 그것에 유의해야 할 점들에 대해서 포스팅을 진행해보겠습니다. 자바에서는 대표적으로 Checked Exception 과 Unchecked Exception이 있습니다. 먼저 이 둘의 차이를 살펴보겠습니다.</p><h2><span id="checkedunchecked-exception-차이">Checked,Unchecked <em>Exception</em> 차이</span></h2><p><img src="https://github.com/cheese10yun/TIL/blob/master/assets/excpetion-class-diagram.png?raw=true" alt=""></p><p>Error는 시스템이 비정상적인 상황에서 발생하다. 이 수준의 Error는 시스템 레벨에서 발생하는 심각한 수준의 오류이기 때문에 개발자가 미리 예측할 수도 없고 처리할 수 있는 방법도 없다. 애플리케이션 반에서는 Error에 대한 처리를 신경 쓰지 않아도 된다. OutOfMemoryError이나 ThreadDeath 같은 에러는 try catch으로 잡아도 할 수 있는 것이 없기 때문이다.</p><p>그러기 때문에 어플리케이션단 에서는 Checked,Unchecked Exception에 대한 처리가 상대적으로 중요합니다.</p><table><thead><tr><th>.</th><th>Checked Exception</th><th>Unchecked Exception</th></tr></thead><tbody><tr><td><strong>처리 여부</strong></td><td>반드시 예외 처리 해야함</td><td>예외 처리 하지 않아도됨</td></tr><tr><td><strong>트랜잭션 Rollback 여부</strong></td><td>Rollback 안됨</td><td>Rollback 진행</td></tr><tr><td><strong>대표 Exception</strong></td><td>IOException, SQLException</td><td>NullPointerException, IllegalArgumentException</td></tr></tbody></table><p>Checked, Unchecked은 개발자들이 만든 애플리케이션 코드에서 예외가 발생했을 경우에 사용하게 됩니다.</p><p>위 상속 구조를 처럼 <strong>Unchecked Exception는 RuntimeException을 상속하고 Checked Exception는 RuntimeException을 상속하지 않습니다.</strong> 이것으로 두 <strong>Exception을 구분하는 중요한 포인트입니다.</strong></p><h3><span id="unchecked-exception">Unchecked Exception</span></h3><p>명시적인 예외 처리를 강제하지 않는 특징이 있기 때문에 Unchecked Exception이라 하며, catch로 잡거나 throw로 호출한 메서드로 예외를 던지지 않아도 상관이 없습니다.</p><h3><span id="checked-exception">Checked Exception</span></h3><p>반드시 명시적으로 처리해야 하기 때문에 Checked Exception이라고 하며, try catch를 해서 에러를 잡든 throws를 통해서 호출한 메서드로 예외를 던져야 합니다.</p><h3><span id="code-예외-처리-여부">Code : 예외 처리 여부</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> throws_던지기() <span class="keyword">throws</span> JsonProcessingException &#123;</div><div class="line">  <span class="keyword">final</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">  <span class="keyword">final</span> Member member = <span class="keyword">new</span> Member(<span class="string">"yun"</span>);</div><div class="line">  <span class="keyword">final</span> String valueAsString = objectMapper.writeValueAsString(member);</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> try_catch_감싸기() &#123;</div><div class="line">  <span class="keyword">final</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">  <span class="keyword">final</span> Member member = <span class="keyword">new</span> Member(<span class="string">"yun"</span>);</div><div class="line">  <span class="keyword">final</span> String valueAsString;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    valueAsString = objectMapper.writeValueAsString(member);</div><div class="line">  &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 JsonProcessingException는 IOException Exception을 상속하는 Checked Exception이다. <strong>그러기 때문에 throws로 상위 메서드로 넘기든 자신이 try catch 해서 throw를 던지든 해야 한다.</strong> 이것은 문법적인 강제 선택이다. 그에 반해 <strong>Unchecked Exception은 명시적인 예외 처리를 하지 않아도 된다.</strong></p><h3><span id="code-rollback-여부">Code : Rollback 여부</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@RequiredArgsConstructor</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberService</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MemberRepository memberRepository;</div><div class="line"></div><div class="line">  <span class="comment">// (1) RuntimeException 예외 발생</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Member <span class="title">createUncheckedException</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Member member = memberRepository.save(<span class="keyword">new</span> Member(<span class="string">"yun"</span>));</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> member;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// (2) IOException 예외 발생</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Member <span class="title">createCheckedException</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">final</span> Member member = memberRepository.save(<span class="keyword">new</span> Member(<span class="string">"wan"</span>));</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">true</span>) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> IOException();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> member;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>(1) RuntimeException 예외 발생 발생시키면 yun이라는 member는 rollback이 진행됩니다. 하지만 (2) IOException 예외 발생이 되더라도 wan은 <strong>rollback이 되지 않고 트랜잭션이 commit까지 완료됩니다.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">--- Ynu Log</div><div class="line">Hibernate: </div><div class="line">    /* insert yun.blog.exception.member.Member</div><div class="line">        */ insert </div><div class="line">        into</div><div class="line">            member</div><div class="line">            (id, name) </div><div class="line">        values</div><div class="line">            (null, ?)</div><div class="line">2019-05-16 00:55:16.117 TRACE 49422 --- [nio-8080-exec-2] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [yun]</div><div class="line">2019-05-16 00:55:16.120 ERROR 49422 --- [nio-8080-exec-2] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is java.lang.RuntimeException] with root cause</div><div class="line"></div><div class="line">java.lang.RuntimeException: null</div><div class="line"></div><div class="line">--- Wan Log</div><div class="line">Hibernate: </div><div class="line">    /* insert yun.blog.exception.member.Member</div><div class="line">        */ insert </div><div class="line">        into</div><div class="line">            member</div><div class="line">            (id, name) </div><div class="line">        values</div><div class="line">            (null, ?)</div><div class="line">2019-05-16 00:55:43.931 TRACE 49422 --- [nio-8080-exec-4] o.h.type.descriptor.sql.BasicBinder      : binding parameter [1] as [VARCHAR] - [wan]</div><div class="line">2019-05-16 00:55:43.935 ERROR 49422 --- [nio-8080-exec-4] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception</div><div class="line"></div><div class="line">java.io.IOException: null</div><div class="line">at yun.blog.exception.member.MemberService.createCheckedException(MemberService.java:27) ~[classes/:na]</div></pre></td></tr></table></figure><p>로그 메시지를 보면 member yun, wan 모두 insert 쿼리는 보이지만 <strong>yun rollback이 진행되고 wan은 rollback이 되지 않고 commit까지 됩니다.</strong></p><h3><span id="왜-checked-exception은-rollback되지-않는-것일까">왜 Checked Exception은 Rollback되지 않는 것일까?</span></h3><p>기본적으로 Checked Exception는 복구가 가능하다는 메커니즘을 가지고 있다. 예를 들어서 특정 이미지 파일을 찾아서 전송해주는 함수에서 이미지를 찾지 못했을 경우 기본 이미지를 전송한다. 복구 전략을 가질 수 있게 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendFile</span><span class="params">(String fileName)</span></span>&#123;</div><div class="line"></div><div class="line">    File file;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        file = FileFindService.find(fileName);</div><div class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e)&#123; <span class="comment">// FileNotFoundException은 IOException으로 checked exception이다.</span></div><div class="line">        <span class="comment">// 파일을 못찾았으니 기본 파일을 찾아서 전송 한다</span></div><div class="line">        file = FileFindService.find(<span class="string">"default.png"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    send(file);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>기본적으로 복구가 가능하니 네가 복구를 작업을 진행했을 수 있으니까 Rollback은 진행하지 않을게라는 의미가 있다고 생각합니다. (주관적인 생각입니다.)</p><p>하지만 이런 식의 예외는 복구하는 것이 아니라 일반적인 코드의 흐름으로 제어해야 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendFile</span><span class="params">(String fileName)</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(FileFindService.existed(filename))&#123;</div><div class="line">        <span class="comment">// 파일이 있는 경우 해당 파일을 찾아서 전송</span></div><div class="line">        send(FileFindService.find(fileName));    </div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="comment">// 파일이 있는 없는 경우 기본 이미지 전송</span></div><div class="line">        send(FileFindService.find(<span class="string">"default.png"</span>));    </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="하지만-현실은">하지만 현실은…</span></h3><p>하지만 우리가 일반적으로 Checked Exception 예외가 발생했을 경우 복구 전략을 갖고 그것을 복구할 수 있는 경우는 그렇게 많지 않습니다.</p><p>유니크해야 하는 이메일 값이 중복돼서 SQLException이 발생하는 경우 어떻게 복구 전략을 가질 수 있을까요? 유저가 압력을 가했던 이메일 + 난수를 입력해서 insert 시키면 가능은 하겠지만 현실에서는 그냥 RuntimeException을 발생시키고 입력을 다시 유도하는 것이 현실적입니다.</p><p><strong>여기서 중요한 것은 해당 Exception을 발생시킬 때 명확하게 어떤 예외가 발생해서 Exception이 발생했는지 정보를 전달해주는 것입니다. 위 같은 경우에는 DuplicateEmailException (Unchecked Exception)을 발생 시는 것이 바람직합니다.</strong></p><p>Checked Exception을 만나면 더 구체적인 Unchecked Exception을 발생시켜 정확한 정보를 전달하고 로직의 흐름을 끊어야 합니다. 우리는 JPA에 구현체를 가져다 사용하더라도 Checked Exception을 직접 처리하지 않고 있는 이유도 다 적절한 RuntimeException으로 예외를 던져주고 있기 때문입니다.</p><h2><span id="checked-exception-처리-전략">Checked Exception 처리 전략</span></h2><h3><span id="code">Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectMapperUtil</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line"></div><div class="line">  <span class="comment">// 예외처리를 throws를 통해서 위임하고 있습니다.</span></div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">writeValueAsString</span><span class="params">(Object object)</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</div><div class="line">    <span class="keyword">return</span> objectMapper.writeValueAsString(object);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 예외처리를 throws를 통해서 위임하고 있습니다.</span></div><div class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">readValue</span><span class="params">(String json, Class&lt;T&gt; clazz)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">return</span> objectMapper.readValue(json, clazz);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>writeValueAsString, readValue 메서드는 Checked Exception을 발생시키는 메서드입니다. 반드시 예외를 처리를 진행해야 합니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/exception/images/ckecked-exception.png" alt=""></p><p>해당 메서드의 테스트 코드입니다. 예외 처리를 상위로 던져버리기 때문에 메서드를 상용하는 곳에서 다시 throw를 하던지 예외를 try catch 하든지 해야 합니다. 이렇게 <strong>무의하고 반복적인 예외를 던지는 것은 좋지 않습니다.</strong></p><h3><span id="더-구체적인-unckecked-exception-발생-시켜라">더 구체적인 Unckecked Exception 발생 시켜라</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">writeValueAsString</span><span class="params">(Object object)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">return</span> objectMapper.writeValueAsString(object);</div><div class="line">    &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> JsonSerializeFailed(e.getMessage());</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">readValue</span><span class="params">(String json, Class&lt;T&gt; clazz)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">      <span class="keyword">return</span> objectMapper.readValue(json, clazz);</div><div class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> JsonDeserializeFailed(e.getMessage());</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure><p><a href="https://github.com/cheese10yun/spring-guide/blob/master/docs/exception-guide.md" rel="external nofollow noopener noreferrer" target="_blank">Spring Exception Guide</a>에서 정리한 Try Catch 전략과 비슷합니다.</p><p><img src="https://github.com/cheese10yun/blog-sample/raw/master/exception/images/ckecked-exception2.png" alt=""></p><p><strong>Checked Exception을 Unckecekd Exception으로 던지고 있기 때문에 메서드를 사용하는 곳에서는 아무런 예외처리를 진행하지 않아도 됩니다.</strong></p><p>물론 해당 예러가 왜 발생했는지에 대해서 에러 메시지 뿐만이 아니라 더욱 구체적인 정보를 전달해주는것이 더 좋습니다.</p><h2><span id="결론">결론</span></h2><p>예외 복구 전략이 명확하고 그것이 가능하다면 Checked Exceptio을 try catch로 잡고 해당 복구를 하는 것이 좋습니다.</p><p><strong>하지만 그러한 경우는 흔하지 않으며 Checked Exception이 발생하면 더 구체적인 Unchecked Exception을 발생시키고 예외에 대한 메시지를 명확하게 전달하는 것이 효과적입니다.</strong></p><p>무책임하게 상위 메서드로 throw를 던지는 행위는 하지 않는 것이 좋습니다. 상위 메서드들의 책임이 그만큼 증가하기 때문입니다. Checked Exception은 기본 트랜잭션에 속성에서는 rollback을 진행하지 않는 점도 알고 있어야 실수를 방지할 수 있습니다.</p><h2><span id="참고">참고</span></h2><ul><li><a href="http://www.nextree.co.kr/p3239/" rel="external nofollow noopener noreferrer" target="_blank">Java 예외(<em>Exception</em>) 처리에 대한 작은 생각</a></li><li><a href="http://www.yes24.com/Product/goods/7516721" rel="external nofollow noopener noreferrer" target="_blank">토비의 스프링</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/exception&quot; rel=&quot;external nofollow noopener noreferrer&quot; t
      
    
    </summary>
    
    
      <category term="Transaction" scheme="https://cheese10yun.github.io/tags/Transaction/"/>
    
      <category term="Lock" scheme="https://cheese10yun.github.io/tags/Lock/"/>
    
  </entry>
  
  <entry>
    <title>트랜잭션 잠금</title>
    <link href="https://cheese10yun.github.io/transaction-lcok/"/>
    <id>https://cheese10yun.github.io/transaction-lcok/</id>
    <published>2019-05-11T17:57:00.000Z</published>
    <updated>2019-06-20T16:39:02.485Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 자료는 DDD <a href="http://www.yes24.com/Product/Goods/27750871?scode=029" rel="external nofollow noopener noreferrer" target="_blank">Start</a>를 보고 정리한 자료입니다. 정말 추천드리는 책입니다.</p></blockquote><p>한 주문 애그리거트에 대해 운영자는 배송 준비 상태로 변경할 때 사용자는 배송지 주소를 변경하면 어떻게 될까? 아래 그림은 운영자와 고객이 동시에 한 주문 애그리거트를 수정하는 과정을 보여준다. (배송 상태로 변경되면 더 이상 배송지 변경은 할 수 없다.)</p><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/transaction-thread.png" alt=""></p><p>운영자 스레드와 고객 스레드는 같은 주문 애그리거트를 나타내는 다른 객체를 구하게 된다 (트랜잭션 마다 리포지토리라는 새로운 애그리거트를 생성한다.) 운영자 스레드와 고객 스레드는 개념적으로 동일한 애그리거트이지만 물리적으로 서로 다른 애그리거트 객체를 사용한다.</p><p>때문에 운영자 스레드가 주문 애그리거트 객체 배송 상태로 변경하더라도 고객 스레드가 사용하는 주문 애그리거트 객체에는 영향을 주지 않는다. 고객 스레드 입장에서 주문 애그리거트 객체는 아직 배송 상태 전이므로 배송지 정보를 변경할 수 있다.</p><p>이 상황에서 두 스레드는 각각 트랜잭션을 커밋할 때 수정한 내용을 DBMS에 반영한다. 즉 배송 상태로 바뀌고 배송지 정보로 바뀌게 된다. 이 순서의 문제점은 운영자는 기존 배송지 정보를 이용해서 배송 상태로 변경했는데 그 사이 고객은 배송지 정보를 변경했다는 점이다. 즉 애그리거트의 일관성이 깨지는 것이다.</p><p>이런 문제가 발생하지 않도록 하려면 다음 두 가지 중 하나를 해야한다.</p><ul><li>운영자 배송지 정보를 조회하고 상태를 변경하는 동안 고객이 애그리거트를 수정하지 못하게 막는다. (수정하지 못하는 것보다 조회까지 막아야 된다고 생각함)</li><li>운영자가 배송지 정보를 조회한 이후 고객이 배송지 정보를 변경하면 운영자가 애그리거트를 다시 조회한 뒤 수정하도록 한다.</li></ul><p>이 두 가지는 애그리거트 자체의 트랜잭션과 관련이 있다. DBMS가 지원하는 트랜잭션과 함께 애그리거트를 위한 추가적인 트랜잭션 처리 기법이 필요하다. <strong>애그리거트에 대해 사용할 수 있는 대표적인 트랜잭션 처리 방식에는 선점 잠금과 비선점 잠금의 두 가지 방식이 있다.</strong></p><h2><span id="isolation-repeatable_read-으로-해결-못하는-이유">Isolation REPEATABLE_READ 으로 해결 못하는 이유</span></h2><p>REPEATABLE_READ은 트랜잭션이 지속되는 동안 다른 트랜잭션이 해당 필드를 변경할 수 없는 격리 레벨이다. <strong>이것으로 위의 문제를 해결할 수 있지는 않다.</strong></p><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/transaction-thread.png" alt=""></p><ol><li>운영자 스레드가 주문 애그리거트를 구함 (배송 이전 상태)</li><li>고객 스레드가 주문 애그리거트를 구함 (배송 이전 상태) REPEATABLE_READ 속성이므로 select 트랜잭션이 진행중에 있더라도 select는 진행됨</li><li>운영자 스레드가 주문의 상태를 배송 상태로 변경</li><li>고객 스레드가 배송지를 변경</li><li>운영 스레드 트랜잭션 커밋</li><li>고객 스레드는 REPEATABLE_READ 격리 레벨임으로 트랜잭션 임으로 운영 스레드 트랜잭션 커밋 이후 커밋 됨</li></ol><p>운영자는 배송 상태로 변경하고, 고객은 배송지를 변경이 모두 데이터베이스에 반영된다는 것이다. <strong>2번 고객 스레드가 주문 애그리거트를 구하는것을 Lock 해야 이 문제를 해결 할 수 있다.</strong></p><h2><span id="선점-잠금">선점 잠금</span></h2><p>선점 잠금은 먼저 애그리거트를 구한 스레드가 애그리거트 사용이 끝날 때까지 다른 스레드가 해당 애그리거트를 수정하는 것을 막는 방식이다.</p><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/transaction-thread2.png" alt=""></p><p>스레드1 선점 잠금방식으로 애그리거트를 구한 뒤 이에서 스레드2가 같은 애그리거트를 구하고 있는데, 이 경우 스레드2는 스레드1이 애그리거트에대한 잠금을 해제할 때 까지 블로킹된다.</p><p>스레드1이 애그리거트를 수정하고 트랜잭션을 커밋하면 잠금을 해제한다. 이 순간 대기하고 있던 스레드2가 애그리거트에 접근하게 된다. 스레드1이 트랜잭션을 커밋 뒤에 스레드2가 애그리거트를 구하게 되므로 스레드2는 스레드1이 수정한 애그리거트의 내용을 보게된다.</p><p>한 스레드가 애그리거트를 구하고 수정하는 동안 다른 스레드가 수정할 수 없음으로로 동시에 애그리거트를 수정할 때 발생하는 데이터 충돌 문제를 해소할 수 있다.</p><h3><span id="선점-잠금-적용">선점 잠금 적용</span></h3><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/transaction-thread3.png" alt=""></p><ol><li>운영자 스레드가 먼저 선점 잠금 방식으로 주문 애그리거트를 구함</li><li>고객 스레드는 운영자 스레드가 잠금을 해제할 때까지 고객 스레드는 대기 상태</li><li>운영자 스레드가 배송 상태로 변경한 뒤에 트랜잭션을 커밋하면 잠금을 해제한다.</li><li>잠금이 해제된 시점에 고객 스레드가 구하는 주문 애그리거트는 운영자 스레드가 수정한 배송 상태의 주문 애그리거트이다. 배송 상태이므로 주문 애그리거트는 배송지 변경 시 에러를 발생하거 트랜잭션이 실피패한다.</li><li>고객은 <code>이미 배송이 시작되어 배송지를 변경할 수 없습니다.</code>와 같은 안내 문구를 받게 됨</li></ol><p>선점 잠금은 보통 DBMS가 제공하는 행 단위 잠금을 사용해서 구현한다. 오라클을 비롯한 다수 DBMS가 for update와 같은 쿼리를 사용해서 특정 레코드에 한 사용자만 접근할 수 있는 잠금 장치를 제공한다.</p><p>JPA의 EntityManager는 LockModeType을 인자로 받는 <code>find()</code> 메서드를 제공하는데, <code>LockModeType.PESSIMISTIC_WRITE</code>를 값으로 전달하면 해당 엔티티와 매핑된 테이블을 이용해서 선점 잠금 방식을 적용할 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Order order = entityManager.find(Order.class, orderNo, LockModeType.PESSIMISTIC_WRITE)</div></pre></td></tr></table></figure><p>JPA 프로바이더와 DBMS에 따라 잠금 모드의 구현이 다른데, 하이버네티으의 경우 <code>PESSIMISTIC_WRITE</code>를 잠금 모드로 사용하면 <code>for update</code> 쿼리를 사용해서 선점 잠금을 구현한다.</p><h2><span id="선점-잠금과-교착상태">선점 잠금과 교착상태</span></h2><p>선점 잠금 기능을 사용할 때는 잠금 순서에 따른 교착 상태가 발생하지 않도록 주의해야 한다. 예를 들어, 다음과 같은 순서로 두 스레드가 선점 잠금을 시도를 한다고 해보자</p><ol><li>스레드 1: A 애그리거트에 대한 선점 잠금 구함</li><li>스레드 2: B 애그리거트에 대한 선점 잠금 구함</li><li>스레드 1: B 애그리거트에 대한 선점 잠금 시도</li><li>스레드 2 : A 애그리거트에 대한 선점 잠금 시도</li></ol><p>이 두 스레드는 상대방 스레드가 먼저 선점한 잠금을 구할수 없어 더 이상 다음 단계를 진행하지 못하게 된다. <strong>즉 스레드 1과 스레드 2는 교착상태에 빠지게 된다.</strong></p><p>선점 잠그에 따른 교착 상태는 상대적으로 사용자 수가 많을 때 발생할 가능성이 높고, 사용자 수가 많아지면 교착 상태에 빠지는 스레드가 더 빠르게 증가하게 된다. 더 많은 스레드가 교착 상태에 빠질수록 시스템은 점점 아무것도 할 수 없는 상황에 이르게 된다.</p><p>이런 문제가 발생하지 않도록 하려면 잠금을 구할 때 최대 대기 시간을 지정해야한다. JPA에서 선점 잠금을 시도할 때 최대 대기 시간을 지정하려면 다음과 같이 힌트를 사용하면 된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, Object&gt; hints = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">hints.put(<span class="string">"javax.persistence.lock.timeout"</span>, <span class="number">2000</span>);</div><div class="line">Order order = entityManager.find(Order.class, orderNo, LockModeType.PESSIMISTIC_WRITE, hints);</div></pre></td></tr></table></figure><p>JPA의 <code>javax.persistence.lock.timeout</code> 힌트는 잠금을 구하는 대기 시간을 밀리초 단위로 지정한다. 지정한 시간이내에 잠금을 구하지 못하면 익셉션을 발생 시킨다. 이 힌트를 사용할 때 주의할 점은 DBMS에 따라 힌트가 적용되지 않는 다는 점이다. 이 힌트를 이용할 때에는 사용중인 DBMS가 관련 기능을 지원하는지 확인해야 한다.</p><h2><span id="비선점-잠금">비선점 잠금</span></h2><p>선점 잠금이 강력해 보이긴 하지만 선점 잠금으로 모든 트랜잭션 충돌 문제가 해결되는 것은 아니다.</p><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/transacion-thread-desc.png" alt=""></p><ol><li>운영자는 배송을 위해 주문 정보를 조회한다.</li><li>고객이 배송지 변경을 위해 변경 폼을 요청한다. 시스템은 변경 폼을 제공한다.</li><li>고객이 새로운 배송지를 입력하고 폼을 저송해서 배송지를 변경한다.</li><li>운영자가 1번에서 조회한 주문 정보를 기준으로 배송지를 정하고 배송 상태 변경을 요청한다.</li></ol><p>여기서 문제는 운영자가 배송지 정보를 조회하고 배송 상태로 변경하는 사이에 고객이 배송지를 변경한다는 것이다. 운영자는 고객이 변경하기 전에 배송지 정보를 이용해서 배송 준비를 한 뒤에 배송 상태로 변경하게 된다.</p><p><strong>즉 배송 상태 변경 전에 배송지를 한 번 더 확인 하지 않으면 운영자는 다른 배송지로 물건을 발송하게 되고, 고객은 배송지를 변경했음에도 불구하고 엉뚱한 곳으로 주문한 물건을 받는 상황이 발생한다.</strong></p><p>이 문제는 선점 잠금 방식으로 해결 할 수 없는데, 이 때 필요한 것이 비선점 잠금이다. 비선점 잠금 방식은 잠금 을 해서 동시에 접근하는 것을 막는 대신 <strong>변경한 데이터를 실제 DBMS에서 반영하는 시점에 변경 가능 여부를 확인하는 방식이다.</strong></p><p>비선점 잠금을 구현하려면 애그리거트에 버전으로 사용할 숫자 타입의 프로퍼티를 추가해야한다. 애그리거트를 수정할 때마다 버전으로 사용할 프로피터 값이 1씩 증가하는데, 이때 다음과 같은 쿼리를 사용한다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">UPDATE</span> aggrable <span class="keyword">SET</span> <span class="keyword">version</span> = <span class="keyword">version</span> +<span class="number">1</span>, colx = ?, coly =?</div><div class="line"><span class="keyword">WHERE</span> aggid =? <span class="keyword">and</span> <span class="keyword">version</span> = 현재 버전</div></pre></td></tr></table></figure><p>이 쿼리는 수정할 애그리거트와 매핑되는 테이블의 버전 값이 현재 애그리거트의 버전과 동일한 경우에만 데이터를 수정한다. 그리고 수정에 성공하면 버전 값을 1증가 시킨다. 따라서, <strong>다른 트랜잭션이 먼저 데이터를 수정해서 버전 값이 바뀌면 데이터 수정에 실패하게 된다.</strong></p><h3><span id="비선점-잠금을-이용한-트랜잭션-충돌-방지">비선점 잠금을 이용한 트랜잭션 충돌 방지</span></h3><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/transacion-thread4.png" alt=""></p><ol><li>스레드 1 애그리거트 조회</li><li>스레드 2 애그리거트 조회</li><li>스레드 1 애그리거트 수정 시도 (스레드 2 보다 먼저 시도한다), 수정에 성공하고 버전은 6이 된다.</li><li>스레드 2 애그리거트 수정 시도, 이미 애그리거트 버전이 6이므로 스레드2는 데이터 수정에 실패하게 된다.</li></ol><p>JPA는 버전을 이용한 비선점 잠금을 기능을 지원한다. 다음과 같이 버전으로 사용할 필드에 <code>@Version</code> 애노테이션을 붙이거 매핑되는 테이블 버전을 지정한 칼럼을 추가하기만 하면된다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"purchase_order"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Version</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> version;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>JPA는 엔티티가 변경되어 UPDATE 쿼리를 실행할 때 <code>@Version</code>에 명시한 필드를 이용해서 비선점 잠금 쿼리를 실행한다. 즉 애그리거트 객체의 버전 10이면 UP-DATE 쿼리를 실행할 때 당므과 같은 쿼리를 사용해서 버전 일치하는 경우에만 데이터를 수정한다.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> purchase_order <span class="keyword">SET</span> ..., <span class="keyword">version</span> = <span class="keyword">version</span> + <span class="number">1</span></div><div class="line"><span class="keyword">where</span> <span class="built_in">number</span> ? <span class="keyword">and</span> <span class="keyword">version</span> = <span class="number">0</span>;</div></pre></td></tr></table></figure><p>응용 서비스 버전에 대해 알 필요가 없다. 리포티터리에 필요한 애그리거트를 구현하고 알맞은 기능을 실행하면 된다. 기능을 실행하는 과정에서 애그리거트의 데이터가 변경되면 JPA트랜잭션 종료 시점에 비선점 잠금을 위한 쿼리를 실행 한다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> ChangeShppingService changeShippingService;</div><div class="line"></div><div class="line">    <span class="meta">@PutMapping</span>(<span class="string">"/shpping"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">changeShipping</span><span class="params">(ChangeShippingsRequest changeReq)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            changeShppingService.changeShpping(changeReq);</div><div class="line">            <span class="keyword">return</span> <span class="string">"changeShppingSuccess"</span>;</div><div class="line">        &#125; <span class="keyword">catch</span> (OptimistickLockingFailureException ex)&#123;</div><div class="line">            <span class="comment">// 누군가 먼저 같은 주문 애그리거트를 수정 했음으로</span></div><div class="line">            <span class="comment">// 트랜잭션 충돌이 일어났다는 메시지를 보여준다.</span></div><div class="line">            <span class="keyword">return</span> <span class="string">"changeShppingTxConflict"</span>;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="비선점-트랜잭션-충돌-문제-해결-flow">비선점 트랜잭션 충돌 문제 해결 Flow</span></h3><p><img src="https://github.com/cheese10yun/TIL/raw/master/assets/transacion-thread-desc2.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 자료는 DDD &lt;a href=&quot;http://www.yes24.com/Product/Goods/27750871?scode=029&quot; rel=&quot;external nofollow noopener noreferrer&quot; targe
      
    
    </summary>
    
    
      <category term="Transaction" scheme="https://cheese10yun.github.io/tags/Transaction/"/>
    
      <category term="Lock" scheme="https://cheese10yun.github.io/tags/Lock/"/>
    
  </entry>
  
  <entry>
    <title>Builder 기반으로 객체를 안전하게 생성하는 방법</title>
    <link href="https://cheese10yun.github.io/spring-builder-pattern/"/>
    <id>https://cheese10yun.github.io/spring-builder-pattern/</id>
    <published>2019-05-04T18:58:00.000Z</published>
    <updated>2019-05-04T18:53:01.219Z</updated>
    
    <content type="html"><![CDATA[<p><strong>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/ddd" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에 공개되어 있습니다.</strong></p><p><a href="https://github.com/cheese10yun/blog-sample/tree/master/lombok" rel="external nofollow noopener noreferrer" target="_blank">실무에서 Lombok 사용법</a>에서 기본적인 Lombk 사용법과 Builder 사용법을 간단하게 정리 한 내용을 먼저 참고하면 좋습니다.</p><p>JPA를 이용하면 엔티티 객체들을 Builder 기반으로 생성하는 것이 흔한 패턴입니다. 이러한 경우 Builder의 문제점들과 이것을 더욱 안전하게 사용하는 방법에 대해서 이야기해보겠습니다.</p><h2><span id="builder로-안전하게-생성하자">Builder로 안전하게 생성하자</span></h2><p>JPA 엔티티 객체들에 Builder 어노테이션을 이용해서 엔티티 객체를 Builder를 이용하는 것이 흔한 패턴입니다. 이 패턴의 장단점을 알아보고 더욱 안전하게 객체를 생성하는 방법을 소개하겠습니다.</p><p>Builder 패턴을 사용하면 다음과 같은 장점이 있습니다.</p><ol><li>인자가 많을 경우 쉽고 안전하게 객체를 생성할 수 있습니다.</li><li>인자의 순서와 상관없이 객체를 생성할 수 있습니다.</li><li><strong>적절한 책임을 이름에 부여하여 가독성을 높일 수 있습니다.</strong></li></ol><p>단점은 Builder의 단점이라기보다는 사용하는 패턴의 단점입니다.</p><h3><span id="sample-code">Sample Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Embeddable</span></div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"bank_name"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">  <span class="keyword">private</span> String bankName;</div><div class="line"></div><div class="line">  <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"account_number"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">  <span class="keyword">private</span> String accountNumber;</div><div class="line"></div><div class="line">  <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"account_holder"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">  <span class="keyword">private</span> String accountHolder;</div><div class="line"></div><div class="line">  <span class="comment">// 불안전한 객채 생성 패턴</span></div><div class="line">  <span class="meta">@Builder</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String bankName, String accountNumber, String accountHolder)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.bankName = bankName;</div><div class="line">    <span class="keyword">this</span>.accountNumber = accountNumber;</div><div class="line">    <span class="keyword">this</span>.accountHolder = accountHolder;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// 안전한 객채 생성 패턴</span></div><div class="line">  <span class="meta">@Builder</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String bankName, String accountNumber, String accountHolder)</span> </span>&#123;</div><div class="line">    Assert.hasText(bankName, <span class="string">"bankName must not be empty"</span>);</div><div class="line">    Assert.hasText(accountNumber, <span class="string">"accountNumber must not be empty"</span>);</div><div class="line">    Assert.hasText(accountHolder, <span class="string">"accountHolder must not be empty"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.bankName = bankName;</div><div class="line">    <span class="keyword">this</span>.accountNumber = accountNumber;</div><div class="line">    <span class="keyword">this</span>.accountHolder = accountHolder;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>우선 데이터베이스의 칼럼이 <code>not null</code>인 경우에는 대부분의 엔티티의 멤버실의 값도 null이면 안됩니다. 그 뜻은 해당 객체를 생성할 경우에도 동일합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Account account = Account.builder().build(); <span class="comment">// 불안전한 객체 생성 패턴으로 생성했을 경우</span></div></pre></td></tr></table></figure><p>account 객체에는 모든 멤버 필드의 값이 null로 지정됩니다. 이것은 애초에 account 객체를 의도한 것처럼 생성되지 않은 경우입니다. account 객체로 추가적인 작업을 진행하면 NPE가 발생하게 됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Account account = Account.builder().build(); <span class="comment">// 안전한 객체 생성 패턴으로 생성했을 경우</span></div></pre></td></tr></table></figure><p>안전한 객체 생성 패턴으로 생성했을 경우는 객체 생성이 <code>Assert</code>으로 객체 생성이 진행되지 않습니다. 필요한 값이 없는 상태에서 객체를 생성하면 이후 작업에서 예외가 발생하게 됩니다. 그보다 객체가 필요한 값이 없는 경우에는 적절하게 Exception 발생시켜 흐름을 종료하는 게 좋다고 생각합니다. 이것은 우리가 컨트롤러에서 유효성 검사를 하는 이유와 동일합니다.</p><p>객체가 필요한 값이 없음에도 불과하고 이후 로직들을 진행하게 되면 더 비싼 비용이 발생합니다. 이미 트랜잭션이 시작했다거나, 해당 작업에 관련된 알림이 나갔다거나 등등이 있습니다.</p><p><strong>Builder를 이용해서 객체를 생성하더라도 필수 값의 경우에는 반드시 그에 맞는 방어 코드를 작성하는 것이 좋다고 생각합니다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span>(expected = IllegalArgumentException.class)</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> Account_accountHolder_비어있으면_exception() &#123;</div><div class="line">    Account.builder()</div><div class="line">        .accountHolder(<span class="string">""</span>)</div><div class="line">        .accountNumber(<span class="string">"110-22345-22345"</span>)</div><div class="line">        .bankName(<span class="string">"신한은행"</span>)</div><div class="line">        .build();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span>(expected = IllegalArgumentException.class)</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> Account_accountNumber_비어있으면_exception() &#123;</div><div class="line">    Account.builder()</div><div class="line">        .accountHolder(<span class="string">"홍길동"</span>)</div><div class="line">        .accountNumber(<span class="string">""</span>)</div><div class="line">        .bankName(<span class="string">"신한은행"</span>)</div><div class="line">        .build();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span>(expected = IllegalArgumentException.class)</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> Account_bankName_비어있으면_exception() &#123;</div><div class="line">    Account.builder()</div><div class="line">        .accountHolder(<span class="string">"홍길동"</span>)</div><div class="line">        .accountNumber(<span class="string">"110-22345-22345"</span>)</div><div class="line">        .bankName(<span class="string">""</span>)</div><div class="line">        .build();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Account_test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Account address = Account.builder()</div><div class="line">        .accountHolder(<span class="string">"홍길동"</span>)</div><div class="line">        .accountNumber(<span class="string">"110-22345-22345"</span>)</div><div class="line">        .bankName(<span class="string">"신한은행"</span>)</div><div class="line">        .build();</div><div class="line"></div><div class="line">    assertThat(address.getAccountHolder()).isEqualTo(<span class="string">"홍길동"</span>);</div><div class="line">    assertThat(address.getAccountNumber()).isEqualTo(<span class="string">"110-22345-22345"</span>);</div><div class="line">    assertThat(address.getBankName()).isEqualTo(<span class="string">"신한은행"</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>너무 당연한 테스트 코드도 훗날 자신 또는 팀원에게 좋은 길잡이가 됩니다. 코드를 작성하면 반드시 테스트 코드를 작성하는 것이 좋습니다.</strong></p><p>주문이라는 객체는 반드시 제품이라는 객체가 1개 이상은 있어야 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"orders"</span>)</div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Id</span></div><div class="line">  <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</div><div class="line">  <span class="keyword">private</span> Long id;</div><div class="line"></div><div class="line">  <span class="meta">@Embedded</span></div><div class="line">  <span class="keyword">private</span> Address address;</div><div class="line"></div><div class="line">  <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"order"</span>)</div><div class="line">  <span class="keyword">private</span> List&lt;Product&gt; products = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">  <span class="meta">@Builder</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(Address address, List&lt;Product&gt; products)</span> </span>&#123;</div><div class="line">    Assert.notNull(address, <span class="string">"address must not be null"</span>);</div><div class="line">    Assert.notNull(products, <span class="string">"products must not be null"</span>);</div><div class="line">    Assert.notEmpty(products, <span class="string">"products must not be empty"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.address = address;</div><div class="line">    <span class="keyword">this</span>.products = products;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위처럼 products 객체가 null 이거나 empty인 경우에는 Order 객체 생성을 못 하게 사전에 막아야 합니다. order 객체가 완전하지 않을 경우 추가적으로 발생하는 문제들도 많으며 테스트 코드 작성 시에도 어려움을 겪게 됩니다.</p><h2><span id="builder-이름으로-책임을-부여-하자">Builder 이름으로 책임을 부여 하자</span></h2><p>주문에 대한 환불이 있을 경우 환불에 대한 금액을 신용 카드 취소, 계좌 기반 환불이 있을 수 있습니다.</p><p>신용 카드 결제 취소일 경우에는 신용 카드 정보를 받아야 하고(실제 이런식으로 신용 카드 환불이 진행되지는 않습니다.), 계좌 정보를 입력받아야 하는 경우 하나의 Builder인 경우에는 필수 값 검증이 어렵습니다.</p><p>신용 카드 정보와, 계좌 정보가 같이 넘어오면 어떻게 할 것인가? 이런 문제부터 생각할 것들이 많습니다. 이런 경우 아래와 같이 Builder의 이름을 명확하게 해서 책임을 부여하는 것이 좋습니다.</p><h3><span id="code">Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"refund"</span>)</div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Refund</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Id</span></div><div class="line">  <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</div><div class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line"></div><div class="line">  <span class="meta">@Embedded</span></div><div class="line">  <span class="keyword">private</span> Account account;</div><div class="line"></div><div class="line">  <span class="meta">@Embedded</span></div><div class="line">  <span class="keyword">private</span> CreditCard creditCard;</div><div class="line"></div><div class="line">  <span class="meta">@OneToOne</span></div><div class="line">  <span class="meta">@JoinColumn</span>(name = <span class="string">"order_id"</span>, nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>)</div><div class="line">  <span class="keyword">private</span> Order order;</div><div class="line"></div><div class="line"></div><div class="line">  <span class="meta">@Builder</span>(builderClassName = <span class="string">"ByAccountBuilder"</span>, builderMethodName = <span class="string">"ByAccountBuilder"</span>) <span class="comment">// 계좌 번호 기반 환불, Builder 이름을 부여해서 그에 따른 책임 부여, 그에 따른 필수 인자값 명확</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Refund</span><span class="params">(Account account, Order order)</span> </span>&#123;</div><div class="line">    Assert.notNull(account, <span class="string">"account must not be null"</span>);</div><div class="line">    Assert.notNull(order, <span class="string">"order must not be null"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.order = order;</div><div class="line">    <span class="keyword">this</span>.account = account;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Builder</span>(builderClassName = <span class="string">"ByCreditBuilder"</span>, builderMethodName = <span class="string">"ByCreditBuilder"</span>)  <span class="comment">// 신용 카드 기반 환불, Builder 이름을 부여해서 그에 따른 책임 부여, 그에 따른 필수 인자값 명확</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Refund</span><span class="params">(CreditCard creditCard, Order order)</span> </span>&#123;</div><div class="line">    Assert.notNull(creditCard, <span class="string">"creditCard must not be null"</span>);</div><div class="line">    Assert.notNull(order, <span class="string">"order must not be null"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">this</span>.order = order;</div><div class="line">    <span class="keyword">this</span>.creditCard = creditCard;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>신용카드 환불인 경우에는 신용카드 정보를 입력받게 하고, 계좌 환불인 경우에는 계좌 환불을 입력받게 합니다. <strong>빌더의 이름으로 책임을 명확하게 부여하고, 받아야 하는 인자도 명확해지게 됩니다.</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefundTest</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line"></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ByAccountBuilder_test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Refund refund = Refund.ByAccountBuilder() <span class="comment">// 빌더 이름으로 명확하게 그 의도를 드러 내고 있습니다.</span></div><div class="line">        .account(account)</div><div class="line">        .order(order)</div><div class="line">        .build();</div><div class="line"></div><div class="line">    assertThat(refund.getAccount()).isEqualTo(account);</div><div class="line">    assertThat(refund.getOrder()).isEqualTo(order);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ByCreditBuilder_test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Refund refund = Refund.ByCreditBuilder() <span class="comment">// 빌더 이름으로 명확하게 그 의도를 드러 내고 있습니다.</span></div><div class="line">        .creditCard(creditCard)</div><div class="line">        .order(order)</div><div class="line">        .build();</div><div class="line"></div><div class="line">    assertThat(refund.getCreditCard()).isEqualTo(creditCard);</div><div class="line">    assertThat(refund.getOrder()).isEqualTo(order);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="결론">결론</span></h2><p>필수 값임에도 불과하고 Builder에서 충분히 검사를 하지 않으면 에러의 발생은 뒷단으로 넘어가게 됩니다. 최악의 경우에는 데이터베이스 insert 시 해당 값이 not null인 경우 데이터베이스에서 에러를 발생시키게 됩니다.<br>이렇게 되면 개발자에게 늦은 피드백을 주게 됩니다. 개발이 끝난 이후에 통합 테스트 구동 or 직접 스프링 구동해서 테스트 하는 방법은 에러에대한 피드백이 늦어지고 결국 생상성 저하로 이어진다고 생각합니다.</p><p><strong>가능하다면 POJO 기반으로 빠르게 코드상으로 피드백을 받는 것이 좋다고 생각하고 있습니다.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/ddd&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Builder" scheme="https://cheese10yun.github.io/tags/Builder/"/>
    
  </entry>
  
  <entry>
    <title>Spring Guide - Service 가이드</title>
    <link href="https://cheese10yun.github.io/spring-guide-service/"/>
    <id>https://cheese10yun.github.io/spring-guide-service/</id>
    <published>2019-04-08T16:10:00.000Z</published>
    <updated>2019-06-30T16:33:01.618Z</updated>
    
    <content type="html"><![CDATA[<p>도메인 레이어는 모든 레이어에서 사용됩니다. 이 때문에 자기 자신의 책임을 충분히 다하지 않으면 많은 영역에서 그 책임을 넘겨받게 됩니다. 이번에는 이 내용을 중심으로 포스팅을 진행하겠습니다.</p><h2><span id="서비스-레이어란">서비스 레이어란 ?</span></h2><p><img src="https://image.slidesharecdn.com/random-151127092631-lva1-app6892/95/-60-638.jpg?cb=1448755823" alt=""></p><blockquote><p>이미지 출저 <a href="https://www.slideshare.net/baejjae93/ss-55571345" rel="external nofollow noopener noreferrer" target="_blank">애플리케이션 아키텍처와 객체지향</a></p></blockquote><p>우리는 Member라는 객체로 회원가입(객체 생성), 프로필 수정(객체 수정) 모든 행위가 가능하지만 그것을 영속화 시켜야 하기 때문에 별도의 레이어가 필요하고 이것을 서비스 레이어라고 합니다. 서비스 레이어에서는 대표적으로 데이터베이스에 대한 트랜잭션을 관리합니다.</p><p>서비스 영역은 도메인의 핵심 비즈니스 코드를 담당하는 영역이 아니라 인프라스트럭처(데이터베이스) 영역과 도메인 영역을 연결해주는 매개체 역할이라고 생각합니다.</p><p><strong>다시 한번 강조하지만 Member 객체에 대한 제어는 Member 스스로 제어해야 합니다.</strong></p><h2><span id="서비스의-적절한-책임의-크기-부여하기">서비스의 적절한 책임의 크기 부여하기</span></h2><p>책임이란 것은 외부 객체의 요청에 대한 응답이라고 생각합니다. <strong>이러한 책임들이 모여 역할이 되고 역할은 대체 가능성을 의미합니다.</strong> 그렇기 때문에 대체가 가능할 정도의 적절한 크기를 가져야 합니다. 이 부분은 아래의 예제로 천천히 설명드리겠습니다.</p><h3><span id="행위-기반으로-네이밍-하기">행위 기반으로 네이밍 하기</span></h3><p>서비스의 책임의 크기를 잘 부여하는 방법 중에 가장 쉬운 방법이라고 생각합니다. 행위 기반으로 서비스를 만드는 것입니다.</p><p><code>MemberService</code>라는 네이밍은 많이 사용하지만 정말 좋지 않은 패턴이라고 생각합니다. 우선 해당 클래스의 책임이 분명하지 않아서 모든 로직들이 <code>MemberService</code>으로 모이게 될 것입니다. 그 결과 외부 객체에서는 <code>MemberSerivce</code> 객체를 의존하게 됩니다. findById 메서드 하나를 사용하고 싶어도 <code>MemberSerivce</code>를 주입받아야 합니다. <code>MemberSerivce</code> 구현도 본인이 모든 구현을 하려고 하니 메서드의 라인 수도 방대해집니다. 테스트 코드 작성하기도 더욱 어렵게 만들어집니다.</p><p>Member에 대한 조회 전용 서비스 객체인 <code>MemberFindService</code>으로 네이밍을 하면 자연스럽게 객체의 책임이 부여됩니다. <strong>객체를 행위 기반으로 바라보고 행위 기반으로 네이밍을 주어 자연스럽게 책임을 부여하는 것이 좋습니다.</strong></p><h3><span id="역할은-대체-가능성을-의미">역할은 대체 가능성을 의미</span></h3><blockquote><p>책임이란 것은 외부 객체의 요청에 대한 응답이라고 생각합니다. <strong>이러한 책임들이 모여 역할이 되고 역할은 대체 가능성을 의미합니다.</strong></p></blockquote><p>위에서 언급한 말을 매우 과격하게 표현하면 아래와 같습니다.</p><blockquote><p>메서드(책임)란 것은 외부 객체의 호출에 대한 응답이고, 이러한 메서드(책임)들이 모여 클래스(역할)가되고 클래스(역할)는 인터페이스(대체 가능성)을 의미합니다.</p></blockquote><p><a href="https://github.com/cheese10yun/blog-sample/tree/master/service" rel="external nofollow noopener noreferrer" target="_blank">Service, ServiceImpl 구조에 대한 고찰</a>에 대해서 포스팅 한 내용을 다시 한번 설명드리겠습니다.</p><h4><span id="책임의-크기가-적절해야하는-이유">책임의 크기가 적절해야하는 이유</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">Member <span class="title">findById</span><span class="params">(MemberId id)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Member <span class="title">findByEmail</span><span class="params">(Email email)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changePassword</span><span class="params">(PasswordDto.ChangeRequest dto)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Member <span class="title">updateName</span><span class="params">(MemberId id, Name name)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 같은 Service, ServiceImpl 구조는 스프링 예제에서 많이 사용되는 예제입니다. 위 객체의 책임은 크게 member 조회, 수정입니다. 이 책임이 모여 클래스가 됩니다.(여기서는 MemberServiceImpl) 이 클래스(역할)는 대체 가능성을 의미합니다. <strong>그런데 저 인터페이스가 대체가 될까요?</strong></p><p>findById, findByEmail, changePassword, updateName의 세부 구현이 모두 다른 구현제가 있을까요? 일반적으로는 저 모든 메서드를 세부 구현이 다르게 대체하는 구현체는 2개 이상 갖기 힘듭니다. 이렇듯 객체의 책임이 너무 많으면 대체성을 갖지 못하고 SOLID 또 한 준수할 수가 없습니다.</p><p>책임에 대한 자세한 내용은 <a href="https://github.com/cheese10yun/blog-sample/tree/master/service" rel="external nofollow noopener noreferrer" target="_blank">Service, ServiceImpl 구조에 대한 고찰</a>, <a href="https://github.com/cheese10yun/spring-SOLID/blob/master/docs/SRP.md" rel="external nofollow noopener noreferrer" target="_blank">단일 책임의 원칙: Single Responsibility Principle</a><br>를 참조해주세요</p><p>물론 1개의 세부 구현체만 갖더라도 인프라스트럭처 영역 같은 경우에는 인터페이스로 바라보는 것이 좋습니다. 그 외에도 다양한 이유로 인터페이스로 바라보게 하는 것이 클래래스 간의 강결합을 줄일 수 있는 효과가 있습니다. 제가 말하고 싶은 것은 그렇게 인터페이스로 두더라도 <strong>올바른 책임의 크기에 의해서(대체 가능한 범위) 인터페이스를 나눠야 한다는 것입니다.</strong></p><h3><span id="서비스의-적절한-크기는-대체-가능성을-염두-하는-것">서비스의 적절한 크기는 대체 가능성을 염두 하는 것</span></h3><p>우선 행위 기반으로 서비스의 네이밍을 하면 자연스럽게 해당 행위에 대해서 책임이 할당됩니다. 이렇게 행위 기반으로 책임을 할당하면 자연스럽게 대체 가능성을 갖게 될 수 있습니다.</p><p>물론 이것만으로 올바르게 객체지향 설계를 할 수 있는 것은 아니지만 최소한의 객체지향 프로그래밍을 할 수 있는 작은 시발점이 될 수 있다고 생각합니다.</p><h2><span id="signup-sample-code">SignUp Sample Code</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Embeddable</span></div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReferralCode</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"referral_code"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String value;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ReferralCode</span><span class="params">(String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.value = value;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ReferralCode <span class="title">of</span><span class="params">(<span class="keyword">final</span> String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReferralCode(value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ReferralCode <span class="title">generateCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ReferralCode(RandomString.make(<span class="number">10</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="meta">@RequiredArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberSignUpService</span> </span>&#123; <span class="comment">// (1)</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MemberRepository memberRepository;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">doSignUp</span><span class="params">(<span class="keyword">final</span> SignUpRequest dto)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (memberRepository.existsByEmail(dto.getEmail())) &#123; <span class="comment">//(2)</span></div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmailDuplicateException(dto.getEmail());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> ReferralCode referralCode = generateUniqueReferralCode();</div><div class="line">        <span class="keyword">return</span> memberRepository.save(dto.toEntity(referralCode));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> ReferralCode <span class="title">generateUniqueReferralCode</span><span class="params">()</span> </span>&#123; <span class="comment">//(3)</span></div><div class="line">        ReferralCode referralCode;</div><div class="line">        <span class="keyword">do</span> &#123;</div><div class="line">            referralCode = ReferralCode.generateCode(); <span class="comment">//(4)</span></div><div class="line">        &#125; <span class="keyword">while</span> (memberRepository.existsByReferralCode(referralCode)); <span class="comment">// (5)</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> referralCode;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ol><li>MemberSignUpService 네이밍을 통해서 행위 기반의 책임을 부여</li><li>Email의 존재 여부는 데이터베이스에 있음으로 존재 여부는 memberRepository를 사용</li><li>유니크한 referralCode를 생성을 위한 메서드</li><li><strong>ReferralCode에 대한 생성은 ReferralCode 객체가 관리</strong></li><li>해당 코드가 존재하는지는 데이터베이스에 있음으로 존재 여부는 memberRepository를 사용</li></ol><p>ReferralCode에 대한 생성 비즈니스 로직은 ReferralCode 객체가 스스로 제어하고 있습니다. 이것이 데이터베이스에 중복 여부 검사를 서비스 레이어에서 진행합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;도메인 레이어는 모든 레이어에서 사용됩니다. 이 때문에 자기 자신의 책임을 충분히 다하지 않으면 많은 영역에서 그 책임을 넘겨받게 됩니다. 이번에는 이 내용을 중심으로 포스팅을 진행하겠습니다.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;서비스-레이어란&quot;&gt;서
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Guide" scheme="https://cheese10yun.github.io/tags/Guide/"/>
    
      <category term="Service" scheme="https://cheese10yun.github.io/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>Spring Custom Validate 어노테이션 만들기</title>
    <link href="https://cheese10yun.github.io/spring-custom-valdate-annotation/"/>
    <id>https://cheese10yun.github.io/spring-custom-valdate-annotation/</id>
    <published>2019-03-19T16:40:00.000Z</published>
    <updated>2019-03-21T15:30:07.923Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/custom-validation" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><p>스프링은 컨트롤러에서 클라이언트에서 넘겨받은 값에 대한 검증을 JSR-303 기반으로 쉽고 강력하게 할 수 있습니다. 또 한 커스텀 한 어 로테이션을 확장도 쉽게 구현할 수 있습니다.</p><p>아래에서 작성하는 어 로테이션은 해당 이메일이 유니크한지 검증을 하고 유니크하지 않은 이메일일 경우 Bad Request를 응답하는 어노테이션 입니다.</p><h2><span id="어노테이션-정의">어노테이션 정의</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="meta">@Constraint</span>(validatedBy = EmailDuplicationValidator.class)</div><div class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD, ElementType.FIELD&#125;)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> EmailUnique &#123;</div><div class="line"></div><div class="line">  <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> "Email is Duplication"</span>;</div><div class="line"></div><div class="line">  Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</div><div class="line"></div><div class="line">  Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="validator-로직-작성">Validator 로직 작성</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@RequiredArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailDuplicationValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">EmailUnique</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MemberRepository memberRepository;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(EmailUnique emailUnique)</span> </span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String email, ConstraintValidatorContext cxt)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> isExistEmail = memberRepository.existsByEmail(email);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (isExistEmail) &#123;</div><div class="line">      cxt.disableDefaultConstraintViolation();</div><div class="line">      cxt.buildConstraintViolationWithTemplate(</div><div class="line">          MessageFormat.format(<span class="string">"Email &#123;0&#125; already exists!"</span>, email))</div><div class="line">          .addConstraintViolation();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> !isExistEmail;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>넘겨 받은 email이 존재하는지 조회하고 중복되느 값이면 예외 메시지를 추가하고 <code>isValid(...)</code> 메서드에서 false를 리턴합니다.</p><h2><span id="test">Test</span></h2><h3><span id="api-code">API Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignUpRequest</span> </span>&#123;</div><div class="line">    <span class="meta">@EmailUnique</span> <span class="meta">@Email</span></div><div class="line">    <span class="keyword">private</span> String email;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberApi</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MemberRepository memberRepository;</div><div class="line"></div><div class="line">  <span class="meta">@PostMapping</span></div><div class="line">  <span class="function"><span class="keyword">public</span> Member <span class="title">create</span><span class="params">(@RequestBody @Valid <span class="keyword">final</span> SignUpRequest dto)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> memberRepository.save(Member.builder()</div><div class="line">        .email(dto.getEmail())</div><div class="line">        .build());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="test-code">Test Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberApiTest</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> signUp_test_이메일이_중복된_경우() <span class="keyword">throws</span> Exception &#123;</div><div class="line">    <span class="comment">//given</span></div><div class="line">    <span class="keyword">final</span> SignUpRequest dto = <span class="keyword">new</span> SignUpRequest(<span class="string">"yun@test.com"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//when</span></div><div class="line">    <span class="keyword">final</span> ResultActions resultActions = requestSignUp(dto);</div><div class="line"></div><div class="line">    <span class="comment">//then</span></div><div class="line">    resultActions</div><div class="line">        .andExpect(status().isBadRequest());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> ResultActions <span class="title">requestSignUp</span><span class="params">(SignUpRequest dto)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    <span class="keyword">return</span> mockMvc.perform(post(<span class="string">"/members"</span>)</div><div class="line">        .contentType(MediaType.APPLICATION_JSON_UTF8)</div><div class="line">        .content(objectMapper.writeValueAsString(dto)))</div><div class="line">        .andDo(print());</div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="response">Response</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2019-03-19T17:11:26.919+0000"</span>,</div><div class="line">    <span class="attr">"status"</span>: <span class="number">400</span>,</div><div class="line">    <span class="attr">"error"</span>: <span class="string">"Bad Request"</span>,</div><div class="line">    <span class="attr">"errors"</span>: [</div><div class="line">        &#123;</div><div class="line">            <span class="attr">"codes"</span>: [</div><div class="line">                <span class="string">"EmailUnique.signUpRequest.email"</span>,</div><div class="line">                <span class="string">"EmailUnique.email"</span>,</div><div class="line">                <span class="string">"EmailUnique.java.lang.String"</span>,</div><div class="line">                <span class="string">"EmailUnique"</span></div><div class="line">            ],</div><div class="line">            <span class="attr">"arguments"</span>: [</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">"codes"</span>: [</div><div class="line">                        <span class="string">"signUpRequest.email"</span>,</div><div class="line">                        <span class="string">"email"</span></div><div class="line">                    ],</div><div class="line">                    <span class="attr">"arguments"</span>: <span class="literal">null</span>,</div><div class="line">                    <span class="attr">"defaultMessage"</span>: <span class="string">"email"</span>,</div><div class="line">                    <span class="attr">"code"</span>: <span class="string">"email"</span></div><div class="line">                &#125;</div><div class="line">            ],</div><div class="line">            <span class="attr">"defaultMessage"</span>: <span class="string">"Email yun@test.com already exists!"</span>,</div><div class="line">            <span class="attr">"objectName"</span>: <span class="string">"signUpRequest"</span>,</div><div class="line">            <span class="attr">"field"</span>: <span class="string">"email"</span>,</div><div class="line">            <span class="attr">"rejectedValue"</span>: <span class="string">"yun@test.com"</span>,</div><div class="line">            <span class="attr">"bindingFailure"</span>: <span class="literal">false</span>,</div><div class="line">            <span class="attr">"code"</span>: <span class="string">"EmailUnique"</span></div><div class="line">        &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"message"</span>: <span class="string">"Validation failed for object='signUpRequest'. Error count: 1"</span>,</div><div class="line">    <span class="attr">"path"</span>: <span class="string">"/members"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>테스트 코드를 실행해보면 EmailDuplicationValidator 로직이 정상 동작하는지 확인할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/custom-validation&quot; rel=&quot;external nofollow noopener no
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Validate" scheme="https://cheese10yun.github.io/tags/Validate/"/>
    
  </entry>
  
  <entry>
    <title>Spring Guide - 외부 API 가이드</title>
    <link href="https://cheese10yun.github.io/spring-guide-api-call/"/>
    <id>https://cheese10yun.github.io/spring-guide-api-call/</id>
    <published>2019-03-19T16:00:00.000Z</published>
    <updated>2019-06-12T14:15:08.568Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/spring-guide" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><p>이번 주제는 외부 API 호출 가이드를 진행하겠습니다. 본 포스팅에서는 RestTemplate 기반으로 설명하고 있지만 RestTemplate에 대한 사용법이 초점은 아닙니다. Request, Response에 대한 로킹, Interceptors를 통한 추가 작업, errorHandler을 통한 각 Vendor마다 예외 처리 전략을 살펴보겠습니다.</p><h2><span id="vendor-마다-다르게-bean-등록">Vendor 마다 다르게 Bean 등록</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">localTestTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> restTemplateBuilder.rootUri(<span class="string">"http://localhost:8899"</span>)</div><div class="line">    .additionalInterceptors(<span class="keyword">new</span> RestTemplateClientHttpRequestInterceptor())</div><div class="line">    .errorHandler(<span class="keyword">new</span> RestTemplateErrorHandler())</div><div class="line">    .setConnectTimeout(Duration.ofMinutes(<span class="number">3</span>))</div><div class="line">    .build();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> RestTemplate <span class="title">xxxPaymentTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="keyword">return</span> restTemplateBuilder.rootUri(<span class="string">"http://xxxx"</span>)</div><div class="line">    .additionalInterceptors(<span class="keyword">new</span> RestTemplateClientHttpRequestInterceptor())</div><div class="line">    .errorHandler(<span class="keyword">new</span> RestTemplateErrorHandler())</div><div class="line">    .setConnectTimeout(Duration.ofMinutes(<span class="number">3</span>))</div><div class="line">    .build();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>우선 RestTemplate를 외부 API 특성에 맞는 Bean을 생성합니다. 여기서 중요한 점은 각 API Vendor사 별로 각각 Bean으로 관리하는 것입니다.</p><p>Vendor사 별로 다르게 Bean을 적용하는 이유</p><ul><li>connection timeout 설정이 각기 다릅니다.</li><li>로깅을 각기 다르게 설정 할 수 있습니다.</li><li>예외 처리가 각기 다릅니다.</li><li>API에 대한 권한 인증이 각기 다릅니다.</li></ul><h2><span id="logging">Logging</span></h2><p>restTemplateBuilder의 <code>additionalInterceptors()</code> 메서드를 이용하면 로킹을 쉽게 구현할 수 있고 특정 Vendor의 Bean에는 더 구체적인 로킹, 그 이외의 작업을 Interceptors을 편리하게 등록할 수 있습니다.</p><h3><span id="code">Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Slf</span>4j</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateClientHttpRequestInterceptor</span> <span class="keyword">implements</span> <span class="title">ClientHttpRequestInterceptor</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@NonNull</span></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> ClientHttpResponse <span class="title">intercept</span><span class="params">(@NonNull <span class="keyword">final</span> HttpRequest request,</span></span></div><div class="line"><span class="function"><span class="params">      @NonNull <span class="keyword">final</span> <span class="keyword">byte</span>[] body, <span class="keyword">final</span> @NonNull ClientHttpRequestExecution execution)</span></span></div><div class="line"><span class="function">      <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">final</span> ClientHttpResponse response = execution.execute(request, body);</div><div class="line"></div><div class="line">    loggingResponse(response);</div><div class="line">    loggingRequest(request, body);</div><div class="line">    <span class="keyword">return</span> execution.execute(request, body);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Request, Response의 Logging을 저장하는 Interceptor 코드입니다. 결제와 같은 중요한 API 호출은 모든 요청과 응답을 모두 로킹 하는 것이 바람직합니다.</p><p>상대적으로 덜 중요한 API 호출 같은 경우에는 Interceptor 등록하지 않아도 됩니다. 이처럼 Vendor 사마다 Bean으로 지정해서 관리하는 것이 효율적입니다.</p><h3><span id="api-call">API Call</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleApi</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">final</span> RestTemplate localTestTemplate;</div><div class="line">  </div><div class="line">  <span class="meta">@PostMapping</span>(<span class="string">"/local-sign-up"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> Member <span class="title">test</span><span class="params">(@RequestBody @Valid <span class="keyword">final</span> SignUpRequest dto)</span></span>&#123;</div><div class="line">    <span class="keyword">final</span> ResponseEntity&lt;Member&gt; responseEntity = localTestTemplate</div><div class="line">        .postForEntity(<span class="string">"/members"</span>, dto, Member.class);</div><div class="line"></div><div class="line">    <span class="keyword">final</span> Member member = responseEntity.getBody();</div><div class="line">    <span class="keyword">return</span> member;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위에서 등록한 localTestTemplate Bean으로 회원 가입 API을 호출해보겠습니다.<br><img src="https://github.com/cheese10yun/spring-guide/raw/master/docs/imgs/api-req-res.png" alt=""></p><p>Interceptor를 통해서 요청했던 Request 정보와 응답받은 Response 정보가 모두 정상적으로 로그 되는 것을 확인할 수 있습니다.</p><h2><span id="예외-처리">예외 처리</span></h2><p>외부 API는 Vendor마다 각기 다르기 때문에 통일성 있게 예외 처리를 진행하기 어렵습니다. 아래는 처리하기 애매한 한 Response입니다.</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"success"</span>: <span class="literal">false</span>,</div><div class="line">  <span class="attr">"result"</span>: &#123;</div><div class="line">      ....</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Resttemplate는 우선 Http Status Code로 1차적으로 API 이상 유무를 검사하게 됩니다. 2xxx 이 외의 코드가 넘어오게 되면 Resttemplate 예외를 발생시킵니다.</p><p>그런데 문제는 2xx http status code를 응답받고 위 JSON 같이 success에 false를 주는 API들입니다. 그렇다면 API 호출마다 아래와 같은 코드로 확인해야 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Member <span class="title">test</span><span class="params">(@RequestBody @Valid <span class="keyword">final</span> SignUpRequest dto)</span></span>&#123;</div><div class="line">  <span class="keyword">final</span> ResponseEntity&lt;Member&gt; responseEntity = localTestTemplate</div><div class="line">      .postForEntity(<span class="string">"/members"</span>, dto, Member.class);</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(responseEntity.getBody().isSuccess()&#123;</div><div class="line">    <span class="comment">// 성공...</span></div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="comment">// 실패...</span></div><div class="line">  &#125;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>모든 API 호출 시에 위와 같은 if else 코드가 있다고 생각하면 끔찍합니다. 이처럼 Vendor마다 다른 예외 처리를 Interceptor처럼 등록해서 Vendor에 알맞은 errorHandler를 지정할 수 있습니다.</p><h3><span id="code">Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestTemplateErrorHandler</span> <span class="keyword">implements</span> <span class="title">ResponseErrorHandler</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasError</span><span class="params">(@NonNull <span class="keyword">final</span> ClientHttpResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">    <span class="keyword">final</span> HttpStatus statusCode = response.getStatusCode();</div><div class="line"><span class="comment">//    response.getBody() 넘겨 받은 body 값으로 적절한 예외 상태 확인 이후 boolean return</span></div><div class="line">    <span class="keyword">return</span> !statusCode.is2xxSuccessful();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@Override</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleError</span><span class="params">(@NonNull <span class="keyword">final</span> ClientHttpResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line"><span class="comment">//    hasError에서 true를 return하면 해당 메서드 실행.</span></div><div class="line"><span class="comment">//    상황에 알맞는 Error handling 로직 작성....</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure><p>Bean을 등록할 때 ResponseErrorHandler 객체를 추가할 수 있습니다. Response 객체에 <code>&quot;success&quot;: false</code>를 <code>hasError()</code> 메서드에서 확인하고, false가 return 되면 <code>handleError()</code>에서 추가적인 에러 핸들링 작업을 이어 나갈 수 있습니다. 이렇게 ResponseErrorHandler 등록을 하면 위처럼 반본 적인 if else 문을 작성하지 않아도 됩니다.</p><p><img src="https://github.com/cheese10yun/spring-guide/raw/master/docs/imgs/api-error.png" alt=""></p><p>위 그림은 에러 발생 시 로킹을 남기는 ResponseErrorHandler를 등록 이후 출력된 그림입니다.</p><p>개인적인 의견이지만 2xx 관련된 Reponse에 <code>success</code> 같은 키값을 내려주지 않는 것이 좋다고 생각합니다. 2xx status code를 응답 해놓고 다시 <code>success</code> false를 주는 것이 논리적으로 이해하기 어렵습니다. 특히 boolean 타입이 아닌 문자열로 내려주는 경우 무슨 문자열이 성공이며, 실패인지 알기가 더 어렵습니다.</p><h2><span id="마무리">마무리</span></h2><p>본 예제에서는 RestTemplate를 기반으로 설명드리긴 했지만 각 Vendor마다 다르고 그것은 추상화하기 어렵기 때문에 별도의 Bean으로 등록하고 특정 Vendor에 특화된 로킹 예외 처리 등 다양한 후속 처리를 하는 것이 바람직하다고 생각합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-guide&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Git
      
    
    </summary>
    
    
      <category term="API" scheme="https://cheese10yun.github.io/tags/API/"/>
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Guide" scheme="https://cheese10yun.github.io/tags/Guide/"/>
    
  </entry>
  
  <entry>
    <title>Spring Guide - Domain</title>
    <link href="https://cheese10yun.github.io/spring-guide-domain/"/>
    <id>https://cheese10yun.github.io/spring-guide-domain/</id>
    <published>2019-02-24T16:40:00.000Z</published>
    <updated>2019-05-05T02:42:40.440Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/spring-guide" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><p>도메인 객체는 우리가 해결하고자 하는 핵심 비즈니스 로직이 반영되는 곳입니다. 특히 도메인 객체에서 자기 자신의 책임을 충분히 다하지 않으면 그 로직들은 자연스럽게 Service 영역 및 외부 영역에서 해당 책임 넘겨받아 구현하게 됩니다. 본인의 책임을 다하는 도메인 객체를 만들고 다른 레이어와 어떻게 메시지를 주고받는지 포스팅을 진행하겠습니다.</p><h2><span id="member-클래스">Member 클래스</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"member"</span>)</div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@EqualsAndHashCode</span>(of = &#123;<span class="string">"id"</span>&#125;)</div><div class="line"><span class="meta">@ToString</span>(of = &#123;<span class="string">"email"</span>, <span class="string">"name"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"id"</span>, updatable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="meta">@AttributeOverride</span>(name = <span class="string">"value"</span>, column = <span class="meta">@Column</span>(name = <span class="string">"email"</span>, nullable = <span class="keyword">false</span>, unique = <span class="keyword">true</span>, updatable = <span class="keyword">false</span>, length = <span class="number">50</span>))</div><div class="line">    <span class="keyword">private</span> Email email;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="meta">@AttributeOverride</span>(name = <span class="string">"value"</span>, column = <span class="meta">@Column</span>(name = <span class="string">"referral_code"</span>, nullable = <span class="keyword">false</span>, unique = <span class="keyword">true</span>, updatable = <span class="keyword">false</span>, length = <span class="number">50</span>))</div><div class="line">    <span class="keyword">private</span> ReferralCode referralCode;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="meta">@AttributeOverrides</span>(&#123;</div><div class="line">            <span class="meta">@AttributeOverride</span>(name = <span class="string">"first"</span>, column = <span class="meta">@Column</span>(name = <span class="string">"first_name"</span>, nullable = <span class="keyword">false</span>)),</div><div class="line">            <span class="meta">@AttributeOverride</span>(name = <span class="string">"middle"</span>, column = <span class="meta">@Column</span>(name = <span class="string">"middle_name"</span>)),</div><div class="line">            <span class="meta">@AttributeOverride</span>(name = <span class="string">"last"</span>, column = <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>, nullable = <span class="keyword">false</span>))</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">private</span> Name name;</div><div class="line"></div><div class="line">    <span class="meta">@CreationTimestamp</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"create_at"</span>, nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> LocalDateTime createAt;</div><div class="line"></div><div class="line">    <span class="meta">@UpdateTimestamp</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"update_at"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> LocalDateTime updateAt;</div><div class="line"></div><div class="line">    <span class="meta">@Builder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Member</span><span class="params">(Email email, ReferralCode referralCode, Name name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.email = email;</div><div class="line">        <span class="keyword">this</span>.referralCode = referralCode;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateProfile</span><span class="params">(<span class="keyword">final</span> Name name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="lombok-잘쓰기">Lombok 잘쓰기</span></h2><blockquote><p><a href="https://github.com/cheese10yun/blog-sample/tree/master/lombok" rel="external nofollow noopener noreferrer" target="_blank">실무에서 Lombok 사용법</a>에 자세한 설명이 있습니다.</p></blockquote><h2><span id="실무에서-lombok-사용법-요약">실무에서 Lombok 사용법 요약</span></h2><ul><li><code>@NoArgsConstructor(access = AccessLevel.PROTECTED)</code> JPA에서는 프록시 객체가 필요하므로 기본 생성자 하나가 반드시 있어야 합니다. 이때 접근지시자는 <code>protected</code>면 됩니다. (낮은 접근지시자를 사용)</li><li><code>@Data</code>는 사용하지 말자, 너무 많은 것들을 해준다.</li><li><code>@Setter</code>는 사용하지 말자, 객체는 변경 포인트를 남발하지 말자.</li><li><code>@ToString</code> 무한 참조가 생길 수 있다. 조심하자. (개인적으로 <code>@ToString(of = {&quot;&quot;)</code> 권장)</li><li>클래스 상단의 <code>@Builder</code> X, 생성자 위에 <code>@Builder</code> OK</li></ul><p>Lombok이 자동으로 해주는 것들을 남용하다 보면 코드의 안전성이 낮아집니다. 특히 도메인 엔티티는 모든 레이어에서 사용되는 객체이니 특별히 신경을 더 많이 써야 합니다. <strong>이 부분은 모든 객체에 해당되는 부분입니다.</strong></p><h2><span id="jpa-어노테이션">JPA 어노테이션</span></h2><ul><li><code>@Table(name = &quot;member&quot;)</code> : 테이블 네임은 반드시 명시합니다. 명시하지 않으면 기본적으로 클래스 네임을 참조하기 때문에 클래스 네임 변경 시 영향을 받게 됩니다.</li><li><code>@Column</code> : 컬럼 네임도 클래스 네임과 마찬가지로 반드시 지정합니다.</li><li><code>nullable</code>, <code>unique</code>, <code>updatable</code> 등의 기능을 적극 활용합니다. 이메일일 경우 <code>nullable</code>, <code>unique</code> 같은 속성을 반드시 추가합니다.</li><li><code>@CreationTimestamp</code>, <code>@UpdateTimestamp</code> 어노테이션을 이용하여 생성, 수정 시간을 쉽게 설정할 수 있습니다.</li></ul><h2><span id="embedded-적극-활용하기">Embedded 적극 활용하기</span></h2><p><code>Embedded</code> 어노테이션을 이용하여 도메인 객체의 책임을 나눌 수 있습니다. <strong>앞서 언급했지만, 객체가 자기 자신의 책임을 다하지 않으면 그 책임은 자연스럽게 다른 객체에게 넘어가게 됩니다.</strong></p><p><code>Name</code>, <code>Address</code> 객체들이 대표적인 <code>Embedded</code> 대상이 되는 객체들입니다. <code>Member</code> 객체에서 <code>Embedded</code>으로 해당 객체를 가지고 있지 않았다면 다음과 같이 작성됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"first_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String firstName;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"middle_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String middleName;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String lastName;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"county"</span>)</div><div class="line">    <span class="keyword">private</span> String county;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"state"</span>)</div><div class="line">    <span class="keyword">private</span> String state;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"city"</span>)</div><div class="line">    <span class="keyword">private</span> String city;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"zip_code"</span>)</div><div class="line">    <span class="keyword">private</span> String zipCode;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>전체 이름, 전체 주소를 가져오기 위해서는 Member 객체에서 기능을 구현해야 합니다. 즉 Member의 책임이 늘어나는 것입니다. 그뿐만이 아닙니다. <code>Name</code>, <code>Address</code>는 많은 도메인 객체에서 사용되는 객체이므로 중복 코드의 증가됩니다. 아래 코드는 <code>Embedded</code>을 활용한 코드입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"first_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String first;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"middle_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String middle;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String last;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"county"</span>)</div><div class="line">    <span class="keyword">private</span> String county;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"state"</span>)</div><div class="line">    <span class="keyword">private</span> String state;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"city"</span>)</div><div class="line">    <span class="keyword">private</span> String city;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span> <span class="meta">@Column</span>(name = <span class="string">"zip_code"</span>)</div><div class="line">    <span class="keyword">private</span> String zipCode;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Member</span> </span>&#123;</div><div class="line">    <span class="meta">@Embedded</span> <span class="keyword">private</span> Name name;</div><div class="line">    <span class="meta">@Embedded</span> <span class="keyword">private</span> Address address;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>Name</code>, <code>Address</code> 객체에서 본인의 책임을 충분히 해주고 있다면 <code>Member</code> 객체도 그 부분에 대해서는 책임이 줄어들게 됩니다.</p><p>만약 주문이라는 객체가 있다면 <code>Name</code>, <code>Address</code> 객체를 그대로 사용하면 됩니다. <code>Embedded</code>의 장점을 정리하면 아래와 같습니다.</p><ol><li>데이터 응집력 증가</li><li>중복 코드 방지</li><li>책임의 분산</li><li>테스트 코드 작성의 용이함</li></ol><h2><span id="rich-obejct">Rich Obejct</span></h2><p>저는 이 부분이 객체지향에서 가장 기본적이며 핵심적인 것이라고 생각합니다. JPA도 객체지향 프로그래밍을 돕는(패러다임 불일치를 해결해서) 도구라고 생각합니다.</p><p><strong>객체지향에서 중요한 것들이 많겠지만 그중에 하나가 객체 본인의 책임을 다하는 것입니다. 여러번 반복해서 언급하지만, 객체가 자기 자신의 책임을 다하지 않으면 그 책임은 다른 객체에게 넘어가게 됩니다.</strong></p><p>도메인 객체들에 기본적인 getter, setter 외에는 메서드를 작성하지 않는 경우가 있습니다. 이렇게 되면 객체 본인의 책임을 다하지 않으니 이런 책임들이 다른 객체에서 이루어지게 됩니다.</p><p>다음은 쿠폰 도메인 객체 코드입니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coupon</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">private</span> CouponCode code;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"used"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> used;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"discount"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> discount;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"expiration_date"</span>, nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> LocalDate expirationDate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExpiration</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> LocalDate.now().isAfter(expirationDate);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</div><div class="line">        verifyExpiration();</div><div class="line">        verifyUsed();</div><div class="line">        <span class="keyword">this</span>.used = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verifyUsed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (used) <span class="keyword">throw</span> <span class="keyword">new</span> CouponAlreadyUseException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verifyExpiration</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (LocalDate.now().isAfter(getExpirationDate())) <span class="keyword">throw</span> <span class="keyword">new</span> CouponExpireException();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>쿠폰에 만료 여부, 쿠폰이 사용 가능 여부, 쿠폰의 사용 등의 메서드는 어느 객체에서 제공해야 할까요? 당연히도 쿠폰 객체 자신입니다.</p><blockquote><p>출처 : 객체지향의 사실과 오해 (정말 정말 추천드리고 싶은 도서입니다.)</p><p>객체는 충분히 '협력적’이어야 한다. 객체는 다른 객체의 요청에 충실히 귀 기울이고 다른 객체에게 적극적으로 도움을 요청할 정도로 열린 마음을 지녀야 한다. 객체는 다른 객체의 명령에 복종하는 것이 아니라 요청에 응답할 뿐이다. 어떤 방식으로 응답할지는 객체 스스로 판단하고 결장한다. 심지어 요청에 응할지 여부도 객체 스스로 결정할 수 있다.</p></blockquote><p>단순하게 getter, settet 메서드만 제공한다면 이는 협력적인 관계가 아닙니다. 그저 복종하는 관계에 지나지 않습니다. 또 요청에 응답할지 자체도 객체 스스로가 결절할 수 있게 객체의 자율성을 보장해야 합니다. <code>use()</code> 메서드 요청이 오더라도 쿠폰 객체는 해당 요청이 알맞지 않다고 판단하면 그 요청을 무시하고 예외를 발생시킵니다. 이렇듯 객체의 자율성이 있어야 합니다.</p><p>setter를 사용하게 되면 해당 객체는 복종하는(수동적인) 관계를 갖게 됩니다.(순수하게 값을 바인딩 하는 코드만 있는 setter를 의미) <code>setUse(true)</code> 메서드는 그저 used 필드를 true 변경하는 외부 객체에 복종하는 메서드 그입니다. 쿠폰 객체 스스로가 자율성을 갖고 해당 메시지에 응답을 할지의 여부도 판단해야 외부 객체와 능동적인 관계를 갖게 됩니다.</p><p>또한 복종하는 관계에서는 쿠폰 사용 로직을 만들기 위해서 내가 객체의 세부적인 사항을 다 알고 있어야 합니다. 쿠폰 만료일, 만료 여부, 기타 등등 수많은 세부사항을 다 알고 검사를 하고 나서 비로소 <code>use()</code> 메서드를 호출하게 됩니다. 이것은 <strong>본인의 책임을 다하고 있지 않아 외부 객체에게 해당 책임이 넘어가는 경우입니다.</strong></p><p>지금까지 설명드린 대부분의 경우는 도메인 객체에 국학 되지 않습니다. 모든 객체에 적용되는 설명입니다. 도메인 객체는 모든 레이어에서 사용하는 아주 주요한 객체이므로 여기서부터 올바른 책임을 제공해 주고 있지 않으면 모든 곳에서 힘들어지기 때문에 도메인 객체 가이드에 작성했습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-guide&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Git
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Guide" scheme="https://cheese10yun.github.io/tags/Guide/"/>
    
      <category term="Domain" scheme="https://cheese10yun.github.io/tags/Domain/"/>
    
  </entry>
  
  <entry>
    <title>인텔리제이 특정 Import 제외 하기</title>
    <link href="https://cheese10yun.github.io/intellij-exclude/"/>
    <id>https://cheese10yun.github.io/intellij-exclude/</id>
    <published>2019-02-23T10:10:00.000Z</published>
    <updated>2019-05-26T10:20:50.166Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>(IntelliJ 사용법 Tip 전체 보기[<a href="https://github.com/cheese10yun/IntelliJ" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/cheese10yun/IntelliJ</a>]</p></blockquote><h1><span id="특정-import-제외하기">특정 Import 제외하기</span></h1><p>인텔리 제이에서는 자동 <code>Import</code>설정을 지원해주고 있습니다. <code>Import</code> 대상이 여러 개 일 경우에는 개발자가 직접 선택하아합니다.</p><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/import-setting.png" alt=""></p><p>위 그림처럼 있을 경우 <code>javax.transaction</code>를 <code>Import</code>할 수도 있습니다. 한번 전체 검색으로 <code>javax.transaction</code>을 찾아보는 것도 좋을 거 같습니다.</p><p>이런 경우에 특정 <code>Import</code>를 제외할 수 있습니다.</p><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/import-exclude.png" alt=""></p><ol><li>Auto Import 탭으로 이동</li><li><code>+</code> 버튼 클릭해서 사용하지 않을 Import 추가</li><li>제외 대상 추가</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">import javax.transaction.Transactional; // 제거 대상 이라면 import, ;를 제거하고 추가한다</div><div class="line"></div><div class="line">javax.transaction.Transactional</div></pre></td></tr></table></figure><p><img src="https://github.com/cheese10yun/IntelliJ/raw/master/assets/import-result.png" alt=""></p><p>자동완성 시 <code>javax.transaction.Transactional</code> 제외가 된 것을 확인할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;(IntelliJ 사용법 Tip 전체 보기[&lt;a href=&quot;https://github.com/cheese10yun/IntelliJ&quot; rel=&quot;external nofollow noopener noreferrer&quot; target
      
    
    </summary>
    
    
      <category term="IntelliJ" scheme="https://cheese10yun.github.io/tags/IntelliJ/"/>
    
      <category term="Tip" scheme="https://cheese10yun.github.io/tags/Tip/"/>
    
      <category term="Git" scheme="https://cheese10yun.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Spring Guide - Exception 전략</title>
    <link href="https://cheese10yun.github.io/spring-guide-exception/"/>
    <id>https://cheese10yun.github.io/spring-guide-exception/</id>
    <published>2019-02-20T17:20:00.000Z</published>
    <updated>2019-02-25T13:43:13.706Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/spring-guide" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><h1><span id="exception-guide">Exception Guide</span></h1><p>스프링은 예외처리를 위해 다양하고 막강한 어노테이션을 제공하고 있습니다. 일관성 있는 코드 스타일을 유지하면서 Exception을 처리하는 방법에 대해서 소개하겠습니다.</p><h1><span id="통일된-error-response-객체">통일된 Error Response 객체</span></h1><p>Error Response 객체는 항상 동일한 Error Response를 가져야 합니다. 그렇지 않으면 클라이언트에서 예외 처리를 항상 동일한 로직으로 처리하기 어렵습니다. Error Response 객체를 유연하게 처리하기 위해서 간혹 <code>Map&lt;Key, Value&gt;</code> 형식으로 처리하는데 이는 좋지 않다고 생각합니다. 우선 Map 이라는 친구는 런타입시에 정확한 형태를 갖추기 때문에 객체를 처리하는 개발자들도 정확히 무슨 키에 무슨 데이터가 있는지 확인하기 어렵습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException.class)</div><div class="line"><span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</div><div class="line">    log.error(<span class="string">"handleMethodArgumentNotValidException"</span>, e);</div><div class="line">    <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(ErrorCode.INVALID_INPUT_VALUE, e.getBindingResult());</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.BAD_REQUEST);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 예제 코드처럼 리턴 타입이 <code>ResponseEntity&lt;ErrorResponse&gt;</code> 으로 무슨 데이터가 어떻게 있는지 명확하게 추론하기 쉽도록 구성하는 게 바람직합니다.</p><h2><span id="error-response-json">Error Response JSON</span></h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"message"</span>: <span class="string">" Invalid Input Value"</span>,</div><div class="line">  <span class="attr">"status"</span>: <span class="number">400</span>,</div><div class="line">  // "errors":[], 비어있을 경우 null 이 아닌 빈 배열을 응답한다.</div><div class="line">  "errors": [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"field"</span>: <span class="string">"name.last"</span>,</div><div class="line">      <span class="attr">"value"</span>: <span class="string">""</span>,</div><div class="line">      <span class="attr">"reason"</span>: <span class="string">"must not be empty"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"field"</span>: <span class="string">"name.first"</span>,</div><div class="line">      <span class="attr">"value"</span>: <span class="string">""</span>,</div><div class="line">      <span class="attr">"reason"</span>: <span class="string">"must not be empty"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  "code": "C001"</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ErrorResponse 객체의 JSON 입니다.</p><ul><li>message : 에러에 대한 message를 작성합니다.</li><li>status : http status code를 작성합니다. header 정보에도 포함된 정보이니 굳이 추가하지 않아도 됩니다.</li><li>errors : 요청 값에 대한 <code>field</code>, <code>value</code>, <code>reason</code> 작성합니다. 일반적으로 <code>@Valid</code> 어노테이션으로 <code>JSR 303: Bean Validation</code>에 대한 검증을 진행 합니다.<ul><li>만약 errors에 바인인된 결과가 없을 경우 null이 아니라 빈 배열 <code>[]</code>을 응답해줍니다. null 객체는 절대 리턴하지 않습니다. null이 의미하는 것이 애매합니다.</li></ul></li><li>code : 에러에 할당되는 유니크한 코드값입니다.</li></ul><h2><span id="error-response-객체">Error Response 객체</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorResponse</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</div><div class="line">    <span class="keyword">private</span> List&lt;FieldError&gt; errors;</div><div class="line">    <span class="keyword">private</span> String code;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="meta">@Getter</span></div><div class="line">    <span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldError</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> String field;</div><div class="line">        <span class="keyword">private</span> String value;</div><div class="line">        <span class="keyword">private</span> String reason;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ErrorResponse 객체 입니다. POJO 객체로 관리하면 <code>errorResponse.getXXX();</code> 이렇게 명확하게 객체에 있는 값을 가져올 수 있습니다. 그 밖에 특정 Exception에 대해서 ErrorResponse 객체를 어떻게 만들 것인가에 대한 책임을 명확하게 갖는 구조로 설계할 수 있습니다. 세부적인 것은 코드를 확인해주세요.</p><h1><span id="controlleradvice로-모든-예외를-핸들링">@ControllerAdvice로 모든 예외를 핸들링</span></h1><p><code>@ControllerAdvice</code> 어노테이션으로 모든 예외를 한 곳에서 처리할 수 있습니다. 해당 코드의 세부적인 것은 중요하지 않으며 가장 기본적이며 필수적으로 처리하는 코드입니다. 코드에 대한 이해보다 아래의 설명을 참고하는 게 좋습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="meta">@Slf</span>4j</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     *  javax.validation.Valid or <span class="doctag">@Validated</span> 으로 binding error 발생시 발생한다.</span></div><div class="line"><span class="comment">     *  HttpMessageConverter 에서 등록한 HttpMessageConverter binding 못할경우 발생</span></div><div class="line"><span class="comment">     *  주로 <span class="doctag">@RequestBody</span>, <span class="doctag">@RequestPart</span> 어노테이션에서 발생</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException.class)</div><div class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</div><div class="line">        log.error(<span class="string">"handleMethodArgumentNotValidException"</span>, e);</div><div class="line">        <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(ErrorCode.INVALID_INPUT_VALUE, e.getBindingResult());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.BAD_REQUEST);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * <span class="doctag">@ModelAttribut</span> 으로 binding error 발생시 BindException 발생한다.</span></div><div class="line"><span class="comment">     * ref https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-modelattrib-method-args</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@ExceptionHandler</span>(BindException.class)</div><div class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleBindException</span><span class="params">(BindException e)</span> </span>&#123;</div><div class="line">        log.error(<span class="string">"handleBindException"</span>, e);</div><div class="line">        <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(ErrorCode.INVALID_INPUT_VALUE, e.getBindingResult());</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.BAD_REQUEST);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * enum type 일치하지 않아 binding 못할 경우 발생</span></div><div class="line"><span class="comment">     * 주로 <span class="doctag">@RequestParam</span> enum으로 binding 못했을 경우 발생</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@ExceptionHandler</span>(MethodArgumentTypeMismatchException.class)</div><div class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleMethodArgumentTypeMismatchException</span><span class="params">(MethodArgumentTypeMismatchException e)</span> </span>&#123;</div><div class="line">        log.error(<span class="string">"handleMethodArgumentTypeMismatchException"</span>, e);</div><div class="line">        <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(e);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.BAD_REQUEST);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 지원하지 않은 HTTP method 호출 할 경우 발생</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@ExceptionHandler</span>(HttpRequestMethodNotSupportedException.class)</div><div class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleHttpRequestMethodNotSupportedException</span><span class="params">(HttpRequestMethodNotSupportedException e)</span> </span>&#123;</div><div class="line">        log.error(<span class="string">"handleHttpRequestMethodNotSupportedException"</span>, e);</div><div class="line">        <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(ErrorCode.METHOD_NOT_ALLOWED);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.METHOD_NOT_ALLOWED);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Authentication 객체가 필요한 권한을 보유하지 않은 경우 발생합</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@ExceptionHandler</span>(AccessDeniedException.class)</div><div class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleAccessDeniedException</span><span class="params">(AccessDeniedException e)</span> </span>&#123;</div><div class="line">        log.error(<span class="string">"handleAccessDeniedException"</span>, e);</div><div class="line">        <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(ErrorCode.HANDLE_ACCESS_DENIED);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.valueOf(ErrorCode.HANDLE_ACCESS_DENIED.getStatus()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ExceptionHandler</span>(BusinessException.class)</div><div class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleBusinessException</span><span class="params">(<span class="keyword">final</span> BusinessException e)</span> </span>&#123;</div><div class="line">        log.error(<span class="string">"handleEntityNotFoundException"</span>, e);</div><div class="line">        <span class="keyword">final</span> ErrorCode errorCode = e.getErrorCode();</div><div class="line">        <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(errorCode);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.valueOf(errorCode.getStatus()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@ExceptionHandler</span>(Exception.class)</div><div class="line">    <span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleException</span><span class="params">(Exception e)</span> </span>&#123;</div><div class="line">        log.error(<span class="string">"handleEntityNotFoundException"</span>, e);</div><div class="line">        <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(ErrorCode.INTERNAL_SERVER_ERROR);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.INTERNAL_SERVER_ERROR);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>handleMethodArgumentNotValidException<ul><li>avax.validation.Valid or @Validated 으로 binding error 발생시 발생한다. )</li><li>HttpMessageConverter 에서 등록한 HttpMessageConverter binding 못할경우 발생 주로 @RequestBody, @RequestPart 어노테이션에서 발생</li></ul></li><li>handleBindException<ul><li>@ModelAttribut 으로 binding error 발생시 BindException 발생한다.</li></ul></li><li>MethodArgumentTypeMismatchException<ul><li>enum type 일치하지 않아 binding 못할 경우 발생</li><li>주로 @RequestParam enum으로 binding 못했을 경우 발생</li></ul></li><li>handleHttpRequestMethodNotSupportedException :<ul><li>지원하지 않은 HTTP method 호출 할 경우 발생</li></ul></li><li>handleAccessDeniedException<ul><li>Authentication 객체가 필요한 권한을 보유하지 않은 경우 발생합</li><li>Security에서 던지는 예외</li></ul></li><li>handleException<ul><li>그 밖에 발생하는 모든 예외 처리, Null Point Exception, 등등</li><li>개발자가 직접 핸들링해서 다른 예외로 던지지 않으면 모두 이곳으로 모인다.</li></ul></li><li>handleBusinessException<ul><li>비지니스 요규사항에 따른 Exception</li><li>아래에서 자세한 설명 진행</li></ul></li></ul><p>추가로 스프링 및 라이브러리 등 자체적으로 발생하는 예외는 <code>@ExceptionHandler</code> 으로 추가해서 적절한 Error Response를 만들고 <strong>비지니스 요구사항에 예외일 경우 <code>BusinessException</code> 으로 통일성 있게 처리하는 것을 목표로 한다. 추가로 늘어날 수는 있겠지만 그 개수를 최소한으로 하는 노력이 필요합니다.</strong></p><h1><span id="error-code-정의">Error Code 정의</span></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ErrorCode &#123;</div><div class="line"></div><div class="line">    <span class="comment">// Common</span></div><div class="line">    INVALID_INPUT_VALUE(<span class="number">400</span>, <span class="string">"C001"</span>, <span class="string">" Invalid Input Value"</span>),</div><div class="line">    METHOD_NOT_ALLOWED(<span class="number">405</span>, <span class="string">"C002"</span>, <span class="string">" Invalid Input Value"</span>),</div><div class="line">    ....</div><div class="line">    HANDLE_ACCESS_DENIED(<span class="number">403</span>, <span class="string">"C006"</span>, <span class="string">"Access is Denied"</span>),</div><div class="line"></div><div class="line">    <span class="comment">// Member</span></div><div class="line">    EMAIL_DUPLICATION(<span class="number">400</span>, <span class="string">"M001"</span>, <span class="string">"Email is Duplication"</span>),</div><div class="line">    LOGIN_INPUT_INVALID(<span class="number">400</span>, <span class="string">"M002"</span>, <span class="string">"Login input is invalid"</span>),</div><div class="line"></div><div class="line">    ;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</div><div class="line"></div><div class="line">    ErrorCode(<span class="keyword">final</span> <span class="keyword">int</span> status, <span class="keyword">final</span> String code, <span class="keyword">final</span> String message) &#123;</div><div class="line">        <span class="keyword">this</span>.status = status;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">        <span class="keyword">this</span>.code = code;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>에러 코드는 enum 타입으로 한 곳에서 관리합니다.</p><p>에러 코드가 전체적으로 흩어져있을 경우 코드, 메시지의 중복을 방지하기 어렵고 전체적으로 관리하는 것이 매우 어렵습니다. <code>C001</code> 같은 코드도 동일하게 enum으로 관리 하는 것도 좋습니다. 에러 메시지는 Common과 각 도메인별로 관리하는 것이 효율적일 거 같습니다.</p><h1><span id="business-exception-처리">Business Exception 처리</span></h1><p>여기서 말하는 Business Exception은 요구사항에 맞지 않을 경우 발생시키는 Exception을 말합니다. 만약 쿠폰을 사용 하려고 하는데 이미 사용한 쿠폰인 경우에는 더 이상 정상적인 흐름을 이어갈수가 없게 됩니다. 이런 경우에는 적절한 Exception을 발생시키고 로직을 종료 시켜야합니다.</p><p>더 쉽게 정리하면 요구사항에 맞게 개발자가 직접 Exception을 발생시키는 것들이 Business Exception 이라고 할수 있습니다.</p><p>유지 보수하기 좋은 코드를 만들기 위해서는 Exception을 발생시켜야 합니다. 쿠폰을 입력해서 상품을 주문했을 경우 상품 계산 로직에서 이미 사용해 버린 쿠폰이면 로직을 이어나가기는 어렵습니다.</p><p>단순히 어려운 것이 아니라 해당 계산 로직의 책임이 증가하게 됩니다. 계산 로직은 특정 공식에 의해서 제품의 가격을 계산하는 것이 책임이지 쿠폰이 이미 사용 해 경우, 쿠폰이 만료되었을 경우, 제품이 매진 됐을 경우 등등의 책임을 갖게 되는 순간 유지 보수하기 어려운 코드가 됩니다. 객체의 적절한 책임을 주기 위해서라도 본인이 처리 못 하는 상황일 경우 적절한 Exception을 발생시켜야 합니다.</p><blockquote><p>클린 코드 : 오류 코드 보다 예외를 사용하라 리팩토링</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceController</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendShutDown</span><span class="params">()</span> </span>&#123;</div><div class="line">        DeviceHandle handle = getHandle(DEV1);</div><div class="line">        <span class="comment">// 디바이스 상태를 점검한다.</span></div><div class="line">        <span class="keyword">if</span> (handle != DeviceHandle.INVALID) &#123;</div><div class="line">            <span class="comment">// 레코드 필드에 디바이스 상태를 저장한다.</span></div><div class="line">            retrieveDeviceRecord(handle);</div><div class="line">            <span class="comment">// 디바이스가 일시정지 상태가 아니라면 종료한다.</span></div><div class="line">            <span class="keyword">if</span> (record.getStatus() != DEVICE_SUSPENDED) &#123;</div><div class="line">                pauseDevice(handle);</div><div class="line">                clearDeviceWorkQueue(handle);</div><div class="line">                closeDevice(handle);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                logger.log(<span class="string">"Device suspended. Unable to shut down"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            logger.log(<span class="string">"Invalid handle for: "</span> + DEV1.toString());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>if ... else</code>의 반복으로 인해서 sendShutDown 핵심 비지니스 코드의 이해하기가 어렵습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceController</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendShutDown</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            tryToShutDown();</div><div class="line">        &#125; <span class="keyword">catch</span> (DeviceShutDownError e) &#123;</div><div class="line">            logger.log(e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">tryToShutDown</span><span class="params">()</span> <span class="keyword">throws</span> DeviceShutDownError </span>&#123;</div><div class="line">        DeviceHandle handle = getHandle(DEV1);</div><div class="line">        DeviceRecord record = retrieveDeviceRecord(handle);</div><div class="line">        pauseDevice(handle);</div><div class="line">        clearDeviceWorkQueue(handle);</div><div class="line">        closeDevice(handle);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> DeviceHandle <span class="title">getHandle</span><span class="params">(DeviceID id)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> DeviceShutDownError(<span class="string">"Invalid handle for: "</span> + id.toString());</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>객체 본인의 책임 외적인 것들은 DeviceShutDownError 예외를 발생시키고 있습니다. 코드의 가독성과 책임이 분명하게 드러나고 있습니다.</p><h2><span id="비지니스-예외를-위한-최상위-businessexception-클래스">비지니스 예외를 위한 최상위 BusinessException 클래스</span></h2><p><img src="https://github.com/cheese10yun/spring-guide/raw/master/docs/imgs/BusinessException-final.png" alt=""></p><p>최상위 BusinessException을 상속 받는 InvalidValueException, EntityNotFoundExceptuon 등이 있습니다.</p><ul><li>InvalidValueException : 유효하지 않은 값일 경우 예외를 던지는 Excetion<ul><li>쿠폰 만료, 이미 사용한 쿠폰 등의 이유로 더이상 진행이 못할경우</li></ul></li><li>EntityNotFoundException : 각 엔티티들을 못찾았을 경우<ul><li><code>findById</code>, <code>findByCode</code> 메서드에서 조회가 안되었을 경우</li></ul></li></ul><p>최상위 BusinessException을 기준으로 예외를 발생시키면 통일감 있는 예외 처리를 가질 수 있습니다. 비니지스 로직을 수행하는 코드 흐름에서 로직의 흐름을 진행할 수 없는 상태인 경우에는 적절한 BusinessException 중에 하나를 예외를 발생 시키거나 직접 정의하게 됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ExceptionHandler</span>(BusinessException.class)</div><div class="line"><span class="function"><span class="keyword">protected</span> ResponseEntity&lt;ErrorResponse&gt; <span class="title">handleBusinessException</span><span class="params">(<span class="keyword">final</span> BusinessException e)</span> </span>&#123;</div><div class="line">    log.error(<span class="string">"handleEntityNotFoundException"</span>, e);</div><div class="line">    <span class="keyword">final</span> ErrorCode errorCode = e.getErrorCode();</div><div class="line">    <span class="keyword">final</span> ErrorResponse response = ErrorResponse.of(errorCode);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(response, HttpStatus.valueOf(errorCode.getStatus()));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>이렇게 발생하는 모든 예외는 <code>handleBusinessException</code> 에서 동일하게 핸들링 됩니다. 예외 발생시 알람을 받는 등의 추가적인 행위도 손쉽게 가능합니다. 또 BusinessException 클래스의 하위 클래스 중에서 특정 예외에 대해서 다른 알람을 받는 등의 더 디테일한 핸들링도 가능해집니다.</p><h2><span id="coupon-code">Coupon Code</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coupon</span> </span>&#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</div><div class="line">        verifyExpiration();</div><div class="line">        verifyUsed();</div><div class="line">        <span class="keyword">this</span>.used = <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verifyUsed</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (used) <span class="keyword">throw</span> <span class="keyword">new</span> CouponAlreadyUseException();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verifyExpiration</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (LocalDate.now().isAfter(getExpirationDate())) <span class="keyword">throw</span> <span class="keyword">new</span> CouponExpireException();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>쿠폰의 <code>use</code> 메서드입니다. 만료일과 사용 여부를 확인하고 예외가 발생하면 적절한 Exception을 발생시킵니다.</p><h1><span id="컨트롤러-예외-처리">컨트롤러 예외 처리</span></h1><p>컨틀롤러에서 모든 요청에 대한 값 검증을 진행하고 이상이 없을 시에 서비스 레이어를 호출해야 합니다. 위에서도 언급했듯이 잘못된 값이 있으면 서비스 레이어에서 정상적인 작업을 진행하기 어렵습니다. <strong>무엇보다 컨틀롤러의 책임을 다하고 있지 않으면 그 책임은 자연스럽게 다른 레이어로 전해지게 되며 이렇게 넘겨받은 책임을 처리하는데 큰 비용과 유지보수 하기 어려워질 수밖에 없습니다.</strong></p><p>컨트롤러의 중요한 책임 중의 하나는 요청에 대한 값 검증이 있습니다. 스프링은 JSR 303 기반 어노테이션으로 값 검증을 쉽고 일관성 있게 처리할 수 있도록 도와줍니다. 모든 예외는 <code>@ControllerAdvice</code> 선언된 객체에서 핸들링 됩니다. 컨트롤러로 본인이 직접 예외까지 처리하지 않고 예외가 발생하면 그냥 던져버리는 패턴으로 일관성 있게 개발할 수 있습니다.</p><h2><span id="controller">Controller</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/members"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberApi</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> MemberSignUpService memberSignUpService;</div><div class="line"></div><div class="line">    <span class="meta">@PostMapping</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MemberResponse <span class="title">create</span><span class="params">(@RequestBody @Valid <span class="keyword">final</span> SignUpRequest dto)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Member member = memberSignUpService.doSignUp(dto);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MemberResponse(member);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignUpRequest</span> </span>&#123;</div><div class="line">    <span class="meta">@Valid</span> <span class="keyword">private</span> Email email;</div><div class="line">    <span class="meta">@Valid</span> <span class="keyword">private</span> Name name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</div><div class="line">    <span class="meta">@NotEmpty</span> <span class="keyword">private</span> String first;</div><div class="line">    <span class="keyword">private</span> String middle;</div><div class="line">    <span class="meta">@NotEmpty</span> <span class="keyword">private</span> String last;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span>&#123;</div><div class="line">    <span class="meta">@javax</span>.validation.constraints.Email</div><div class="line">    <span class="keyword">private</span> String value;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>회원 가입 Reuqest Body 중에서 유효하지 않은 값이 있을 때 <code>@Valid</code> 어노테이션으로 예외를 발생시킬 수 있습니다. 이 예외는 <code>@ControllerAdvice</code>에서 적절하게 핸들링 됩니다. <code>@NotEmpty</code>, <code>@Email</code> 외에도 다양한 어노테이션들이 제공됩니다.</p><h1><span id="try-catch-전략">Try Catch 전략</span></h1><p>기본적으로 예외가 발생하면 로직의 흐름을 끊고 종료 시켜야 합니다물론 예외도 있지만, 최대한 예외를 발생시켜 종료하는 것을 지향해야 한다고 생각합니다.)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// 비지니스 로직 수행...</span></div><div class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 같은 코드는 지양하야 하는 패턴입니다. 최소한의 양심으로 <code>e.printStackTrace();</code> 로그라도 출력했지만 이미 예외가 발생했음에도 불가하고 다음 로직을 실행하게 됩니다. 이런 식의 <code>try catch</code>를 최대한 지양해야 합니다.</p><p>하지만 Checked Exception 같은 경우에는 예외를 반드시 감싸야 하므로 이러한 경우에는 <code>try catch</code>를 사용해야 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    <span class="comment">// 비지니스 로직 수행...</span></div><div class="line">&#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line">    e.printStackTrace();</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> XXX비지니스로직예외(e);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>try catch</code>를 사용해야 하는 경우라면 더 구체적인 예외로 Exception을 발생시키는 것이 좋습니다. 간단하게 정리하면</p><ol><li><code>try catch</code>를 최대한 지양해라</li><li><code>try catch</code>로 에러를 먹고 주는 코드는 지양해라(이런 코드가 있다면 로그라도 추가해주세요…)</li><li><code>try catch</code>를 사용하게 된다면 더 구체적인 Exception을 발생시키는 것이 좋다.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-guide&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Git
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Guide" scheme="https://cheese10yun.github.io/tags/Guide/"/>
    
      <category term="Exception" scheme="https://cheese10yun.github.io/tags/Exception/"/>
    
  </entry>
  
  <entry>
    <title>Spring Guide - 테스트 전략</title>
    <link href="https://cheese10yun.github.io/spring-guide-test-1/"/>
    <id>https://cheese10yun.github.io/spring-guide-test-1/</id>
    <published>2019-02-16T15:35:00.000Z</published>
    <updated>2019-02-16T15:58:19.883Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/spring-guide" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><h1><span id="소개">소개</span></h1><p>스프링은 다양한 테스트 전략을 제공하고 있습니다. 대표적으로 Slice Test 라는 것으로 특정 레이어에 대해서 Bean을 최소한으로 등록시켜 테스트 하고자 하는 부분에 최대한 단위 테스트를 지원합니다. 다양하게 지원해주는 만큼 테스트 코드를 통일성 있게 관리하는 것이 중요합니다. 더 안전하고 통일성 있게 테스트를 진행하는 방법에 대해서 제 나름의 노하우를 정리해보았습니다.</p><h1><span id="테스트-전략">테스트 전략</span></h1><table><thead><tr><th>어노테이션</th><th>설명</th><th>부모 클래스</th><th>Bean</th></tr></thead><tbody><tr><td>@SpringBootTest</td><td>통합 테스트, 전체</td><td>IntegrationTest</td><td>Bean 전체</td></tr><tr><td>@WebMvcTest</td><td>단위 테스트, Mvc 테스트</td><td>MockApiTest</td><td>MVC 관련된 Bean</td></tr><tr><td>@DataJpaTest</td><td>단위 테스트, Jpa 테스트</td><td>RepositoryTest</td><td>JPA 관련 Bean</td></tr><tr><td>None</td><td>단위 테스트, Service 테스트</td><td>MockTest</td><td>None</td></tr><tr><td>None</td><td>POJO, 도메인 테스트</td><td>None</td><td>None</td></tr></tbody></table><h1><span id="통합테스트">통합테스트</span></h1><h2><span id="장점">장점</span></h2><ul><li>모든 Bean을 올리고 테스트를 진행하기 때문에 쉽게 테스트 진행 가능</li><li>모든 Bean을 올리고 테스트를 진행하기 때문에 운영환경과 가장 유사하게 테스트 가능</li><li>API를 테스트할 경우 요청부터 응답까지 전체적인 테스트 진행 가능</li></ul><h2><span id="단점">단점</span></h2><ul><li>모든 Bean을 올리고 테스트를 진행하기 때문에 테스트 시간이 오래 걸림</li><li>테스트의 단위가 크기 때문에 테스트 실패시 디버깅이 어려움</li><li>외부 API 콜같은 Rollback 처리가 안되는 테스트 진행을 하기 어려움</li></ul><h2><span id="code">Code</span></h2><h3><span id="integrationtest">IntegrationTest</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span>(classes = ApiApp.class)</div><div class="line"><span class="meta">@AutoConfigureMockMvc</span></div><div class="line"><span class="meta">@ActiveProfiles</span>(TestProfile.TEST)</div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="meta">@Ignore</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegrationTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span> <span class="keyword">protected</span> MockMvc mvc;</div><div class="line">    <span class="meta">@Autowired</span> <span class="keyword">protected</span> ObjectMapper objectMapper;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>통합 테스트의 Base 클래스입니다. Base 클래스를 통해서 테스트 전략을 통일성 있게 가져갈 수 있습니다.</li><li>통합 테스트는 주로 컨트롤러 테스트를 주로 하며 요청부터 응답까지의 전체 플로우를 테스트합니다.</li><li><code>@ActiveProfiles(TestProfile.TEST)</code> 설정으로 테스트에 profile을 지정합니다. 환경별로 properties 파일을 관리하듯이 test도 반드시 별도의 properties 파일로 관리하는 것이 바람직합니다.</li><li>인터페이스나 enum 클래스를 통해서 profile을 관리합니다. 오타 실수를 줄일 수 있으며 전체적인 프로필이 몇 개 있는지 한 번에 확인할 수 있습니다.</li><li><code>@Transactional</code> 트랜잭션 어노테이션을 추가하면 테스트코드의 데이터베이스 정보가 자동으로 Rollback 됩니다. 베이스 클래스에 이 속성을 추가 해야지 실수 없이 진행할 수 있습니다.</li><li><code>@Transactional</code>을 추가하면 자연스럽게 데이터베이스 상태의존 적인 테스트를 자연스럽게 하지 않을 수 있게 됩니다.</li><li>통합 테스트 시 필요한 기능들을 <code>protected</code>로 제공해줄 수 있습니다. API 테스트를 주로 하게 되니 ObjectMapper 등을 제공해줄 수 있습니다. 유틸성 메서드들도 <code>protected</code>로 제공해주면 중복 코드 및 테스트 코드의 편의성이 높아집니다.</li><li>실제로 동작할 필요가 없으니 <code>@Ignore</code> 어노테이션을 추가합니다.</li></ul><h3><span id="test-code">Test Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberApiTest</span> <span class="keyword">extends</span> <span class="title">IntegrationTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MemberSetup memberSetup;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 회원가입_성공() <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">//given</span></div><div class="line">        <span class="keyword">final</span> Member member = MemberBuilder.build();</div><div class="line">        <span class="keyword">final</span> Email email = member.getEmail();</div><div class="line">        <span class="keyword">final</span> Name name = member.getName();</div><div class="line">        <span class="keyword">final</span> SignUpRequest dto = SignUpRequestBuilder.build(email, name);</div><div class="line"></div><div class="line">        <span class="comment">//when</span></div><div class="line">        <span class="keyword">final</span> ResultActions resultActions = requestSignUp(dto);</div><div class="line"></div><div class="line">        <span class="comment">//then</span></div><div class="line">        resultActions</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(jsonPath(<span class="string">"email.value"</span>).value(email.getValue()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"email.host"</span>).value(email.getHost()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"email.id"</span>).value(email.getId()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"name.first"</span>).value(name.getFirst()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"name.middle"</span>).value(name.getMiddle()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"name.last"</span>).value(name.getLast()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"name.fullName"</span>).value(name.getFullName()))</div><div class="line">        ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 회원조회() <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">//given</span></div><div class="line">        <span class="keyword">final</span> Member member = memberSetup.save();</div><div class="line"></div><div class="line">        <span class="comment">//when</span></div><div class="line">        <span class="keyword">final</span> ResultActions resultActions = requestGetMember(member.getId());</div><div class="line"></div><div class="line">        <span class="comment">//then</span></div><div class="line">        resultActions</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andExpect(jsonPath(<span class="string">"email.value"</span>).value(member.getEmail().getValue()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"email.host"</span>).value(member.getEmail().getHost()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"email.id"</span>).value(member.getEmail().getId()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"name.first"</span>).value(member.getName().getFirst()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"name.middle"</span>).value(member.getName().getMiddle()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"name.last"</span>).value(member.getName().getLast()))</div><div class="line">                .andExpect(jsonPath(<span class="string">"name.fullName"</span>).value(member.getName().getFullName()))</div><div class="line">        ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> ResultActions <span class="title">requestSignUp</span><span class="params">(SignUpRequest dto)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> mvc.perform(post(<span class="string">"/members"</span>)</div><div class="line">                .contentType(MediaType.APPLICATION_JSON_UTF8)</div><div class="line">                .content(objectMapper.writeValueAsString(dto)))</div><div class="line">                .andDo(print());</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>IntegrationTest</code> 클래스를 상속받습니다. 이 상속을 통해서 MemberApiTest에서 테스트를 위한 어 로테이션이 생략되며 어떤 통합 테스트라도 항상 통일성을 가질 수 있습니다.</li><li><code>given</code>, <code>when</code>, <code>then</code> 키워드로 테스트 흐름을 알려줍니다. 다른 사람의 테스트 코드의 가독성이 높아지기 때문에 해당 키워드로 적절하게 표시하는 것을 권장합니다.</li><li>요청에 대한 메서드를 <code>requestSignUp(...)</code>으로 분리해서 재사용성을 높입니다. 해당 메서드로 valdate 실패하는 케이스도 작성합니다 <code>andDo(print())</code> 메서드를 추가해서 해당 요청에 대한 출력을 확인합니다. 디버깅에 매우 유용합니다.</li><li>모든 response에 대한 <code>andExpect</code>를 작성합니다. 간혹 <code>.andExpect(content().string(containsString(&quot;&quot;)))</code> 이런 테스트를 진행하는데 특정 문자열이 들어 있는지 없는지 확인하는 것은 것보다 모<ul><li><strong>response에 하나라도 빠지거나 변경되면 API 변경이 이루어진 것이고 그 변경에 맞게 테스트 코드도 변경되어야 합니다.</strong></li></ul></li><li><code>회원 조회</code> 테스트 강은 경우 <code>memberSetup.save();</code> 메서드로 테스트전에 데이터베이스에 insert 합니다.<ul><li>데이터베이스에 미리 있는 값을 검증하는 것은 데이터베이스 상태에 의존한 코드가 되며 누군가가 회원 정보를 변경하게 되면 테스트 코드가 실패하게 됩니다.</li><li>테스트 전에 데이터를 insert하지 않는다면 테스트 코드 구동 전에 <code>.sql</code> 으로 미리 데이터베이스를 준비시킵니다 ApplicationRunner를 이용해서 데이터베이스를 준비시키 방법도 있습니다.</li><li><strong>중요한 것은 데이터베이스 상태에 너무 의존적인 테스트는 향후 로직의 문제가 없더라도 테스트가 실패하는 상황이 자주 만나게 됩니다.</strong></li></ul></li></ul><h1><span id="서비스-테스트">서비스 테스트</span></h1><h2><span id="장점">장점</span></h2><ul><li>진행하고자 하는 테스트에만 집중할 수 있습니다.</li><li>테스트 진행시 중요 관점이 아닌 것들은 Mocking 처리해서 외부 의존성들을 줄일 수 있습니다.<ul><li>예를 들어 주문 할인 로직이 제대로 동작하는지에 대한 테스트만 진행하지 이게 실제로 데이터베이스에 insert되는지는 해당 테스트의 관심사가 아닙니다.</li></ul></li><li>테스트 속도가 빠릅니다.</li></ul><h2><span id="단점">단점</span></h2><ul><li>의존성 있는 객체를 Mocking 하기 때문에 문제가 완결된 테스트는 아닙니다.</li><li>Mocking 하기가 귀찮습니다.</li><li>Mocking 라이브러리에 대한 학습 비용이 발생합니다.</li></ul><h2><span id="code">Code</span></h2><h3><span id="mocktest">MockTest</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(MockitoJUnitRunner.class)</div><div class="line"><span class="meta">@ActiveProfiles</span>(TestProfile.TEST)</div><div class="line"><span class="meta">@Ignore</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockTest</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>주로 Service 영역을 테스트 합니다.</li><li><code>MockitoJUnitRunner</code>을 통해서 Mock 테스트를 진행합니다.</li></ul><h3><span id="test-code">Test Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberSignUpServiceTest</span> <span class="keyword">extends</span> <span class="title">MockTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@InjectMocks</span></div><div class="line">    <span class="keyword">private</span> MemberSignUpService memberSignUpService;</div><div class="line"></div><div class="line">    <span class="meta">@Mock</span></div><div class="line">    <span class="keyword">private</span> MemberRepository memberRepository;</div><div class="line">    <span class="keyword">private</span> Member member;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        member = MemberBuilder.build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 회원가입_성공() &#123;</div><div class="line">        <span class="comment">//given</span></div><div class="line">        <span class="keyword">final</span> Email email = member.getEmail();</div><div class="line">        <span class="keyword">final</span> Name name = member.getName();</div><div class="line">        <span class="keyword">final</span> SignUpRequest dto = SignUpRequestBuilder.build(email, name);</div><div class="line"></div><div class="line">        given(memberRepository.existsByEmail(any())).willReturn(<span class="keyword">false</span>);</div><div class="line">        given(memberRepository.save(any())).willReturn(member);</div><div class="line"></div><div class="line">        <span class="comment">//when</span></div><div class="line">        <span class="keyword">final</span> Member signUpMember = memberSignUpService.doSignUp(dto);</div><div class="line"></div><div class="line">        <span class="comment">//then</span></div><div class="line">        assertThat(signUpMember).isNotNull();</div><div class="line">        assertThat(signUpMember.getEmail().getValue()).isEqualTo(member.getEmail().getValue());</div><div class="line">        assertThat(signUpMember.getName().getFullName()).isEqualTo(member.getName().getFullName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span>(expected = EmailDuplicateException.class)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 회원가입_이메일중복_경우() &#123;</div><div class="line">        <span class="comment">//given</span></div><div class="line">        <span class="keyword">final</span> Email email = member.getEmail();</div><div class="line">        <span class="keyword">final</span> Name name = member.getName();</div><div class="line">        <span class="keyword">final</span> SignUpRequest dto = SignUpRequestBuilder.build(email, name);</div><div class="line"></div><div class="line">        given(memberRepository.existsByEmail(any())).willReturn(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        <span class="comment">//when</span></div><div class="line">        memberSignUpService.doSignUp(dto);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>MockTest</code> 객체를 상속받아 테스트의 일관성을 갖습니다.</li><li><code>회원가입_성공</code> 테스트는 오직 회원 가입에대한 단위 테스트만 진행합니다.<ul><li><code>existsByEmail</code>을 모킹해서 해당 이메일이 중복되지 않았다는 가정을 합니다.</li><li><code>then</code> 에서는 회원 객체가 해당 비지니스 요구사항에 맞게 생성됬는지를 검사합니다.</li><li>실제 데이터베이스에 Insert 됬는지 여부는 해당 테스트의 관심사가 아닙니다.</li></ul></li><li><code>회원가입_이메일중복_경우</code> 테스트는 회원가입시 이메일이 중복됬는지 여부를 확인합니다.<ul><li><code>existsByEmail</code>을 모킹해서 이메일이 중복됬다는 가정을 합니다.</li><li><code>expected</code>으로 이메일이 중복되었을 경우 <code>EmailDuplicateException</code> 예외가 발생하는지 확인합니다.</li><li>해당 이메일이 데이터베이스에 실제로 있어서 예외가 발생하는지는 관심사가 아닙니다. 작성한 코드가 제대로 동작 여부만이 해당 테스트의 관심사 입니다.</li></ul></li><li>오직 테스트의 관심사만 테스트를 진행하기 때문에 예외 발생시 디버깅 작업도 명확해집니다.</li><li>외부 의존도가 낮기 때문에 테스트 하고자하는 부분만 명확하게 테스트가 가능합니다.<ul><li>이것은 단점이기도 합니다. 해당 테스트만 진행하지 외부 의존을 갖는 코드까지 테스트하지 않으니 실제 환경에서 제대로 동작하지 않을 가능성이 있습니다. 외부 의존에대한 테스트는 통합 테스트에서 진행합니다.</li></ul></li></ul><h1><span id="mock-api-테스트">Mock API 테스트</span></h1><h2><span id="장점">장점</span></h2><ul><li>Mock 테스트와 장점은 거의 같습니다.</li><li><code>WebApplication</code> 관련된 Bean들만 등록하기 때문에 통합 테스트보다 빠르게 테스트할 수 있습니다.</li><li>통합 테스트를 진행하기 어려운 테스트를 진행합니다.<ul><li>외부 API 같은 Rollback 처리가 힘들거나 불가능한 테스트를 주로 사용합니다.</li><li>예를 들어 외부 결제 모듈 API를 콜하면 안 되는 케이스에서 주로 사용 할 수 있습니다.</li><li>이런 문제는 통합 테스트에서 해당 객체를 Mock 객체로 변경해서 테스트를 변경해서 테스트할 수도 있습니다.</li></ul></li></ul><h2><span id="단점">단점</span></h2><ul><li>Mcok 테스트와 다점은 거의 같습니다.</li><li>요청부터 응답까지 모든 테스트를 Mock 기반으로 테스트하기 때문에 실제 환경에서는 제대로 동작하지 않을 가능성이 매우 큽니다.</li></ul><h2><span id="code">Code</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebMvcTest</span>(MemberApi.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberMockApiTest</span> <span class="keyword">extends</span> <span class="title">MockApiTest</span> </span>&#123;</div><div class="line">    <span class="meta">@MockBean</span> <span class="keyword">private</span> MemberSignUpService memberSignUpService;</div><div class="line">    <span class="meta">@MockBean</span> <span class="keyword">private</span> MemberHelperService memberHelperService;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> 회원가입_유효하지않은_입력값() <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="comment">//given</span></div><div class="line">        <span class="keyword">final</span> Email email = Email.of(<span class="string">"asdasd@d"</span>); <span class="comment">// 이메일 형식이 유효하지 않음</span></div><div class="line">        <span class="keyword">final</span> Name name = Name.builder().build();</div><div class="line">        <span class="keyword">final</span> SignUpRequest dto = SignUpRequestBuilder.build(email, name);</div><div class="line">        <span class="keyword">final</span> Member member = MemberBuilder.build();</div><div class="line"></div><div class="line">        given(memberSignUpService.doSignUp(any())).willReturn(member);</div><div class="line"></div><div class="line">        <span class="comment">//when</span></div><div class="line">        <span class="keyword">final</span> ResultActions resultActions = requestSignUp(dto);</div><div class="line"></div><div class="line">        <span class="comment">//then</span></div><div class="line">        resultActions</div><div class="line">                .andExpect(status().isBadRequest())</div><div class="line">        ;</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure><ul><li><code>@WebMvcTest(MemberApi.class)</code> 어노테이션을 통해서 하고자하는 <code>MemberApi</code>의 테스트를 진행합니다.</li><li><code>@MockBean</code> 으로 객체를 주입받아 Mocking 작업을 진행합니다.</li><li>테스트의 관심사는 오직 Request와 그에 따른 Response 입니다.</li></ul><h1><span id="repository-test">Repository Test</span></h1><h2><span id="장점">장점</span></h2><ul><li><code>Repository</code> 관련된 Bean들만 등록하기 때문에 통합 테스트에 비해서 빠릅니다.</li><li><code>Repository</code>에 대한 관심사만 갖기 때문에 테스트 범위가 작습니다.</li></ul><h2><span id="단점">단점</span></h2><ul><li>테스트 범위가 작기 때문에 실제 환경과 차이가 발생합니다.</li></ul><h2><span id="code">Code</span></h2><h3><span id="repositorytest">RepositoryTest</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@DataJpaTest</span></div><div class="line"><span class="meta">@ActiveProfiles</span>(TestProfile.TEST)</div><div class="line"><span class="meta">@AutoConfigureTestDatabase</span>(replace = AutoConfigureTestDatabase.Replace.NONE)</div><div class="line"><span class="meta">@Ignore</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RepositoryTest</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>@DataJpaTest</code> 어노테이션을 통해서 <code>Repository</code>에 대한 Bean만 등록합니다.</li><li><code>@DataJpaTest</code>는 기본적으로 메모리 데이터베이스에 대한 테스트를 진행합니다. <code>@AutoConfigureTestDatabase</code> 어노테이션을 통해서 profile에 등록된 데이터베이스 정보로 대체할 수 있습니다.</li><li><code>JpaRepository</code>에서 기본적으로 기본적으로 재공해주는 <code>findById</code>, <code>findByAll</code>, <code>deleteById</code>등은 테스트를 하지 않습니다.<ul><li>기본적으로 <code>save()</code> null 제약 조건등의 테스트는 진행해도 좋다고 생각합니다.</li><li>주로 커스텀하게 작성한 쿼리 메서드, <code>@Query</code>으로 작성된 JPQL등의 커스텀하게 추가된 메서드를 테스트합니다.</li></ul></li></ul><h3><span id="test-code">Test Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberRepositoryTest</span> <span class="keyword">extends</span> <span class="title">RepositoryTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MemberRepository memberRepository;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Member saveMember;</div><div class="line">    <span class="keyword">private</span> Email email;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">final</span> String value = <span class="string">"cheese10yun@gmail.com"</span>;</div><div class="line">        email = EmailBuilder.build(value);</div><div class="line">        <span class="keyword">final</span> Name name = NameBuilder.build();</div><div class="line">        saveMember = memberRepository.save(MemberBuilder.build(email, name));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> existsByEmail_존재하는경우_true() &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> existsByEmail = memberRepository.existsByEmail(email);</div><div class="line">        assertThat(existsByEmail).isTrue();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> existsByEmail_존재하지않은_경우_false() &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> existsByEmail = memberRepository.existsByEmail(Email.of(<span class="string">"ehdgoanfrhkqortntksdls@asd.com"</span>));</div><div class="line">        assertThat(existsByEmail).isFalse();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>setUp()</code> 메서드를 통해서 Member를 데이터베이스에 insert 합니다.<ul><li><code>setUp()</code> 메서드는 메번 테스트 코드가 실행되기전에 실행됩니다. 즉 테스트 코드 실핼 할 때마다 insert -&gt; rollback이 자동으로 이루어집니다.</li></ul></li><li>추가 작성한 쿼리메서드 <code>existsByEmail</code>을 테스트 진행합니다.<ul><li>실제로 작성된 쿼리가 어떻게 출력되는지 <code>show-sql</code> 옵션을 통해서 확인 합니다. ORM은 SQL을 직접 장성하지 않으니 실제 쿼리가 어떻게 출력되는지 확인하는 습관을 반드시 가져야합니다.</li></ul></li></ul><h1><span id="pojo-테스트">POJO 테스트</span></h1><h2><span id="설명">설명</span></h2><p>각 엔티티(Embeddable, Entity, 일반 POJO, 모든 객체) 객체들의 기능이 풍부해야 합니다. 객체 본인의 책임을 충분히 다하지 않고 있으면 다른 영역으로 그 객체의 책임이 넘어 가게됩니다. 예를 들어 <code>Name</code> 객체가 <code>getFullName()</code> 메서드를 제공해주지 않는다면 <code>getFullName()</code> 메서드를 만족시키는 메서드들이 다른 계층에서 구현하게 되고 어느 계층에서 어떻게 사용되고 있는지 모르기 때문에 누군가는 중복코드를 만들게 됩니다.</p><p>객체지향에서 본인의 책임(기능)은 본인 스스로가 제공해야 합니다. 특히 엔티티 객체들은 가장 핵심 객체이고 이 객체를 사용하는 계층들이 다양하게 분포되기 때문에 반드시 테스트 코드를 작성해야합니다.</p><h2><span id="장점">장점</span></h2><ul><li>POJO 객체이므로 테스트하기 편합니다. 외부에서 주입 받을 의존성도 없고 Mocking할 대상도 없습니다.</li><li>엔티티 객체는 사용하는 계층이 많으므로 테스트의 효율성이 높습니다.</li></ul><h2><span id="단점">단점</span></h2><ul><li>단점은 없다고 생각합니다. POJO를 테스트 하므로 테스트 속도 및 난도가 낮지만 높은 안전성을 갖게 됩니다.</li></ul><h2><span id="code">Code</span></h2><h3><span id="embeddable">Embeddable</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Embeddable</span></div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="meta">@ToString</span>(of = &#123;<span class="string">"first"</span>, <span class="string">"middle"</span>, <span class="string">"last"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"first_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String first;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"middle_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String middle;</div><div class="line"></div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>, length = <span class="number">50</span>)</div><div class="line">    <span class="keyword">private</span> String last;</div><div class="line"></div><div class="line">    <span class="meta">@Builder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Name</span><span class="params">(<span class="keyword">final</span> String first, <span class="keyword">final</span> String middle, <span class="keyword">final</span> String last)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.first = first;</div><div class="line">        <span class="keyword">this</span>.middle = StringUtils.isEmpty(middle) ? <span class="keyword">null</span> : middle;</div><div class="line">        <span class="keyword">this</span>.last = last;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFullName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.middle == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> String.format(<span class="string">"%s %s"</span>, <span class="keyword">this</span>.first, <span class="keyword">this</span>.last);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> String.format(<span class="string">"%s %s %s"</span>, <span class="keyword">this</span>.first, <span class="keyword">this</span>.middle, <span class="keyword">this</span>.last);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>Name</code> 객체는 <code>Member</code> 객체에서 사용하고 있습니다. 이처럼 Name 이라는 객체를 <code>Embeddable</code>으로 별도로 가지고 있으면 데이터의 응집력 재사용성이 높아집니다.<ul><li>예를 들어 주문시 주문자 정보를 받아야 된다면 <code>Order</code> 라는 객체에도 동일하게 <code>Name</code> 객체를 사용하면 재사용성이 높아집니다.</li></ul></li><li><code>Embeddable</code> 객체에서도 다른 객체와 마찬가지로 <code>Name</code> 관련된 기능을 충분히 제공해야 합니다. <code>getFullName()</code> 메서드 처럼 <code>first</code>, <code>last</code>, <code>middle</code>의 이름을 적절하게 조합해서 제공해줍니다.</li></ul><h3><span id="test-code">Test Code</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NameTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFullName_isFullName_ReturnFullName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Name name = Name.builder()</div><div class="line">                .first(<span class="string">"first"</span>)</div><div class="line">                .middle(<span class="string">"middle"</span>)</div><div class="line">                .last(<span class="string">"last"</span>)</div><div class="line">                .build();</div><div class="line">        <span class="keyword">final</span> String fullName = name.getFullName();</div><div class="line">        assertThat(fullName, is(<span class="string">"first middle last"</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFullName_WithoutMiddle_ReturnMiddleNameIsNull</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Name name = Name.builder()</div><div class="line">                .first(<span class="string">"first"</span>)</div><div class="line">                .middle(<span class="string">""</span>)</div><div class="line">                .last(<span class="string">"last"</span>)</div><div class="line">                .build();</div><div class="line">        <span class="keyword">final</span> String fullName = name.getFullName();</div><div class="line">        assertThat(fullName, is(<span class="string">"first last"</span>));</div><div class="line">        assertThat(name.getMiddle(), is(nullValue()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFullName_MiddleNameIsNull_ReturnMiddleNameIsNull</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Name name = Name.builder()</div><div class="line">                .first(<span class="string">"first"</span>)</div><div class="line">                .middle(<span class="string">""</span>)</div><div class="line">                .last(<span class="string">"last"</span>)</div><div class="line">                .build();</div><div class="line">        <span class="keyword">final</span> String fullName = name.getFullName();</div><div class="line">        assertThat(fullName, is(<span class="string">"first last"</span>));</div><div class="line">        assertThat(name.getMiddle(), is(nullValue()));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>entity</code>, <code>Embeddable</code> 객체 등의 객체들도 반드시 테스트 코드를 작성해야합니다.</li><li>middle 값이 비어있을 경우 null로 잘들어가는지, <code>getFullName()</code> 메서드가 잘 동작하는지 테스트합니다.</li></ul><h1><span id="마무리">마무리</span></h1><p>각자의 프로젝트 환경이 다르기 때문에 어느 한방 법이 Best Practice라고 말하는 게 어렵습니다. 그래도 테스트 코드의 중요성은 이미 많은 개발자가 공감하고 있는 만큼 보다 효율적인 테스트 코드 환경을 구축하려는 노력이 많이 선행되어야 한다고 생각합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-guide&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Git
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Test" scheme="https://cheese10yun.github.io/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>Spring-JPA Best Practices step-15 - Querydsl를 이용해서 Repository 확장하기 (1)</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-15/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-15/</id>
    <published>2019-02-13T17:56:00.000Z</published>
    <updated>2019-06-12T16:21:58.538Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><h2><span id="repository-code">Repository Code</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Account</span>, <span class="title">Long</span>&gt;, <span class="title">AccountCustomRepository</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">Account <span class="title">findByEmail</span><span class="params">(Email email)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">existsByEmail</span><span class="params">(Email email)</span></span>;</div><div class="line"></div><div class="line">    List&lt;Account&gt; findDistinctFirstBy...</div><div class="line"></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"select *from...."</span>)</div><div class="line">    <span class="function">List&lt;Account&gt; <span class="title">findXXX</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>JpaRepository를 이용해서 복잡한 쿼리는 작성하기가 어려운점이 있습니다. <code>findByEmail</code>, <code>existsByEmail</code> 같은 유니크한 값을 조회하는 것들은 쿼리 메서드로 표현하는 것이 가독성 및 생산성에 좋습니다.</p><p><strong>하지만 복잡한 쿼리가 복잡해지면 쿼리 메서드로 표현하기도 어렵습니다. <code>@Query</code> 어노테이션을 이용해서 JPQL을 작성하는 것도 방법이지만 type safe 하지 않아 유지 보수하기 어려운 단점이 있습니다.</strong></p><p>이러한 단점은 <code>Querydsl</code>를 통해서 해결할 수 있지만 조회용 DAO 클래스 들이 남발되어 다양한 DAO를 DI 받아 비즈니스 로직을 구현하게 되는 현상이 발생하게 됩니다.</p><p>이러한 문제를 상속 관계를 통해 <code>XXXRepository</code> 객체를 통해서 DAO를 접근할 수 있는 패턴을 포스팅 하려 합니다.</p><p><img src="https://github.com/cheese10yun/spring-jpa-best-practices/raw/master/images/AccountRepository.png" alt=""></p><p>클래스 다이어그램을 보면 <code>AccountRepository</code>는 <code>AccountCustomRepository</code>, <code>JpaRepository</code>를 구현하고 있습니다.</p><p><code>AccountRepository</code>는 <code>JpaRepository</code>를 구현하고 있으므로 <code>findById</code>, <code>save</code> 등의 메서드를 정의하지 않고도 사용 가능했듯이 <code>AccountCustomRepository</code>에 있는 메서드도 <code>AccountRepository</code>에서 그대로 사용 가능합니다.</p><p>즉 우리는 <code>AccountCustomRepositoryImpl</code>에게 복잡한 쿼리는 구현을 시키고 <code>AccountRepository</code> 통해서 마치 <code>JpaRepository</code>를 사용하는 것처럼 편리하게 사용할 수 있습니다.</p><h2><span id="code">Code</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Account</span>, <span class="title">Long</span>&gt;, <span class="title">AccountCustomRepository</span> </span>&#123;</div><div class="line">    <span class="function">Account <span class="title">findByEmail</span><span class="params">(Email email)</span></span>;</div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">existsByEmail</span><span class="params">(Email email)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountCustomRepository</span> </span>&#123;</div><div class="line">    <span class="function">List&lt;Account&gt; <span class="title">findRecentlyRegistered</span><span class="params">(<span class="keyword">int</span> limit)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountCustomRepositoryImpl</span> <span class="keyword">extends</span> <span class="title">QuerydslRepositorySupport</span> <span class="keyword">implements</span> <span class="title">AccountCustomRepository</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountCustomRepositoryImpl</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Account.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">// 최근 가입한 limit 갯수 만큼 유저 리스트를 가져온다</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Account&gt; <span class="title">findRecentlyRegistered</span><span class="params">(<span class="keyword">int</span> limit)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> QAccount account = QAccount.account;</div><div class="line">        <span class="keyword">return</span> from(account)</div><div class="line">                .limit(limit)</div><div class="line">                .orderBy(account.createdAt.desc())</div><div class="line">                .fetch();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>AccountCustomRepository</code> 인터페이스를 생성합니다.</li><li><code>AccountRepository</code> 인터페이스에 방금 생성한 <code>AccountCustomRepository</code> 인터페이스를 <code>extends</code> 합니다.</li><li><code>AccountCustomRepositoryImpl</code>는 실제 Querydsl를 이용해서 <code>AccountCustomRepository</code>의 세부 구현을 진행합니다.</li></ul><p><strong>커스텀 Repository를 만들 때 중요한 것은 <code>Impl</code> 네이밍을 지켜야합니다.</strong> 자세한 것은<br><a href="https://docs.spring.io/spring-data/jpa/docs/2.1.3.RELEASE/reference/html/#repositories.custom-implementations" rel="external nofollow noopener noreferrer" target="_blank">Spring Data JPA - Reference Documentation</a>을 참조해주세요</p><h2><span id="test-code">Test Code</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@DataJpaTest</span></div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountRepositoryTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AccountRepository accountRepository;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByEmail_test</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> String email = <span class="string">"test001@test.com"</span>;</div><div class="line">        <span class="keyword">final</span> Account account = accountRepository.findByEmail(Email.of(email));</div><div class="line">        assertThat(account.getEmail().getValue()).isEqualTo(email);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">isExistedEmail_test</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> String email = <span class="string">"test001@test.com"</span>;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> existsByEmail = accountRepository.existsByEmail(Email.of(email));</div><div class="line">        assertThat(existsByEmail).isTrue();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findRecentlyRegistered_test</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> List&lt;Account&gt; accounts = accountRepository.findRecentlyRegistered(<span class="number">10</span>);</div><div class="line">        assertThat(accounts.size()).isLessThan(<span class="number">11</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>findByEmail_test</code>, <code>isExistedEmail_test</code> 테스트는 <code>AccountRepository</code>에 작성된 쿼리메서드 테스트입니다.</p><p>중요한 부분은 <code>findRecentlyRegistered_test</code> 으로 <code>AccountCustomRepository</code>에서 정의된 메서드이지만 <code>accountRepository</code>를 이용해서 호출하고 있습니다.</p><p>즉 <code>accountRepository</code> 객체를 통해서<br>복잡한 쿼리의 세부 구현체 객체를 구체적으로 알 필요 없이 사용할 수 있습니다. <strong>이는 의존성을 줄일 수 있는 좋은 구조라고 생각합니다.</strong></p><h2><span id="결론">결론</span></h2><p><code>Repository</code>에서 복잡한 조회 쿼리를 작성하는 것은 유지 보수 측면에서 좋지 않습니다. 쿼리 메서드로 표현이 어려우며 <code>@Qeury</code> 어노테이션을 통해서 작성된 쿼리는 type safe하지 않은 단점이 있습니다. 이것을 <strong>QueryDsl으로 해결하고 다형성을 통해서 복잡한 쿼리의 세부 구현은 감추고 <code>Repository</code>를 통해서 사용하도록 하는 것이 핵심입니다.</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-jpa-best-practices&quot; rel=&quot;external nofollow noopener noreferrer&quot; target
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
      <category term="QueryDsl" scheme="https://cheese10yun.github.io/tags/QueryDsl/"/>
    
  </entry>
  
  <entry>
    <title>Spring-JPA Best Practices step-14 - JUnit5 적용하기</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-14/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-14/</id>
    <published>2019-02-06T12:15:00.000Z</published>
    <updated>2019-02-06T12:22:48.188Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p></blockquote><p>JUnit5는 다양한 어노테이션들이 추가되었습니다. 그중에 Junit5를 도입할 만큼 매력 있는 어노테이션 <code>@DisplayName</code> 입니다.</p><p>단순한 테스트 이외에는 테스트 코드 네이밍으로 테스트하고자 하는 의미를 전달하기가 매우 어렵습니다. 이때 아주 유용하게 사용할 수 있는 것이 <code>@DisplayName</code> 입니다.</p><p><img src="https://github.com/cheese10yun/spring-jpa-best-practices/raw/master/images/junit5-display-name.png" alt=""></p><p>위 그림처럼 <code>@DisplayName(....)</code>  어노테이션으로 코드에 대한 설명을 문자열로 대체할 수 있습니다. 이 대체된 문자열은 실제 테스트 케이스 이름으로 표시됩니다.</p><h2><span id="의존성-추가">의존성 추가</span></h2><p>Spring Boot2의 테스트코드 의존성은 JUnit4를 기본으로 가져오기 때문에 <code>spring-boot-starter-test</code> 의존성 이외에도 추가적인 작업이 필요합니다.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--spring-boot-starter-test 의존성에서 가져오는 JUnit 제외 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--필요한 의존성 추가 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-platform-runner<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><h2><span id="테스트-코드">테스트 코드</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</div><div class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</div><div class="line"><span class="keyword">import</span> org.junit.jupiter.api.extension.ExtendWith;</div><div class="line"><span class="keyword">import</span> org.junit.platform.runner.JUnitPlatform;</div><div class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</div><div class="line"><span class="keyword">import</span> org.mockito.InjectMocks;</div><div class="line"><span class="keyword">import</span> org.mockito.Mock;</div><div class="line"><span class="keyword">import</span> org.mockito.junit.jupiter.MockitoExtension;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.Optional;</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.hamcrest.CoreMatchers.is;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.Assert.assertThat;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.ArgumentMatchers.anyLong;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.BDDMockito.given;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.atLeastOnce;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.Mockito.verify;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">@ExtendWith</span>(MockitoExtension.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceJUnit5Test</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@InjectMocks</span></div><div class="line">    <span class="keyword">private</span> AccountService accountService;</div><div class="line"></div><div class="line">    <span class="meta">@Mock</span></div><div class="line">    <span class="keyword">private</span> AccountRepository accountRepository;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@DisplayName</span>(<span class="string">"findById_존재하는경우_회원리턴"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findBy_not_existed_test</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//given</span></div><div class="line">        <span class="keyword">final</span> AccountDto.SignUpReq dto = buildSignUpReq();</div><div class="line">        given(accountRepository.findById(anyLong())).willReturn(Optional.of(dto.toEntity()));</div><div class="line"></div><div class="line">        <span class="comment">//when</span></div><div class="line">        <span class="keyword">final</span> Account account = accountService.findById(anyLong());</div><div class="line"></div><div class="line">        <span class="comment">//then</span></div><div class="line">        verify(accountRepository, atLeastOnce()).findById(anyLong());</div><div class="line">        assertThatEqual(dto, account);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>필요한 패키지의 경로가 중요하기 때문에 필요한 <code>import</code>을 추가했습니다. 아직 Spring Boot2에서 기본으로 가져온 의존성이 아니기 때문에 복잡한 부분이 있습니다. Prod 코드에는 Spring Boot2에서 JUnit5를 기본으로 택했을 때 변경하는 것이 더 안전하고 효율적이라고 생각합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-jpa-best-practices&quot; rel=&quot;external nofollow noopener noreferrer&quot; target
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
      <category term="JUnit5" scheme="https://cheese10yun.github.io/tags/JUnit5/"/>
    
  </entry>
  
</feed>
