<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yun Blog</title>
  <icon>https://www.gravatar.com/avatar/d313a2c442931458ed624a3999d75011</icon>
  <subtitle>기술 블로</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://cheese10yun.github.io/"/>
  <updated>2018-06-13T09:20:35.315Z</updated>
  <id>https://cheese10yun.github.io/</id>
  
  <author>
    <name>Yun</name>
    <email>cheese10yun@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jackson 어노테이션 사용법(3)</title>
    <link href="https://cheese10yun.github.io/jackson-annotation-03/"/>
    <id>https://cheese10yun.github.io/jackson-annotation-03/</id>
    <published>2018-06-12T15:00:00.000Z</published>
    <updated>2018-06-13T09:20:35.315Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="jackson-property-inclusion-annotations">Jackson Property Inclusion Annotations</span></h2><ul><li><a href="http://www.baeldung.com/jackson-annotations" rel="external nofollow noopener noreferrer" target="_blank">Jackson Annotation Examples</a> 예제를 적용전, 적용후로 나누어서 정리 해봤습니다.</li><li>테스트코드도 참고하시면 좋습니다.</li><li>해당 코드 및 전체 Jackson 정리는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/jackson" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 참고해주세요</li></ul><h3><span id="jsonignoreproperties">@JsonIgnoreProperties</span></h3><ul><li>무시할 속성이나 속성 목록을 표시하는 데 사용됩니다</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonIgnoreProperties</span>(&#123;<span class="string">"id"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithIgnore</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jsonignore">@JsonIgnore</span></h3><ul><li>필드 레벨에서 무시 될 수있는 속성을 표시하는 데 사용됩니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithIgnore</span> </span>&#123;</div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jsonignoretype">@JsonIgnoreType</span></h3><ul><li>주석이 달린 형식의 모든 속성을 무시하도록 지정하는 데 사용됩니다</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line"><span class="keyword">public</span> Name name;</div><div class="line"></div><div class="line">    <span class="meta">@JsonIgnoreType</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> String firstName;</div><div class="line">        <span class="keyword">public</span> String lastName;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jsoninclude">@JsonInclude</span></h3><ul><li>어노테이션 속성을 제외 하는 데 사용 됩니다</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonInclude</span>(JsonInclude.Include.NON_NULL)</div><div class="line"><span class="meta">@AllArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//NON_NULL 사용시 name이 null인 경우에 제외 됩니다.</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jsonautodetect">@JsonAutoDetect</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonAutoDetect</span>(fieldVisibility = JsonAutoDetect.Visibility.ANY)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PrivateBean</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// Visibility.ANY 경우 표시</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;jackson-property-inclusion-annotations&quot;&gt;Jackson Property Inclusion Annotations&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.baeldu
      
    
    </summary>
    
    
      <category term="Jackson" scheme="https://cheese10yun.github.io/tags/Jackson/"/>
    
  </entry>
  
  <entry>
    <title>인텔리제이 다국어 message properties</title>
    <link href="https://cheese10yun.github.io/intellij-message-properties/"/>
    <id>https://cheese10yun.github.io/intellij-message-properties/</id>
    <published>2018-06-05T15:00:00.000Z</published>
    <updated>2018-06-06T07:32:35.641Z</updated>
    
    <content type="html"><![CDATA[<p>인텔리제이의  다국어 message properties 기능을 소개하려 합니다.</p><h2><span id="messagesproperties-생성">messages.properties 생성</span></h2><p><img src="https://i.imgur.com/qLq9yRu.png" alt=""></p><p>원하는 디렉터리에서 파일을 생성하실 때 Resource Bundle 선택합니다.</p><h2><span id="locales-추가">Locales 추가</span></h2><p><img src="https://i.imgur.com/cx4BUD0.png" alt=""></p><p>하단의 + 버튼을 눌러서 원하는 Locales를 추가합니다. 추가하실 때는 <a href="https://ko.wikipedia.org/wiki/ISO_639" rel="external nofollow noopener noreferrer" target="_blank">ISO_639</a> 표준을 따르는 것을 추천해 드립니다. Alpha-3, Alpha-2 둘 중 선택하되 일괄되게 적용 하는 것이 좋다고 생각합니다.<br>본 예제에서는 kr, en을 추가했습니다.</p><h2><span id="추가된-messagesproperties-파일">추가된 messages.properties 파일</span></h2><p><img src="https://i.imgur.com/CqePrKL.png" alt=""></p><p>디폴트 messages.properties 및 위에서 추가시킨 kr, en 파일들도 같이 생성된 걸 확인할 수 있습니다.</p><h2><span id="message-작성">message 작성</span></h2><p><img src="https://i.imgur.com/1rPFIE1.png" alt=""></p><ol><li>아무 messages.properties 선택하시고 하단의 Resource Bundle를 클릭 합니다.</li><li>messages.properties의 key 값을 입력합니다.</li><li>오른쪽 messages.properties 알맞는 메시지를 추가합니다.</li></ol><p>Resource Bundle 탭에서 에서는 여러 곳에 있는 messages.properties 쉽게 추가, 삭제, 변경 작업을 쉽게 할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;인텔리제이의  다국어 message properties 기능을 소개하려 합니다.&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;messagesproperties-생성&quot;&gt;messages.properties 생성&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;htt
      
    
    </summary>
    
    
      <category term="Intellij" scheme="https://cheese10yun.github.io/tags/Intellij/"/>
    
      <category term="message properties" scheme="https://cheese10yun.github.io/tags/message-properties/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Jpa Best Practices Step-05</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-06/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-06/</id>
    <published>2018-06-04T15:00:00.000Z</published>
    <updated>2018-06-04T17:26:41.207Z</updated>
    
    <content type="html"><![CDATA[<p>해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p><p>객체지향 언어에서 관습처럼 setter를 추가하는 때도 있습니다. 무분별하게 setter를 사용하는 것은 바람직하지 않다고 생각합니다. 특히 도메인 객체들에는 더더욱이 말입니다. 이번 포스팅에서는 무분별한 setter의 단점과 setter를 이용하지 않고 도메인 객체를 변경하는 방법을 소개하겠습니다.</p><h2><span id="setter-메소드는-의도를-갖기-힘듭니다">Setter 메소드는 의도를 갖기 힘듭니다.</span></h2><h3><span id="setter를-이용한-업데이트">Setter를 이용한 업데이트</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">updateMyAccount</span><span class="params">(<span class="keyword">long</span> id, AccountDto.MyAccountReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Account account = findById(id);</div><div class="line">    account.setAddress(<span class="string">"value"</span>);</div><div class="line">    account.setFistName(<span class="string">"value"</span>);</div><div class="line">    account.setLastName(<span class="string">"value"</span>);</div><div class="line">    <span class="keyword">return</span> account;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위의 코드는 회원 정보의 성, 이름, 주소를 변경하는 코드로 여러 setter 메소드들이 나열돼있습니다. 위 setter들은 회원 정보를 변경하기 위한 나열이라서 메소드들의 의도가 명확히 드러나지 않습니다.</p><h3><span id="updatemyaccount-메서드를-이용한-업데이트">updateMyAccount 메서드를 이용한 업데이트</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">updateMyAccount</span><span class="params">(<span class="keyword">long</span> id, AccountDto.MyAccountReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Account account = findById(id);</div><div class="line">    account.updateMyAccount(dto);</div><div class="line">    <span class="keyword">return</span> account;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Account 도메인 클래스</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateMyAccount</span><span class="params">(AccountDto.MyAccountReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.address = dto.getAddress();</div><div class="line">    <span class="keyword">this</span>.fistName = dto.getFistName();</div><div class="line">    <span class="keyword">this</span>.lastName = dto.getLastName();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Account 도메인 클래스에 updateMyAccount 메소드를 통해서 회원정보업데이트를 진행했습니다. 위의 코드보다 의도가 명확히 드러납니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccountReq</span> </span>&#123;</div><div class="line"><span class="keyword">private</span> Address address;</div><div class="line"><span class="keyword">private</span> String firstName;</div><div class="line"><span class="keyword">private</span> String lastName;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위는 MyAccountReq 클래스입니다. 회원 정보 수정에 필요한 값 즉 변경될 값에 대한 명확한 명세가 있어 DTO를 두는 것이 바람직합니다.</p><h3><span id="객체의-일관성을-유지하기-어렵다">객체의 일관성을 유지하기 어렵다</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">updateMyAccount</span><span class="params">(<span class="keyword">long</span> id, AccountDto.MyAccountReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Account account = findById(id);</div><div class="line">    account.setEmail(<span class="string">"value"</span>);</div><div class="line">    <span class="keyword">return</span> account;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>setter 메소드가 있을 때 객체에 언제든지 변경할 수 있게 됩니다. 위처럼 회원 변경 메소드뿐만이 아니라 모든 곳에서 이메일 변경이 가능하게 됩니다. 물론 변경이 불가능 한 항목에 setter 메서드를 두지 않는다는 방법도 있지만 관례로 setter는 모든 멤버필드에 대해서 만들기도 하거니와 실수 조금이라도 덜 할 수 있게 하는 것이 바람직한 구조라고 생각합니다.</p><h2><span id="setter를-사용하지-않기">Setter를 사용하지 않기</span></h2><h3><span id="updatemyaccount">updateMyAccount</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">updateMyAccount</span><span class="params">(<span class="keyword">long</span> id, AccountDto.MyAccountReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Account account = findById(id);</div><div class="line">    account.updateMyAccount(dto);</div><div class="line">    <span class="keyword">return</span> account;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Account 도메인 클래스</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateMyAccount</span><span class="params">(AccountDto.MyAccountReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">this</span>.address = dto.getAddress();</div><div class="line">    <span class="keyword">this</span>.fistName = dto.getFistName();</div><div class="line">    <span class="keyword">this</span>.lastName = dto.getLastName();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위의 예제와 같은 예제 코드입니다. findById 메소드를 통해서 영속성을 가진 객체를 가져오고 도메인에 작성된 updateMyAccount를 통해서 업데이트를 진행하고 있습니다.</p><p><strong>repository.save() 메소드를 사용하지 않았습니다. 다시 말해 메소드들은 객체 그 자신을 통해서 데이터베이스 변경작업을 진행하고, create 메서드에 대해서만 repository.save()를 사용합니다</strong></p><h3><span id="create">create</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 전체 코드를 보시는 것을 추천드립니다.</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SignUpReq</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="keyword">private</span> com.cheese.springjpa.Account.model.Email email;</div><div class="line"><span class="keyword">private</span> Address address;</div><div class="line"></div><div class="line"><span class="meta">@Builder</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">SignUpReq</span><span class="params">(Email email, String fistName, String lastName, String password, Address address)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.email = email;</div><div class="line">        <span class="keyword">this</span>.address = address;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">toEntity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Account.builder()</div><div class="line">            .email(<span class="keyword">this</span>.email)</div><div class="line">            .address(<span class="keyword">this</span>.address)</div><div class="line">            .build();</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">create</span><span class="params">(AccountDto.SignUpReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> accountRepository.save(dto.toEntity());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>setter 메소드 없이 create 하는 예제입니다. SignUpReq 클래스는 Request DTO 클래스를 통해서 사용자에게 필요한 값을 입력받고 그 값을 toEntity 메소드를 통해서 Account 객체를 생성하게 됩니다. 이 때 빌더 패턴을 이용해서 객체를 생성했습니다. 도메인 객체를 생성할 때 빌더패턴을 적극 추천해 드립니다. 빌더 패턴에 대해서는 여기서는 별도로 다루지 않겠습니다.</p><p>save 메소드에는 도메인 객체 타입이 들어가야 합니다. 이때 toEntity 메소드를 통해서 해당 객체로 새롭게 도메인 객체가 생성되고 save 메소드를 통해서 데이터베이스에 insert 됩니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/spring-jpa-best-practices&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Git
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
  </entry>
  
  <entry>
    <title>Spring OOP 프로그래밍 예제(4) - Service, ServiceImpl 구조</title>
    <link href="https://cheese10yun.github.io/spring-oop-04/"/>
    <id>https://cheese10yun.github.io/spring-oop-04/</id>
    <published>2018-06-02T15:00:00.000Z</published>
    <updated>2018-06-02T16:32:37.113Z</updated>
    
    <content type="html"><![CDATA[<p>예제 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/partner-api" rel="external nofollow noopener noreferrer" target="_blank">Github : blog-sample</a>에 공개 되어 있습니다.</p><p>스프링을 처음 공부 할 때 많이 사용되는 Service, ServiceImpl 구조에 관해서 이야기 하려고 합니다. 저도 처음 Spring을 학습할 때 Service, ServiceImpl 구조를 그대로 타이핑하면서 학습을 하였지만, 굳이 이것을 통해서 장점을 얻지 못했기 때문에 실무에서나 개인적으로나 사용하지는 않았습니다.</p><p>Service, ServiceImpl 구조의 장점을 찾으려고 해도 명확한 답변보다는 교과서적인 답변밖에 찾지를 못했습니다. 최근에 객체지향 프로그래밍을 학습하면서 Service, ServiceImpl 구조를 한번 설명하고자 합니다. <strong>어디까지나 저의 부족한 개념을 통한 정리이기에 때문에 비판적인 시각으로 읽어주시면 감사하겠습니다. 또 여러분들도 자신만의 정의를 내려보는 것도 좋을 거 같습니다.</strong></p><p>결론부터 말씀드리면 Service, ServiceImpl는 좋은 구조라고 생각하지 않습니다. 특히 도메인 객체에는 더욱더 좋지 않다고 생각합니다.</p><h2><span id="memberservice">MemberService</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MemberService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">Member <span class="title">findById</span><span class="params">(MemberId id)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Member <span class="title">findByEmail</span><span class="params">(Email email)</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changePassword</span><span class="params">(PasswordDto.ChangeRequest dto)</span></span>;</div><div class="line"></div><div class="line">    <span class="function">Member <span class="title">updateName</span><span class="params">(MemberId id, Name name)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 와 같은 인터페이스는 좋은 구조라고 생각지 않습니다. 우선 인터페이스를 두어서 얻는 이점은 세부 구현체를 숨기고 인터페이스를 바라보게 함으로써 클래스 간의 의존관계를 줄이는 것, 다형성을 사용 하는 것 이 핵심이라고 생각합니다.</p><p><strong>조금 더 쉽게 정리하면 하나의 인터페이스를 구현하는 여러 구현체가 있고 기능에 따라 적절한 구현체가 들어가서 다형성을 주기 위함이 이라고 생각합니다. 또 하나의 인터페이스만 바라보니 의존관계도 줄일 수 있습니다.</strong></p><p>하지만 인터페이스의 하나에 구현체 하나를 두면 의존관계를 줄이는 효과도 다형성을 주는 효과도 없습니다. 그렇다면 인터페이스 하나에 구현체 하나는 반드시 나쁜 구조냐의 답에는 그렇지 않다고 생각합니다. 이 부분에 대한 설명은 아래에서 진행하겠습니다.</p><p>위의 인터페이스의 문제점은 무엇일까요? 저의 생각은 <strong>인터페이스의 책임이 너무 많은 것이 문제라고 생각합니다.</strong> 저 인터페이스의 구현체가 두 개 이상이 되려면 해당 구현체가 다른 기능을 가져야 합니다. findById, findByEmail, changePassword 의 메소드들이 다른 구현 클래스가 들어갔다고 해서 다른 기능을 수행해야할까요? findById의 기능은 PK 값으로 해당 Member를 찾는 것입니다. id 값이 1번인 Member가 철수라면 무슨 구현체를 쓰든 철수가 나와야 하는 너무나도 당연하죠.</p><p>그렇다는 것은 위의 메소드들은 인터페이스에 대상이 되지 않습니다. MemberService의 기능을 전부 다른 기능으로 대체 가능한 세부 구현체는 현실적으로 존재하기 어렵습니다. 예외가 있다면 테스트를 위해서 Mock 으로 추상화시킬 수는 있습니다.</p><h2><span id="하나의-인터페이스의-하나의-구현체">하나의 인터페이스의 하나의 구현체</span></h2><p>그렇다면 위의 내용은 하나의 구현체를 갖는 경우에는 인터페이스를 둘 필요가 없다는 것으로 결론을 내는 것처럼 보이지만 하나의 구현체만 갖더라도 인터페이스를 사용하는 것이 바람직하다고 생각합니다. 아래와 같은 가정으로 설명하겠습니다.</p><h3><span id="요구사항">요구사항</span></h3><ul><li>신한 카드결제 기능이 필요하다.</li><li>앞으로 결제 가능한 카드가 지속해서 추가될 예정이다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CardPaymentService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShinhanCardPaymentService</span> <span class="keyword">implements</span> <span class="title">Card</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> ShinhanCard shinhanCard;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span> </span>&#123;</div><div class="line">        shinhanCard.pay(); <span class="comment">//신한 카드 결제 API 호출</span></div><div class="line">        <span class="comment">// 결제를 위한 비지니스 로직 실행....</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위처럼 카드 인터페이스를 두고 신한카드 구현체를 하나만 갖지만 향후 추가 적으로 생길 여지가 있으니 인터페이스를 두는 것이 바람직합니다.</p><p>그렇다면 앞으로 추가될 여지가 없다고 판단된다면 어떻게 해야 할까요? 저의 생각은 정말 추가될 여지가 없나 에 대한 꽤 깊은 고민이 필요하다고 생각합니다. 개발 관점에서만 보는 것이 아니라 도메인 관점에서 해당 도메인을 가장 잘 이해하고 있는 분과 이야기를 충분히 하고 결론짓는 것을 추천합니다.</p><p>그런데도 추가될 여지가 없다고 판단하면 저 같은 경우에는 인터페이스를 두지 않습니다. 추가되더라도 그 때 인터페이스를 두는 것은 그다지 어렵지 않거니와 애초에 모든 변경에 대응할 수 있는 구조라는 건 없다고 생각합니다. 픽스 시킬 것은 픽스 시켜야 추상화가 되고 그 추상화 기반으로 다형성을 가질 수 있다고 저는 생각합니다.</p><h2><span id="인터페이스는-어떻게-두어야-하는가">인터페이스는 어떻게 두어야 하는가?</span></h2><p>위에서 MemberService 인터페이스가 책임이 너무 크다고 했습니다. 그렇다는 건 MemberServiceImpl 또한 책임이 너무 큰 것입니다. 해당 인터페이스의 기능을 모두 구현하고 있으니 말이죠. DomainService로 두는 것은 좋은 구조라 생각하지 않습니다. 물론 그다지 중요하지 않는 도메인에는 Service로 가는 것은 크게 상관없습니다. 하지만 핵심 도메인들은 다양한 구현체를 갖게 됩니다. 위에서 설명했듯이 다양한 구현체를 같은 인터페이스를 갖게 하려면 그 책임이 작아야 합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MemberFindService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> MemberRepository memberRepository;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">findById</span><span class="params">(<span class="keyword">final</span> MemberId id)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Member member = memberRepository.findOne(id);</div><div class="line">        <span class="keyword">if</span> (member == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> MemberNotFoundException(id);</div><div class="line">        <span class="keyword">return</span> member;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Member <span class="title">findByEmail</span><span class="params">(<span class="keyword">final</span> Email email)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Member member = memberRepository.findByEmail(email);</div><div class="line">        <span class="keyword">if</span> (member == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> MemberNotFoundException(email);</div><div class="line">        <span class="keyword">return</span> member;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위의 코드는 조회만을 위한 서비스 클래스입니다. 위의 메소드들은 일반적으로 다양한 구현체를 갖기는 어렵습니다. 그런 것들은 인터페이스에 대상이 아니라고 생각합니다.</p><p>그렇다면 비밀번호 변경 기능은 어떨까요? 비밀번호 변경 기능은 대표적으로 다음과 같습니다.</p><ul><li>비밀번호 기반으로 비밀번호를 변경하는 기능</li><li>비밀번호를 잃어버렸을 때 다른 인증 기반으로 비밀번호를 변경하는 기능</li></ul><p>비밀번호를 변경하는 방식이 일반적으로 2개 이상입니다. 즉 구현체를 2개 이상 갖게 되고 이럴 때 인터페이스를 두는 것이 바람직하다고 생각합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ChangePasswordService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(MemberId id, PasswordDto.ChangeRequest dto)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByAuthChangePasswordService</span> <span class="keyword">implements</span> <span class="title">ChangePasswordService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MemberFindService memberFindService;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(MemberId id, PasswordDto.ChangeRequest dto)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (dto.getAuthCode().equals(<span class="string">"인증 코드가 적합한지 로직 추가..."</span>)) &#123;</div><div class="line">            <span class="keyword">final</span> Member member = memberFindService.findById(id);</div><div class="line">            <span class="keyword">final</span> String newPassword = dto.getNewPassword().getValue();</div><div class="line">            member.changePassword(newPassword);</div><div class="line">            <span class="comment">// 필요로직...</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ByPasswordChangePasswordService</span> <span class="keyword">implements</span> <span class="title">ChangePasswordService</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> MemberFindService memberFindService;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(MemberId id, PasswordDto.ChangeRequest dto)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (dto.getPassword().equals(<span class="string">"비밀번호가 일치하는지 판단 로직..."</span>)) &#123;</div><div class="line">            <span class="keyword">final</span> Member member = memberFindService.findById(id);</div><div class="line">            <span class="keyword">final</span> String newPassword = dto.getNewPassword().getValue();</div><div class="line">            member.changePassword(newPassword);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ChangePasswordService 책임은 비밀번호를 변경하는 것입니다. 해당 구현체들은 본인의 비밀번호 변경의 필요한 인증방식을 구현하고 최종적으로 비밀번호를 변경하게 됩니다. 이것을 인터페이스를 둘 수 있는 이유는 인터페이스의 책임이 하나이기 때문입니다.</p><p>그렇다면 하나의 인터페이스에는 하나의 메소드만 갖게 되는 것이냐? 라는 질문을 하게 됩니다. 그렇지는 않습니다. 다시 한번 카드 예제로 돌아가겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CardPaymentService</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pay</span><span class="params">()</span></span>;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>일반적으로 카드는 결제가 있으면 반드시 취소 기능도 함께 있습니다. 결제 취소가 되지 않는 것은 상식적으로 이해하기 어렵습니다. 그것은 신한 은행 이외의 카드사들도 당연히 결제 취소 기능이 있다는 것입니다. 그렇다면 카드 결제는 위와 같이 인터페이스를 두고 세부 구현체에 따라서 카드 결제를 진행하게 됩니다.</p><p>위에서도 말했듯이 픽시 시킬것은 픽스 시켜야합니다. 그렇기에 도메인에 대한 충분한 이해 또한 개발자가 갖춰야 합니다.</p><h2><span id="결론">결론</span></h2><p>클래스를 잘게 나누고 해당 클래스에 맞는 책임을 부여하는 것은 객체지향 프로그래밍에서 중요하다고 생각합니다. 하나의 클래스에서 너무 많은 책임을 갖게 되면 다른 클래스와의 의존관계 또한 자연스럽게 늘어나 결합 도가 증가 됩니다. 그러니 클래스를 잘게 나누는 것이 좋습니다. 아래는 제가 좋아하는 인용 구입니다.</p><p><img src="http://woowabros.github.io/img/2016-08-03/tray.png" alt=""></p><blockquote><p>출처 « 로버트 C.마틴 - Clean Code 177page »<br>작은 클래스가 많은 시스템이든 큰 클래스가 몇 개뿐인 시스템이든 돌아가는 부품은 그 수가 비슷하다.<br>(중략)<br>“도구 상자를 어떻게 관리하고 싶은가? 작은 서랍을 많이 두고 기능과 이름을 명확한 컴포넌트를 나눠 넣고 싶은가? 아니면 큰 서랍 몇 개를 두고 모두를 던져 넣고 싶은가?”</p></blockquote><p><a href="http://woowabros.github.io/experience/2016/08/02/first_java_project.html" rel="external nofollow noopener noreferrer" target="_blank">인용 문구, 사진 - 우아한 형제들 기술 블로그 :첫 Java 프로젝트의 생생한 후기</a></p><p>너무나도 부족한 지식으로 이것을 정의 하는 것이 부끄럽지만 제가 공부한 것과 느낀 것을 공유하고 싶었습니다. 조금이라도 도움이 되기를 기원하겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;예제 코드는 &lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/partner-api&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="OOP" scheme="https://cheese10yun.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>Jackson 어노테이션 사용법(2)</title>
    <link href="https://cheese10yun.github.io/jackson-annotation-02/"/>
    <id>https://cheese10yun.github.io/jackson-annotation-02/</id>
    <published>2018-05-31T15:00:00.000Z</published>
    <updated>2018-06-11T17:35:31.108Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="jackson-deserialization-annotations">Jackson Deserialization Annotations</span></h2><ul><li><a href="http://www.baeldung.com/jackson-annotations" rel="external nofollow noopener noreferrer" target="_blank">Jackson Annotation Examples</a> 예제를 적용전, 적용후로 나누어서 정리 해봤습니다.</li><li>테스트코드도 참고하시면 좋습니다.</li><li>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/jackson" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 참고해주세요</li></ul><h3><span id="jsoncreator">@JsonCreator</span></h3><ul><li>JSON key 와 멤버 필드의 이름이 일치하지 않을 경우 사용합니다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>:<span class="number">1</span>,</div><div class="line">  <span class="attr">"theName"</span>:<span class="string">"My bean"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithCreator</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">    <span class="meta">@JsonCreator</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BeanWithCreator</span><span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">            @JsonProperty(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id,</span></div><div class="line"><span class="function">            @<span class="title">JsonProperty</span><span class="params">(<span class="string">"theName"</span>)</span> String name</span></div><div class="line"><span class="function">    ) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jacksoninject">@JacksonInject</span></h3><ul><li>JSON 데이터가 아닌 값을 주입하는데 사용됩니다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"My bean"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanWithInject</span> </span>&#123;</div><div class="line">    <span class="meta">@JacksonInject</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jsonanysetter">@JsonAnySetter</span></h3><ul><li>Map을 이용해서 유연성있게 Deserialization 합니다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"My bean"</span>,</div><div class="line">  <span class="attr">"attr2"</span>: <span class="string">"val2"</span>,</div><div class="line">  <span class="attr">"attr1"</span>: <span class="string">"val1"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendableBean</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; properties = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@JsonAnySetter</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(String key, String value)</span> </span>&#123;</div><div class="line">        properties.put(key, value);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> properties;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="jsonsetter">@JsonSetter</span></h3><ul><li>객체와 맴버필드와 일치하지 않을 경우 유용하게 사용할 수 있습니다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"My bean"</span>å</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="meta">@JsonSetter</span>(<span class="string">"name"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTheName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTheName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;jackson-deserialization-annotations&quot;&gt;Jackson Deserialization Annotations&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.baeldung.com
      
    
    </summary>
    
    
      <category term="Jackson" scheme="https://cheese10yun.github.io/tags/Jackson/"/>
    
  </entry>
  
  <entry>
    <title>Spring OOP 프로그래밍 예제(3)</title>
    <link href="https://cheese10yun.github.io/spring-oop-03/"/>
    <id>https://cheese10yun.github.io/spring-oop-03/</id>
    <published>2018-05-29T15:00:00.000Z</published>
    <updated>2018-05-30T15:40:44.665Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/cheese10yun/blog-sample/tree/master/bankapi" rel="external nofollow noopener noreferrer" target="_blank">Spring OOP 프로그래밍 예제(2)</a>의 부족했던 부분을 정리한 포스팅입니다. 예제 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/partner-api" rel="external nofollow noopener noreferrer" target="_blank">Github : blog-sample</a>에 공개 되어 있습니다.</p><h2><span id="요구사항">요구사항</span></h2><ul><li>환율 정보를 조회할 수 있다.</li><li>환율 정보를 제공해주는 은행은 신한, 우리 은행이 있다.</li><li>앞으로도 파트너 은행들은 계속 추가된다.</li><li>KRW, VND으로 받는 통화는 신한은행 환율정보를 이용해야 한다<ul><li>USD - &gt; KRW, VND 신한은행 API</li></ul></li><li>USD으로 받는 통화는 우리은행 환율정보를 이용해야 한다<ul><li>KRW, VND - &gt; USD 우리은행 API</li></ul></li></ul><h2><span id="요구사항-정리">요구사항 정리</span></h2><p>요구사항을 어렵게 설명했지만 결국은 다형성을 이야기하고 싶었습니다. 이러한 다형성을 지키기 위해서 삽질을 많이 했고 다양한 안티 패턴들을 만났습니다. 왜 이것이 안티 패턴인것인지 설명해 드리고 최종적으로 제가 생각한 것을 공유하려고 합니다. 물론 최종결과물이 높은 수준의 객체지향 코드라고는 생각지 않습니다. 그러나 투박하게나마 객체지향의 다양한 원칙들을 지키려 노력했고 그것을 공유하고 싶습니다.</p><h2><span id="안티패턴">안티패턴</span></h2><h3><span id="api-인터페이스">API 인터페이스</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PartnerApi</span> </span>&#123;</div><div class="line">    PartnerManagerDto.<span class="function">ExchangeRate <span class="title">get</span><span class="params">(PartnerManagerDto.ExchangeCurrency dstCurrency)</span></span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShinhanApi</span> <span class="keyword">implements</span> <span class="title">PartnerApi</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">ExchangeRate <span class="title">get</span><span class="params">(PartnerManagerDto.ExchangeCurrency dstCurrency)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WooriApi</span> <span class="keyword">implements</span> <span class="title">PartnerApi</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">ExchangeRate <span class="title">get</span><span class="params">(PartnerManagerDto.ExchangeCurrency dstCurrency)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>처음 생각했던 방식입니다. 가장 쉽게 설계할 수 있는 구조로  PartnerApi 인터페이스를 구현 클래스에서 implements를 통한 구현 방식입니다. 하지만 다음과 같은 단점들이 있습니다.</p><h4><span id="객체의-책임이-올바르지-않다">객체의 책임이 올바르지 않다</span></h4><p>ShinhanApi, WooriApi의 책임은 각각의 은행과 API 통신을 담당하는 것입니다. 즉 각각의 API는 Request, Response 값들은 객체 자신이 자율적인 책임을 가지고 있어야 합니다. <strong>하지만 PartnerApi 인터페이스를 통해서 매게변수와, 리턴 값이 통일 되게 됩니다</strong> 신한, 우리 은행의 환율 정보 API Request, Response 값들은 다를 수밖에 없는 것을 공통된 값으로 변경시키는 것까지 책임이 추가됩니다. 그 결과 SRP, OCP를 위반하게 된다고 생각합니다.</p><p><strong>즉 API 구현 객체의 유일한 변경이유는 파트너사의 API 변경입니다(request, reponse 등등의 변경 ). 그 외에는 변경사항에서는 변경되면 SRP 위반 이라고 저는 생각합니다.</strong></p><h4><span id="api-추가-시-문제">API 추가 시 문제</span></h4><p>전북은행 API가 추가되었고 계좌 이체할 수 있는 은행 리스트를 가져오는 API가 우리은행, 전북은행에만 추가되었다고 가정했을 경우 아래와 같은 코드가 작성됩니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PartnerApi</span> </span>&#123;</div><div class="line">    PartnerManagerDto.<span class="function">ExchangeRate <span class="title">getExchangeRate</span><span class="params">(PartnerManagerDto.ExchangeCurrency dstCurrency)</span></span>;</div><div class="line">    PartnerManagerDto.<span class="function">Banks <span class="title">getBanks</span><span class="params">(PartnerManagerDto.ExchangeCurrency dto)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JbApi</span> <span class="keyword">implements</span>  <span class="title">PartnerApi</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">Banks <span class="title">getBanks</span><span class="params">(PartnerManagerDto.ExchangeCurrency dto)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> 은행 리스트 가져오는 로직;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WooriApi</span> <span class="keyword">implements</span> <span class="title">PartnerApi</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">Banks <span class="title">getBanks</span><span class="params">(PartnerManagerDto.ExchangeCurrency dto)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> 은행 리스트 가져오는 로직;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShinhanAPi</span> <span class="keyword">implements</span> <span class="title">PartnerApi</span>  </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">Banks <span class="title">getBanks</span><span class="params">(PartnerManagerDto.ExchangeCurrency dto)</span> </span>&#123;</div><div class="line">        <span class="comment">// PartnerApi 인터페이스에 getBanks 메소드가 정의되있으니 반드시 구현해야한다.</span></div><div class="line">        <span class="comment">// 하지만 신한은행은 은행리스트 조회 기능이 없다.</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위처럼 신한 API에서 getBanks를 반드시 구현해야하고 이렇게되면 LSP 위반이 발생합니다.  <strong>우리은행에 getBanks 메서드를 대충 null 정도 리턴하는 코드로 비워 놓지 마세요. 조금만 노력하면 더 좋은 설계가 할 수 있습니다.</strong></p><h3><span id="manager">Manager</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WooriManager</span> <span class="keyword">implements</span> <span class="title">PartnerApi</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">ExchangeRate <span class="title">get</span><span class="params">(PartnerManagerDto.ExchangeCurrency dstCurrency)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShinhanManager</span> <span class="keyword">implements</span> <span class="title">PartnerApi</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">ExchangeRate <span class="title">get</span><span class="params">(PartnerManagerDto.ExchangeCurrency dstCurrency)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>두 번째로 생각했던 방법입니다. 매니저를 두고 해당 매니저가 해당 API를 호출하고 리턴되는 값을 변환작업을 담당하게 했습니다. 그 결과 각각의 구현 API 객체들은 API 통신만 하는 책임만 갖게 되었습니다 매니저의 책임도 분명합니다. 해당 파트너사의 API를 호출하고 공통된 리턴 값으로 돌려준다. 입니다.<br><strong>하지만 'API 추가 시 문제’를 해결하지는 못했습니다.</strong> 위 처럼 문제가 똑같이 발생하게 됩니다.</p><h2><span id="최종-결과물">최종 결과물</span></h2> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShinhanApi</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> ShinhanDto.<span class="function">ExchangeRateResponse <span class="title">getExchangeRate</span><span class="params">(PartnerManagerDto.ExchangeCurrency exchangeCurrency)</span> </span>&#123;</div><div class="line">         ...</div><div class="line">    <span class="keyword">return</span> response.getBody();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WooriApi</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> WooriDto.<span class="function">ExchangeRateResponse <span class="title">getExchangeRate</span><span class="params">(PartnerManagerDto.ExchangeCurrency exchangeCurrency)</span> </span>&#123;</div><div class="line">        ...</div><div class="line">    <span class="keyword">return</span> response.getBody();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShinhanExchangeRate</span> <span class="keyword">implements</span> <span class="title">PartnerExchangeRate</span> </span>&#123;</div><div class="line">   ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">ExchangeRate <span class="title">get</span><span class="params">(PartnerManagerDto.ExchangeCurrency dto)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> PartnerManagerDto.ExchangeRate.builder();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WooriExchangeRate</span> <span class="keyword">implements</span> <span class="title">PartnerExchangeRate</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> PartnerManagerDto.<span class="function">ExchangeRate <span class="title">get</span><span class="params">(PartnerManagerDto.ExchangeCurrency dto)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> PartnerManagerDto.ExchangeRate.builder();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PartnerExchangeRate</span> </span>&#123;</div><div class="line">    PartnerManagerDto.<span class="function">ExchangeRate <span class="title">get</span><span class="params">(PartnerManagerDto.ExchangeCurrency dto)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>구현 API 객체는 API 통신만의 책임을 갖게 했습니다. 이것은 매니저에 서도 해결한 문제이니 넘어가겠습니다. 중요한 문제는 <strong><em>API 추가 시 문제</em></strong> 입니다. 위의 문제들은 한 인터페이스에서 너무 많은 책임을 갖게 되어 추상화가 안 된다는 것으로 생각합니다. 다시 말해 <strong>PartnerApi 인터페이스를 통해서 모든 파트너 API를 규약 시키려 했던 것이 문제라고 생각합니다.</strong> 인터페이스를 PartnerExchangeRate로 두고 환율 정보가 져오는 것에 대해서만 규약 시켰습니다. 그 결과 그 기능이 있는 파트너만 해당 구현체를 갖게 되어 문제를 해결했습니다. 또 ShinhanExchangeRate 객체의 책임은 ShinhanAPi를 통해서 얻은 response 값을 통일감 있는 response 값으로 변경만 시켜주는 책임을 갖습니다.</p><h2><span id="최종-클래스다이어그램">최종 클래스다이어그램</span></h2><p><img src="https://i.imgur.com/6KxeWmL.png" alt=""></p><h2><span id="마무리">마무리</span></h2><p>많은 안티 패턴들을 만났고 그것을 해결했던 과정을 정리하면 저와 같이 고민하는 분들에게 조금이라도 도움이 될 거 같아 부족한 실력임에도 불구하고 정리해 보았습니다. 물론 저 모델도 허점투성이겠죠. 그래도 지금의 제 수준에서는 많은 고민과 시행착오가 있었습니다. 그 덕분에 조금 더 객체지향에 프로그래밍을 더 깊게 공부해 게되 었구요. 또 저런 식으로 작성하게 되면 인터페이스, 클래스가 엄청 많아지는 것에 대해서 조금은 꺼려지게 되는 것도 사실이었습니다. 하지만 아래 첨부된 글을 읽고 더 알맞은 책임으로 더 질게 나누는 것이 더 바람직하다고 생각이 듭니다.</p><p><img src="http://woowabros.github.io/img/2016-08-03/tray.png" alt=""></p><blockquote><p>출처 « 로버트 C.마틴 - Clean Code 177page »<br>작은 클래스가 많은 시스템이든 큰 클래스가 몇 개뿐인 시스템이든 돌아가는 부품은 그 수가 비슷하다.<br>(중략)<br>“도구 상자를 어떻게 관리하고 싶은가? 작은 서랍을 많이 두고 기능과 이름을 명확한 컴포넌트를 나눠 넣고 싶은가? 아니면 큰 서랍 몇 개를 두고 모두를 던져 넣고 싶은가?”</p></blockquote><p><a href="http://woowabros.github.io/experience/2016/08/02/first_java_project.html" rel="external nofollow noopener noreferrer" target="_blank">인용 문구, 사진 - 우아한 형제들 기술 블로그 :첫 Java 프로젝트의 생생한 후기</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/cheese10yun/blog-sample/tree/master/bankapi&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Spri
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="OOP" scheme="https://cheese10yun.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>Jackson 어노테이션 사용법(1)</title>
    <link href="https://cheese10yun.github.io/jackson-annotation/"/>
    <id>https://cheese10yun.github.io/jackson-annotation/</id>
    <published>2018-05-27T15:00:00.000Z</published>
    <updated>2018-05-27T15:40:21.249Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="jackson-어노테이션-사용법">Jackson 어노테이션 사용법</span></h1><ul><li><a href="http://www.baeldung.com/jackson-annotations" rel="external nofollow noopener noreferrer" target="_blank">Jackson Annotation Examples</a> 예제를 적용전, 적용후로 나누어서 정리 해봤습니다.</li><li>2.Jackson Serialization Annotations 정리 (3,4… 추후 계속 추가될 예정)</li><li>테스트코드도 참고하시면 좋습니다.</li><li>해당 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/jackson" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 참고해주세요</li></ul><h2><span id="2-jackson-serialization-annotations">2 Jackson Serialization Annotations</span></h2><h2><span id="21-jsonanygetter">2.1. @JsonAnyGetter</span></h2><ul><li>이 엔티티의 인스턴스를 직렬화 할 때 Map의 모든 키 - 값 을 표준 일반 속성으로 가져옵니다</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@Builder</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtendableBean</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; properties;</div><div class="line"></div><div class="line">    <span class="meta">@JsonAnyGetter</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getProperties</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> properties;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">//적용전</div><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span>,</div><div class="line">  <span class="attr">"properties"</span>: &#123;</div><div class="line">    <span class="attr">"key1"</span>: <span class="string">"value1"</span>,</div><div class="line">    <span class="attr">"key2"</span>: <span class="string">"value2"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">//적용후</div><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span>,</div><div class="line">  <span class="attr">"key1"</span>: <span class="string">"value1"</span>,</div><div class="line">  <span class="attr">"key2"</span>: <span class="string">"value2"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="22-jsongetter">2.2. @JsonGetter</span></h2><ul><li>getter 이름 기반으로 키값이 정해지는것을 어노테이션을 제어</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Builder</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="meta">@JsonGetter</span>(<span class="string">"name"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTheName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//적용전</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">"theName"</span>: <span class="string">"yun"</span></div><div class="line">&#125;</div><div class="line">//적용후</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="23-jsonpropertyorder">2.3. @JsonPropertyOrder</span></h2><ul><li>Json 직렬화 순서를 제어</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@JsonPropertyOrder</span>(&#123;<span class="string">"name"</span>, <span class="string">"id"</span>&#125;)</div><div class="line"><span class="meta">@Builder</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyOrder</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">//적용전</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"name"</span></div><div class="line">&#125;</div><div class="line">//적용후</div><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"name"</span>,</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="24-jsonrawvalue">2.4. @JsonRawValue</span></h2><ul><li>@JsonRawValue 는 Jackson이 속성을 그대로 직렬화하여 JSON으로 변경</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Builder</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RawBean</span> </span>&#123;</div><div class="line">        <span class="keyword">public</span> String name;</div><div class="line"></div><div class="line">        <span class="meta">@JsonRawValue</span></div><div class="line">        <span class="keyword">public</span> String json;</div><div class="line">    &#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//적용전</div><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span>,</div><div class="line">  <span class="attr">"json"</span>: <span class="string">"&#123;\n  \"attr\":false\n&#125;"</span></div><div class="line">&#125;</div><div class="line">//적용후</div><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span>,</div><div class="line">  <span class="attr">"json"</span>: &#123;</div><div class="line">    <span class="attr">"attr"</span>: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="25-jsonvalue">2.5. @JsonValue</span></h2><ul><li>getName 에 @JsonValue 해당 멤버필드가 이름을 통해 직렬화 시킴</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> TypeEnumWithValue &#123;</div><div class="line">    TYPE1(<span class="number">1</span>, <span class="string">"Type A"</span>),</div><div class="line">    TYPE2(<span class="number">2</span>, <span class="string">"Type 2"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    TypeEnumWithValue(Integer id, String name) &#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@JsonValue</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//적용전</div><div class="line"><span class="string">"TYPE1"</span></div><div class="line">//적용후</div><div class="line"><span class="string">"Type A"</span></div></pre></td></tr></table></figure><h2><span id="26-jsonrootname">2.6. @JsonRootName</span></h2><ul><li>Root 이름 지정</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Builder</span></div><div class="line"><span class="meta">@JsonRootName</span>(value = <span class="string">"user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserWithRoot</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</div><div class="line">    <span class="keyword">public</span> String name;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//objectMapper.enable(SerializationFeature.WRAP_ROOT_VALUE); 반드시 적용해야함</span></div></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">//적용전</div><div class="line">&#123;</div><div class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"yun"</span></div><div class="line">&#125;</div><div class="line">//적용후</div><div class="line">&#123;</div><div class="line">  <span class="attr">"user"</span>: &#123;</div><div class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"yun"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1&gt;&lt;span id=&quot;jackson-어노테이션-사용법&quot;&gt;Jackson 어노테이션 사용법&lt;/span&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.baeldung.com/jackson-annotations&quot; rel=&quot;external 
      
    
    </summary>
    
    
      <category term="Jackson" scheme="https://cheese10yun.github.io/tags/Jackson/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Jpa Best Practices Step-05</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-05/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-05/</id>
    <published>2018-05-17T15:00:00.000Z</published>
    <updated>2018-05-17T17:11:00.775Z</updated>
    
    <content type="html"><![CDATA[<p>배송이 있고 배송의 상태를 갖는 배송 로그가 있고 각각의 관계는 1:N 관계입니다. 아래와 같은 특정한 1:N 관계에 대해서 포스팅을 진행해보겠습니다. 해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p><h2><span id="배송-배송-로그">배송 - 배송 로그</span></h2><ul><li>배송이 있고 배송의 상태를 갖는 배송 로그가 있습니다.</li><li>각각의 관계는 1:N 관계입니다.</li><li>다음과 같은 JSON을 갖습니다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"address"</span>: &#123;</div><div class="line">    <span class="attr">"address1"</span>: <span class="string">"서울 특별시..."</span>,</div><div class="line">    <span class="attr">"address2"</span>: <span class="string">"신림 ...."</span>,</div><div class="line">    <span class="attr">"zip"</span>: <span class="string">"020...."</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"logs"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"status"</span>: <span class="string">"PENDING"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"status"</span>: <span class="string">"DELIVERING"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"status"</span>: <span class="string">"COMPLETED"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>배송 로그는 단순히 배송의 상태를 표시하기 위한 것임으로 배송 엔티티에서 추가되는 것이 맞는다고 생각합니다. 위의 특성을 만족하는 관계 설정을 진행해보겠습니다.</p><h2><span id="관계-설정">관계 설정</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Delivery</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">private</span> Address address;</div><div class="line"></div><div class="line">    <span class="meta">@OneToMany</span>(mappedBy = <span class="string">"delivery"</span>, cascade = CascadeType.PERSIST, orphanRemoval = <span class="keyword">true</span>, fetch = FetchType.EAGER)</div><div class="line">    <span class="keyword">private</span> List&lt;DeliveryLog&gt; logs = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">private</span> DateTime dateTime;</div><div class="line">    ....</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryLog</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Enumerated</span>(EnumType.STRING)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"status"</span>, nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> DeliveryStatus status;</div><div class="line"></div><div class="line">    <span class="meta">@ManyToOne</span></div><div class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"delivery_id"</span>, nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> Delivery delivery;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">private</span> DateTime dateTime;</div><div class="line"></div><div class="line">    ....</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>@Embedded 타입으로 빼놓은 Address를 그대로 사용했습니다. 이처럼 핵심 도메인에 대해서 데이터의 연관성이 있는 것들을 Embedded 분리해놓으면 여러모로 좋습니다.</li><li>DateTime 클래스도 Embedded 타입으로 지정해서 반복적인 생성일, 수정일 칼럼들을 일관성 있고 편리하게 생성할 수 있습니다.</li></ul><p><strong>지금부터는 1:N 관계 팁에 관한 이야기를 진행하겠습니다.</strong></p><ul><li>Delivery를 통해서 DeliveryLog를 관리함으로 <code>CascadeType.PERSIST</code> 설정을 주었습니다.</li><li>1: N 관계를 맺을 경우 List를 주로 사용하는데 객체 생성을 null로 설정하는 것보다 <code>new ArrayList&amp;amplt&amp;ampgt();</code>설정하는 것이 바람직합니다. 이유는 다음과 같습니다.</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verifyStatus</span><span class="params">(DeliveryStatus status, Delivery delivery)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!delivery.getLogs().isEmpty()) &#123;</div><div class="line">    ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>초기화하지 않았을 경우 null로 초기화되며 ArrayList에서 지원해주는 함수를 사용할 수 없습니다. 1:N 관계에서 N이 없는 경우 null인 상태인 보다 Empty 상태가 훨씬 직관적입니다. null의 경우 값을 못가져 온것인지 값이 없는 것인지 의미가 분명하지 않습니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLog</span><span class="params">(DeliveryStatus status)</span> </span>&#123;</div><div class="line">    logs.add(DeliveryLog.builder()</div><div class="line">            .status(status)</div><div class="line">            .delivery(<span class="keyword">this</span>)</div><div class="line">            .build());</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>CascadeType.PERSIST 설정을 주면  Delivery에서 DeliveryLog를 저장시킬 수 있습니다. 이 때 ArrayList 형으로 지정돼 있다면 add 함수를 통해서 쉽게 저장할 수 있습니다. 이렇듯 ArrayList의 다양한 함수들을 사용할 수 있습니다.</li><li>FetchType.EAGER 통해서 모든 로그 정보를 가져오고 있습니다. 로그 정보가 수십 개 이상일 경우는 Lazy 로딩을 통해서 가져오는 것이 좋지만 3~4개 정도로 가정했을 경우 FetchType.EAGER로 나쁘지 않다고 생각합니다.</li></ul><h2><span id="객체의-상태는-언제나-자기-자신이-관리합니다">객체의 상태는 언제나 자기 자신이 관리합니다.</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryLog</span> </span>&#123;</div><div class="line">  <span class="meta">@Id</span></div><div class="line">  <span class="meta">@GeneratedValue</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line">  ....</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cancel</span><span class="params">()</span> </span>&#123;</div><div class="line">      verifyNotYetDelivering();</div><div class="line">      <span class="keyword">this</span>.status = DeliveryStatus.CANCELED;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verifyNotYetDelivering</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">if</span> (isNotYetDelivering()) <span class="keyword">throw</span> <span class="keyword">new</span> DeliveryAlreadyDeliveringException();</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verifyAlreadyCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (isCompleted())</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"It has already been completed and can not be changed."</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>객체의 상태는 언제나 자기 자신이 관리합니다. 즉 자신이 생성되지 못할 이유도 자기 자신이 관리해야 한다고 생각합니다. 위의 로직은 다음과 같습니다.</p><ul><li>cancel() : 배송을 취소하기 위해서는 아직 배달이 시작하기 이전의 상태여야 가능합니다.</li><li>verifyAlreadyCompleted() : 마지막 로그가 COMPLETED 경우 더는 로그를 기록할 수 없습니다.</li></ul><p>즉 자신이 생성할 수 없는 이유는 자기 자신이 갖고 있어야 합니다. 이렇게 되면 어느 곳에서 생성하든 같은 기준으로 객체가 생성되어 생성 관리 포인트가 한 곳에서 관리됩니다.</p><h2><span id="배송-로그-저장">배송 로그 저장</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryService</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> Delivery <span class="title">create</span><span class="params">(DeliveryDto.CreationReq dto)</span> </span>&#123;</div><div class="line">      <span class="keyword">final</span> Delivery delivery = dto.toEntity();</div><div class="line">      delivery.addLog(DeliveryStatus.PENDING);</div><div class="line">      <span class="keyword">return</span> deliveryRepository.save(delivery);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">public</span> Delivery <span class="title">updateStatus</span><span class="params">(<span class="keyword">long</span> id, DeliveryDto.UpdateReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Delivery delivery = findById(id);</div><div class="line">    delivery.addLog(dto.getStatus());</div><div class="line">    <span class="keyword">return</span> delivery;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>create : Delivery 클래스를 생성하고 delivery.addLog를 PENDING 상태로 생성하고 Repository의 save 메소드를 통해서 저장할 수 있습니다. 최종적인 JSON 값은 아래와 같습니다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"address"</span>: &#123;</div><div class="line">    <span class="attr">"address1"</span>: <span class="string">"서울 특별시..."</span>,</div><div class="line">    <span class="attr">"address2"</span>: <span class="string">"신림 ...."</span>,</div><div class="line">    <span class="attr">"zip"</span>: <span class="string">"020...."</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"logs"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"status"</span>: <span class="string">"PENDING"</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>updateStatus : 해당 객체를 데이터베이스에서 찾고 해당 배송 객체에 배송 로그를 추가합니다. 배송 로그에 추가적인 로그 저장은 <code>delivery.addLog(..);</code> 메서드를 통해서 진행됩니다. 언제나 관리 포인트를 줄이는 것은 중요하다고 생각됩니다.</li></ul><h2><span id="마무리">마무리</span></h2><p>코드 양이 많아지고 있어서 반드시 전체 코드와 테스트 코드를 돌려 보면서 이해하는 것을 추천해 드립니다. 이전 포스팅에서도 언급한 적 있지만 소스코드에서는 setter 메서드를 사용하지 않고 있습니다. 무분별하게 setter 메서드를 남용하는 것은 유지 보수와 가독성을 떨어트린다고 생각합니다. 다음 포스팅에서는 setter를 사용하지 않는 장점에 대해서 조금 더 깊게 설명해 보겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;배송이 있고 배송의 상태를 갖는 배송 로그가 있고 각각의 관계는 1:N 관계입니다. 아래와 같은 특정한 1:N 관계에 대해서 포스팅을 진행해보겠습니다. 해당 코드는 &lt;a href=&quot;https://github.com/cheese10yun/sprin
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Embedded" scheme="https://cheese10yun.github.io/tags/Embedded/"/>
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Jpa Best Practices Step-04</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-04/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-04/</id>
    <published>2018-05-11T15:00:00.000Z</published>
    <updated>2018-05-12T08:16:58.724Z</updated>
    
    <content type="html"><![CDATA[<p>이번 포스팅에서는 Embedded를 이용해서 Password 클래스를 통해서 Password 관련 응집력을 높이는 것 방법과  JPA에서 LocalDateTime을 활용하는 방법에 대해서 중점으로 포스팅을 진행해 보겠습니다. 해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p><h2><span id="중요포인트">중요포인트</span></h2><ul><li>Embeddable 타입의 Password 클래스 정의</li></ul><h2><span id="embeddable-타입의-password-클래스-정의">Embeddable 타입의 Password 클래스 정의</span></h2><h3><span id="비밀번호-요구사항">비밀번호 요구사항</span></h3><ul><li>비밀번호 만료 기본 14일 기간이 있다.</li><li>비밀번호 만료 기간이 지나는 것을 알 수 있어야 한다.</li><li>비밀번호 5회 이상 실패했을 경우 더 이상 시도를 못하게 해야 한다.</li><li>비밀번호가 일치하는 경우 실패 카운트를 초기화 해야한다</li><li>비밀번호 변경시 만료일이 현재시간 기준 14로 연장되어야한다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Embeddable</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Password</span> </span>&#123;</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"password"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> String value;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"password_expiration_date"</span>)</div><div class="line">    <span class="keyword">private</span> LocalDateTime expirationDate;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"password_failed_count"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> failedCount;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"password_ttl"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> ttl;</div><div class="line"></div><div class="line">    <span class="meta">@Builder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Password</span><span class="params">(<span class="keyword">final</span> String value)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.ttl = <span class="number">1209_604</span>; <span class="comment">// 1209_604 is 14 days</span></div><div class="line">        <span class="keyword">this</span>.value = encodePassword(value);</div><div class="line">        <span class="keyword">this</span>.expirationDate = extendExpirationDate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isMatched</span><span class="params">(<span class="keyword">final</span> String rawPassword)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (failedCount &gt;= <span class="number">5</span>)</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> PasswordFailedExceededException();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> matches = isMatches(rawPassword);</div><div class="line">        updateFailedCount(matches);</div><div class="line">        <span class="keyword">return</span> matches;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">changePassword</span><span class="params">(<span class="keyword">final</span> String newPassword, <span class="keyword">final</span> String oldPassword)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isMatched(oldPassword)) &#123;</div><div class="line">            value = encodePassword(newPassword);</div><div class="line">            extendExpirationDate();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>객체의 변경이나 질의는 반드시 해당 객체에 의해서 이루어져야 하는데 위의 요구 사항을 만족하는 로직들은 Password 객체 안에 있고 Password 객체를 통해서 모든 작업들이 이루어집니다.</strong> 그래서 결과적으로 Password 관련 테스트 코드도 작성하기 쉬워지고 이렇게 작은 단위로 테스트 코드를 작성하면 실패했을 때 원인도 찾기 쉬워집니다.</p><p>결과적으로 Password의 책임이 명확해집니다. 만약 Embeddable 타입으로 분리하지 않았을 경우에는 해당 로직들은 모두 Account 클래스에 들어가 Account 책임이 증가하는 것을 방지할 수 있습니다.</p><h2><span id="소소한-팁">소소한 팁</span></h2><ul><li>날짜 관련 클래스는 LocalDateTime 사용하였습니다. 설정 방법은 <a href="https://github.com/cheese10yun/spring-jpa-best-practices/blob/master/doc/appendix-01.md" rel="external nofollow noopener noreferrer" target="_blank">링크</a>에서 확인해주세요</li><li>LocalDateTime.now().plusSeconds(ttl); 현재 시간에서 시간 초만큼 더하는 함수입니다. 정말 직관적이며 다른 좋은 함수들이 있어 꼭 프로젝트에 도입해보시는 것을 추천드립니다.</li></ul><h2><span id="결론">결론</span></h2><p>굳이 Password 에민 해당하는 경우가 아니라 핵심 도메인들을 Embeddable을 분리해서 책임을 분리하고 응집력, 재사용성을 높이는 것이 핵심 주제였습니다. 꼭 개인 프로젝트에서라도 핵 심도 메인을 성격에 맞게끔 분리해 보시는 것을 경험해보시길 바랍니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이번 포스팅에서는 Embedded를 이용해서 Password 클래스를 통해서 Password 관련 응집력을 높이는 것 방법과  JPA에서 LocalDateTime을 활용하는 방법에 대해서 중점으로 포스팅을 진행해 보겠습니다. 해당 코드는 &lt;a h
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Embedded" scheme="https://cheese10yun.github.io/tags/Embedded/"/>
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Jpa Best Practices Step-03</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-03/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-03/</id>
    <published>2018-05-07T15:00:00.000Z</published>
    <updated>2018-05-21T15:21:02.909Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="step-03-효과적인-validate-예외-처리-처리-2">step-03 : 효과적인 validate, 예외 처리 처리 (2)</span></h2><p>이전 포스팅의 단점을 해결해서 더 효과적은 효과적인 validate, 예외 처리 처리 작업을 진행해보겠습니다. 해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p><h2><span id="step-02-이전-포스팅의-단점"></span></h2><ol><li>모든 Request Dto에 대한 반복적인 유효성 검사의 어노테이션이 필요합니다.<ul><li>회원 가입, 회원 정보 수정 등등 지속적으로 DTO 클래스가 추가되고 그때마다 반복적으로 어 로테이션이 추가됩니다.</li></ul></li><li>유효성 검사 로직이 변경되면 모든 곳에 변경이 따른다.<ul><li>만약 비밀번호 유효성 검사가 특수문자가 추가된다고 하면 비밀번호 변경에 따른 유효성 검사를 정규 표현식의 변경을 모든 DTO마다 해줘야 합니다.</li></ul></li></ol><h2><span id="중요포인트">중요포인트</span></h2><ul><li>@Embeddable / @Embedded</li><li>DTO 변경</li></ul><h2><span id="embeddable-embedded">@Embeddable / @Embedded</span></h2><h3><span id="embeddable-embedded-적용">@Embeddable / @Embedded 적용</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">private</span> com.cheese.springjpa.Account.model.Email email;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Embeddable</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Email</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@org</span>.hibernate.validator.constraints.Email</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"email"</span>, nullable = <span class="keyword">false</span>, unique = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> String address;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>임베디드 키워드를 통해서 새로운 값 타입을 집적 정의해서 사용할 수 있습니다. Email 클래스를 새로 생성하고 거기에 Email 칼럼에 매핑하는 하였습니다.</p><h2><span id="dto-변경">DTO 변경</span></h2><h3><span id="accountdtoclass">AccountDto.class</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SignUpReq</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// @Email 기존코드</span></div><div class="line">    <span class="comment">// private String email;</span></div><div class="line">    <span class="meta">@Valid</span> <span class="comment">// @Valid 반드시 필요</span></div><div class="line">    <span class="keyword">private</span> com.cheese.springjpa.Account.model.Email email;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String zip;</div><div class="line">    <span class="meta">@Builder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SignUpReq</span><span class="params">(com.cheese.springjpa.Account.model.Email email, String fistName, String lastName, String password, String address1, String address2, String zip)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.email = email;</div><div class="line">        ...</div><div class="line">        <span class="keyword">this</span>.zip = zip;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">toEntity</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Account.builder()</div><div class="line">                .email(<span class="keyword">this</span>.email)</div><div class="line">                ...</div><div class="line">                .zip(<span class="keyword">this</span>.zip)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>모든 Request Dto에 대한 반복적인 유효성 검사의 어 로테이션이 필요했었지만 <strong>새로운 Email 클래스를 바라보게 변경하면 해당 클래스의 이메일 유효성 검사를 바라보게 됩니다.</strong> 그 결과 이메일에 대한 유효성 검사는 Embeddable 타입의 Email 클래스가 관리하게 됩니다. 물론 이메일 유효성 검사는 로직이 거의 변경할 일이 없지만 다른 입력값들은 변경할 일들이 자주 생깁니다. 이럴 때 모든 DTO에 가서 유효성 로직을 변경하는 것은 불편 것을 넘어서 불안한 구조를 갖게 됩니다. 관리 포인트를 줄이는 것은 제가 생각했을 때는 되게 중요하다고 생각합니다.</p><h2><span id="단점">단점</span></h2><p>물론 이것 또한 단점이 없는 건 아닙니다. 아래 json처럼 email json 포멧팅이 변경되신 걸 확인할 수 있습니다. 물론 jackson을 사용해서 root element 조정을 할 수 있지만 그다지 추천해주고 싶지는 않습니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"address1"</span>: <span class="string">"string"</span>,</div><div class="line">  <span class="attr">"address2"</span>: <span class="string">"string"</span>,</div><div class="line">  <span class="attr">"email"</span>: &#123;</div><div class="line">    <span class="attr">"address"</span>: <span class="string">"string"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"fistName"</span>: <span class="string">"string"</span>,</div><div class="line">  <span class="attr">"lastName"</span>: <span class="string">"string"</span>,</div><div class="line">  <span class="attr">"password"</span>: <span class="string">"string"</span>,</div><div class="line">  <span class="attr">"zip"</span>: <span class="string">"string"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="결론">결론</span></h2><p>포스팅에는 유효성 검사를 하기 위해서 임베디드 타입을 분리했지만 사실 이런 이점보다는 다른 이점들이 많습니다. 또 이러한 이유로만 분리하지도 않는 걸로 알고 있습니다. 잘 설계된 ORM 애플리케이션은 매핑 한 테이블의 수보다 클래스의 수가 더 많다고들 합니다. 제가 생했을 때 진정한 장점은 다음과 같다고 생각합니다.</p><p>Account 엔티티는 fistName, lastName, password, address1, address2, zip 갖는 자입니다. 하지만 이러한 단순한 정보로 풀어 둔 것 일뿐. 데이터의 연관성이 없습니다. 아래처럼 정리하는 것이 더 바람직하다고 생각합니다.</p><p>Account 엔티티는 이름, 비밀번호, 주소를 갖는다. 여기에 필요한 상세 정보들은 주소라는 임베디드 타입에 정의돼있으면 된다고 생각합니다. 해당 설명을 json으로 풀어쓰면 아래와 같을 거같습니다.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"address"</span>: &#123;</div><div class="line">    <span class="attr">"address1"</span>: <span class="string">"string"</span>,</div><div class="line">    <span class="attr">"address2"</span>: <span class="string">"string"</span>,</div><div class="line">    <span class="attr">"zip"</span>: <span class="string">"string"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"email"</span>: &#123;</div><div class="line">    <span class="attr">"address"</span>: <span class="string">"string"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"name"</span>:&#123;</div><div class="line">    <span class="attr">"first"</span>: <span class="string">"name"</span>,</div><div class="line">    <span class="attr">"last"</span>: <span class="string">"name"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"password"</span>: <span class="string">"string"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Account가 상세한 데이터를 그대로 가지고 있는 것은 객체지향적이지 않으며 응집 력만 떨어뜨리는 결과를 갖는다고 생각합니다. 저는 ORM JPA 기술은 단순히 반복적인 쿼리문을 대신 작성해주는 것이라고 생각하지는 않고 데이터를 데이터베이스에서만 생각하지 않고 그것을 객체지향 적으로 바라보게 결국 객체지향 프로그래밍을 돕는다고 생각합니다.</p><h2><span id="참고">참고</span></h2><ul><li><a href="http://www.kyobobook.co.kr/product/detailViewKor.laf?ejkGb=KOR&amp;mallGb=KOR&amp;barcode=9788960777330&amp;orderClick=LAH&amp;Kc=" rel="external nofollow noopener noreferrer" target="_blank">자바 ORM 표준 JPA 프로그래밍 </a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;step-03-효과적인-validate-예외-처리-처리-2&quot;&gt;step-03 : 효과적인 validate, 예외 처리 처리 (2)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;이전 포스팅의 단점을 해결해서 더 효과적은 효과적인 validate, 
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Embedded" scheme="https://cheese10yun.github.io/tags/Embedded/"/>
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
  </entry>
  
  <entry>
    <title>Swagger 날짜 포멧팅</title>
    <link href="https://cheese10yun.github.io/swagger-tip-01/"/>
    <id>https://cheese10yun.github.io/swagger-tip-01/</id>
    <published>2018-05-02T15:00:00.000Z</published>
    <updated>2018-05-07T15:40:38.569Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/YGnD90T.png" alt=""></p><p>Swagger를 API 도큐먼트로 사용하고 계시다면 날짜 관련 model value는 지저분하게 출력 됩니다. 이 문제를 해결 하는 방법에 대해서 간단하게 포스팅 하겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableSwagger</span>2</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">api</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</div><div class="line">                .select()</div><div class="line">                .apis(RequestHandlerSelectors.any())</div><div class="line">                .paths(PathSelectors.any())</div><div class="line">                .build()</div><div class="line">                .directModelSubstitute(Timestamp.class, Long.class);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>directModelSubstitute 메소드는 다음과 같이 작용합니다. 변경하고 싶은 클래스, 변경되고자 하는 포멧팅 입니다.<br>저같은 경우는 long 타입의 클래스로 날짜를 출력하니 <code>directModelSubstitute(Timestamp.class, Long.class);</code>를 적용했습니다.</p><p><img src="https://i.imgur.com/THkaEN6.png" alt=""></p><p>작업을 완료하시면 위 그림처럼 표시 됩니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/YGnD90T.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;Swagger를 API 도큐먼트로 사용하고 계시다면 날짜 관련 model value는 지저분하게 출력 됩니다. 이 문제를 해결 하는 방법에 대
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Swagger" scheme="https://cheese10yun.github.io/tags/Swagger/"/>
    
      <category term="Document" scheme="https://cheese10yun.github.io/tags/Document/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Jpa Best Practices Step-02</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best-02/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best-02/</id>
    <published>2018-05-01T15:00:00.000Z</published>
    <updated>2018-05-03T14:23:06.198Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="step-02-효과적인-validate-예외-처리-1">Step-02 효과적인 validate, 예외 처리 (1)</span></h2><p>API을 개발하다 보면 프런트에서 넘어온 값에 대한 유효성 검사를 수없이 진행하게 됩니다. 이러한 <strong>반복적인 작업을 보다 효율적으로 처리하고 정확한 예외 메시지를 프런트엔드에게 전달해주는 것이 목표입니다</strong>. 해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p><h2><span id="중요-포인트">중요 포인트</span></h2><ul><li><code>@Valid</code>를 통한 유효성검사</li><li><code>@ControllerAdvice</code>를 이용한 Exception 헨들링</li><li><code>ErrorCode</code> 에러 메시지 통합</li></ul><h2><span id="valid-를-통한-유효성검사">@Valid 를 통한 유효성검사</span></h2><h3><span id="dto-유효성-검사-어노테이션-추가">DTO 유효성 검사 어노테이션 추가</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SignUpReq</span> </span>&#123;</div><div class="line">    <span class="meta">@Email</span></div><div class="line">    <span class="keyword">private</span> String email;</div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="keyword">private</span> String fistName;</div><div class="line">    ...</div><div class="line">    <span class="meta">@NotEmpty</span></div><div class="line">    <span class="keyword">private</span> String zip;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>이전 단계에서 작성한 회원가입을 위한 SignUpReq.class에 새롭게 추가된 <code>@Email</code>, <code>@NotEmpty</code> 어 로테이션을 추가했습니다. 이 밖에 다양한 어노테이션들이 있습니다. 아래의 컨트롤러에서  <code>@Valid</code> 어 로테이션을 통해서 유효성 검사 가를 진행하고 유효성 검사를 실패하면 <code>MethodArgumentNotValidException</code> 예외가 발생합니다.</p><h3><span id="controller에서-유효성-검사">Controller에서 유효성 검사</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</div><div class="line"><span class="meta">@ResponseStatus</span>(value = HttpStatus.CREATED)</div><div class="line"><span class="keyword">public</span> AccountDto.<span class="function">Res <span class="title">signUp</span><span class="params">(@RequestBody @Valid <span class="keyword">final</span> AccountDto.SignUpReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AccountDto.Res(accountService.create(dto));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>컨트롤러에 <code>@Valid</code> 어 로테이션을 추가했습니다. <code>SignUpReq</code> 클래스의 유효성 검사가 실패했을 경우 <code>MethodArgumentNotValidException</code> 예외가 발생하게 됩니다. <strong>프론트에서 넘겨받은 값에 대한 유효성 검사는 엄청난 반복적인 작업이며 실패했을 경우 사용자에게 적절한 Response 값을 리턴해주는 것 또한 중요 비즈니스 로직이 아님에도 불과하고 많은 시간을 할애하게 됩니다.</strong> 다음 부분은 <code>MethodArgumentNotValidException</code> 발생시 공통적으로 <strong>사용자에게 적절한 Response 값을 리턴해주는 작업을 진행하겠습니다.</strong></p><h2><span id="controlleradvice를-이용한-exception-헨들링">@ControllerAdvice를 이용한 Exception 헨들링</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorExceptionController</span> </span>&#123;</div><div class="line"><span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException.class)</div><div class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</div><div class="line"><span class="function"><span class="keyword">protected</span> ErrorResponse <span class="title">handleMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</div><div class="line">    retrun errorResponse...</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>@ControllerAdvice</code> 어 로테이션을 추가하면 특정 Exception을 핸들링하여 적절한 값을 Response 값으로 리턴해줍니다. 위처럼 별다른 <code>MethodArgumentNotValidException</code> 핸들링을 하지 않으면 스프링 자체의 에러 Response 값을 아래와 같이 리턴해줍니다.</p><h3><span id="error-response">Error Response</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"timestamp"</span>: <span class="number">1525182817519</span>,</div><div class="line">  <span class="attr">"status"</span>: <span class="number">400</span>,</div><div class="line">  <span class="attr">"error"</span>: <span class="string">"Bad Request"</span>,</div><div class="line">  <span class="attr">"exception"</span>: <span class="string">"org.springframework.web.bind.MethodArgumentNotValidException"</span>,</div><div class="line">  <span class="attr">"errors"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"codes"</span>: [</div><div class="line">        <span class="string">"Email.signUpReq.email"</span>,</div><div class="line">        <span class="string">"Email.email"</span>,</div><div class="line">        <span class="string">"Email.java.lang.String"</span>,</div><div class="line">        <span class="string">"Email"</span></div><div class="line">      ],</div><div class="line">      <span class="attr">"arguments"</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"codes"</span>: [</div><div class="line">            <span class="string">"signUpReq.email"</span>,</div><div class="line">            <span class="string">"email"</span></div><div class="line">          ],</div><div class="line">          <span class="attr">"arguments"</span>: <span class="literal">null</span>,</div><div class="line">          <span class="attr">"defaultMessage"</span>: <span class="string">"email"</span>,</div><div class="line">          <span class="attr">"code"</span>: <span class="string">"email"</span></div><div class="line">        &#125;,</div><div class="line">        [],</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"arguments"</span>: <span class="literal">null</span>,</div><div class="line">          <span class="attr">"defaultMessage"</span>: <span class="string">".*"</span>,</div><div class="line">          <span class="attr">"codes"</span>: [</div><div class="line">            <span class="string">".*"</span></div><div class="line">          ]</div><div class="line">        &#125;</div><div class="line">      ],</div><div class="line">      <span class="attr">"defaultMessage"</span>: <span class="string">"이메일 주소가 유효하지 않습니다."</span>,</div><div class="line">      <span class="attr">"objectName"</span>: <span class="string">"signUpReq"</span>,</div><div class="line">      <span class="attr">"field"</span>: <span class="string">"email"</span>,</div><div class="line">      <span class="attr">"rejectedValue"</span>: <span class="string">"string"</span>,</div><div class="line">      <span class="attr">"bindingFailure"</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">"code"</span>: <span class="string">"Email"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  <span class="attr">"message"</span>: <span class="string">"Validation failed for object='signUpReq'. Error count: 3"</span>,</div><div class="line">  <span class="attr">"path"</span>: <span class="string">"/accounts"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>너무나 많은 값을 돌려보내 주고 있으며 시스템 정보에 대한 값들도 포함되고 있어 위처럼 Response 값을 돌려보내는 것은 바람직하지 않습니다. 또 자체적으로 돌려보내 주는 Response 결과를 공통적인 포맷으로 가져가는 것은 최종적으로 프론트 엔드에서 처리해야 하므로 항상 공통적인 Response 포맷일 유지해야 합니다. 아래 <code>Error Response</code> 클래스를 통해서 공통적인 예외 Response 값을 갖도록 하겠습니다.</p><h3><span id="methodargumentnotvalidexception의-response-처리">MethodArgumentNotValidException의 Response 처리</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException.class)</div><div class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.BAD_REQUEST)</div><div class="line"><span class="function"><span class="keyword">protected</span> ErrorResponse <span class="title">handleMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</div><div class="line">log.error(e.getMessage());</div><div class="line"><span class="keyword">final</span> BindingResult bindingResult = e.getBindingResult();</div><div class="line"><span class="keyword">final</span> List&lt;FieldError&gt; errors = bindingResult.getFieldErrors();</div><div class="line"></div><div class="line"><span class="keyword">return</span> buildFieldErrors(</div><div class="line">ErrorCode.INPUT_VALUE_INVALID,</div><div class="line">errors.parallelStream()</div><div class="line">.map(error -&gt; ErrorResponse.FieldError.builder()</div><div class="line">.reason(error.getDefaultMessage())</div><div class="line">.field(error.getField())</div><div class="line">.value((String) error.getRejectedValue())</div><div class="line">.build())</div><div class="line">.collect(Collectors.toList())</div><div class="line">);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="errorresponse">ErrorResponse</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorResponse</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line">    <span class="keyword">private</span> String code;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> status;</div><div class="line">    <span class="keyword">private</span> List&lt;FieldError&gt; errors;</div><div class="line">...</div><div class="line"></div><div class="line">    <span class="meta">@Getter</span></div><div class="line">    <span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FieldError</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> String field;</div><div class="line">        <span class="keyword">private</span> String value;</div><div class="line">        <span class="keyword">private</span> String reason;</div><div class="line">...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>전체적인 흐름을 보시는 것을 권장합니다. 대충 소스코드의 흐름은 MethodArgumentNotValidException 클래스의 유효성 예외 부분들을 <code>ErrorResponse</code> 클래스의 정보에 알맞게 넣어주는 것입니다.</p><h3><span id="errorresponse-공통적인-예외-response">ErrorResponse :  공통적인 예외 Response</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"message"</span>: <span class="string">"입력값이 올바르지 않습니다."</span>,</div><div class="line">  <span class="attr">"code"</span>: <span class="string">"???"</span>,</div><div class="line">  <span class="attr">"status"</span>: <span class="number">400</span>,</div><div class="line">  <span class="attr">"errors"</span>: [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"field"</span>: <span class="string">"email"</span>,</div><div class="line">      <span class="attr">"value"</span>: <span class="string">"string"</span>,</div><div class="line">      <span class="attr">"reason"</span>: <span class="string">"이메일 주소가 유효하지 않습니다."</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"field"</span>: <span class="string">"lastName"</span>,</div><div class="line">      <span class="attr">"value"</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">"reason"</span>: <span class="string">"반드시 값이 존재하고 길이 혹은 크기가 0보다 커야 합니다."</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"field"</span>: <span class="string">"fistName"</span>,</div><div class="line">      <span class="attr">"value"</span>: <span class="literal">null</span>,</div><div class="line">      <span class="attr">"reason"</span>: <span class="string">"반드시 값이 존재하고 길이 혹은 크기가 0보다 커야 합니다."</span></div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>동일한 ErrorResponse 값을 갖게 되었으며 어느 칼럼에서 무슨 무슨 문제들이 발생했는지 알 수 있게 되었습니다. <code>@Valid</code> 어 로테이션으로 발생하는 <code>MethodArgumentNotValidException</code>들은 모두 handleMethodArgumentNotValidException 메서드를 통해서 공통된 Response 값을 리턴합니다. <strong>이제부터는 @Valid, 해당 필드에 맞는 어 로테이션을 통해서 모든 유효성 검사를 진행할 수 있습니다.</strong></p><h3><span id="accountnotfoundexception-새로운-exception-정의">AccountNotFoundException : 새로운 Exception 정의</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountNotFoundException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountNotFoundException</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">findById</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Account account = accountRepository.findOne(id);</div><div class="line">    <span class="keyword">if</span> (account == <span class="keyword">null</span>)</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> AccountNotFoundException(id);</div><div class="line">    <span class="keyword">return</span> account;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="handleaccountnotfoundexception-헨들링">handleAccountNotFoundException : 헨들링</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ExceptionHandler</span>(value = &#123;</div><div class="line">        AccountNotFoundException.class</div><div class="line">&#125;)</div><div class="line"><span class="meta">@ResponseStatus</span>(HttpStatus.NOT_FOUND)</div><div class="line"><span class="function"><span class="keyword">protected</span> ErrorResponse <span class="title">handleAccountNotFoundException</span><span class="params">(AccountNotFoundException e)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> ErrorCode accountNotFound = ErrorCode.ACCOUNT_NOT_FOUND;</div><div class="line">    log.error(accountNotFound.getMessage(), e.getMessage());</div><div class="line">    <span class="keyword">return</span> buildError(accountNotFound);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="response">Response</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"message"</span>: <span class="string">"해당 회원을 찾을 수 없습니다."</span>,</div><div class="line">  <span class="attr">"code"</span>: <span class="string">"AC_001"</span>,</div><div class="line">  <span class="attr">"status"</span>: <span class="number">404</span>,</div><div class="line">  <span class="attr">"errors"</span>: []</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위처럼 새로운 Exception 정의하고 핸들링할 수 있습니다. 이 또 한 공통된 Response 갖게 되며 예외가 발생했을 경우 throw를 통해 해당 Exception 잘 처리해 주는 곳으로 던지게 됨으로써 비즈니스 로직과 예외 처리를 하는 로직이 분리되어 코드 가속성 및 유지 보수에 좋다고 생각합니다.</p><h2><span id="errorcode">ErrorCode</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ErrorCode &#123;</div><div class="line"></div><div class="line">    ACCOUNT_NOT_FOUND(<span class="string">"AC_001"</span>, <span class="string">"해당 회원을 찾을 수 없습니다."</span>, <span class="number">404</span>),</div><div class="line">    EMAIL_DUPLICATION(<span class="string">"AC_002"</span>, <span class="string">"이메일이 중복되었습니다."</span>, <span class="number">400</span>),</div><div class="line">    INPUT_VALUE_INVALID(<span class="string">"CM_001"</span>, <span class="string">"입력값이 올바르지 않습니다."</span>, <span class="number">400</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String code;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String message;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> status;</div><div class="line"></div><div class="line">    ErrorCode(String code, String message, <span class="keyword">int</span> status) &#123;</div><div class="line">        <span class="keyword">this</span>.code = code;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">        <span class="keyword">this</span>.status = status;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>위 방법은 깃허브에서 많은 개발자들이 예외 처리를 하는 방법들의 장점들을 합쳐서 만든 방법이지만 이 에러 코드는 저의 생각으로만 만들어진 방법이라서 효율적인 방법인지는 아직 잘 모르겠습니다. 우선 각각 모두 흩어져있는 예외 메시지들을 한 곳에서 관리하는 것이 바람직하다고 생각합니다. 그 이유는 다음과 같습니다.</p><ol><li>중복적으로 작성되는 메시지들이 너무 많습니다.<ul><li>예를 들어 <code>해당 회원을 찾을 수 없습니다.</code> 메시지를 로그에 남기는 메시지 형태는 너무나도 많은 형태입니다. 형태는 너무나도 많은 형태입니다.</li></ul></li><li>메시지 변경이 힘듭니다.<ul><li>메시지가 스트링 형식으로 모든 소스에 흩어져있을 경우 메시지 변경 시에 모든 곳을 다 찾아서 변경해야 합니다.모든 곳을 다 찾아서 변경해야 합니다.</li></ul></li></ol><h2><span id="단점">단점</span></h2><p>위의 유효성 검사의 단점은 다음과 같습니다.</p><ol><li>모든 Request Dto에 대한 반복적인 유효성 검사의 어 로테이션이 필요합니다.<ul><li>회원 가입, 회원 정보 수정 등등 지속적으로 DTO 클래스가 추가되고 그때마다 반복적으로 어 로테이션이 추가됩니다.</li></ul></li><li>유효성 검사 로직이 변경되면 모든 곳에 변경이 따른다.<ul><li>만약 비밀번호 유효성 검사가 특수문자가 추가된다고 하면 비밀번호 변경에 따른 유효성 검사를 정규 표현식의 변경을 모든 DTO마다 해줘야 합니다.</li></ul></li></ol><p>이러한 단점들은 다음 <code>step-03 : 효과적인 validate, 예외 처리 처리 (2)</code>에서 다루어 보겠습니다. 지속적으로 포스팅이 어 가겠습니다. 긴 글 읽어주셔서 감사합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;step-02-효과적인-validate-예외-처리-1&quot;&gt;Step-02 효과적인 validate, 예외 처리 (1)&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;API을 개발하다 보면 프런트에서 넘어온 값에 대한 유효성 검사를 수없이 진행하게 됩
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
  </entry>
  
  <entry>
    <title>Spring-Jpa Best Practices Step-01</title>
    <link href="https://cheese10yun.github.io/spring-jpa-best/"/>
    <id>https://cheese10yun.github.io/spring-jpa-best/</id>
    <published>2018-04-27T18:51:10.000Z</published>
    <updated>2018-05-02T15:40:30.644Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="step-01">Step-01</span></h2><p>Spring Boot + JPA를 활용한 Account 생성, 조회, 수정 API를 간단하게 만드는 예제입니다. 해당 코드는 <a href="https://github.com/cheese10yun/spring-jpa-best-practices" rel="external nofollow noopener noreferrer" target="_blank">Github</a>를 확인해주세요.</p><h2><span id="중요-포인트">중요 포인트</span></h2><ul><li>도메인 클래스 작성</li><li>DTO 클래스를 이용한 Request, Response</li><li>Setter 사용안하기</li></ul><h2><span id="도메인-클래스-작성-account-domain">도메인 클래스 작성 : Account Domain</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Table</span>(name = <span class="string">"account"</span>)</div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"email"</span>, nullable = <span class="keyword">false</span>, unique = <span class="keyword">true</span>)</div><div class="line">    <span class="keyword">private</span> String email;</div><div class="line"></div><div class="line">    ...</div><div class="line">    ...</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"zip"</span>, nullable = <span class="keyword">false</span>)</div><div class="line">    <span class="keyword">private</span> String zip;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"created_at"</span>)</div><div class="line">    <span class="meta">@Temporal</span>(TemporalType.TIMESTAMP)</div><div class="line">    <span class="keyword">private</span> Date createdAt;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"updated_at"</span>)</div><div class="line">    <span class="meta">@Temporal</span>(TemporalType.TIMESTAMP)</div><div class="line">    <span class="keyword">private</span> Date updatedAt;</div><div class="line"></div><div class="line">    <span class="meta">@Builder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(String email, String fistName, String lastName, String password, String address1, String address2, String zip)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.email = email;</div><div class="line">        <span class="keyword">this</span>.fistName = fistName;</div><div class="line">        <span class="keyword">this</span>.lastName = lastName;</div><div class="line">        <span class="keyword">this</span>.password = password;</div><div class="line">        <span class="keyword">this</span>.address1 = address1;</div><div class="line">        <span class="keyword">this</span>.address2 = address2;</div><div class="line">        <span class="keyword">this</span>.zip = zip;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateMyAccount</span><span class="params">(AccountDto.MyAccountReq dto)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.address1 = dto.getAddress1();</div><div class="line">        <span class="keyword">this</span>.address2 = dto.getAddress2();</div><div class="line">        <span class="keyword">this</span>.zip = dto.getZip();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="제약조건-맞추기">제약조건 맞추기</span></h3><p>칼럼에 대한 제약조건을 생각하며 작성하는 하는 것이 바람직합니다. 대표적으로 <code>nullable</code>, <code>unique</code> 조건등 해당 디비의 스키마와 동일하게 설정하는 것이 좋습니다.</p><h3><span id="생성날짜-수정날짜-값-설정-못하게-하기">생성날짜, 수정날짜 값 설정 못하게 하기</span></h3><p>기본적으로 <code>setter</code> 메서드가 모든 멤버 필드에 대해서 없고 생성자를 이용한 Builder Pattern 메서드에도 생성, 수정 날짜를 제외해 <code>@CreationTimestamp</code>, <code>@UpdateTimestamp</code> 어노테이션을 이용해서 VM시간 기준으로 날짜가 자동으로 입력하게 하거나 데이터베이스에서 자동으로 입력하게 설정하는 편이 좋습니다. 매번 생성할 때 create 시간을 넣어 주고, update 할 때 넣어 주고 반복적인 작업과 실수를 줄일 수 있는 효과적인 방법이라고 생각합니다.</p><h3><span id="객체-생성-제약">객체 생성 제약</span></h3><p><code>@NoArgsConstructor(access = AccessLevel.PROTECTED)</code> lombok 어노테이션을 통해서 객체의 직접생성을 외부에서 못하게 설정하였습니다. 그래서  <code>@Builder</code> 에노티이션이 설정돼 있는 <code>Account</code> 생성자 메소드를 통해서 해당 객체를 생성할 수 있습니다. 이렇게 빌더 패턴을 이용해서 객체 생성을 강요하면 다음과 같은 장점이 있습니다. ( Account 생성자의 모든 인자값을 넣어주면 생성은 가능합니다.)</p><h4><span id="객체를-유연하게-생성할-수-있습니다">객체를 유연하게 생성할 수 있습니다.</span></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Account.builder()</div><div class="line">  .address1(<span class="string">"서울"</span>)</div><div class="line">  .address2(<span class="string">"성동구"</span>)</div><div class="line">  .zip(<span class="string">"052-2344"</span>)</div><div class="line">  .email(<span class="string">"email"</span>)</div><div class="line">  .fistName(<span class="string">"yun"</span>)</div><div class="line">  .lastName(<span class="string">"kim"</span>)</div><div class="line">  .password(<span class="string">"password111"</span>)</div><div class="line">  .build();</div></pre></td></tr></table></figure><ul><li>객체를 생성할 때 인자 값의 순서가 상관없습니다.</li><li>입력되는 값이 정확히 어떤 값인지 알 수 있습니다.<ul><li>address1() 자연스럽게 address1에 입력되는 것을 알 수 있습니다.</li></ul></li><li>하나의 생성자로 대체가 능합니다.<ul><li>여러 생성자를 두지 않고 하나의 생성자를 통해서 객체 생성이 가능합니다.</li></ul></li></ul><h2><span id="dto-클래스를-이용한-request-response">DTO 클래스를 이용한 Request, Response</span></h2><h3><span id="dto-클래스">DTO 클래스</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDto</span> </span>&#123;</div><div class="line">    <span class="meta">@Getter</span></div><div class="line">    <span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SignUpReq</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> String email;</div><div class="line">        ...</div><div class="line">        <span class="keyword">private</span> String address2;</div><div class="line">        <span class="keyword">private</span> String zip;</div><div class="line"></div><div class="line">        <span class="meta">@Builder</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">SignUpReq</span><span class="params">(String email, String fistName, String lastName, String password, String address1, String address2, String zip)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.email = email;</div><div class="line">            ...</div><div class="line">            <span class="keyword">this</span>.address2 = address2;</div><div class="line">            <span class="keyword">this</span>.zip = zip;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> Account <span class="title">toEntity</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> Account.builder()</div><div class="line">                    .email(<span class="keyword">this</span>.email)</div><div class="line">                    ...</div><div class="line">                    .address2(<span class="keyword">this</span>.address2)</div><div class="line">                    .zip(<span class="keyword">this</span>.zip)</div><div class="line">                    .build();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Getter</span></div><div class="line">    <span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAccountReq</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> String address1;</div><div class="line">        <span class="keyword">private</span> String address2;</div><div class="line">        <span class="keyword">private</span> String zip;</div><div class="line"></div><div class="line">        <span class="meta">@Builder</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyAccountReq</span><span class="params">(String address1, String address2, String zip)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.address1 = address1;</div><div class="line">            <span class="keyword">this</span>.address2 = address2;</div><div class="line">            <span class="keyword">this</span>.zip = zip;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Getter</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Res</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> String email;</div><div class="line">        ...</div><div class="line">        <span class="keyword">private</span> String address2;</div><div class="line">        <span class="keyword">private</span> String zip;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Res</span><span class="params">(Account account)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.email = account.getEmail();</div><div class="line">            ...</div><div class="line">            <span class="keyword">this</span>.address2 = account.getAddress2();</div><div class="line">            <span class="keyword">this</span>.zip = account.getZip();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="dto-클래스의-필요-이유">DTO 클래스의 필요 이유</span></h3><p>Account에 정보를 변경하는 API가 있다고 가정 했을 경우 RequestBody를 Account 클래스로 받게 된다면 다음과 같은 문제가 발생합니다.</p><ul><li>데이터 안전성<ul><li>정보 변경 API에서는 firstName, lastName 두 속성만 변경할 수 있다고 했으면 Account 클래스로 RequestBody를 받게 된다면 email, password, Account 클래의의 모든 속성값들을 컨트롤러를 통해서 넘겨받을 수 있게 되고 원치 않은 데이터 변경이 발생할 수 있습니다.</li><li>firstName, lastName 속성 이외의 값들이 넘어온다면 그것은 잘못된 입력값이고 그런 값들을 넘겼을 경우 Bad Request 처리하는 것이 안전합니다.</li><li>Response 타입이 Account 클래스일 경우 계정의 모든 정보가 노출 되게 됩니다. JsonIgnore 속성들을 두어 임시로 막는 것은 바람직하지 않습니다.속성들을 두어 임시로 막는 것은 바람직하지 않습니다.</li></ul></li><li>명확해지는 요구사항<ul><li>MyAccountReq 클래스는 마이 어카운트 페이지에서 변경할 수 있는 값들로 address1, address2, zip 속성이 있습니다. 요구사항이 이 세 가지 속성에 대한 변경이어서 해당 API가 어떤 값들을 변경할 수가 있는지 명확해집니다.</li></ul></li></ul><h3><span id="컨트롤러에서의-dto">컨트롤러에서의 DTO</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(method = RequestMethod.POST)</div><div class="line"><span class="meta">@ResponseStatus</span>(value = HttpStatus.CREATED)</div><div class="line"><span class="keyword">public</span> AccountDto.<span class="function">Res <span class="title">signUp</span><span class="params">(@RequestBody <span class="keyword">final</span> AccountDto.SignUpReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AccountDto.Res(accountService.create(dto));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.GET)</div><div class="line"><span class="meta">@ResponseStatus</span>(value = HttpStatus.OK)</div><div class="line"><span class="keyword">public</span> AccountDto.<span class="function">Res <span class="title">getUser</span><span class="params">(@PathVariable <span class="keyword">final</span> <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AccountDto.Res(accountService.findById(id));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/&#123;id&#125;"</span>, method = RequestMethod.PUT)</div><div class="line"><span class="meta">@ResponseStatus</span>(value = HttpStatus.OK)</div><div class="line"><span class="keyword">public</span> AccountDto.<span class="function">Res <span class="title">updateMyAccount</span><span class="params">(@PathVariable <span class="keyword">final</span> <span class="keyword">long</span> id, @RequestBody <span class="keyword">final</span> AccountDto.MyAccountReq dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> AccountDto.Res(accountService.updateMyAccount(id, dto));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://i.imgur.com/pbhdpcV.png" alt=""><br>위에서 언급했듯이 Request 값과 Response 값이 명확하게 되어 API 또 한 명확해집니다. 위 그림처럼 swagger API Document를 사용한다면 Request 값과 Response 자동으로 명세 되는 장점 또한 있습니다.</p><h2><span id="setter-사용안하기">Setter 사용안하기</span></h2><p>JPA에서는 영속성이 있는 객체에서 Setter 메서드를 통해서 데이터베이스 DML이 가능하게 됩니다. 만약 무분별하게 모든 필드에 대한 Setter 메서드를 작성했을 경우 email 변경 기능이 없는 기획 의도가 있더라도 영속성이 있는 상태에서 Setter 메서드를 사용해서 얼마든지 변경이 가능해지는 구조를 갖게 됩니다. 또 굳이 변경 기능이 없는 속성뿐만이 아니라 영속성만 있으면 언제든지 DML이 가능한 구조는 안전하지 않다고 생각합니다. 또 데이터 변경이 발생했을 시 추적할 포인트들도 많아집니다. DTO 클래스를 기준으로 데이터 변경이 이루어진다면 명확한 요구사항에 의해서 변경이 된다고 생각합니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// setter 이용 방법</span></div><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">updateMyAccount</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">    <span class="keyword">final</span> Account account = findById(id);</div><div class="line">    account.setAddress1(<span class="string">"변경..."</span>);</div><div class="line">    account.setAddress2(<span class="string">"변경..."</span>);</div><div class="line">    account.setZip(<span class="string">"변경..."</span>);</div><div class="line">    <span class="keyword">return</span> account;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Dto 이용 방법</span></div><div class="line"><span class="function"><span class="keyword">public</span> Account <span class="title">updateMyAccount</span><span class="params">(<span class="keyword">long</span> id, AccountDto.MyAccountReq dto)</span> </span>&#123;</div><div class="line">  <span class="keyword">final</span> Account account = findById(id);</div><div class="line">  account.updateMyAccount(dto);</div><div class="line">  <span class="keyword">return</span> account;</div><div class="line">&#125;</div><div class="line"><span class="comment">// Account 클래스의 일부</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateMyAccount</span><span class="params">(AccountDto.MyAccountReq dto)</span> </span>&#123;</div><div class="line">  <span class="keyword">this</span>.address1 = dto.getAddress1();</div><div class="line">  <span class="keyword">this</span>.address2 = dto.getAddress2();</div><div class="line">  <span class="keyword">this</span>.zip = dto.getZip();</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>DTO 클래스를 이용해서 데이터 변경을 하는 것이 훨씬더 직관적이고 유지보수 하기 쉽다고 생각합니다.  MyAccountReq 클래스에는 3개의 필드가 있으니 오직 3개의 필드만 변경이 가능하다는 것이 아주 명확해집니다.</p><p>여기서 제가 중요하다고 생각하는 것은 <code>updateMyAccount(AccountDto.MyAccountReq dto)</code> 메소드입니다. <strong>객체 자신을 변경하는 것은 언제나 자기 자신이어야 한다는 OOP 관점에서 도메인 클래스에 updateMyAccount 기능이 있는 것이 맞는다고 생각합니다.</strong></p><h2><span id="마무리">마무리</span></h2><p>최근 스프링을 6개월 가까이 하면서 제가 느낀 점들에 대해서 간단하게 정리했습니다. <strong>아직 부족한 게 많아 Best Practices라도 당당하게 말하긴 어렵지만, 저와 같은 고민을 하시는 분들에게 조금이라도 도움이 되고 싶어 이렇게 정리했습니다.</strong> 또 Step-02에서는 예외 처리와 유효성 검사에 대한 것을 정리할 예정입니다. 지속해서 해당 프로젝트를 이어 나아갈 예정이라 깃허브 Start, Watching 버튼을 누르시면 구독 신청받으실 수 있습니다. 저의 경험이 여러분에게 조금이라도 도움이 되기를 기원합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;step-01&quot;&gt;Step-01&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Spring Boot + JPA를 활용한 Account 생성, 조회, 수정 API를 간단하게 만드는 예제입니다. 해당 코드는 &lt;a href=&quot;https://github.
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="Best Practices" scheme="https://cheese10yun.github.io/tags/Best-Practices/"/>
    
  </entry>
  
  <entry>
    <title>인텔리제이 Git 활용법</title>
    <link href="https://cheese10yun.github.io/intellij-git/"/>
    <id>https://cheese10yun.github.io/intellij-git/</id>
    <published>2018-04-02T15:00:00.000Z</published>
    <updated>2018-04-02T16:36:29.050Z</updated>
    
    <content type="html"><![CDATA[<p>벡엔드 개발을 할 때 많은 틀을 사용합니다. Source Tree, Postman, Sequel Pro 등등 수없이 개발하다가 해당툴을 사용하기 위해서 왔다 갔다 하는 경우가 많습니다. 하지만 외부 툴을 사용하는 순간 뭔가 개발 흐름이 끊기는 느낌이 있어서 저는 거의 모든 작업을 인텔리제이에서 하는 것을 지향합니다. <strong>이번 포스팅은 Source Tree 즉 Git 관련 툴을 대체하는 방법을 소개하겠습니다.</strong> <strong><em>해당 기능의 단축키는 스크린샷 하단에 표시되있습니다.</em></strong></p><h2><span id="commit">Commit</span></h2><p><img src="https://i.imgur.com/6xFlHcv.png" alt=""></p><ul><li>Diff : 변경 이력이 있는 모든 파일에 대해서 Diff 기능을 제공합니다. Commit을 하기 전에 자신이 변경한 모든 파일에 대해서 한 번 꼼꼼하게 읽어 보는 습관을 갖는 것이 실수를 줄이는 가장 효율적인 방법이라고 생각합니다.</li><li>Before Commit : **인텔리제이로 커밋을 했을 경우 얻을 수 있는 최고의 장점이라고 생각합니다. **간단하게 다루고 이 기능은 추후 포스팅을 통해서 다시 한번 다루겠습니다.<ul><li>Check TODO:  //TODO 메시지가 남아 있을 경우 사용자에게 해당 TODO가 남아 있다고 알려줍니다.</li><li>Optimize imports : 사용하지 않은 imports를 제거해 줍니다.</li><li>Reformat Code : 인텔리제이에서 설정한 코드스타일로 변경 해줍니다.</li></ul></li></ul><h2><span id="push">Push</span></h2><p><img src="https://i.imgur.com/TzF1dNk.png" alt=""></p><ul><li>커밋한 내용을 레파지토리에 푸쉬 하는 기능입니다.</li></ul><h2><span id="pull">Pull</span></h2><p><img src="https://i.imgur.com/pMhiJPi.png" alt=""></p><ul><li>Remote Repository에 변경 내역을 Pull 받는 기능입니다.</li></ul><h2><span id="stash">Stash</span></h2><p><img src="https://i.imgur.com/ZIn63MI.png" alt=""></p><ul><li>Stash 기능은 아주 간단하게 소개하면 변경 내역을 임시저장 해놓는 기능입니다. 가령 다른 branch로 변경을 원할 때 변경 내역이 남아 있어 부득이하게 commit을 하는 경우가 있습니다. 그럴 때 stash 임시 저장소에 저장하면 편리하게 branch 간의 이동을 할 수 있습니다.</li><li>기본 단축키가 지정되있지 않아 <code>Find Action</code> 으로 stash 기능을 사용합니다.</li></ul><h2><span id="unstash">UnStash</span></h2><p><img src="https://i.imgur.com/kDCYgib.png" alt=""></p><ul><li>Stash 저장한 내역을 POP 하는 기능입니다.</li><li>기본 단축키가 지정되있지 않아 <code>Find Action</code> 으로 unStash 기능을 사용합니다.</li><li>저장한 메시지를 기반으로 선택하고 <code>Apply Stash</code>을 클릭하면 변경 내역을 불러옵니다.</li></ul><h2><span id="share-project-on-github">Share Project on Github</span></h2><p><img src="https://i.imgur.com/bOJ0X8n.png" alt=""></p><ul><li>해당 프로젝트를 Github에 올리는 기능입니다.</li></ul><h2><span id="branch">Branch</span></h2><p><img src="https://i.imgur.com/HJjPhjW.png" alt=""></p><ul><li>New branch, Checkout, Compare, Merge, Rebase 등등 다양한 기능들을 제공합니다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;벡엔드 개발을 할 때 많은 틀을 사용합니다. Source Tree, Postman, Sequel Pro 등등 수없이 개발하다가 해당툴을 사용하기 위해서 왔다 갔다 하는 경우가 많습니다. 하지만 외부 툴을 사용하는 순간 뭔가 개발 흐름이 끊기는 느
      
    
    </summary>
    
    
      <category term="IntelliJ" scheme="https://cheese10yun.github.io/tags/IntelliJ/"/>
    
      <category term="Tip" scheme="https://cheese10yun.github.io/tags/Tip/"/>
    
      <category term="Git" scheme="https://cheese10yun.github.io/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Spring OOP 프로그래밍 예제(2)</title>
    <link href="https://cheese10yun.github.io/spring-oop-bank-api/"/>
    <id>https://cheese10yun.github.io/spring-oop-bank-api/</id>
    <published>2018-03-29T15:00:00.000Z</published>
    <updated>2018-04-19T16:30:59.900Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/nquQoeh.png" alt=""></p><h2><span id="예제-코드">예제 코드</span></h2><p>예제 코드는 <a href="https://github.com/cheese10yun/blog-sample/tree/master/bankapi" rel="external nofollow noopener noreferrer" target="_blank">Github : blog-sample</a>에 공개 되어 있습니다. <s>start 좀…</s> 아직 많이 부족해서 미흡한 부분이 많습니다. 댓글로 지적 및 조언해주시면 감사드리겠습니다.</p><h2><span id="요구사항">요구사항</span></h2><ul><li>해외 송금에 필요한 계산기 기능</li><li>미국 USD 에서 대한민국 KRW 로 계산 기능<ul><li>ex -&gt; $500 -&gt; ₩539,337</li><li>미국 -&gt; 한국 환율을 정보는 BankOfAmerica 은행사 API를 사용 해야한다</li></ul></li><li>대한민국 KRW 에서 미국 USD 로 계산 기능<ul><li>₩500,000 - &gt; $463.43</li><li>한국 -&gt; 미국 환율을 정보는 신한 은행사 API를 사용 해야한다.</li></ul></li></ul><h2><span id="도메인">도메인</span></h2><ul><li>보내는 곳 , 받는 곳 이 있다고 생각하고 도메인을 생각 했습니다.</li></ul><h3><span id="remittance-송금">Remittance : 송금</span></h3><ul><li>금액을 송금합니다.</li><li>금액을 송금 하기 위해서 보내는 <strong>금액</strong>, 보내는 금액의 <strong>통화</strong>, 보내는<strong>나라</strong>는 필수 입니다.</li></ul><h3><span id="deposit-입금">Deposit : 입금</span></h3><ul><li>금액을 입금 받습니다.</li><li>금액을 입금 받기 하기 위해서 받는 <strong>금액</strong>, 받는 금액의 <strong>통화</strong>, 받는<strong>나라</strong>는 필수 입니다.</li></ul><h3><span id="공통-키워드">공통 키워드</span></h3><ul><li>… 위해서 받는 <strong>금액</strong>, 받는 금액의 <strong>통화</strong>, 받는<strong>나라</strong>는 필수 입니다.</li></ul><h3><span id="money">Money</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Money</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> amount;</div><div class="line">    <span class="keyword">private</span> Currency currency;</div><div class="line">    <span class="keyword">private</span> Locale locale;</div><div class="line">    <span class="keyword">private</span> String amountCurrencyFormat;</div><div class="line"></div><div class="line">    <span class="meta">@Builder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Money</span><span class="params">(<span class="keyword">double</span> amount, Currency currency, Locale locale)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.amount = amount;</div><div class="line">        <span class="keyword">this</span>.currency = currency;</div><div class="line">        <span class="keyword">this</span>.locale = locale;</div><div class="line">        <span class="keyword">this</span>.amountCurrencyFormat = formattingCurrency();</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>공통 키워드를 만족시키는 클래스를 작성 헸습니다.<ul><li>받는 <strong>금액</strong> : <code>amount</code>, 받는 금액의 <strong>통화</strong> : <code>currency</code>,  받는<strong>나라</strong> : <code>locale</code></li></ul></li><li>돈을 받는 곳, 보내는 곳 모든곳에서 사용하는 <strong>자료형(클래스)로 만들어 재사용 성을높일 수 있습니다.</strong></li><li>아래 코드 보다 확실히 비지니스를 이해하기 쉽고 관리하기 편합니다.</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">double</span> sendMoney;</div><div class="line"><span class="keyword">private</span> <span class="keyword">double</span> receiveMoney;</div><div class="line"><span class="keyword">private</span> Currency sendCurrency;</div><div class="line"><span class="keyword">private</span> Currency receiveCurrency;</div><div class="line"><span class="keyword">private</span> Locale sendLocale;</div><div class="line"><span class="keyword">private</span> Locale receiveLocale;</div></pre></td></tr></table></figure><h3><span id="transaction">Transaction</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Transaction</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Remittance remittance;</div><div class="line">    <span class="keyword">private</span> Deposit deposit;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Remittance</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Money money;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Deposit</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Money money;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Money</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> amount;</div><div class="line">    <span class="keyword">private</span> Currency currency;</div><div class="line">    <span class="keyword">private</span> Locale locale;</div><div class="line">    <span class="keyword">private</span> String amountCurrencyFormat;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>거래를 하기 위해서 송금, 입금이 필요 하다는 것을 쉽게 알 수 있습니다.</li><li>송금, 입금을 하기 위해서는 Money라는 타입이 필요합니다.</li><li>Money 타입에는 거래를 하기 위한 필요 데이터들이 모여 있습니다.</li></ul><h2><span id="요구사항-구현">요구사항 구현</span></h2><p>도메인도 작업이 어느정도 완료됬으니 요구사항에 필요한 기능을 개발해 보겠습니다.</p><h3><span id="bankofamericaapi">BankOfAmericaApi</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankOfAmericaApi</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> ApiCommonDto.<span class="function">ExchangeRate <span class="title">consumeExchangeRate</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//실제 은행사 API 호출해서 환율 정보를 가져오는 코드가 작성 됩니다.</span></div><div class="line">        <span class="keyword">return</span> ApiCommonDto.ExchangeRate.builder()</div><div class="line">                .rate(<span class="number">1059.999963</span>)</div><div class="line">                .corridor(<span class="string">"US_TO_KOR"</span>)</div><div class="line">                .corridor(<span class="string">"BANK_OF_AMERICA"</span>)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Bank Of America 은행사 API 호출을 담당하는 클래스입니다. 이 클래스를 통해서 KRW -&gt; USD 환율 정보를 가져옵니다.</li></ul><h3><span id="shinhanapiclass">ShinhanApi.class</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShinhanApi</span> </span>&#123;</div><div class="line">    <span class="keyword">public</span> ApiCommonDto.<span class="function">ExchangeRate <span class="title">consumeExchangeRate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//실제 은행사 API 호출해서 환율 정보를 가져오는 코드가 작성 됩니다.</span></div><div class="line">        <span class="keyword">return</span> ApiCommonDto.ExchangeRate.builder()</div><div class="line">                .rate(<span class="number">0.000943</span>)</div><div class="line">                .corridor(<span class="string">"KOR_TO_US"</span>)</div><div class="line">                .company(<span class="string">"Shinhan"</span>)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>신한 은행사 API 호출을 담당하는 클래스입니다. 이 클래스를 통해서 통해서  USD -&gt; KRW 환율  정보를 가져옵니다.</li></ul><h3><span id="exchangerate">ExchangeRate</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ExchangeRate</span> </span>&#123;</div><div class="line">    ApiCommonDto.<span class="function">ExchangeRate <span class="title">getExchangeRate</span><span class="params">(CalculatorDto.Transaction transaction)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>환율 정보를 가져오는 것을 추상화 시킨 인터페이스입니다.</li><li><code>getExchangeRate</code> 추상화 메소드를 통해서 하위의 세부 구현체에서 구현하게 됩니다.</li></ul><h3><span id="shinhanexchangerate">ShinhanExchangeRate</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShinhanExchangeRate</span> <span class="keyword">implements</span> <span class="title">ExchangeRate</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> ApiCommonDto.<span class="function">ExchangeRate <span class="title">getExchangeRate</span><span class="params">(CalculatorDto.Transaction transaction)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> shinhanApi.consumeExchangeRate();</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BankOfAmericaExchangeRate</span> <span class="keyword">implements</span> <span class="title">ExchangeRate</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> ApiCommonDto.<span class="function">ExchangeRate <span class="title">getExchangeRate</span><span class="params">(CalculatorDto.Transaction transaction)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> bankOfAmericaApi.consumeExchangeRate();</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>ShinhanApi, BankOfAmericaApi 클래스를 이용해서 환율 정보를 가져옵니다.(실제 인행사를 호출하는 코드가 아닙니다. 그냥 하드코딩된 값을 리턴합니다.)</li><li>ExchangeRate 인터페이스를 구현하고 있습니다. 이 것을 통해서 IoC 효과를 갖을 수 있습니다.</li><li><strong>처음에는 BankOfAmericaApi, ShinhanApi 클래스들을 인터페이스를 통해서 묶으려고 했습니다. 하지만 그것은 잘못된 설계라고 생각합니다. 객체는 자율적인 책임을 져야 하는데 인터페이스로 묶으면 객체들의 자율적인 책임을 방해하게 됩니다. 그 이유는 인터페이스의 추상화 메소드로 인해서 리턴해야할 값과 메게변수로 값이 고정됩니다. 이렇게 고정되면 은행사마다 API 호출 시 인증에 필요한 값, 넘겨야 할 데이터 등등 이 다를 수밖에 없는데 이것을 추상화시킨다는 것 자체가 바람직하지 않습니다. 예를 들어 다른 은행사의 API가 추가되면 또 그때 추상화(리턴 타입의 변경, 매개변수 변경)가 다시 요구됩니다.</strong></li></ul><h2><span id="calculator">Calculator</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="keyword">public</span> CalculatorDto.<span class="function">Res <span class="title">calculate</span><span class="params">(CalculatorDto.Transaction transaction)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> ExchangeRate exchangeRate = getInstanceByLocale(transaction); <span class="comment">//의존성 주입</span></div><div class="line">        <span class="keyword">final</span> <span class="keyword">double</span> remittanceAmount = transaction.getRemittance().getMoney().getAmount();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">double</span> rate = exchangeRate.getExchangeRate(transaction).getRate(); <span class="comment">//주입받은 의존성으로 파트너 은행사의 환율 정보 가져옴</span></div><div class="line"></div><div class="line">        calculateDepositAmount(transaction.getDeposit(), remittanceAmount, rate); <span class="comment">// 환율 정보 기반으로 입금액 계산</span></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">private</span> ExchangeRate <span class="title">getInstanceByLocale</span><span class="params">(CalculatorDto.Transaction transaction)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Locale locale = transaction.getRemittance().getMoney().getLocale();</div><div class="line">        <span class="keyword">return</span> exchangeRateFactory.getInstanceByLocale(locale);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>실제로 환율 정보를 계산을 담당하는 클래스입니다.</li><li><code>getInstanceByLocale</code> 메소드를 통해서 보내는 국가가 어디냐에 따라서 <code>ExchangeRate</code>에 알맞는 은행 API가 의존성 주입됩니다.</li><li>은행이 추가되더라도 <code>getInstanceByLocale</code> 메서드에 의존성만 추가해주면 <strong>OCP</strong>를 준수하는 코드가 됩니다.</li><li>이렇게 IoC를 이용해서 의존성 주입이 일어나느 것이 확장 및 유지보수에도 엄청난 장점이 있습니다. 이런 코드가 없다면 if, if, if 이 지속적으로 추가되며 앞에 작성된 if문을 이해하고 알맞는 위치에 또 if문을 추가해야 하는 악순환이 시작됩니다.</li></ul><h2><span id="usd-gt-kor-계산">USD -&gt; KOR 계산</span></h2><h3><span id="request">Request</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl -X GET \</div><div class="line">  &apos;http://localhost:8080/calculator?remittanceAmount=1000&amp;remittanceCurrency=USD&amp;remittanceLocal=US&amp;depositAmount=0&amp;depositCurrency=KRW&amp;depositLocal=KR&apos; \</div><div class="line">  -H &apos;cache-control: no-cache&apos; \</div><div class="line">  -H &apos;postman-token: a1e724a0-0ec9-195b-b744-221b3f238c3b&apos;</div></pre></td></tr></table></figure><h3><span id="response">Response</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"remittance"</span>: &#123;</div><div class="line">    <span class="attr">"money"</span>: &#123;</div><div class="line">      <span class="attr">"amount"</span>: <span class="number">1000</span>,</div><div class="line">      <span class="attr">"currency"</span>: <span class="string">"USD"</span>,</div><div class="line">      <span class="attr">"locale"</span>: <span class="string">"en_US"</span>,</div><div class="line">      <span class="attr">"amountCurrencyFormat"</span>: <span class="string">"$1,000.00"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"deposit"</span>: &#123;</div><div class="line">    <span class="attr">"money"</span>: &#123;</div><div class="line">      <span class="attr">"amount"</span>: <span class="number">1059999.963</span>,</div><div class="line">      <span class="attr">"currency"</span>: <span class="string">"KRW"</span>,</div><div class="line">      <span class="attr">"locale"</span>: <span class="string">"ko_KR"</span>,</div><div class="line">      <span class="attr">"amountCurrencyFormat"</span>: <span class="string">"￦1,060,000"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"exchangeRate"</span>: &#123;</div><div class="line">    <span class="attr">"value"</span>: <span class="number">1059.999963</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="krw-gt-usd-계산">KRW -&gt; USD 계산</span></h2><h3><span id="request">Request</span></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl -X GET \</div><div class="line">  &apos;http://localhost:8080/calculator?remittanceAmount=1000000&amp;remittanceCurrency=KRW&amp;remittanceLocal=KR&amp;depositAmount=0&amp;depositCurrency=USD&amp;depositLocal=US&apos; \</div><div class="line">  -H &apos;cache-control: no-cache&apos; \</div><div class="line">  -H &apos;postman-token: 33800725-5db0-1eca-926b-e0269da9d28c&apos;</div></pre></td></tr></table></figure><h3><span id="response">Response</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"remittance"</span>: &#123;</div><div class="line">        <span class="attr">"money"</span>: &#123;</div><div class="line">            <span class="attr">"amount"</span>: <span class="number">1000000</span>,</div><div class="line">            <span class="attr">"currency"</span>: <span class="string">"KRW"</span>,</div><div class="line">            <span class="attr">"locale"</span>: <span class="string">"ko_KR"</span>,</div><div class="line">            <span class="attr">"amountCurrencyFormat"</span>: <span class="string">"￦1,000,000"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"deposit"</span>: &#123;</div><div class="line">        <span class="attr">"money"</span>: &#123;</div><div class="line">            <span class="attr">"amount"</span>: <span class="number">943</span>,</div><div class="line">            <span class="attr">"currency"</span>: <span class="string">"USD"</span>,</div><div class="line">            <span class="attr">"locale"</span>: <span class="string">"en_US"</span>,</div><div class="line">            <span class="attr">"amountCurrencyFormat"</span>: <span class="string">"$943.00"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"exchangeRate"</span>: &#123;</div><div class="line">        <span class="attr">"value"</span>: <span class="number">0.000943</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/nquQoeh.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;예제-코드&quot;&gt;예제 코드&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;예제 코드는 &lt;a href=&quot;https://github.com/chees
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="OOP" scheme="https://cheese10yun.github.io/tags/OOP/"/>
    
  </entry>
  
  <entry>
    <title>JPA-Embedded</title>
    <link href="https://cheese10yun.github.io/jpa-embedded/"/>
    <id>https://cheese10yun.github.io/jpa-embedded/</id>
    <published>2018-03-28T15:00:00.000Z</published>
    <updated>2018-03-28T16:31:07.585Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="embedded-type">Embedded Type</span></h2><p><strong>JPA에서는 새로운 값 타입을 직접 정의해서 사용 할 수 있습니다. 배송 관련 서비스에서 발송인(Sender), 수취인(Receiver)가 있을 경우 중복적으로 주소에 관련 칼럼들이 요구 됩니다. 이러한 중복적인 칼럼들을 자료형으로 규합해서 훨씬더 객체지향적으로 풀어 나갈 수 있을 거같습니다.</strong></p><h2><span id="receiver-클래스">Receiver 클래스</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">private</span> Name name;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">private</span> Address address;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">private</span> PhoneNumber phoneNumber;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>Address</code>, <code>Name</code> 새로운 타입을 직접 정의 했습니다.</li><li><code>@Embedded</code> 어노테이션을 통해서 값 타입을 사용한다고 명시 했습니다.</li></ul><h2><span id="address-클래스">Address 클래스</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Embeddable</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"city"</span>)</div><div class="line">    <span class="keyword">private</span> String city;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"street"</span>)</div><div class="line">    <span class="keyword">private</span> String street;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"zip_code"</span>)</div><div class="line">    <span class="keyword">private</span> String zipCode;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>Embeddable</code> 어노테이션을 통해서 값 타입을 사용한다고 명시 했습니다.</li><li>엔티티 객체와 거의 비슷합니다.</li></ul><h2><span id="receiver-클래스">Receiver 클래스</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">private</span> Name name;</div><div class="line"></div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="keyword">private</span> Address address;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>Receiver</code>클래스에서 직접 정의한 <code>Address</code>를 쉽게 사용할 수 있습니다.</li></ul><h2><span id="name-클래스">Name 클래스</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Embeddable</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Name</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"first_name"</span>)</div><div class="line">    <span class="keyword">private</span> String first;</div><div class="line"></div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"last_name"</span>)</div><div class="line">    <span class="keyword">private</span> String last;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFullName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.first + <span class="keyword">this</span>.last;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>클래로로 정의하면 다양한 부수적인 효과를 적용 시킬 수 있습니다.</li><li>정말 간단한 예로 <code>getFullName()</code> 메소드로 full name을 얻을 수 있습니다. 해당 모델에 맞는 다양한 함수를 정의 할 수 있습니다.</li></ul><h2><span id="attributeoverride-재정의">@AttributeOverride 재정의</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Embedded</span></div><div class="line">    <span class="meta">@AttributeOverrides</span>(&#123;</div><div class="line">            <span class="meta">@AttributeOverride</span>(name = <span class="string">"city"</span>, column = <span class="meta">@Column</span>(name = <span class="string">"sender_city"</span>)),</div><div class="line">            <span class="meta">@AttributeOverride</span>(name = <span class="string">"street"</span>, column = <span class="meta">@Column</span>(name = <span class="string">"sender_street"</span>)),</div><div class="line">            <span class="meta">@AttributeOverride</span>(name = <span class="string">"zip_code"</span>, column = <span class="meta">@Column</span>(name = <span class="string">"sender_zip_code"</span>))</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">private</span> Address address;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>임베디드 타입에 정의한 매핑정보를 재정의 하려면 <code>@AttributeOverride</code>를 사용하면 됩니다.</li><li>해당 칼럼은 <code>sender_city</code>, <code>sender_street</code>, <code>sender_zip_code</code> 으로 생성됩니다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;embedded-type&quot;&gt;Embedded Type&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;JPA에서는 새로운 값 타입을 직접 정의해서 사용 할 수 있습니다. 배송 관련 서비스에서 발송인(Sender), 수취인(Receive
      
    
    </summary>
    
    
      <category term="JPA" scheme="https://cheese10yun.github.io/tags/JPA/"/>
    
      <category term="Embedded" scheme="https://cheese10yun.github.io/tags/Embedded/"/>
    
  </entry>
  
  <entry>
    <title>Spring OOP 프로그래밍 예제(1)</title>
    <link href="https://cheese10yun.github.io/spring-notificaion-oop/"/>
    <id>https://cheese10yun.github.io/spring-notificaion-oop/</id>
    <published>2018-03-23T15:00:00.000Z</published>
    <updated>2018-03-30T14:46:51.809Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/PI6g3ku.png" alt=""></p><p><strong>해당 요구사항에 맞는 객체지향 프로그래밍을 진행하고 해당 코드를 SOLD 원칙에 맞게 제 나름대로 해석 해보았습니다. 아직 배우는 단계라 너무 부족합니다. 지적 사항을 댓글로 남겨주시면 정말로 감사하겠습니다.</strong> 위사진은 해당 셈플코드의 간략한 클래스 다이어그램 입니다.</p><h2><span id="예제-코드">예제 코드</span></h2><p><a href="https://github.com/cheese10yun/blog-sample/tree/master/notification" rel="external nofollow noopener noreferrer" target="_blank">blog-sample </a></p><h2><span id="요구사항">요구사항</span></h2><ul><li>배송이 완료 됬을 경우 사용자가 등록한 알림을 받는다.</li><li>알림에는 SMS, Kakao, Email 이 있다</li><li>알람은 지속적으로 추가 될 가능 성이 높아 보인다.</li></ul><h2><span id="delivery-domain">Delivery Domain</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Delivery</span> </span>&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    <span class="meta">@OneToMany</span>(fetch = FetchType.LAZY)</div><div class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"transfer_id"</span>)</div><div class="line">    <span class="keyword">private</span> List&lt;DeliveryNotificationType&gt; deliveryNotificationTypes = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="meta">@OneToOne</span>(targetEntity = Sender.class)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"sender_id"</span>)</div><div class="line">    <span class="keyword">private</span> Sender sender;</div><div class="line"></div><div class="line">    <span class="meta">@OneToOne</span>(targetEntity = Receiver.class)</div><div class="line">    <span class="meta">@Column</span>(name = <span class="string">"receiver_id"</span>)</div><div class="line">    <span class="keyword">private</span> Receiver receiver;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>Delivery는 Sender(발송인), Receiver(수신자)와 연관관계를 맺는다.</li><li>Delivery는 배송이 안료되면 수신자에게 보낼 알림 타입의 리스트 DeliveryNotificationType와 연관관계를 맺는다</li></ul><h2><span id="deliverynotificationsender-interface">DeliveryNotificationSender Interface</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DeliveryNotificationSender</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">send</span><span class="params">(DeliveryMessageDto.Message dto)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>배송 노티를 보내는 인터페이스</li><li>dto 클래스로 유연하게 받을 수 있게 처리</li></ul><h2><span id="deliverykakaonotificationsender-구현-클래스">DeliveryKakaoNotificationSender 구현 클래스</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryKakaoNotificationSender</span> <span class="keyword">implements</span> <span class="title">DeliveryNotificationSender</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DeliveryMessageDto.Message dto)</span> </span>&#123;</div><div class="line">        kakaoNotificaionSender.create(buildKaKaoNotificationDto(dto));</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>배송 관련 카카오 메시지를 담당하는 클래스</li><li><code>DeliveryNotificationSender</code> 인터페이스를 <code>implements</code> 해서 자신이 <code>send</code> 메서드를 구현 해야하는 책임을 명확하게 알 수 있다.</li><li><code>KakaoNotificaionSender</code> 클래스를 이용해서 실제 구체적으로 어떻게 보내지는지 모르더라도 상관 없다.</li><li>테이블에 insert 되고 그 데이터 기반으로 카카오에서 메시지를 전송해 준다.</li></ul><h2><span id="deliverysmsnotificationsender-구현-클래스">DeliverySmsNotificationSender 구현 클래스</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliverySmsNotificationSender</span> <span class="keyword">implements</span> <span class="title">DeliveryNotificationSender</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(DeliveryMessageDto.Message dto)</span> </span>&#123;</div><div class="line">        smsNotificationSender.sendSMS(buildSmsMessageDto(dto));</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>배송 관련 카카오 메시지를 담당하는 클래스이다.</li><li><code>DeliveryNotificationSender</code> 인터페이스를 <code>implements</code> 해서 자신이 <code>send</code> 메서드를 구현 해야하는 책임을 명확하게 알 수 있다.</li><li><code>SmsNotificationSender</code> 클래스를 이용해서 메시지를 보내고 있어 실제 구체적으로 어떻게 보내지는지 모르더라도 상관 없다.</li><li>해당 업체 API 호출을 통해서 문자전송이 진행된다. 카카오 메시지 전송과는 다르다. 하지만 <code>DeliveryNotificationSender</code> 인터페이스를 통해서  <code>send</code>라는 동일한 책임을 갖게 된다.</li></ul><h2><span id="deliverynotificationsendermanager">DeliveryNotificationSenderManager</span></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeliveryNotificationSenderManager</span> </span>&#123;</div><div class="line">    ...</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(Delivery delivery)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> List&lt;DeliveryNotificationType&gt; notifications = delivery.getDeliveryNotificationTypes();</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!notifications.isEmpty())</div><div class="line">            <span class="keyword">for</span> (DeliveryNotificationType type : notifications)</div><div class="line">                getInstanceByType(type).send(buildMessage(delivery));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> DeliveryNotificationSender <span class="title">getInstanceByType</span><span class="params">(DeliveryNotificationType type)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> deliveryNotificationSenderFactory.getInstanceByType(type.getType());</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>사용자가 등록한 알림을 전송</li><li><strong><code>getInstanceByType</code> 팩토리 메소드를 통해서 해당 타입에 맞는 인스턴스가 의존성 주입</strong><ul><li><strong>type이 SMS 일 경우 <code>DeliverySmsNotificationSender</code> 인스턴스 주입</strong></li><li><strong><code>DeliverySmsNotificationSender</code> 인스턴스 <code>send</code>(SMS 전송) 메서드 실행</strong></li></ul></li><li><strong><em>컴파일 단계에서는 알림을 보내는 것이 <code>DeliveryNotificationSender</code> 인터페이스를 바라보지만 런타임 단계에서는 그것이 역전되 IoC 발생</em></strong></li></ul><h2><span id="solid">SOLID</span></h2><p>아직 배워가는 단계라 많이 부족 하지만 나름대로 SOLD 원측에 의해서 정리 해보겠습니다.</p><h3><span id="srp-단일-책임-원칙">SRP : 단일 책임 원칙</span></h3><ul><li>객체는 오직 하나의 변경의 이유만을 갖게되 었습니다. 배송 관련 카카오 전송시 세부 메시지 형태나, 포함될 정보가 달라질 경우 <code>DeliveryKakaoNotificationSender</code> 클래스만 변경 하면됩니다.</li><li>다른 곳에서 다른형태로 카카오 메시지를 전송하고 있는 로직에 영향을 미치지 않습니다.</li></ul><h3><span id="ocp-개방-폐쇄-원칙">OCP : 개방-폐쇄 원칙</span></h3><ul><li>확장에는 열려 있습니다.<ul><li>새로운 배송 라인 알림이 추가 된다고 하면 <code>DeliveryNotificationSender</code> 인터페이스를 <code>implements</code> 하여 <code>send</code> 메서드만 세부 구현 하면됩니다.</li><li>IoC를 이용해서 <code>send</code> 메서드를 다형성으로 해결하지 않았다면 알림이 추가 될때 마다 <code>if</code> 으로 무슨 알림이면 무슨 <code>send</code>를 실행 하라는 반복 적인 코드들이 나오게 됩니다.</li><li><code>if</code>은 직관적으로 이해하기 편하 코드지만 유지보수하기는 어렵습니다. 만약 10개 알림이 있고 11번째 알림을 추가 한다고 가정했을 때 앞에 작성된 <code>if</code>문들을 이해하고 또 11 번째 <code>if</code>문을 추가해야 합니다. 코드는 작성하는 시간보다 읽히는 시간이 더 많습니다.</li></ul></li><li>변경에는 닫혀 있습니다.<ul><li>새로운 배송 알림이 추가 되더라도 기존 코드의 변경은 거의 없습니다. 팩토리 메소드에 새로운 배송 알림을 담당하는 인스턴스를 추가 하기만 하면 됩니다.</li><li>위에서 언급했듯이 새로운 배송 알림이 추가되면 해당 코드에 가서 <code>if</code>을 통한 <code>send</code> 메시지를 작성할 필요가 없습니다.</li></ul></li></ul><h3><span id="lsp-리스코프-치환-원칙">LSP : 리스코프 치환 원칙</span></h3><ul><li>서브 타입은 언제나 슈퍼타입을 교체 할 수 있어야 한다.</li><li>구현 클래스들은 모두 <code>DeliveryNotificationSender</code>인터페이스의 <code>send</code> 메서드를 구현 하고 있어 교체가 가능합니다.</li></ul><h3><span id="isp-인터페이스-분리-원칙">ISP : 인터페이스 분리 원칙</span></h3><ul><li>하위 클래스들에서 사용하지 않은 의존성을 가지고 있지 않고 있습니다.</li></ul><h3><span id="dip-의존성-역전-원칙">DIP : 의존성 역전 원칙</span></h3><ul><li><code>DeliveryNotificationSenderManager</code> 클래스에서 팩토리 메소드를 통해서  <code>DeliveryNotificationSender</code>의 새부 인스턴스를 각 타입에 맞게 변경 해주고 있습니다.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/PI6g3ku.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;해당 요구사항에 맞는 객체지향 프로그래밍을 진행하고 해당 코드를 SOLD 원칙에 맞게 제 나름대로 해석 해보았습니다. 아직 배우
      
    
    </summary>
    
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
      <category term="OOP" scheme="https://cheese10yun.github.io/tags/OOP/"/>
    
      <category term="SOLID" scheme="https://cheese10yun.github.io/tags/SOLID/"/>
    
  </entry>
  
  <entry>
    <title>인텔리제이 Todo 활용법</title>
    <link href="https://cheese10yun.github.io/intellij-todo/"/>
    <id>https://cheese10yun.github.io/intellij-todo/</id>
    <published>2018-03-20T15:00:00.000Z</published>
    <updated>2018-03-21T12:53:58.051Z</updated>
    
    <content type="html"><![CDATA[<p>개발할 때 생각나는 사소 한 것들을 이슈 트래킹이나 메모장 같은 곳에 작성하기엔 번거롭고 올려 등록해도 잘 찾아보지 않는 경우가 많습니다. 그래서 저 같은 경우는 아래 그림과 같이 생각나는 모든 것들을 todo로 갈겨 놓습니다. 저는 개발 할 때 IDE에서 벗어나는 걸 싫어해서 웬만한 것들 IDE에서 작업을 진행합니다. 이러한 문제를 해결하는 인텔리제이 팁을 포스팅해보겠습니다.</p><h2><span id="인텔리제이-todo-활용법">인텔리제이 Todo 활용법</span></h2><p><img src="https://i.imgur.com/74N8oYR.png" alt=""></p><p>위 그림과 같이 생각 나는 것들을 날짜 + 내용 + 작성자 이름 형식으로 Todo로 등록합니다. 날짜 정보와 누가 작성했는 지 는 나중에 Todo를 추적할 때 많은 도움을 줍니다.</p><h2><span id="todo-전체-검색">TODO 전체 검색</span></h2><p><img src="https://i.imgur.com/AgvhG70.png" alt=""></p><p>개발 중에 Todo 전레 검색을 통해서 혹시라도 놓친 작업들이 있나 검색해 볼 수 있습니다. 단축키는 스크린샷에 나와 있습니다.</p><h2><span id="커밋할-때-한-번-더-검사">커밋할 때 한 번 더 검사</span></h2><p><img src="https://i.imgur.com/ZTW8jIq.png" alt=""></p><p>인텔리제이를 통해서 커밋 작업을 진행하게 되면 다양한 지원을 받을 수 있습니다. 그중에 하나가 TODO 검사 입니다. 왼쪽 중단에 <code>Check TODO</code> 라는 항목을 체크 하고 커밋을 하게 되면 아래 그림과 같이 표시 됩니다.</p><p><img src="https://i.imgur.com/x5yMIgW.png" alt=""></p><p>작성된 TODO가 있으면 커밋전에 사용자에게 알려줍니다. 남은 작업들을 확인하려면 <code>Review</code> 버튼을 누를 경우 위 처럼 작성된 TODO 리스트들이 출력됩니다. 혹시라도 잊어 버린 TODO를 커밋전에 확인 할 수 있습니다. <code>Before Commit</code> 기능은 이 이외도 많은 기능이 있는데 추후 포스팅에서 정리 해보겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;개발할 때 생각나는 사소 한 것들을 이슈 트래킹이나 메모장 같은 곳에 작성하기엔 번거롭고 올려 등록해도 잘 찾아보지 않는 경우가 많습니다. 그래서 저 같은 경우는 아래 그림과 같이 생각나는 모든 것들을 todo로 갈겨 놓습니다. 저는 개발 할 때
      
    
    </summary>
    
    
      <category term="IntelliJ" scheme="https://cheese10yun.github.io/tags/IntelliJ/"/>
    
      <category term="Todo" scheme="https://cheese10yun.github.io/tags/Todo/"/>
    
  </entry>
  
  <entry>
    <title>Spring 으로 초간단 Slack Message 보내기</title>
    <link href="https://cheese10yun.github.io/slack-bot-spring/"/>
    <id>https://cheese10yun.github.io/slack-bot-spring/</id>
    <published>2018-03-17T17:00:00.000Z</published>
    <updated>2018-05-02T15:33:59.828Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="프로젝트-설명">프로젝트 설명</span></h2><p><strong><a href="https://github.com/cheese10yun/spring-boot-slack-notificaion" rel="external nofollow noopener noreferrer" target="_blank">프로젝트 소스</a></strong></p><p>Spring boot 으로 초간단하게 Slack Message 보내기를 만들어 보는 프로젝트입니다. 현재는 별다른 기능은 없고 정말 단순하게 메세지 보내는 기능만 있습니다. <a href="https://github.com/cheese10yun/slackbot/tree/release-1" rel="external nofollow noopener noreferrer" target="_blank">branch : release-1</a>에 최대한 가져다 Copy &amp; Paste 하기 쉽게? 만들었습니다. (<s>조금이라도 도움이 되셨다면 start 좀…</s>) <a href="https://api.slack.com/docs/messages/builder" rel="external nofollow noopener noreferrer" target="_blank">Slack Message</a> 에서 제공하는 3 가지 메세지를 보내 보겠습니다. 포스팅 하단에 Curl로 실제 메세지를 보내 볼 수 있습니다.</p><p>앞으로는 프로젝트 특정 시나리오에서 Exception 발생 했을 경우 Slack 으로 에러 메세지가 오게 설정하는 등 다양한 에러 메세지를 Slack 통해서 받아 볼 수 있게 할 예정입니다.</p><h2><span id="slack-web-hook-연동">Slack Web Hook 연동</span></h2><p><img src="https://i.imgur.com/MBhHN58.png" alt=""></p><p>Incoming WebHooks 작업이 완료 됬다고 가정하고 포스팅을 진행하겠습니다. 만약 작업이 완료 되지 않았다면 해당 앱을 설치하고 특정 채널에 알림이 가게 설정해주세요</p><h2><span id="slack-message-유형">Slack Message 유형</span></h2><p>크게 3 가지 유형이 있습니다. 이미지 형태와 컨트롤러에서 보내 볼 수 받아 볼 수 있는 Curl 하나하나 살펴보습니다.</p><h3><span id="basic">Basic</span></h3><h4><span id="이미지">이미지</span></h4><p><img src="https://i.imgur.com/W6Gg0eV.png" alt=""></p><h4><span id="curl">Curl</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">curl -X POST \</div><div class="line">  http://localhost:8080/bot/basic \</div><div class="line">  -H &apos;cache-control: no-cache&apos; \</div><div class="line">  -H &apos;content-type: application/json&apos; \</div><div class="line">  -H &apos;postman-token: db7316c5-3358-0ccc-4de4-03bd7dd307c4&apos; \</div><div class="line">  -d &apos;&#123;</div><div class="line">&quot;text&quot;: &quot;text&quot;</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure><h3><span id="attachments">Attachments</span></h3><h4><span id="이미지">이미지</span></h4><p><img src="https://i.imgur.com/Povsbzl.png" alt=""></p><h4><span id="curl">Curl</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">curl -X POST \</div><div class="line">  http://localhost:8080/bot/button \</div><div class="line">  -H &apos;cache-control: no-cache&apos; \</div><div class="line">  -H &apos;content-type: application/json&apos; \</div><div class="line">  -H &apos;postman-token: 0b503f02-713c-afdc-8c8f-b007c7bfb882&apos; \</div><div class="line">  -d &apos;&#123;</div><div class="line">    &quot;text&quot;: &quot;Would you like to play a game?&quot;,</div><div class="line">    &quot;attachments&quot;: [</div><div class="line">        &#123;</div><div class="line">            &quot;text&quot;: &quot;Choose a game to play&quot;,</div><div class="line">            &quot;fallback&quot;: &quot;You are unable to choose a game&quot;,</div><div class="line">            &quot;callback_id&quot;: &quot;wopr_game&quot;,</div><div class="line">            &quot;color&quot;: &quot;#3AA3E3&quot;,</div><div class="line">            &quot;attachment_type&quot;: &quot;default&quot;,</div><div class="line">            &quot;actions&quot;: [</div><div class="line">                &#123;</div><div class="line">                    &quot;name&quot;: &quot;game&quot;,</div><div class="line">                    &quot;text&quot;: &quot;Chess&quot;,</div><div class="line">                    &quot;type&quot;: &quot;button&quot;,</div><div class="line">                    &quot;value&quot;: &quot;chess&quot;</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    &quot;name&quot;: &quot;game&quot;,</div><div class="line">                    &quot;text&quot;: &quot;Falken&apos;\&apos;&apos;s Maze&quot;,</div><div class="line">                    &quot;type&quot;: &quot;button&quot;,</div><div class="line">                    &quot;value&quot;: &quot;maze&quot;</div><div class="line">                &#125;,</div><div class="line">                &#123;</div><div class="line">                    &quot;name&quot;: &quot;game&quot;,</div><div class="line">                    &quot;text&quot;: &quot;Thermonuclear War&quot;,</div><div class="line">                    &quot;style&quot;: &quot;danger&quot;,</div><div class="line">                    &quot;type&quot;: &quot;button&quot;,</div><div class="line">                    &quot;value&quot;: &quot;war&quot;,</div><div class="line">                    &quot;confirm&quot;: &#123;</div><div class="line">                        &quot;title&quot;: &quot;Are you sure?&quot;,</div><div class="line">                        &quot;text&quot;: &quot;Wouldn&apos;\&apos;&apos;t you prefer a good game of chess?&quot;,</div><div class="line">                        &quot;ok_text&quot;: &quot;Yes&quot;,</div><div class="line">                        &quot;dismiss_text&quot;: &quot;No&quot;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure><h3><span id="message-buttons">Message buttons</span></h3><h4><span id="이미지">이미지</span></h4><p><img src="https://i.imgur.com/GEAfeAJ.png" alt=""></p><h4><span id="curl">Curl</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">curl -X POST \</div><div class="line">  http://localhost:8080/bot/attachment \</div><div class="line">  -H &apos;cache-control: no-cache&apos; \</div><div class="line">  -H &apos;content-type: application/json&apos; \</div><div class="line">  -H &apos;postman-token: 53d665f3-c1e7-064d-e957-525a703e3965&apos; \</div><div class="line">  -d &apos;&#123;</div><div class="line">  &quot;attachments&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;fallback&quot;: &quot;Required plain-text summary of the attachment.&quot;,</div><div class="line">      &quot;color&quot;: &quot;#36a64f&quot;,</div><div class="line">      &quot;pretext&quot;: &quot;Optional text that appears above the attachment block&quot;,</div><div class="line">      &quot;author_name&quot;: &quot;Bobby Tables&quot;,</div><div class="line">      &quot;author_link&quot;: &quot;http://flickr.com/bobby/&quot;,</div><div class="line">      &quot;author_icon&quot;: &quot;http://flickr.com/icons/bobby.jpg&quot;,</div><div class="line">      &quot;title&quot;: &quot;Slack API Documentation&quot;,</div><div class="line">      &quot;title_link&quot;: &quot;https://api.slack.com/&quot;,</div><div class="line">      &quot;text&quot;: &quot;Optional text that appears within the attachment&quot;,</div><div class="line">      &quot;fields&quot;: [</div><div class="line">        &#123;</div><div class="line">          &quot;title&quot;: &quot;Priority&quot;,</div><div class="line">          &quot;value&quot;: &quot;High&quot;</div><div class="line">        &#125;</div><div class="line">      ],</div><div class="line">      &quot;image_url&quot;: &quot;http://my-website.com/path/to/image.jpg&quot;,</div><div class="line">      &quot;thumb_url&quot;: &quot;http://example.com/path/to/thumb.png&quot;,</div><div class="line">      &quot;footer&quot;: &quot;Slack API&quot;,</div><div class="line">      &quot;footer_icon&quot;: &quot;https://platform.slack-edge.com/img/default_application_icon.png&quot;,</div><div class="line">      &quot;ts&quot;: 1</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;&apos;</div></pre></td></tr></table></figure><h2><span id="slack-message-만들기">Slack Message 만들기</span></h2><h3><span id="web-hook-연결">Web Hook 연결</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SlackTargetEnum &#123;</div><div class="line"></div><div class="line">    CH_BOT(<span class="string">"발급받은 Web Hook URL"</span>, <span class="string">"채널 이름"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String webHookUrl;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String channel;</div><div class="line"></div><div class="line"></div><div class="line">    SlackTargetEnum(String webHookUrl, String channel) &#123;</div><div class="line">        <span class="keyword">this</span>.webHookUrl = webHookUrl;</div><div class="line">        <span class="keyword">this</span>.channel = channel;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>슬랙 Web Hook URL 을 입력해주세요</p><h3><span id="dto-만들기">DTO 만들기</span></h3><p>Attachments JSON을 DTO로 만들어 보겠습니다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Attachments</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> List&lt;Attachment&gt; attachments;</div><div class="line"></div><div class="line">    <span class="meta">@Builder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Attachments</span><span class="params">(List&lt;Attachment&gt; attachments)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.attachments = attachments;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Getter</span></div><div class="line"><span class="meta">@NoArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Attachment</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String fallback;</div><div class="line">    <span class="keyword">private</span> String color;</div><div class="line">    <span class="keyword">private</span> String pretext;</div><div class="line">    <span class="keyword">private</span> String author_name;</div><div class="line">    <span class="keyword">private</span> String author_link;</div><div class="line">    <span class="keyword">private</span> String author_icon;</div><div class="line">    <span class="keyword">private</span> String title;</div><div class="line">    <span class="keyword">private</span> String title_link;</div><div class="line">    <span class="keyword">private</span> String text;</div><div class="line">    <span class="keyword">private</span> String image_url;</div><div class="line">    <span class="keyword">private</span> String thumb_url;</div><div class="line">    <span class="keyword">private</span> String footer;</div><div class="line">    <span class="keyword">private</span> String footer_icon;</div><div class="line">    <span class="keyword">private</span> Long ts;</div><div class="line">    <span class="keyword">private</span> List&lt;Field&gt; fields;</div><div class="line"></div><div class="line">    <span class="meta">@Builder</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Attachment</span><span class="params">(String fallback, String color, String pretext, String author_name, String author_link, String author_icon, String title, String title_link, String text, String image_url, String thumb_url, String footer, String footer_icon, Long ts, List&lt;Field&gt; fields)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.fallback = fallback;</div><div class="line">        <span class="keyword">this</span>.color = color;</div><div class="line">        <span class="keyword">this</span>.pretext = pretext;</div><div class="line">        <span class="keyword">this</span>.author_name = author_name;</div><div class="line">        <span class="keyword">this</span>.author_link = author_link;</div><div class="line">        <span class="keyword">this</span>.author_icon = author_icon;</div><div class="line">        <span class="keyword">this</span>.title = title;</div><div class="line">        <span class="keyword">this</span>.title_link = title_link;</div><div class="line">        <span class="keyword">this</span>.text = text;</div><div class="line">        <span class="keyword">this</span>.image_url = image_url;</div><div class="line">        <span class="keyword">this</span>.thumb_url = thumb_url;</div><div class="line">        <span class="keyword">this</span>.footer = footer;</div><div class="line">        <span class="keyword">this</span>.footer_icon = footer_icon;</div><div class="line">        <span class="keyword">this</span>.ts = ts;</div><div class="line">        <span class="keyword">this</span>.fields = fields;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="controller">Controller</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"attachment"</span>, method = POST)</div><div class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">attachment</span><span class="params">(@RequestBody SlackMessageDto.Attachments dto)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> ResponseEntity.ok(slackSenderManager.send(SlackTargetEnum.CH_BOT, dto));</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="slack-web-hook-보내기">Slack Web Hook 보내기</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">send</span><span class="params">(SlackTargetEnum target, Object object)</span> </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        restTemplate.postForEntity(target.getWebHookUrl(), writeValueAsString(object), String.class);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">        log.error(<span class="string">"Occur Exception: &#123;&#125;"</span>, e);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><strong>restTemplate 을 이용해서 컨트롤러에서 받은 DTO를 JSON으로 보내주고 있습니다.</strong></p><h2><span id="마무리">마무리</span></h2><p><strong>포스팅 내용을 대충 보시고 실제 코드를 보시는 게 더 빨리 이해하실 수 있을 거 같습니다.</strong> 최대한 간단하게 만들어서 처음 슬랙 봇을 만드시는 분이 편하게 가져다 쓰기 쉽게 만들어 봤습니다. 해당 프로젝트는 에러 발생시 Slack으로 메세징 받게 이어 나갈거 같습니다. Slack-Message 프로젝트로 다시 찾아 뵙겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;프로젝트-설명&quot;&gt;프로젝트 설명&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://github.com/cheese10yun/spring-boot-slack-notificaion&quot; rel=&quot;external n
      
    
    </summary>
    
    
      <category term="Bot" scheme="https://cheese10yun.github.io/tags/Bot/"/>
    
      <category term="Slack" scheme="https://cheese10yun.github.io/tags/Slack/"/>
    
      <category term="Spring" scheme="https://cheese10yun.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>인텔리제이 Live Template</title>
    <link href="https://cheese10yun.github.io/intellij-live-template/"/>
    <id>https://cheese10yun.github.io/intellij-live-template/</id>
    <published>2018-03-17T15:00:00.000Z</published>
    <updated>2018-03-18T04:23:12.436Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="intellij-live-template">IntelliJ Live Template</span></h2><p>IntelliJ Live Template 이란 코드 템플릿을 미리 지정해서 편하게 코드를 작성할 수 있는 기능입니다. 등록 방법은 아래와 같습니다.</p><h2><span id="template-등록">Template 등록</span></h2><p><img src="https://i.imgur.com/H4qR4aa.png" alt=""></p><ol><li>IntelliJ Preferences</li><li>template 검색</li><li>등록할 스타일 작성 (Markdown template를 등록할 경우 Markdown 항목에 추가)</li><li>Abbreviation: Template key 등록, Description: 간단한 설명 작성</li><li>추가 하고 싶은 Template 등록</li><li><strong>하단의 Define에 사용할곳 반드시 정의</strong> (Markdown 파일에서 사용할 것임으로 Markdown 선책)</li></ol><h2><span id="template-사용법">Template 사용법</span></h2><p><img src="https://i.imgur.com/mZuDMdU.gif" alt=""></p><ul><li>위에서 작성한 <code>key</code>값을 입력하면 Template 불러옵니다.</li></ul><h2><span id="template">Template</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">layout: post</div><div class="line">title: $END$</div><div class="line">subtitle:</div><div class="line">catalog: true</div><div class="line">header-img: https://i.imgur.com/avC1Xor.jpg</div><div class="line">thumbnail:</div><div class="line">date: $date$</div><div class="line">tags:</div><div class="line">  -</div><div class="line">---</div></pre></td></tr></table></figure><ul><li><code>$END$</code> :  Template 을 보시면 코드가 완성되고 포커싱이 <code>title :</code> 쪽으로 가시는 것 볼 수 있씁니다. 키워드를 사용하면 Template 작성후 커서가 자동 이동 됩니다.</li><li><code>$date$</code> : 현재 시간을 자동으로 입력하게 합니다. (IntelliJ에서 작성하면 표시나 WebStorm 에서는 표시가 안되네요)</li></ul><h2><span id="자주사용하는-template">자주사용하는 Template</span></h2><p><img src="https://i.imgur.com/iQ40QYK.gif" alt=""></p><p>제가 가장 많이 사용하는 Template 입니다. <code>TODO</code> 입니다. 코드를 작성하면 추가적으로 필요한 작업, 기타등등 작업들은 모두 TODO로 적어 놓습니다. 해당 날짜와 작성인이 자동으로 작성되는 것을 확인할 수 있습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;intellij-live-template&quot;&gt;IntelliJ Live Template&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;IntelliJ Live Template 이란 코드 템플릿을 미리 지정해서 편하게 코드를 작성할 수 있는 기능입니다
      
    
    </summary>
    
    
  </entry>
  
</feed>
