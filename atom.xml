<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yun Blog</title>
  <icon>https://www.gravatar.com/avatar/d313a2c442931458ed624a3999d75011</icon>
  <subtitle>기술 블로</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://cheese10yun.github.io/"/>
  <updated>2017-10-14T07:48:13.292Z</updated>
  <id>https://cheese10yun.github.io/</id>
  
  <author>
    <name>Yun</name>
    <email>cheese10yun@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Package.json 파일로 API 버전 설정</title>
    <link href="https://cheese10yun.github.io/packageFile-API/"/>
    <id>https://cheese10yun.github.io/packageFile-API/</id>
    <published>2017-10-13T16:31:24.000Z</published>
    <updated>2017-10-14T07:48:13.292Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="프로젝트-구성">프로젝트 구성</span></h2><p><code>package.json</code> 파일로 API URL을 설정하는 간단한 방법을 포스팅 해보겠습니다.</p><p><img src="https://i.imgur.com/cNL3e5B.png" alt=""></p><p>기본 프로젝트 구성은 WebStorm 으로 Node 프로젝트를 생성한 구조 입니다.</p><h2><span id="pacakgejson-파일">pacakge.json 파일</span></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"api-version"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"node ./bin/www"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>npm</code> 의존성 모듈을 관리하는 <code>pacakge.json</code> 내용입니다. 해당 내용을 보시면 <code>version</code> 이라는 항목이 있습니다. 해당 프로젝트의 버전을 표시하는 정보이며 초기 설정은 <code>0.0.0</code> 입니다. 이 <code>version</code> 을 활용하여 URI path의 API 버전 설정을 진행하겠습니다.</p><h2><span id="appjs">app.js</span></h2><p>프로젝트 구조에 따라 다소 차이가 있겠지만 각종 라운팅 설정 및 미들웨어 설정하는 <code>.js</code> 파일에서 설정을 진행하겠습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> packageFile = <span class="built_in">require</span>(<span class="string">'./package.json'</span>);</div><div class="line"><span class="keyword">const</span> API_VERSION = packageFile.version.split(<span class="string">'.'</span>).shift();</div><div class="line"><span class="keyword">const</span> BASE_URL = <span class="string">`/api/v<span class="subst">$&#123;API_VERSION&#125;</span>`</span>;</div></pre></td></tr></table></figure><ul><li>packageFile을 require 합니다.</li><li>API_VERSION 변수에 <code>package.json</code> 파일의 version 정보 최상단 앞자리만 가져옵니다.</li><li>BASE_URL 변수에 API 버전 정보를 할당합니다.</li></ul><h2><span id="middleware-적용">middleware 적용</span></h2><h3><span id="기존-middleware">기존 middleware</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="string">'/'</span>, index);</div><div class="line">app.use(<span class="string">'/users'</span>, users);</div></pre></td></tr></table></figure><h3><span id="변경-middleware">변경 middleware</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app.use(<span class="string">`<span class="subst">$&#123;BASE_URL&#125;</span>/`</span>, index);</div><div class="line">app.use(<span class="string">`<span class="subst">$&#123;BASE_URL&#125;</span>/users`</span>, users);</div></pre></td></tr></table></figure><ul><li>위에서 만든 변수 <code>BASE_URL</code>를 활용해서 미들웨어 URL 을 변경합니다.</li></ul><p><img src="https://i.imgur.com/4j8x1TW.png" alt=""></p><ul><li>정상적으로 작동합니다.</li></ul><h2><span id="api-버전-변경">API 버전 변경</span></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"api-version"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">"scripts"</span>: &#123;</div><div class="line">    <span class="attr">"start"</span>: <span class="string">"node ./bin/www"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"dependencies"</span>: &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>package.json 의 version 을 변경하면 BASE_URL 가 변경되어 URL 이 변경됩니다.</li></ul><h2><span id="마무리">마무리</span></h2><p>사실 평소에는 <code>package.json</code> version 정보를 전혀 사용하지 않다가 LoopBack 프레임워크에서 위와 같은 방법으로 API 버전 관리를 하는 것을 보고 포스팅을 해보았습니다. 다른 분들은 어떻게 API 버전 관리를 하는지는 잘 모르겠지만 꽤 직관적이며 쉽게 적용 가능한 부분이라고 생각이 듭니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2&gt;&lt;span id=&quot;프로젝트-구성&quot;&gt;프로젝트 구성&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;package.json&lt;/code&gt; 파일로 API URL을 설정하는 간단한 방법을 포스팅 해보겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.img
      
    
    </summary>
    
      <category term="Node" scheme="https://cheese10yun.github.io/categories/Node/"/>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="API" scheme="https://cheese10yun.github.io/tags/API/"/>
    
      <category term="Package" scheme="https://cheese10yun.github.io/tags/Package/"/>
    
  </entry>
  
  <entry>
    <title>Loopback 게시판 만들기 (1)</title>
    <link href="https://cheese10yun.github.io/loopback-board/"/>
    <id>https://cheese10yun.github.io/loopback-board/</id>
    <published>2017-05-26T15:00:00.000Z</published>
    <updated>2017-10-13T17:23:37.957Z</updated>
    
    <content type="html"><![CDATA[<p>Loopback 으로 게시판을 만드는 프로젝트를 진행하겠습니다. 앞선 포스팅에서 설명 드렸다시피 Loopback은 정말 빠르게 REST API를 만들어 낼 수 있습니다. 회원 가입, 로그인, 로그아웃, ACL, 설정 등 매번 구현해야 하는 귀찮은 로직들을 내부 Model을 사용해서 빠르게 만들 수 있습니다. 하지만 이렇게 말로 설명해 드리는 것보다 웹에 가장 간단한 게시판으로 포스팅을 진행하겠습니다.</p><h2><span id="github">GitHub</span></h2><p><strong><em>프로젝트 소스는 <a href="https://github.com/cheese10yun/loopback-boards" rel="external nofollow noopener noreferrer" target="_blank">Loopback Baord</a> 여기서 확인해주세요</em></strong></p><h2><span id="loopback-설치">Loopback 설치</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g loopback-cli</div></pre></td></tr></table></figure><h2><span id="게시판-프로젝트-생성">게시판 프로젝트 생성</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ lb</div><div class="line">? 애플리케이션 이름은 무엇입니까? loopback-board</div><div class="line">? 프로젝트를 포함시킬 디렉토리 이름 입력: loopback-board</div><div class="line">   create loopback-board/</div><div class="line">     info 작업 디렉토리를 loopback-board(으)로 번경</div><div class="line"></div><div class="line">? 사용하려는 LoopBack 버전은 무엇입니까? 3.x (current)</div><div class="line">? 예상하는 애플리케이션 종류는 무엇입니까? api-server (A LoopBack API server with local User auth)</div></pre></td></tr></table></figure><ul><li>터미널에서 원하시는 디렉토리 이동 이후 lb 명령어를 입력하고 프로젝트 설정을 이어 갑니다.</li><li>버전은 최신 버전 3.X 버전을 선택합니다.</li><li>애플리케이션 종류로는 <code>api-server (A LoopBack API server with local User auth)</code>를 택합니다.</li><li>해당 종류를 택하면 내부 <code>User</code> 기반으로 로그인, 로그아웃, 회원 가입 등등 로직을 구현 해줍니다.</li></ul><h2><span id="데이터베이스-연결">데이터베이스 연결</span></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"db"</span>: &#123;</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"db"</span>,</div><div class="line">    <span class="attr">"connector"</span>: <span class="string">"memory"</span>,</div><div class="line">    <span class="attr">"file"</span>: <span class="string">"memoryDBFile"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>datasources.json</code> 파일에 위의 내용을 추가합니다.</li><li>본 포스팅에서는 설치 없이 사용할수 있는 메모리 <code>In-memory db</code>를 이용하겠습니다.</li><li>데이터베이스를 <code>memoryDBFile</code> 파일에 저장하여 <code>In-memory db</code>를 편리하게 사용할 수 있습니다.</li></ul><h2><span id="게시판-모델-생성">게시판 모델 생성</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">? 모델 이름 입력: board</div><div class="line">? board을(를) 첨부할 데이터 소스 선택: db (memory)</div><div class="line">? 모델 기본 클래스 선택 PersistedModel</div><div class="line">? REST API를 통해 board을(를) 공개합니까? Yes</div><div class="line">? 사용자 정의 복수형 양식(REST URL 빌드에 사용됨):</div><div class="line">? 공통 모델 또는 서버만 해당? 공통</div><div class="line">지금 일부 board 특성을 추가하십시오.</div><div class="line"></div><div class="line">완료된 경우 비어 있는 특성 이름을 입력하십시오.</div><div class="line">? 특성 이름: title</div><div class="line">   invoke   loopback:property</div><div class="line">? 특성 유형: string</div><div class="line">? 필수 여부 Yes</div><div class="line">? 기본값[없는 경우 공백으로 두기]:</div><div class="line"></div><div class="line">다른 board 특성을 추가하십시오.</div><div class="line">완료된 경우 비어 있는 특성 이름을 입력하십시오.</div><div class="line">? 특성 이름: content</div><div class="line">   invoke   loopback:property</div><div class="line">? 특성 유형: string</div><div class="line">? 필수 여부 Yes</div></pre></td></tr></table></figure><ul><li>Loppback의 핵심 개념인 Model을 생성합니다.</li><li>위에서 설정한 <code>db</code>를 선택합니다.</li><li>기타 설정들은 위의 예시와 동일하게 설정합니다.</li><li>위의 작업을 진행하면 <code>board.json</code>의 <code>properties</code> 항목에 추가 됩니다.</li></ul><h3><span id="boardjson">board.json</span></h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">....</div><div class="line">"properties": &#123;</div><div class="line">  "title": &#123;</div><div class="line">    "type": "string",</div><div class="line">    "required": true</div><div class="line">  &#125;,</div><div class="line">  "content": &#123;</div><div class="line">    "type": "string",</div><div class="line">    "required": true</div><div class="line">  &#125;,</div><div class="line">  "createdDt": &#123;</div><div class="line">    "type": "date",</div><div class="line">    "required": false,</div><div class="line">    "description": "생성 날짜",</div><div class="line">    "defaultFn": "now"</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">...</div></pre></td></tr></table></figure><ul><li>위에서 작성한 <code>title</code>, <code>content</code> 프로퍼티가 추가되었습니다.</li><li>모델을 생성할 때 프로퍼티를 생성할 수 있고, 직접 해당 모델의 json 파일에 작성할 수 있습니다.</li><li><code>createdDt</code> 프로퍼티는 직접 작성합니다.</li><li><code>&quot;defaultFn&quot;: &quot;now&quot;</code> 옵션을 주면 현재 시간이 자동으로 입력됩니다.</li></ul><h2><span id="게시판-acl-설정">게시판 ACL 설정</span></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ lb acl</div><div class="line">? ACL 항목을 적용할 모델 선택: (all existing models)</div><div class="line">? ACL 범위 선택: 모든 메소드 및 특성</div><div class="line">? 액세스 유형 선택: All (match all types)</div><div class="line">? 역할 선택 All users</div><div class="line">? 적용할 권한 선택 Explicitly deny access</div></pre></td></tr></table></figure><ul><li>Loopback은 ACL 설정도 간편합니다.</li><li><code>lb acl</code> 명령어로 작업을 진행합니다.</li><li>위 설정은 모든 모델에 대한 ACL 거부하는 설정입니다.</li><li>일단 막아 놓고 하나하나 풀어주는게 보안에 안전합니다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ lb acl</div><div class="line">? ACL 항목을 적용할 모델 선택: board</div><div class="line">? ACL 범위 선택: 모든 메소드 및 특성</div><div class="line">? 액세스 유형 선택: Read</div><div class="line">? 역할 선택 All users</div><div class="line">? 적용할 권한 선택 Explicitly grant access</div></pre></td></tr></table></figure><ul><li><code>board</code>에 대한 ACL 설정을 진행합니다.</li><li>모든 사용자는 <code>board</code>를 읽을 수 있습니다.</li><li>로그인하지 않은 사용자도 게시글을 볼 수 있게하는 설정입니다.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ lb acl</div><div class="line">? ACL 항목을 적용할 모델 선택: board</div><div class="line">? ACL 범위 선택: 단일 메소드</div><div class="line">? 메소드 이름 입력 create</div><div class="line">? 역할 선택 Any authenticated user</div><div class="line">? 적용할 권한 선택 Explicitly grant access</div></pre></td></tr></table></figure><ul><li>로그인한 사용자만이 <code>board</code>를 작성할 수 있습니다.</li></ul><h2><span id="게시판-acl-설정-코드">게시판 ACL 설정 코드</span></h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line">"acls": [</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"accessType"</span>: <span class="string">"*"</span>,</div><div class="line">      <span class="attr">"principalType"</span>: <span class="string">"ROLE"</span>,</div><div class="line">      <span class="attr">"principalId"</span>: <span class="string">"$everyone"</span>,</div><div class="line">      <span class="attr">"permission"</span>: <span class="string">"DENY"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"accessType"</span>: <span class="string">"EXECUTE"</span>,</div><div class="line">      <span class="attr">"principalType"</span>: <span class="string">"ROLE"</span>,</div><div class="line">      <span class="attr">"principalId"</span>: <span class="string">"$authenticated"</span>,</div><div class="line">      <span class="attr">"permission"</span>: <span class="string">"ALLOW"</span>,</div><div class="line">      <span class="attr">"property"</span>: <span class="string">"create"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"accessType"</span>: <span class="string">"READ"</span>,</div><div class="line">      <span class="attr">"principalType"</span>: <span class="string">"ROLE"</span>,</div><div class="line">      <span class="attr">"principalId"</span>: <span class="string">"$everyone"</span>,</div><div class="line">      <span class="attr">"permission"</span>: <span class="string">"ALLOW"</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      <span class="attr">"accessType"</span>: <span class="string">"WRITE"</span>,</div><div class="line">      <span class="attr">"principalType"</span>: <span class="string">"ROLE"</span>,</div><div class="line">      <span class="attr">"principalId"</span>: <span class="string">"$owner"</span>,</div><div class="line">      <span class="attr">"permission"</span>: <span class="string">"ALLOW"</span></div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">...</div></pre></td></tr></table></figure><ul><li>위의 ACL 작업을 진행하면 <code>board.json</code> 파일에 <code>&quot;acls&quot;</code> 위와 같이 추가된것을 확인할 수 있습니다.</li><li><code>&quot;accessType&quot;: &quot;WRITE&quot;,</code>은 수동으로 작성합니다.</li><li>해당 조건은 해당 글의 소유자만이 접근할 수 있는 설정입니다.</li><li>해당 글에 수정, 삭제에 관련 ACL 설정으로 보시면 편합니다.</li></ul><h2><span id="회원-가입">회원 가입</span></h2><p><img src="http://i.imgur.com/Enk0Eic.png" alt=""></p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"username"</span>: <span class="string">"yun"</span>,</div><div class="line">  <span class="attr">"email"</span>: <span class="string">"yun@test.com"</span>,</div><div class="line">  <span class="attr">"password"</span>:<span class="string">"123123"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>해당 회원 가입을 Swagger 문서를 통해서 진행합니다.</li></ul><h2><span id="로그인">로그인</span></h2><p><img src="http://i.imgur.com/tHepa6F.png" alt=""></p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"email"</span>: <span class="string">"yun@test.com"</span>,</div><div class="line">  <span class="attr">"password"</span>:<span class="string">"123123"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>로그인에 성공하면 AccessToken 값을 리턴 받습니다.</li><li>상단의 토큰 화면에 이 값을 입력합니다.</li></ul><h2><span id="게시글-작성">게시글 작성</span></h2><p><img src="http://i.imgur.com/G60l3fm.png" alt=""></p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"title"</span>: <span class="string">"게시글"</span>,</div><div class="line">  <span class="attr">"content"</span>: <span class="string">"내용 블라...."</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><h2><span id="비-로그인-사용자가-게시글을-작성할-경우">비 로그인 사용자가 게시글을 작성할 경우</span></h2><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"error"</span>: &#123;</div><div class="line">    <span class="attr">"statusCode"</span>: <span class="number">401</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"Error"</span>,</div><div class="line">    <span class="attr">"message"</span>: <span class="string">"Authorization Required"</span>,</div><div class="line">    <span class="attr">"code"</span>: <span class="string">"AUTHORIZATION_REQUIRED"</span>,</div><div class="line">    <span class="attr">"stack"</span>: <span class="string">"Error: Authorization Required..."</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>접근권한에 대한 에러 메세지를 포함하여 <code>statusCode</code> 401를 리턴 합니다.</li></ul><h2><span id="게시글-조회">게시글 조회</span></h2><p><img src="http://i.imgur.com/8Klt8zq.png" alt=""></p><h2><span id="마무리">마무리</span></h2><p>Loopback을 통해서 정말 간단하게 게시판을 만들어 보았습니다. 처음 Loopback을 공부할때는 <code>In-memory DB</code>를 추천합니다. 별다른 설정없이 데이터베이스 설정을 완료 할수 있습니다. 또한 ORM을 지원하기 때문에 이후에 다른 데이터베이스로 크게 무리 없이 변경 가능합니다. 앞으로도 Loopback 관련된 주제를 포스팅 진행해보겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Loopback 으로 게시판을 만드는 프로젝트를 진행하겠습니다. 앞선 포스팅에서 설명 드렸다시피 Loopback은 정말 빠르게 REST API를 만들어 낼 수 있습니다. 회원 가입, 로그인, 로그아웃, ACL, 설정 등 매번 구현해야 하는 귀찮은
      
    
    </summary>
    
      <category term="LoopBack" scheme="https://cheese10yun.github.io/categories/LoopBack/"/>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="JavaScript" scheme="https://cheese10yun.github.io/tags/JavaScript/"/>
    
      <category term="LoopBack" scheme="https://cheese10yun.github.io/tags/LoopBack/"/>
    
  </entry>
  
  <entry>
    <title>Loopback 시작하기</title>
    <link href="https://cheese10yun.github.io/loopback-begin/"/>
    <id>https://cheese10yun.github.io/loopback-begin/</id>
    <published>2017-05-04T15:00:00.000Z</published>
    <updated>2017-10-12T19:21:25.287Z</updated>
    
    <content type="html"><![CDATA[<p>최근 이직을 하게 되어 이렇게 오랜만에 포스팅하게 되었습니다. 바쁘다는 핑계로 미루다 보면 계속 못할 거 같아 많은 준비는 못 했지만 이번 회사에서 처음 접하게 된 Loopback Framework를 간단하게 정리하겠습니다.</p><p><strong>공식 문서에 상세한 내용이 나와 있어 이론보다는 실습 위주로 설명하겠습니다 1개월 정도밖에 사용해보지 않은 프레임워크라 이론적인 측면을 자세히 설명하기가 어려운 점이 있습니다.</strong></p><h3><span id="loopback-특징">Loopback 특징</span></h3><ul><li>정말 빠르게 REST API를 만들수 있습니다.</li><li>기본적으로 API Document를 Swagger 만들어줍니다.</li><li>CLI를 통해서 편리하게 모델 생성, 정의 접근 권한 등등 작업을 진행할 수 있습니다.</li><li>다양한 데이터베이스를 ORM으로 쉽게 관리할 수 있습니다.</li></ul><h3><span id="loopback-설치">Loopback 설치</span></h3><ul><li>기본적으로 Node, NPM이 설치되있는 환경이라 가정하겠습니다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g loopback-cli</div></pre></td></tr></table></figure><h3><span id="hello-world-프로젝트-설정">Hello world 프로젝트 설정</span></h3><p><strong>루프백의 기초적인 특징을 알아보겠습니다.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ lb</div><div class="line">? 애플리케이션 이름은 무엇입니까? hello-world</div><div class="line">? 프로젝트를 포함시킬 디렉토리 이름 입력: hello-world</div><div class="line">  create hello-world/</div><div class="line">    info 작업 디렉토리를 hello-world(으)로 번경</div><div class="line"></div><div class="line">? 사용하려는 LoopBack 버전은 무엇입니까? 3.x (current)</div><div class="line">? 예상하는 애플리케이션 종류는 무엇입니까? hello-world (A project containing a controller, includi</div><div class="line">ng a single vanilla Message and a single remote method)</div></pre></td></tr></table></figure><ul><li>터미널에서 원하시는 디렉토리 이동 이후 lb 명령어를 입력하고 프로젝트 설정을 이어 갑니다.</li><li>프러젝트 이름, 디렉토리 이름 등 간단하게 설정합니다.</li><li>버전은 3.x 최신 버전을 선택합니다.</li><li>예상하는 애플리케이션 종류는  hello-world를 선택합니다.</li></ul><h3><span id="hello-world-프로젝트-실행">Hello world 프로젝트 실행</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> hello-world/</div><div class="line">$ node .</div></pre></td></tr></table></figure><ul><li>위에서 <code>CLI</code>로 생성한 프로젝트 디렉토리로 이동합니다.</li><li><code>node .</code> 명령어로 프로젝트를 실행 합니다.</li><li><code>http://0.0.0.0:3000/explorer</code>로 이동합니다.</li><li>API Document <code>Swagger</code>가 정상적으로 출력되면 아래 그림과 같습니다.</li></ul><h3><span id="api-document">API Document</span></h3><p><img src="http://i.imgur.com/D9cINil.png" alt=""></p><ul><li>Loopback 기본 <code>User</code>모델을 기반으로 User API를 만들어 줍니다.</li><li>User API는 회원 가입, 로그인, 로그아웃, 회원 정보 수정, 등등 User에 대한 REST API가 있습니다.</li></ul><h4><span id="post-users-회원-가입">POST /Users (회원 가입)</span></h4><p><img src="http://i.imgur.com/ako0hjq.png" alt=""></p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"realm"</span>: <span class="string">"string"</span>,</div><div class="line">  <span class="attr">"username"</span>: <span class="string">"loopback"</span>,</div><div class="line">  <span class="attr">"email"</span>: <span class="string">"loopback@loopback.com"</span>,</div><div class="line">  <span class="attr">"password"</span>: <span class="string">"loopback"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>data</code>에 JSON 타입으로 해당 데이터를 입력합니다.</li><li><strong><em>기본설정인 In-memory db에 저장됩니다.</em></strong></li></ul><h4><span id="post-userslogin-로그인">POST /Users/login (로그인)</span></h4><p><img src="http://i.imgur.com/0W8k2M9.png" alt=""></p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"email"</span>: <span class="string">"loopback@loopback.com"</span>,</div><div class="line">  <span class="attr">"password"</span>: <span class="string">"loopback"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><code>credentials</code> 위에서 가입한 email, password 정보를 JSON 타입으로 입력합니다.</li><li>회원 정보가 일치할 경우 <code>Response Body</code>에 <code>AccessToekn</code> 정보를 넘겨 줍니다.</li><li><code>AccessToekn.id</code>의 값 <code>KIjxd....</code>을 오른쪽 상단 ToKen Set에 입력합니다.</li><li>loopback에서는 기본적으로 인증처리를 AccessToekn 방식으로 지원합니다.</li><li><code>AccessToekn</code> 모델 또한 Loopback의 기본 제공 모델중 하나입니다.</li></ul><h4><span id="get-usersid-해당-회원-조회">GET /Users/{id} (해당 회원 조회)</span></h4><p><img src="http://i.imgur.com/gWBT25M.png" alt=""></p><ul><li><code>id</code> 파라마터에 <code>AccessToekn</code>에서 발급 받은 <code>userId</code>를 입력합니다.</li><li>자신의 정보를 조회할 수 있습니다.</li><li>자신의 이외의 회원 정보를 조회할 경우 아래와 같은 <code>StatusCode</code> 401를 리턴 받습니다.</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"error"</span>: &#123;</div><div class="line">    <span class="attr">"statusCode"</span>: <span class="number">401</span>,</div><div class="line">    <span class="attr">"name"</span>: <span class="string">"Error"</span>,</div><div class="line">    <span class="attr">"message"</span>: <span class="string">"권한 필수"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="결론">결론</span></h3><p>루프백에서 기본적으로 모델을 생성하고 모델 간의 관계를 정의하면 기본적인 CURD REST API를 자동으로 만들어 줍니다. 또한, Swagger를 이용해서 API Document 또한 자동으로 만들어 주어 정말 빠르게 API를 개발할 수 있게 해줍니다. 또 특정 API에 대한 접근 권한 및 인증 처리도 정말 간단하게 이루어지고, 이 밖에도 다양한 장점들로 빠르게 계발할 수 있도록 도와줍니다. 이러한 장점들을 한 번에 소개하기는 힘들어 해당 파트 마다 소개를 이어 나갈 거 같습니다. 오늘 포스팅한 내용은 부실하지만 이렇게라도 시작을 하지 않으면 계속 늦어질 거 같아 빠르게 정리해보았습니다. 앞으로는 간단한 게시판을 만들면서 Loopback의 장점들을 소개할 예정입니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;최근 이직을 하게 되어 이렇게 오랜만에 포스팅하게 되었습니다. 바쁘다는 핑계로 미루다 보면 계속 못할 거 같아 많은 준비는 못 했지만 이번 회사에서 처음 접하게 된 Loopback Framework를 간단하게 정리하겠습니다.&lt;/p&gt;
&lt;p&gt;&lt;str
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="JavaScript" scheme="https://cheese10yun.github.io/tags/JavaScript/"/>
    
      <category term="LoopBack" scheme="https://cheese10yun.github.io/tags/LoopBack/"/>
    
  </entry>
  
  <entry>
    <title>AWS S3 업로드시 이미지 최적화</title>
    <link href="https://cheese10yun.github.io/aws-s3-imgage-/"/>
    <id>https://cheese10yun.github.io/aws-s3-imgage-/</id>
    <published>2017-03-03T15:00:00.000Z</published>
    <updated>2017-10-12T20:20:48.982Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>AWS S3 이미지 업로드시 이미지 최적화를 진행하고 업로드하는 것이 브라우저에서의 속도가 크게 도움이 됩니다.</em></strong> <code>formidable</code> 업로드 , <code>AWS-S3</code> 업로드는 이 전 포스팅에서 한번 다뤘기 때문에 간단하게 설명하고 이미지 최적화 적업에 대해서 자세히 포스팅하겠습니다.<br><strong><em><a href="https://github.com/cheese10yun/AWS_S3_Image_Optimization_" rel="external nofollow noopener noreferrer" target="_blank">Github</a>클릭해서 전체 소스를 보시는 것을 권장합니다.</em></strong></p><h2><span id="작업순서">작업순서</span></h2><ol><li><code>formidable</code> 모듈로 이미지 업로드 진행</li><li><code>imagemin</code> 모듈로 업로드된 이미지 최적화 진행</li><li><code>aws-sdk</code> 모듈을로 최적화 작업이 완료된 이미지 S3에 업로드</li></ol><h2><span id="필수-패키지-설치">필수 패키지 설치</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">npm install --save async</div><div class="line">npm install --save aws-sdk</div><div class="line">npm install --save imagemin</div><div class="line">npm install --save imagemin-pngquant</div><div class="line">npm install --save formidable</div></pre></td></tr></table></figure><h2><span id="uploadservicejs-설명">UploadService.js 설명</span></h2><h3><span id="formidable-모듈을-이용한-이미지-업로드">formidable 모듈을 이용한 이미지 업로드</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Upload.formidable = <span class="function">(<span class="params">req, callback</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">let</span> _fields;</div><div class="line"></div><div class="line">  form.parse(req, <span class="function"><span class="keyword">function</span> (<span class="params">err, fields</span>) </span>&#123;</div><div class="line">    _fields = fields;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  form.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">    callback(err, <span class="literal">null</span>, <span class="literal">null</span>);</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  form.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    callback(<span class="literal">null</span>, <span class="keyword">this</span>.openedFiles, _fields);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ul><li><code>form.on('error')</code> formidable 업로드 중 오류 발생시 <code>callback</code>으로 <code>err</code> 전달</li><li><code>form.on('end')</code> formidable 업로드가 오류 없이 완료되면 <code>callback</code>으로 파일정보와, 필드값 전달</li></ul><h3><span id="imagemin-모듈을-이용한-이미지-최적화">imagemin 모듈을 이용한 이미지 최적화</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Upload.optimize = <span class="function">(<span class="params">files, callback</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">async</span>.each(files, (file, cb) =&gt; &#123;</div><div class="line">    imagemin([file.path], <span class="string">`<span class="subst">$&#123;ROOT_PATH&#125;</span>/temp/`</span>, &#123;</div><div class="line">      plugins: [</div><div class="line">        imageminPngquant(&#123;<span class="attr">quality</span>: <span class="string">'0-80'</span>, <span class="attr">verbose</span>: <span class="literal">false</span>, <span class="attr">floyd</span>: <span class="number">1</span>&#125;)</div><div class="line">      ]</div><div class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">      cb();</div><div class="line">    &#125;)</div><div class="line">  &#125;, (err) =&gt; &#123;</div><div class="line">    callback(err)</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ul><li><code>async.each</code>으로 업로드할 파일의 개수만큼 이미지 최적화 적업 진행</li><li><code>imagemin([최적화할 이미지 경로(배열 타입이여야함)], 최적화 이후 저장될 이미지 경로, 이미지 최적화 작업)</code></li><li>위의 예제는 업로된 경로와 최적화가 이루어지는 경로가 동일하여 덮어쓰여 집니다.</li><li>이미지 최적화 플러그인 <code>imageminPngquant</code> 사용</li></ul><h3><span id="imageminpngquant-플러그인">imageminPngquant 플러그인</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">plugins: [</div><div class="line">imageminPngquant(&#123;<span class="attr">quality</span>: <span class="string">'0-80'</span>, <span class="attr">verbose</span>: <span class="literal">false</span>, <span class="attr">floyd</span>: <span class="number">1</span>&#125;)</div><div class="line">]</div></pre></td></tr></table></figure><ul><li><code>floyd</code> 이미지 디더링 작업 사용 <code>Type: boolean, Default: false</code></li><li><code>quality</code> 이미지 퀄리 지정 사용 <code>Type: string</code> 0~100 사용 가능</li><li><code>verbose</code> 불필효한 메타정보 제거 사용 <code>Type: boolean, Default: false</code></li><li><code>imageminPngquant</code> 의 다양한 속성은 <a href="https://www.npmjs.com/package/imagemin-pngquant" rel="external nofollow noopener noreferrer" target="_blank">imageminPngquant</a> 에서 확인 할 수 있습니다.</li><li><code>imageminPngquant</code> 플러그인 이외에도 다양한 플러그인을 사용해서 이미지에 대한 다양한 작업들을 진행할 수 있습니다.</li></ul><h3><span id="최적화-완료된-이미지-s3-업로드">최적화 완료된 이미지 S3 업로드</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Upload.s3 = <span class="function">(<span class="params">files, key, callback</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">async</span>.each(files, (file, cb) =&gt; &#123;</div><div class="line">    params.Key = key + file.name;</div><div class="line">    params.Body = <span class="built_in">require</span>(<span class="string">'fs'</span>).createReadStream(file.path);</div><div class="line"></div><div class="line">    S3.upload(params, (err, result) =&gt; &#123;</div><div class="line">      cb(err, result);</div><div class="line">    &#125;);</div><div class="line">  &#125;, (err, result) =&gt; &#123;</div><div class="line">    callback(err, result);</div><div class="line">  &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><ul><li><code>async.each</code>으로 업로드할 파잇의 개수만큼 S3에 업로드 작업 진행</li><li><code>files</code> 업로드할 파일들의 정보</li><li><code>params.Key</code> S3에 업로드 될 경로와 파일이름을 지정합니다.</li><li><code>params.Body</code> 이미지 최적화 작업이 끝난 파일의 경로를 입력합니다.</li><li><code>S3.upload(...)</code> 실질적인 S3 이미지 업로드가 진행됩니다. <code>cb(err, result)</code>으로 에러가 발생하면 즉시 정지하고, 에러가 발생하지 않으면 파일의 개수만큼 업로드를 반복합니다.</li><li><a href="https://cheese10yun.github.io/Node-AWS-S3-Upload">Yun Blog Node AWS S3 업로드</a> 자세한 설명은 참고</li></ul><h2><span id="router-에서-사용법">router 에서 사용법</span></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">router.post(<span class="string">'/upload'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> tasks = [</div><div class="line">    (callback) =&gt; &#123;</div><div class="line">      Upload.formidable(req, (err, files, fields) =&gt; &#123;</div><div class="line">        callback(err, files, fields);</div><div class="line">      &#125;);</div><div class="line">    &#125;,</div><div class="line">    (files, fields, callback) =&gt; &#123;</div><div class="line">      Upload.optimize(files, (err) =&gt; &#123;</div><div class="line">        callback(err, files, fields);</div><div class="line">      &#125;);</div><div class="line">    &#125;,</div><div class="line">    (files, fields, callback) =&gt; &#123;</div><div class="line">      Upload.s3(files, <span class="string">'channel/test/'</span>, (err, result) =&gt; &#123;</div><div class="line">        callback(err, result)</div><div class="line">      &#125;);</div><div class="line">    &#125;</div><div class="line">  ];</div><div class="line">  <span class="keyword">async</span>.waterfall(tasks, (err, result) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span> (!err) &#123;</div><div class="line">      res.json(&#123;<span class="attr">success</span>: <span class="literal">true</span>, <span class="attr">msg</span>: <span class="string">'업로드 성공'</span>&#125;)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      res.json(&#123;<span class="attr">success</span>: <span class="literal">false</span>, <span class="attr">msg</span>: <span class="string">'업로드 실패'</span>&#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3><span id="tasks-작업은-uploadservice-모듈로-진행">tasks 작업은 UploadService 모듈로 진행</span></h3><ul><li>위에서 작성한 <code>UploadService.js</code> 모듈로 아래의 작업들이 진행됩니다.</li><li><code>formidable</code> 메소드로 이미지 업로드 진행</li><li><code>optimize</code> 메소드로 이미지 최적화 진행</li><li><code>s3</code> 메서드로 s3 업로드 진행</li><li><code>async.waterfall</code> 으로 위 작업 순차 진행</li></ul><h2><span id="사이즈-비교">사이즈 비교</span></h2><table><thead><tr><th style="text-align:left">원본</th><th style="text-align:left">imageOptim App</th><th style="text-align:left">imagemin</th></tr></thead><tbody><tr><td style="text-align:left">10,645,070 byte</td><td style="text-align:left">8,499,904 byte</td><td style="text-align:left">2,858,674 byte</td></tr><tr><td style="text-align:left">473,459 byte</td><td style="text-align:left">282,029 byte</td><td style="text-align:left">177,423 byte</td></tr><tr><td style="text-align:left">421,698 byte</td><td style="text-align:left">258,743 byte</td><td style="text-align:left">189,266 byte</td></tr><tr><td style="text-align:left">382,774 byte</td><td style="text-align:left">232,684 byte</td><td style="text-align:left">182,071 byte</td></tr><tr><td style="text-align:left">467,184 byte</td><td style="text-align:left">282,368 byte</td><td style="text-align:left">164,739 byte</td></tr></tbody></table><p><strong>imageOptim App은 맥에서 사용하는 이미지 최적화 툴입니다.</strong></p><ul><li>이미지 사이즈(가로세로 크기)는 변경되지 않습니다.</li><li>bit color 값은 8bit로 수정됩니다.</li><li>이미지에 대한 지식이 없어 비포 에프터 사진을 첨부했습니다.</li></ul><h3><span id="원본-이미지">원본 이미지</span></h3><p><img src="http://i.imgur.com/mx9UTs2.png" alt=""></p><h3><span id="최적화-이미지">최적화 이미지</span></h3><p><img src="http://i.imgur.com/4pEMLxw.png" alt=""></p><h3><span id="마무리">마무리</span></h3><p>최근에 이미지 S3 업로드시 이미지 최적화 해야 할 작업이 있어서 코드를 만들고 간단하게 정리해보았습니다. 아직 프로덕션에 사용하는 코드는 아니라서 그렇게 안전한 코드는 아닌점… 미리 말씀드립니다. 이 플러그인 외에도 이미지 크롭, 이미지 해상도 조정 등 다양한 플러그인들이 많아 좀 더 검색해보시고 적용하시면 보다 좋을 거 같습니다. 부디 도움이 조금이라도 되셨기를 바랍니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;AWS S3 이미지 업로드시 이미지 최적화를 진행하고 업로드하는 것이 브라우저에서의 속도가 크게 도움이 됩니다.&lt;/em&gt;&lt;/strong&gt; &lt;code&gt;formidable&lt;/code&gt; 업로드 , &lt;code&gt;AWS-S3&lt;/code
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="AWS" scheme="https://cheese10yun.github.io/tags/AWS/"/>
    
      <category term="imagemin" scheme="https://cheese10yun.github.io/tags/imagemin/"/>
    
      <category term="S3" scheme="https://cheese10yun.github.io/tags/S3/"/>
    
      <category term="JavaScript" scheme="https://cheese10yun.github.io/tags/JavaScript/"/>
    
      <category term="Image" scheme="https://cheese10yun.github.io/tags/Image/"/>
    
      <category term="Upload" scheme="https://cheese10yun.github.io/tags/Upload/"/>
    
  </entry>
  
  <entry>
    <title>Node.JS로 카카오봇 만들기</title>
    <link href="https://cheese10yun.github.io/kakao-bot-node/"/>
    <id>https://cheese10yun.github.io/kakao-bot-node/</id>
    <published>2017-02-15T15:00:00.000Z</published>
    <updated>2017-10-12T21:31:52.969Z</updated>
    
    <content type="html"><![CDATA[<iframe src="https://ghbtns.com/github-btn.html?user=cheese10yun&repo=KaKaoBot-Node&type=star&count=true&size=large" frameborder="0" scrolling="0" width="160px" height="30px"></iframe><iframe src="https://ghbtns.com/github-btn.html?user=cheese10yun&type=follow&count=true&size=large" frameborder="0" scrolling="0" width="220px" height="30px"></iframe><p><strong>전체소스는 <a href="https://github.com/cheese10yun/Node-Boot" rel="external nofollow noopener noreferrer" target="_blank">GitHub branch develop-base</a>에서 확인할 수 있습니다.</strong></p><h2><span id="옐로우-아이디-등록-링크">옐로우 아이디 등록 </span></h2><p><img src="http://i.imgur.com/68DXtkf.png" alt="옐로우아이디 등록"></p><p><img src="http://i.imgur.com/J9bloey.png" alt="옐로우아이디 경고"></p><p><strong>해당 프로필은 하번 설정하면 변경이 불가능합니다. 이 작업이 완료되면 2 ~ 3일 이후에 옐로우아이디가 발급됩니다. 발급되기 전까지 Node API 서버를 구성합니다. 자세한 설명은 아래에 있습니다.</strong></p><p><img src="http://i.imgur.com/NDfHewo.png" alt="API형 자동읍답 선택"></p><p><strong>API형 자동읍답 설정하기 선택</strong></p><p><img src="http://i.imgur.com/YDxMB6D.png" alt=""></p><p><strong>앱 등록 절차를 진행합니다.</strong></p><p><strong>앱등록시 반드시 keyboard API가 동작해야합니다. 아래의 노드 서버 설정을 완료하고 API TEST를 진행합니다.</strong></p><p><img src="http://i.imgur.com/JUFtFR8.png" alt="API TEST"></p><h2><span id="카카오-봇-api-간단설명">카카오 봇 API 간단설명</span></h2><h3><span id="용어-설명">용어 설명</span></h3><h4><span id="수신-api">수신 API</span></h4><ul><li>카카오톡 이용자가 플러스친구, 옐로아이디에게 보낸 메시지를 전달 받은 후 응답을 할 수 있는 API 입니다. http(s) restful api를 통하여 카카오 API 서버 -&gt; 파트너 서버를 호출합니다.</li></ul><h4><span id="app_key">app_key</span></h4><ul><li>플러스친구/옐로아이디에서 자동응답을 위한 앱 등록시 프로필별로 발급되는 고유 키 값입니다. 자동응답 기능만 이용하시는 경우 사용되지 않으며, 일부 app_secret을 통한 별도 인증이 필요한 일부 프로필에만 사용됩니다.</li></ul><h4><span id="app_secret">app_secret</span></h4><ul><li>인증을 위해 app_key와 조합하여 사용되는 키 값입니다. 자동응답 기능만 이용하시는 경우 사용되지 않으며, 일부 app_secret을 통한 별도 인증이 필요한 일부 프로필에만 사용됩니다.</li></ul><h4><span id="user_key">user_key</span></h4><ul><li>특정 카카오톡 이용자를 구분하기 위한 key 입니다. 카카오에서는 이용자의 개인정보를 외부에 제공하지 않으므로, 외부 파트너사에서 카카오톡 이용자를 구분하기 위해서는 카카오로부터 API를 통해 user_key를 response로 받아야 합니다. user_key는 특정 카카오톡 이용자에 대해 프로필별로 각기 다르게 발급됩니다. 따라서 user_key는 해당 프로필에 대해서만 유효합니다. 카카오톡 이용자가 프로필을 차단했다가 다시 추가한 경우에는 user_key가 갱신되지 않으며, 이용자가 카카오톡 탈퇴 후 재가입한 경우 갱신됩니다.</li></ul><h3><span id="api-설정">API 설정</span></h3><table><thead><tr><th>URL</th><th>method</th><th>설명</th></tr></thead><tbody><tr><td>/keyboard</td><td>GET</td><td>키보드 영역에 표현될 버튼에 대한 정보. 생략시 text 타입이 선택된다</td></tr><tr><td>/message</td><td>POST</td><td>자동응답 명령어에 대한 응답 메시지의 내용</td></tr><tr><td>/friend</td><td>POST</td><td>특정 카카오톡 이용자가 플러스친구/옐로아이디를 친구로 추가하거나 차단하는 경우 해당 정보를 파트너사 서버로 전달하는 API입니다.</td></tr><tr><td>/friend</td><td>DELETE</td><td>특정 카카오톡 이용자가 플러스친구/옐로아이디를 친구로 추가하거나 차단하는 경우 해당 정보를 파트너사 서버로 전달하는 API입니다.</td></tr><tr><td>/chat_room/:user_key</td><td>DELETE</td><td>사용자가 채팅방 나가기를 해서 채팅방을 목록에서 삭제했을 경우 해당 정보를 파트</td></tr></tbody></table><p><a href="https://github.com/plusfriend/auto_reply" rel="external nofollow noopener noreferrer" target="_blank">출저 : 카카오톡 플러스친구/옐로아이디 API v. 2.0 개요</a></p><h2><span id="node-api-설정">Node API 설정</span></h2><h3><span id="node-keyboard-api">Node keyboard API</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">router.get(<span class="string">'/keyboard'</span>, (req, res) =&gt; &#123;</div><div class="line">  <span class="keyword">const</span> menu = &#123;</div><div class="line">      type: <span class="string">'buttons'</span>,</div><div class="line">      buttons: [<span class="string">"메뉴1"</span>, <span class="string">"메뉴2"</span>, <span class="string">"메뉴3"</span>]</div><div class="line">  &#125;;</div><div class="line"></div><div class="line">  res.set(&#123;</div><div class="line">      <span class="string">'content-type'</span>: <span class="string">'application/json'</span></div><div class="line">  &#125;).send(<span class="built_in">JSON</span>.stringify(menu));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3><span id="response">Response</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"type"</span>: <span class="string">"buttons"</span>,</div><div class="line">  <span class="attr">"buttons"</span>: [</div><div class="line">    <span class="string">"메뉴1"</span>,</div><div class="line">    <span class="string">"메뉴2"</span>,</div><div class="line">    <span class="string">"메뉴3"</span></div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="스크린샷">스크린샷</span></h3><p><img src="http://i.imgur.com/y792Ihv.png?1" alt=""></p><h3><span id="node-message-api">Node Message API</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">router.post(<span class="string">'/message'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> _obj = &#123;</div><div class="line">        user_key: req.body.user_key,</div><div class="line">        type: req.body.type,</div><div class="line">        content: req.body.content</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">let</span> massage = &#123;</div><div class="line">        <span class="string">"message"</span>: &#123;</div><div class="line">            <span class="string">"text"</span>: <span class="string">'응답 메세지...'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="string">"keyboard"</span>: &#123;</div><div class="line">            <span class="string">"type"</span>: <span class="string">"buttons"</span>,</div><div class="line">            <span class="string">"buttons"</span>: [</div><div class="line">                <span class="string">"메뉴1"</span>,</div><div class="line">                <span class="string">"메뉴2"</span>,</div><div class="line">                <span class="string">"메뉴3"</span></div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    res.set(&#123;</div><div class="line">        <span class="string">'content-type'</span>: <span class="string">'application/json'</span></div><div class="line">    &#125;).send(<span class="built_in">JSON</span>.stringify(massage));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><code><b>let massage ={…}</b></code>에 따라서 메세지 형태가 결정됩니다</p><ul><li>기본</li><li>라벨</li><li>포토라벨</li></ul><h3><span id="기본">기본</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"message"</span>: &#123;</div><div class="line">    <span class="attr">"text"</span>: <span class="string">"메뉴1를 선택했습니다."</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"keyboard"</span>: &#123;</div><div class="line">    <span class="attr">"type"</span>: <span class="string">"buttons"</span>,</div><div class="line">    <span class="attr">"buttons"</span>: [</div><div class="line">      <span class="string">"메뉴1"</span>,</div><div class="line">      <span class="string">"메뉴2"</span>,</div><div class="line">      <span class="string">"메뉴3"</span>,</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="라벨형">라벨형</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"message"</span>: &#123;</div><div class="line">    <span class="attr">"text"</span>: <span class="string">"메뉴2를 선택했습니다."</span>,</div><div class="line">    <span class="attr">"message_button"</span>: &#123;</div><div class="line">      <span class="attr">"label"</span>: <span class="string">"라벨입니다."</span>,</div><div class="line">      <span class="attr">"url"</span>: <span class="string">"https://cheese10yun.github.io/"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"keyboard"</span>: &#123;</div><div class="line">    <span class="attr">"type"</span>: <span class="string">"buttons"</span>,</div><div class="line">    <span class="attr">"buttons"</span>: [</div><div class="line">      <span class="string">"메뉴1"</span>,</div><div class="line">      <span class="string">"메뉴2"</span>,</div><div class="line">      <span class="string">"메뉴3"</span>,</div><div class="line">      <span class="string">"메뉴4"</span>,</div><div class="line">      <span class="string">"메뉴5"</span></div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="기본-amp-라벨형-스크린샷">기본 &amp; 라벨형 스크린샷</span></h3><p><img src="http://i.imgur.com/QEAHMC7.png?1" alt=""></p><ul><li>메뉴1 기본</li><li>메뉴2 라벨</li></ul><h3><span id="포토형">포토형</span></h3><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"message"</span>: &#123;</div><div class="line">    <span class="attr">"text"</span>: <span class="string">"메뉴3를 선택했습니다."</span>,</div><div class="line">    <span class="attr">"photo"</span>: &#123;</div><div class="line">      <span class="attr">"url"</span>: <span class="string">"http://i.imgur.com/tvuH0ZJ.png"</span>,</div><div class="line">      <span class="attr">"width"</span>: <span class="number">640</span>,</div><div class="line">      <span class="attr">"height"</span>: <span class="number">480</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">"message_button"</span>: &#123;</div><div class="line">      <span class="attr">"label"</span>: <span class="string">"라벨입니다"</span>,</div><div class="line">      <span class="attr">"url"</span>: <span class="string">"https://cheese10yun.github.io/"</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"keyboard"</span>: &#123;</div><div class="line">    <span class="attr">"type"</span>: <span class="string">"buttons"</span>,</div><div class="line">    <span class="attr">"buttons"</span>: [</div><div class="line">      <span class="string">"메뉴1"</span>,</div><div class="line">      <span class="string">"메뉴2"</span>,</div><div class="line">      <span class="string">"메뉴3"</span>,</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3><span id="포토형-메세지-스크린샷">포토형 메세지 스크린샷</span></h3><p><img src="http://i.imgur.com/pJLjWvK.png?1" alt=""></p><p><strong>라벨을 터치하면 등록된 URL 주소로 이동합니다.</strong></p><h3><span id="node-friend-api">Node friend API</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">router.post(<span class="string">'/friend'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> user_key = req.body.user_key;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;user_key&#125;</span>님이 쳇팅방에 참가했습니다.`</span>);</div><div class="line">    </div><div class="line">    res.set(&#123;</div><div class="line">        <span class="string">'content-type'</span>: <span class="string">'application/json'</span></div><div class="line">    &#125;).send(<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">success</span>:<span class="literal">true</span>&#125;));</div><div class="line">&#125;);</div><div class="line"></div><div class="line">router.delete(<span class="string">'/friend'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> user_key = req.body.user_key;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;user_key&#125;</span>님이 쳇팅방을 차단했습니다.`</span>);</div><div class="line">    </div><div class="line">    res.set(&#123;</div><div class="line">        <span class="string">'content-type'</span>: <span class="string">'application/json'</span></div><div class="line">    &#125;).send(<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">success</span>:<span class="literal">true</span>&#125;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3><span id="node-chat_room-api">Node chat_room API</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">router.delete(<span class="string">'/chat_room/:user_key'</span>, (req, res) =&gt; &#123;</div><div class="line">    <span class="keyword">const</span> user_key = req.params.user_key;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;user_key&#125;</span>님이 쳇팅방에서 나갔습니다.`</span>);</div><div class="line"></div><div class="line">    res.set(&#123;</div><div class="line">        <span class="string">'content-type'</span>: <span class="string">'application/json'</span></div><div class="line">    &#125;).send(<span class="built_in">JSON</span>.stringify(&#123;<span class="attr">success</span>:<span class="literal">true</span>&#125;));</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>나머지 API들은 간단하게 작성합니다.</p><h3><span id="마무리">마무리</span></h3><p>학교 식단 및 통학 버스 알림 봇을 만들다가 기본 구조를 갖는 소스코드를 올리는 것도 좋을 거 같아서 기존 프로젝트에서 불필요 소스코드를 제거하고 올린 거라 좀 어색한 부분이 있네요. 비슷한 프로젝트를 진행하실 분들은 다른 master branch를 참조하세요.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe src=&quot;https://ghbtns.com/github-btn.html?user=cheese10yun&amp;repo=KaKaoBot-Node&amp;type=star&amp;count=true&amp;size=large&quot; frameborder=&quot;0&quot; scrolli
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="Kakao" scheme="https://cheese10yun.github.io/tags/Kakao/"/>
    
      <category term="Bot" scheme="https://cheese10yun.github.io/tags/Bot/"/>
    
  </entry>
  
  <entry>
    <title>npm sudo 권한으로 설치시 오류 해결</title>
    <link href="https://cheese10yun.github.io/npm-sudo-err/"/>
    <id>https://cheese10yun.github.io/npm-sudo-err/</id>
    <published>2017-02-10T15:00:00.000Z</published>
    <updated>2017-10-12T20:24:19.605Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-bash: sodu: <span class="built_in">command</span> not found</div></pre></td></tr></table></figure><p>NPM으로 모듈을 설치할 때 <code><b>sudo</b></code> 권한으로 설치할 경우 위와 같은 오류가 발생할 경우가 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo ln -s /usr/<span class="built_in">local</span>/bin/node /usr/bin/node</div><div class="line">sudo ln -s /usr/<span class="built_in">local</span>/lib/node /usr/lib/node</div><div class="line">sudo ln -s /usr/<span class="built_in">local</span>/bin/npm /usr/bin/npm</div><div class="line">sudo ln -s /usr/<span class="built_in">local</span>/bin/node-waf /usr/bin/node-waf</div></pre></td></tr></table></figure><p>위의 명령어를 입력하면 sudo npm으로 설치를 진행할 수 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line
      
    
    </summary>
    
    
      <category term="NPM" scheme="https://cheese10yun.github.io/tags/NPM/"/>
    
  </entry>
  
  <entry>
    <title>Node AWS S3 업로드</title>
    <link href="https://cheese10yun.github.io/Node-AWS-S3-Upload/"/>
    <id>https://cheese10yun.github.io/Node-AWS-S3-Upload/</id>
    <published>2017-02-07T15:00:00.000Z</published>
    <updated>2017-10-12T20:24:19.595Z</updated>
    
    <content type="html"><![CDATA[<p>Node.Js에서 AWS S3업로드 예제입니다. 본 예제의 전체 소스는 <a href="https://github.com/cheese10yun/node-yun" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a>에서 참고할 수 있습니다.<br><strong><em>S3에 관련된 설정이 완료됐다는 가정하에 포스팅을 진행하겠습니다.</em></strong></p><h4><span id="필수-패키지-설치">필수 패키지 설치</span></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install formidable --save</div><div class="line">npm install async --save</div><div class="line">npm install aws-sdk --save</div></pre></td></tr></table></figure><ul><li><code><b>formidable</b></code> 파일 업로드를 위한 모듈</li><li><code><b>async</b></code>순차 실행을 위한 모듈</li><li><code><b>aws-sdk</b></code> S3 업로드를 위한 모듈</li></ul><p><code><b>HTML Form</b></code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span>  <span class="attr">action</span>=<span class="string">"/api/v1/upload"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>  <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span>  <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"img_files[]"</span> <span class="attr">accept</span>=<span class="string">"image/*"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure><p>HTML 입력폼 소스입니다. 간단함으로 넘어가겠습니다.</p><p><code><b>upload API</b></code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">Upload = <span class="built_in">require</span>(<span class="string">'../service/UploadService'</span>),</div><div class="line">router.post(<span class="string">'/upload'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> tasks = [</div><div class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</div><div class="line">            Upload.formidable(req, <span class="function"><span class="keyword">function</span> (<span class="params">err, files, field</span>) </span>&#123;</div><div class="line">                callback(err, files);</div><div class="line">            &#125;)</div><div class="line">        &#125;,</div><div class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">files, callback</span>) </span>&#123;</div><div class="line">            Upload.s3(files, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">                callback(err, files);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    ];</div><div class="line">    <span class="keyword">async</span>.waterfall(tasks, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!err)&#123;</div><div class="line">            res.json(&#123;<span class="attr">success</span>:<span class="literal">true</span>, <span class="attr">msg</span>:<span class="string">'업로드 성공'</span>&#125;)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            res.json(&#123;<span class="attr">success</span>:<span class="literal">false</span>, <span class="attr">msg</span>:<span class="string">'실패'</span>, <span class="attr">err</span>:err&#125;)</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>해당 upload 라우터로 요청이 들어오면 <code><b>tasks[…]</b></code>의 작업들이 <code><b>async</b></code><br>모듈로 순차적으로 실행 됩니다. <code><b>tasks[…]</b></code> 작업순서는 다음과 같습니다.</p><ol><li><strong><code><b>formidable</b></code> 모듈를 이용해서 Node 서버로 파일을 업로드 시킵니다.</strong></li><li><strong><code><b>aws-sdk</b></code> 모듈를 이용해서 AWS S3로 파일을 업로드 시킵니다.</strong></li><li><strong><code><b>tasks[…]</b></code> 작업의 결과를 JSON타입으로 클라이언트에게 응답합니다.</strong></li></ol><p>세부적인 작업은 <code><b>UploadService.js</b></code>에서 <code><b>callback</b></code>으로 진행됩니다.<br>아래에서 설명을 계속 진행하겠습니다.</p><p><code><b>UploadService.js S3 &amp; formidable설정 </b></code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span></div><div class="line">    formidable = <span class="built_in">require</span>(<span class="string">'formidable'</span>),</div><div class="line">    AWS = <span class="built_in">require</span>(<span class="string">'aws-sdk'</span>),</div><div class="line">    Upload = &#123;&#125;;</div><div class="line">AWS.config.region = <span class="string">'ap-northeast-2'</span>; <span class="comment">//지역 서울 설정</span></div><div class="line"><span class="keyword">var</span> s3 = <span class="keyword">new</span> AWS.S3();</div><div class="line"><span class="keyword">var</span> form = <span class="keyword">new</span> formidable.IncomingForm(&#123;</div><div class="line">    encoding: <span class="string">'utf-8'</span>,</div><div class="line">    multiples: <span class="literal">true</span>,</div><div class="line">    keepExtensions: <span class="literal">false</span> <span class="comment">//확장자 제거</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">/*S3 버킷 설정*/</span></div><div class="line"><span class="keyword">var</span> params = &#123;</div><div class="line">    Bucket: <span class="string">'BucketName'</span>,</div><div class="line">    Key: <span class="literal">null</span>,</div><div class="line">    ACL: <span class="string">'public-read'</span>,</div><div class="line">    Body: <span class="literal">null</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><code><b>aws_access_key_id, aws_secret_access_key</b></code>값을 소스코드에 입력하시는 것은 보안상 바람직하지 않습니다.<br><a href="http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html" rel="external nofollow noopener noreferrer" target="_blank">AWS Document</a>를 참고하세요.</p><p><code><b>var params = {…}</b></code> 객체는 AWS S3업로드에 대한 정보 입니다.</p><ul><li>Bucket :  S3 Bucket 이름을 지정합니다.</li><li>Key : S3의 경로 및 파일 이름을 지정합니다.</li><li>ACL : 파일 권한에 대한 설정입니다.</li><li>Body : 업로드할 파일의 경로를 지정합니다.</li></ul><p><code><b>UploadService.js 업로드 로직</b></code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Upload.formidable = <span class="function"><span class="keyword">function</span> (<span class="params">req, callback</span>) </span>&#123;</div><div class="line">    form.parse(req, <span class="function"><span class="keyword">function</span> (<span class="params">err, fields, files</span>) </span>&#123;</div><div class="line">    &#125;);</div><div class="line">    form.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        callback(err, <span class="literal">null</span>);</div><div class="line">    &#125;);</div><div class="line">    form.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        callback(<span class="literal">null</span>, <span class="keyword">this</span>.openedFiles);</div><div class="line">    &#125;);</div><div class="line">    form.on(<span class="string">'aborted'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        callback(<span class="string">'form.on(aborted)'</span>, <span class="literal">null</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line">Upload.s3 = <span class="function"><span class="keyword">function</span> (<span class="params">files, callback</span>) </span>&#123;</div><div class="line">    params.Key = <span class="string">'test/'</span>+files[<span class="number">0</span>].name;</div><div class="line">    params.Body = <span class="built_in">require</span>(<span class="string">'fs'</span>).createReadStream(files[<span class="number">0</span>].path);</div><div class="line">    s3.upload(params, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">        callback(err, result);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"><span class="built_in">module</span>.exports = Upload;</div></pre></td></tr></table></figure><p>가장 핵심인 업로드 로직입니다. <code><b>formidable</b></code>, <code><b>s3</b></code> 메서드는 <code><b>callback</b></code> 메서드로<br>각작업의 결과를 넘겨줍니다.</p><p><code><b>formidable 메서드 설명</b></code><br>라우터에서 넘겨준 <code><b>req</b></code> 객체를 기반으로 파일 업로드를 진행합니다.<br>파일 업로드 중 에러가 발생하게 되면 <code><b>form.on(‘error’, …)</b></code> 메서드를 통해서 에러를 <code><b>callback</b></code>으로 넘겨줍니다.</p><p>파일 업로드가 정상적으로 완료되면 <code><b>form.end(null, …)</b></code>메서드가 호출되고 업로드한 파일의 정보(파일 사이즈, 파일 이름, 파일 경로 등등)가 <code><b>callback</b></code> 메서드를 통해서 으로 넘어가게 됩니다.</p><h6><span id="s3-메서드-설명"><code><b>s3</b></code> 메서드 설명</span></h6><p><code><b>async.waterfall</b></code>를 통해서 넘겨받은 <code><b>files</b></code> 객체에는 위에서 설명한 파일 정보가 들어있는 객체입니다.</p><ul><li><code><b>params.Body</b></code>값에는 위에서 업로드한 파일을 넘겨줍니다.</li><li><code><b>params.Key</b></code>값에는 실제 S3에 업로드될 path + 파일 이름을 작성합니다.</li></ul><h4><span id="실행-화면">실행 화면</span></h4><p><img src="https://i.imgur.com/P0bMJdM.png" alt=""><br><img src="https://i.imgur.com/u2qStuu.png" alt=""></p><p><code><b>params.Key</b></code> 값은 <code><b>test/[filename]</b></code> 입니다.<br><code><b>test/</b></code>는 경로로 인식되며 해당 경로가 없는 경우에는 디렉터리를 자동으로 생성해서 파일을 목적지까지 안전하게? 전달됩니다.</p><h4><span id="마무리">마무리</span></h4><p>회사에서 AWS S3업로드를 리펙토링 작업이 있어서 간단하게 정리해봤습니다.<br>추가로 작업한 부분도 포스팅할 예정입니다.<br>아무래도 AWS S3 이미지 업로드시 이미지를 최적화시키는 것이 될듯합니다.<br>앞으로 계속 찾아뵙겠습니다.<br>RSS 링크도 하단에 추가하였으니 추가해주시면 감사하겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Node.Js에서 AWS S3업로드 예제입니다. 본 예제의 전체 소스는 &lt;a href=&quot;https://github.com/cheese10yun/node-yun&quot; rel=&quot;external nofollow noopener noreferrer&quot; tar
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="AWS" scheme="https://cheese10yun.github.io/tags/AWS/"/>
    
      <category term="imagemin" scheme="https://cheese10yun.github.io/tags/imagemin/"/>
    
      <category term="S3" scheme="https://cheese10yun.github.io/tags/S3/"/>
    
      <category term="Image Upload" scheme="https://cheese10yun.github.io/tags/Image-Upload/"/>
    
  </entry>
  
  <entry>
    <title>Node 다른 서버 API 호출</title>
    <link href="https://cheese10yun.github.io/API-CALL/"/>
    <id>https://cheese10yun.github.io/API-CALL/</id>
    <published>2017-02-04T15:00:00.000Z</published>
    <updated>2017-10-12T19:20:21.205Z</updated>
    
    <content type="html"><![CDATA[<p>노드 서버에서 다른 API를 호출하는 방법을 소개해드리겠습니다. 물론 프론트에서 Ajax를 이용해서 다른 서버의 API를 간단하게 호출할 수 있지만 Ajax로 간단하게 호출할 수 있지만, 해당 API를 호출한 이후 자신의 서버에 해당 기록을 남겨야 하는 경우는 프론트가 아닌 백에서 처리해야 합니다.</p><p><strong><em>저희 서비스 예를 들어 설명하면 노드 서버에서 제휴 모바일 게임의 포인트를 Credit 할 수 있는 기능이 있습니다. 이때 게임 서버의 API를 호출을 Node 서버에서 진행해야 해당 기록을 데이터베이스에 남길 수 있습니다.</em></strong></p><p><strong>전체소스는 <a href="https://github.com/cheese10yun/node-yun" rel="external nofollow noopener noreferrer" target="_blank">Github</a>에서 확인할수있습니다. 전체소스를 보시는 것을 권장합니다.</strong></p><h6><span id="필수-패키지-설치">필수 패키지 설치</span></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install request --save</div></pre></td></tr></table></figure><h6><span id="전체-소스">전체 소스</span></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">callee</span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">API_Call</span>(<span class="params">callee</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> OPTIONS = &#123;</div><div class="line">            headers: &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>&#125;,</div><div class="line">            url: <span class="literal">null</span>,</div><div class="line">            body: <span class="literal">null</span></div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">const</span> PORT = <span class="string">'3500'</span>;</div><div class="line">        <span class="keyword">const</span> BASE_PATH = <span class="string">'/api/v1'</span>;</div><div class="line">        <span class="keyword">var</span> HOST = <span class="literal">null</span>;</div><div class="line">        (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (callee) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="string">'dev'</span>:</div><div class="line">                    HOST = <span class="string">'https://dev-api.com'</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'prod'</span>:</div><div class="line">                    HOST = <span class="string">'https://prod-api.com'</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="string">'another'</span>:</div><div class="line">                    HOST = <span class="string">'http://localhost'</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    HOST = <span class="string">'http://localhost'</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)(callee);</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            login : <span class="function"><span class="keyword">function</span> (<span class="params">user_id, password, callback</span>) </span>&#123;</div><div class="line">                OPTIONS.url = HOST + <span class="string">':'</span> + PORT + BASE_PATH + <span class="string">'/login'</span>;</div><div class="line">                OPTIONS.body = <span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">                    <span class="string">"user_id"</span>: user_id,</div><div class="line">                    <span class="string">"password"</span>: password</div><div class="line">                &#125;);</div><div class="line">                request.post(OPTIONS, <span class="function"><span class="keyword">function</span> (<span class="params">err, res, result</span>) </span>&#123;</div><div class="line">                    statusCodeErrorHandler(res.statusCode, callback, result);</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">statusCodeErrorHandler</span>(<span class="params">statusCode, callback , data</span>) </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (statusCode) &#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">200</span>:</div><div class="line">                callback(<span class="literal">null</span>, <span class="built_in">JSON</span>.parse(data));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                callback(<span class="string">'error'</span>, <span class="built_in">JSON</span>.parse(data));</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> INSTANCE;</div><div class="line">    <span class="keyword">if</span> (INSTANCE === <span class="literal">undefined</span>) &#123;</div><div class="line">        INSTANCE = <span class="keyword">new</span> API_Call(callee);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> INSTANCE;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h6><span id="host-설정">HOST 설정</span></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (callee) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">'dev'</span>:</div><div class="line">            HOST = <span class="string">'https://dev-api.com'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'prod'</span>:</div><div class="line">            HOST = <span class="string">'https://prod-api.com'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">'another'</span>:</div><div class="line">            HOST = <span class="string">'http://localhost'</span>;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            HOST = <span class="string">'http://localhost'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;)(callee);</div></pre></td></tr></table></figure><p>즉시 실행 함수로 감싸고 switch 문을 실행시킵니다. <strong><em>타 서버의 API 주소도 dev, prod, etc 등등 각기 다르므로 유동적으로 변경할 수 있게 설정합니다.</em></strong><br><code><b>var API_Call = require(’…/service/API_Call’)(‘another’);</b></code> 이런 식으로 모듈을 require 시킬 때 해당 API 서버를 쉽게 정할 수 있습니다.</p><h6><span id="타-서버의-api-정보-설정">타 서버의 API 정보 설정</span></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">API_Call</span>(<span class="params">callee</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> OPTIONS = &#123;</div><div class="line">        headers: &#123;<span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>&#125;,</div><div class="line">        url: <span class="literal">null</span>,</div><div class="line">        body: <span class="literal">null</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">const</span> PORT = <span class="string">'3500'</span>;</div><div class="line">    <span class="keyword">const</span> BASE_PATH = <span class="string">'/api/v1'</span>;</div><div class="line">    <span class="keyword">var</span> HOST = <span class="literal">null</span>;</div></pre></td></tr></table></figure><ul><li>headers: JSON으로 API를 받을 예정이니 Content-Type을 JSON 으로 설정합니다.</li><li>url : 해당 API의 URL을 의마합니다. 특정 요청에 따라서 달라질 예정이니 null 처리했습니다.</li><li>body : POST,PUT, DEL 등 body값을 전달해주는 객체로 사용됩니다.</li><li>HOST, PORT, BASE_PATH = <a href="http://localhost:3500/api/v1" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3500/api/v1</a> 로 됩니다.</li></ul><h6><span id="로그인-api를-호출-오는-로직으로-간단하게-설명해드리겠습니다">로그인 API를 호출 오는 로직으로 간단하게 설명해드리겠습니다.</span></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    login : <span class="function"><span class="keyword">function</span> (<span class="params">user_id, password, callback</span>) </span>&#123;</div><div class="line">        OPTIONS.url = HOST + <span class="string">':'</span> + PORT + BASE_PATH + <span class="string">'/login'</span>;</div><div class="line">        OPTIONS.body = <span class="built_in">JSON</span>.stringify(&#123;</div><div class="line">            <span class="string">"user_id"</span>: user_id,</div><div class="line">            <span class="string">"password"</span>: password</div><div class="line">        &#125;);</div><div class="line">        request.post(OPTIONS, <span class="function"><span class="keyword">function</span> (<span class="params">err, res, result</span>) </span>&#123;</div><div class="line">            statusCodeErrorHandler(res.statusCode, callback, result);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>이전 블로그에서 포스팅했던 API인 <a href="https://cheese10yun.github.io/passport-mysql">Login API</a>를 호출해보겠습니다. 최종적인 url 값인 <code><b><a href="http://localhost:3500/api/v1/login" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3500/api/v1/login</a></b></code>로body 값으로 넘길 user_id, password를 바인딩 시켜줍니다.</p><p>타 서버의 API를 호출이 완료되면 <code><b>statusCodeErrorHandler</b></code> 메서드를 통해서 에러 핸들링 작업을 진행하게 됩니다.</p><p><strong><em>예제는 같은 로컬 서버의 API를 호출하는 예제 이긴 합니다.(다른 서버를 못구해서… 어쩔수업싱 로컬을 호출했습니다.)</em></strong></p><p><code><b>statusCodeErrorHandler</b></code> 에러 헨들링</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">statusCodeErrorHandler</span>(<span class="params">statusCode, callback , data</span>) </span>&#123;</div><div class="line">    <span class="keyword">switch</span> (statusCode) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">200</span>:</div><div class="line">            callback(<span class="literal">null</span>, <span class="built_in">JSON</span>.parse(data));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            callback(<span class="string">'error'</span>, <span class="built_in">JSON</span>.parse(data));</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>메서드는 로직은 간단합니다. <code><b>statusCode</b></code>를 넘겨 받고 <code><b>statusCode</b></code>200일 경우는 callback으로 결괏값을 넘겨줍니다. 200 이 아닌 경우에는 각각의 환경에 맞게 구현하시면 됩니다.</p><ul><li>200 성공</li><li>400 Bad Request - field validation 실패시</li><li>401 Unauthorized - API 인증,인가 실패</li><li>404 Not found ? 해당 리소스가 없음</li><li>500 Internal Server Error - 서버 에러</li></ul><p><strong>최소 위의 5개 정도의 StatusCode에 알맞은 로직을 추가하는 것을 권장합니다.</strong></p><h6><span id="api-호출">API 호출</span></h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> API_Call = <span class="built_in">require</span>(<span class="string">'../service/API_Call'</span>)(<span class="string">'another'</span>);</div><div class="line">router.post(<span class="string">'/login/another/api'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span></div><div class="line">        user_id = req.body.user_id,</div><div class="line">        password = req.body.password;</div><div class="line"></div><div class="line">    API_Call.login(user_id, password, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!err) &#123;</div><div class="line">            res.json(result);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            res.json(err);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p><code><b>API_Call.js</b></code>를 require 시킬 경우 <code><b>(‘another’)</b></code>를 인자로 넘겨주게되면<br>위에서 설명한 <code><b>HOST 설정</b></code>에서 HOST가 결정됩니다.</p><p><code><b><a href="http://localhost:3500/api/v1/login/another/api" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3500/api/v1/login/another/api</a></b></code>를 호출하게되면 넘겨 받은 user_id, password를 <code><b>API_Call.login</b></code>에게<br>전달되고  <code><b>statusCodeErrorHandler</b></code>를 통해서 최종적으로 callback으로 <code><b>err, result</b></code>를 JSON으로 클라이언트에게 넘겨집니다.</p><p><img src="https://i.imgur.com/BpezpxV.png" alt=""></p><p><strong>Postman을 이용해서 api/v1/login/another/api 를 호출한 결과입니다.</strong></p><h6><span id="마무리">마무리</span></h6><p>역시 소스 코드가 길어지면 코드 설명이 산으로 가는 듯합니다.<br>역량 부족이겠죠… 애초에 구상했던 코드는 아주 간단했는데 욕심을 부려서 조금 더 넣다 보니 제가 봐도 설명 부분이 부족하다는 것이 느껴지네요.<br>그래도 조금이라도 도움이 됬으면 합니다. 긴글 읽어주셔서 감사합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;노드 서버에서 다른 API를 호출하는 방법을 소개해드리겠습니다. 물론 프론트에서 Ajax를 이용해서 다른 서버의 API를 간단하게 호출할 수 있지만 Ajax로 간단하게 호출할 수 있지만, 해당 API를 호출한 이후 자신의 서버에 해당 기록을 남겨
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="API" scheme="https://cheese10yun.github.io/tags/API/"/>
    
      <category term="Call" scheme="https://cheese10yun.github.io/tags/Call/"/>
    
  </entry>
  
  <entry>
    <title>Node Mysql Multiple Insert</title>
    <link href="https://cheese10yun.github.io/mysql-multiple-insert/"/>
    <id>https://cheese10yun.github.io/mysql-multiple-insert/</id>
    <published>2017-01-30T15:00:00.000Z</published>
    <updated>2017-10-12T20:22:35.234Z</updated>
    
    <content type="html"><![CDATA[<p>데이터베이스에 여러 개의 Insert를 할 일은 정말 많습니다. 저희는 대체로 타 게임회사의 데이터를 벌크로 내려받아야 하는 경우가 있어 여러 번의 Insert 작업을 진행하게 됩니다.<br>이러한 경우에 <strong><em>반복문을 사용하지 않고 여러 개를 Insert 하는 방법을 소개해드리겠습니다.</em></strong></p><p><img src="https://i.imgur.com/0v9jD2z.png" alt=""><br>위와 같은 데이터베이스 구조일 경우의 예로 설명을 진행하겠습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> stmt_multiple_insert = <span class="string">'insert into `user` (`user_id`, `password`, `nickname`, `email`, `signup_dt`) values ?;'</span>; <span class="comment">// 쿼리문</span></div><div class="line"><span class="keyword">var</span> values = [</div><div class="line">    [<span class="string">'user_001'</span>, <span class="string">'pw_01'</span>, <span class="string">'name_01'</span>, <span class="string">'email_01@a.com'</span>, <span class="string">'2016-10-10'</span>],</div><div class="line">    [<span class="string">'user_002'</span>, <span class="string">'pw_02'</span>, <span class="string">'name_02'</span>, <span class="string">'email_02@a.com'</span>, <span class="string">'2016-10-10'</span>],</div><div class="line">    [<span class="string">'user_003'</span>, <span class="string">'pw_03'</span>, <span class="string">'name_03'</span>, <span class="string">'email_03@a.com'</span>, <span class="string">'2016-10-10'</span>],</div><div class="line">    [<span class="string">'user_004'</span>, <span class="string">'pw_04'</span>, <span class="string">'name_04'</span>, <span class="string">'email_04@a.com'</span>, <span class="string">'2016-10-10'</span>],</div><div class="line">    [<span class="string">'user_005'</span>, <span class="string">'pw_05'</span>, <span class="string">'name_05'</span>, <span class="string">'email_05@a.com'</span>, <span class="string">'2016-10-10'</span>]</div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">var</span> str_query = connection.query(stmt_multiple_insert, [values], <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">        <span class="built_in">console</span>.log(err);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(str_query.sql);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>구조는 간단합니다. <strong><em>쿼리문은 입력값과 1:1로 대응시키고, 입력값은</em></strong> <code><b>var values</b></code> <strong><em>처럼 배열형태로 선언합니다.</em></strong></p><p><code><b>var str_query = connection.query(…)</b></code> 이렇게 connection 객체를 변수로 할당시키고 <code><b>console.log(str_query.sql)</b></code><br>으로 해당 쿼리를 확인할 수 있습니다.</p><p>쿼리문을 확인하기 위한 작업이라서 실제 배포하는 소스코드에서는 사용하지 않는 것을 권장합니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">//해당 쿼리문</div><div class="line">insert into `user` (`user_id`, `password`, `nickname`, `email`, `signup_dt`) values</div><div class="line">(&apos;user_001&apos;, &apos;pw_01&apos;, &apos;name_01&apos;, &apos;email_01@a.com&apos;, &apos;2016-10-10&apos;),</div><div class="line">(&apos;user_002&apos;, &apos;pw_02&apos;, &apos;name_02&apos;, &apos;email_02@a.com&apos;, &apos;2016-10-10&apos;),</div><div class="line">(&apos;user_003&apos;, &apos;pw_03&apos;, &apos;name_03&apos;, &apos;email_03@a.com&apos;, &apos;2016-10-10&apos;),</div><div class="line">(&apos;user_004&apos;, &apos;pw_04&apos;, &apos;name_04&apos;, &apos;email_04@a.com&apos;, &apos;2016-10-10&apos;),</div><div class="line">(&apos;user_005&apos;, &apos;pw_05&apos;, &apos;name_05&apos;, &apos;email_05@a.com&apos;, &apos;2016-10-10&apos;);</div></pre></td></tr></table></figure><h3><span id="마무리">마무리</span></h3><p>뭐 별 내용이 없네요…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;데이터베이스에 여러 개의 Insert를 할 일은 정말 많습니다. 저희는 대체로 타 게임회사의 데이터를 벌크로 내려받아야 하는 경우가 있어 여러 번의 Insert 작업을 진행하게 됩니다.&lt;br&gt;
이러한 경우에 &lt;strong&gt;&lt;em&gt;반복문을 사용하지
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="Mysql" scheme="https://cheese10yun.github.io/tags/Mysql/"/>
    
      <category term="Multiple Insert" scheme="https://cheese10yun.github.io/tags/Multiple-Insert/"/>
    
  </entry>
  
  <entry>
    <title>블로그를 시작하려는 당신에게(2)</title>
    <link href="https://cheese10yun.github.io/blog-start-part2/"/>
    <id>https://cheese10yun.github.io/blog-start-part2/</id>
    <published>2017-01-30T15:00:00.000Z</published>
    <updated>2017-10-12T20:21:17.747Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://cheese10yun.github.io/blog-start">블로그를 시작하려는 당신에게(1)</a>에서는 블로그를 선택하는 과정을 말했다면 이번 포스팅은 블로그를 많은 사람이 볼 수 있도록 노출 시키는 방법에 대해서 다루어보겠다.</p><p>이왕 시작한 블로그 많은 사람이 보는 게 좀 더 좋지 않겠는가?<del><b>누구나 관종의 피는 가지고 있으니 말이다.</b></del></p><p><strong>네이버 웹마스터 도구, 구글 웹마스터, 구글 에널틱스를 블로그를 노출 시키고 관리해 보자.</strong></p><h3><span id="네이버-웹마스터-도구">네이버 웹마스터 도구</span></h3><p><strong>네이버 웹마스터</strong>에들어가서 사이트를 추가 시킨다.</p><p><img src="https://i.imgur.com/iJNq0q1.png" alt=""></p><p><strong>등록 절차는 간단하니 다루지 않겠다. (사실 스크린샷을 깜빡하고 못 찍었다.)</strong></p><h4><span id="검증에서-웹-페이지-최적화-검사를-진행한다">검증에서 웹 페이지 최적화 검사를 진행한다.</span></h4><p><img src="https://i.imgur.com/IVQHkGT.png" alt=""></p><p>검색결과가 표시되고 문제가 있는 경우는 빨간색으로 X 표시가 나타난다. <strong><em>그 빨간색 표시를 중점으로 개선작업을 진행하면 된다. ?를 클릭하면 친절하게 개선방법을 네이버에서 제안해준다. 대표적인 설정만 짚고 넘어가겠다.</em></strong></p><p><img src="https://i.imgur.com/GfExIWL.png" alt=""></p><h5><span id="오픈-그래프-정보-amp-소셜-미디어">오픈 그래프 정보 &amp; 소셜 미디어</span></h5><p>오픈 그래프 &amp; 소셜미디어 태그는 사이트가 소셜 미디어로 공유될 때 우선적으로 활용되는 정보로, 아래 그림 처럼 미리 사이트를 보여주는 기능이다.</p><p><img src="https://i.imgur.com/e2onpRV.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--오픈 그래프 정보--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:type"</span> <span class="attr">content</span>=<span class="string">"blog"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:title"</span> <span class="attr">content</span>=<span class="string">"Yun Blog"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:description"</span> <span class="attr">content</span>=<span class="string">"Node.js....."</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:image"</span> <span class="attr">content</span>=<span class="string">"https:...images/cover4.jpg"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">property</span>=<span class="string">"og:url"</span> <span class="attr">content</span>=<span class="string">"https://cheese10yun.github.io/"</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--소셜 미디어--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:card"</span> <span class="attr">content</span>=<span class="string">"summary"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:title"</span> <span class="attr">content</span>=<span class="string">"Yun Blog"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:url"</span> <span class="attr">content</span>=<span class="string">"https://cheese10yun.github.io/"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:image"</span> <span class="attr">content</span>=<span class="string">"https:../images/cover4.jpg"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"twitter:description"</span> <span class="attr">content</span>=<span class="string">"...."</span> /&gt;</span></div></pre></td></tr></table></figure><p><strong>해당 테그가 추가안되있는 경우에는 추가시키자.</strong></p><p><img src="/img/blog-start-2/2.png" alt=""></p><p><strong>블로그에 글이 추가되면 네이버 검색로봇이 웹 페이지에 접근해 정보를 수집해가 자동으로 블로그를 네이버에 노출 시켜준다. 설정은 아주 간단하다.</strong></p><h5><span id="robotstxt-설정">robots.txt 설정</span></h5><p><img src="https://i.imgur.com/vyJsG6s.png" alt=""></p><p>검증 탭의 <strong>robots.txt</strong> 에서 설정이 가능하다.<br>네이버에서 해당 robots.txt 파일을 작성해주고 그것을 <strong><em>복사해서 robots.txt을 root에 위치시킨다.</em></strong></p><p>작업이 완료되면 robots.txt 검사를 진행한다. 정상 처리되었으면 ~~수집이 가능합니다. 라는 alert 창을 확인할 수가 있을 것이다.</p><h5><span id="rss-제출">RSS 제출</span></h5><p><img src="https://i.imgur.com/TH3OBbT.png" alt=""></p><p>요청에 RSS 제출 텝에서 RSS 제출해준다.</p><h4><span id="웹-페이지-최적화-검사">웹 페이지 최적화 검사</span></h4><p>위의 작업을 완료하면 다시 웹 페이지 최적화 작업을 진행하고 안 돼 있는 부분이 있다면 네이버에서 제안해주는 작업을 진행한다.</p><h3><span id="마무리">마무리</span></h3><p>생각보다 정리해야할 내용이 많아 구글 웹마스터, 구글 에널틱스는 다음 포스팅에서 다루겠습니다… 분량 조절 실패</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://cheese10yun.github.io/blog-start&quot;&gt;블로그를 시작하려는 당신에게(1)&lt;/a&gt;에서는 블로그를 선택하는 과정을 말했다면 이번 포스팅은 블로그를 많은 사람이 볼 수 있도록 노출 시키는 방법에 대해
      
    
    </summary>
    
    
      <category term="Blog" scheme="https://cheese10yun.github.io/tags/Blog/"/>
    
  </entry>
  
  <entry>
    <title>블로그를 시작하려는 당신에게</title>
    <link href="https://cheese10yun.github.io/blog-start/"/>
    <id>https://cheese10yun.github.io/blog-start/</id>
    <published>2017-01-27T15:00:00.000Z</published>
    <updated>2017-10-12T19:20:46.399Z</updated>
    
    <content type="html"><![CDATA[<p>블로그 포스팅을 하면서 이것저것 불편 하점을 느끼다 보니 <strong>Brunch</strong>에서 <strong>Tistory</strong>로 또 <strong>Tistory</strong>에서 <strong>GitHub Page</strong><br>로 어느덧 3번의 블로그 이전을 강행? 하게 되었다.</p><blockquote><p>개발자란 조금 더 게을러 지기 위해 더 부지런해지는 거 같다…<br>나도 이제 좀 게을러지고 싶다…</p></blockquote><p>각 블로그 사이트들은 장단점이 있고 그것을 모르고 사용했으니 당연한 결과를 맞이했다고 생각한다.</p><p>이번 포스팅의 주제는 내가 경험한 각 블로그 사이트들의 장단점들을 정리 정도 되겠다. 물론 어디까지나 기술 블로그라는 카테고리 안에서 <strong>Brunch, Tistory, GitHub Page</strong>의 장단점을 소개할 것이다.<br><del>각 블로그 사이트들은 한 달 정도밖에 사용 한 건 비밀</del></p><h2><span id="brunch">Brunch</span></h2><p><img src="https://i.imgur.com/vFOrEl9.png" alt=""><br>브런치는 정말 심플하다. 글자 폰트, 인용구, 사진첨부, 외부 링크 추가는 정말 단순하고 간단하며 아름답다.<br>어떻게 보면 다른 블로그 사이트들보다 기능이 적어 보일 수 있으나, <strong><em>이러한 심플한 기능들로 포스팅 내용을 통일성 있게 유지 할 수 있고, 사용자는 많은 것을 생각하게 하지 않고 포스팅할 주제에 최대한 집중할 수 있게 해준다.</em></strong></p><h3><span id="통계기능">통계기능</span></h3><p><img src="https://i.imgur.com/ErnweLf.png" alt=""><br>검색어 유입경로, 글자별 조회 수, 소셜 공유 횟수 등 내 글에 대한 간단한 통계도 심플하게 표현해주고 있어 포스팅후 보는 재미가 쏠쏠하다. 그리고 검색 노출도 잘되는 편이다.</p><h3><span id="맞춤법-검사기능">맞춤법 검사기능</span></h3><p><img src="https://i.imgur.com/gFi6ggt.png" alt=""><br>맞춤법 및 띄어쓰기를 많이 틀리는 나로서는 필수적인 기능이다. 발행하기 전 한 번만 검사를 진행하면 되니 정말 편리하다.</p><h2><span id="하지만">하지만…</span></h2><p><strong><em>내가 Brunch 떠나게 된 가장 큰 이유는 소스코드를 올리는 것이 너무 불편하다는 것이다.</em></strong><br>위에서 설명했듯이 브런치는 통일성 있게 포스팅 내용을 유지하기 위해서 사용자의 커스텀마이징을 거의 지원하지 않기 때문에<br>다른 사용자는 스크린샷을 그대로 올리던가, 코드를 좀 정렬을 해서 올린다.</p><p>Brunch는 정말 단순하고, 통일성 있으며 사용자에게 포스팅할 주제만 집중하게 해주는 좋은 플랫폼이다.<br>하지만 소스코드를 많이 올리는 개발 블로그로는 <strong><em>내 개인적인 생각은 별로다.</em></strong></p><p>물론 코드를 많이 안 올 리는 기술 블로그로는 정말 괜찮은 플랫폼이라고 생각한다.</p><h2><span id="tistory">Tistory</span></h2><p>위에서 설명한 소스코드 문제 때문에 Tistroy로 이전을 했다. 물론 또 GitHub Page로 이전했지만…</p><p>티스토리는 뭐가 <strong><em>&quot;니네들이 뭘 좋아하는지 몰라서 일단 다 준비해봤어&quot;</em></strong> 느낌이랄까? 브런치와는 상당히 대조적인 모습이다. 그럼 티스토리의 특징들을 살펴보자</p><h3><span id="편리한-스킨-변경">편리한 스킨 변경</span></h3><p><img src="https://i.imgur.com/gFi6ggt.png" alt=""></p><p>다양한 스킨을 클릭 몇 번으로 변경이 가능하다. 물론 나한테는 큰 의미가 있는 기능은 아니지만 편리한 기능은 분명하다.</p><h3><span id="다양한-플러그인">다양한 플러그인</span></h3><p><img src="https://i.imgur.com/XcQt4mQ.png" alt=""></p><p>다양한 플러그인들을 쉽게 설치할 수 있다. 방문 통계, 글 내보내기 기능(쉽게 소셜 플랫폼을 이용해서 공유시키는 기능) 등등을 쉽게 지원받을 수 있다.</p><h3><span id="htmlcss-편집">HTML/CSS  편집</span></h3><p><img src="https://i.imgur.com/XRq4Xgm.png" alt=""></p><p>사용자가 직접 블로그를 수정할 수 있는 기능을 제공해준다.</p><h3><span id="하지만">하지만</span></h3><p>내가 경험한 티스토리는 일반인(비 개발자)들에게 편리하게 블로그에 대한 다양한 커스텀마이징을 제공해준다.<br>비 개발자 분들에게는 티스토리는 내 입맛대로 편리하게 고칠 수 있는 블로그 플랫폼이다.<br><strong><em>하지만 나는 개발자고 이들이 제공해주는 방법을 통해서 변경하는 것은 더 시간이 걸리고 귀찮다.</em></strong></p><p><img src="https://i.imgur.com/jdEEavP.png" alt=""><br><strong><em>무엇 보다도 티스토리에서 깃허브 페이지로 옮긴 결정적인 이유는 생산성의 문제이다.</em></strong></p><p>포스팅을 하면 소스코드를 올리던지, 특정 부분을 강조시킨다 던지 등의 다양한 작업을 할 때마다.<br>위의 이벤트를 마우스로 누르고 글 쓰고 또 누르고 글을 쓰고 이러다 보니 생산성이 현저하게 떨어진다.<br><strong><em>포스팅내용을 통일성 있게 유지해야 하는 건 사용자의 몫인것이다.</em></strong></p><p>그래서 한번더 블로그 이전을 하게 되는데…</p><h2><span id="github-page-amp-jekyll">GitHub Page &amp; Jekyll</span></h2><p><img src="https://i.imgur.com/jdEEavP.png" alt=""></p><ul><li><strong><em>소스코드 올리는 것이 편리해야 한다.</em></strong></li><li><strong><em>포스팅 생산성이 좋아야한다.</em></strong></li><li><strong><em>글을 통일성 있게 작성할 수 있어야 한다.</em></strong></li></ul><p>위의 블로그 플랫폼에서 불만이 있었고, 나는 위의 요구사항에 만족하는 블로그 플랫폼을 찾던 중 <strong>GitHub Page</strong>가 제격이라는 생각이 들었다.</p><p><strong>GitHub Page</strong>는 GitHub 저장소의 내용을 웹 페이지로 공짜로 서비스해주는 기능으로 주로 스택틱한 컨텐츠<br>(오픈소스 기술문서)를 주로 서비스합니다. 하지만 여기에 <strong>Jekyll</strong>를 결합하면 다이나믹한 블로그를 만들 수 있다.</p><h3><span id="원큐에-해결">원큐에 해결</span></h3><p>아래 그림처럼 <strong><a href="http://xxx.md" rel="external nofollow noopener noreferrer" target="_blank">xxx.md</a></strong>로 글을 작성하면 <strong><em>Jekyll가 미리 정의된 형식에 맞게 HTML로 알아서 변경시켜준다.</em></strong></p><p><img src="https://i.imgur.com/f9D6CqI.png" alt=""><br><img src="https://i.imgur.com/pCeiCwT.png" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'Hello, GitHub Page'</span>); <span class="comment">//위의 소스코드가 최종적으로 나타나는 형태</span></div></pre></td></tr></table></figure><p><strong>마크다운 문법을 통해서 소스코드 올리는 것, 포스팅 생산성, 통일성 있는 글 작성 등 그동안 내가 불편했던 문제를 다 해결했다.</strong></p><h3><span id="장점">장점</span></h3><ul><li>위에서 설명했듯이 마크다운 문법을 통해서 블로그 포스팅을 작성하니 생산성은 정말 좋다.</li><li>Git을 통해서 블로그 형상관리를 하게 되니 중간중간 글 저장 하기가 편리하다.</li><li>GitHub와 친해질 수 있다.</li><li>IDE를 통해서 포스팅을 하니 근무시간에도 자유스럽게 작성할 수 있다. (다들 내가 일하는 줄안다)</li></ul><h3><span id="단점">단점</span></h3><ul><li>설정하기 좀 귀찮다.</li><li>하나부터 열까지 내가 다 설정해야 한다.</li><li>기초 지식이 조금 필요하다.</li><li>여차하면 필요기능을 내가 만들어야 한다.</li><li>블로그 노출이 상대적으로 안되는 편이다.</li><li>방문자 통계 기능이 없다.</li></ul><h3><span id="나의-생각">나의 생각</span></h3><p>위에서 말했듯이 <strong><em>&quot;개발자는 게을러지기 위해서 좀 더 부지런해야 한다.&quot;</em></strong> 말은 내 인생 지론 중에 하나다.<br>앞으로 게을러지기 위해서 나는 조금 더 부지런하게 설정했고 3번의 블로그 이전을 경험한 나름 베테랑 삽질 블로거가 되었다…</p><p>또 블로그 노출이 안 되는 점, 통계 기능이 없는 점은<br><strong><em>구글 웹 마스터, 네이버 웹 마스터, 구글 에널틱스</em></strong>를 통해서 해결할 수 있다.<br>이 내용은 다음 포스팅에서 다룰 예정이니 자주 와주세요 ^^</p><h3><span id="그래서-결론은">그래서 결론은?</span></h3><p>어디까지나 저의 견해이고 다른 블로그 플랫폼에 대해서 비난하려는 의도는 없습니다.<br>개발 기술 블로그 사이트 플랫폼 중에서 나는 이런 점이 불편했고, 이런 이런 점 때문에 GitHub Page에 정착했다.<br>라는 작은 저의 블로그 이전에 대한 회고록? 이였습니다.</p><p>지금 블로그를 시작하려는 당신에게 가장 해주고 싶은 말은 <strong><em>&quot;일단 시작해라.&quot;</em></strong> 입니다.<br>블로그를 하시면서 불편한 점이 있으면 저처럼 다른 플랫폼을 찾아보게 될 것이고,<br>아니면 다른 해결 방안을 찾을 수도 있을 것입니다. <strong><em>그러니 지금 시작해보세요. 완벽한 준비는 없습니다.</em></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;블로그 포스팅을 하면서 이것저것 불편 하점을 느끼다 보니 &lt;strong&gt;Brunch&lt;/strong&gt;에서 &lt;strong&gt;Tistory&lt;/strong&gt;로 또 &lt;strong&gt;Tistory&lt;/strong&gt;에서 &lt;strong&gt;GitHub Page&lt;/str
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Passport를 이용한 네이버, 카카오, 페이스북 로그인</title>
    <link href="https://cheese10yun.github.io/passport-thirdpart-loginl/"/>
    <id>https://cheese10yun.github.io/passport-thirdpart-loginl/</id>
    <published>2017-01-20T15:00:00.000Z</published>
    <updated>2017-10-12T20:24:19.600Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/dJDKGrn.png" alt="EC2 Innound"></p><p>이전에 <a href="https://cheese10yun.github.io/2017/01/01/Passport-part1/">Passport 간단로그인</a> <a href="https://cheese10yun.github.io/2017/01/05/passport-mysql/">Passport 데이터베이스 연동</a>을 포스팅했습니다. 그래서 이번에는 Passport를 이용한 소셜 로그인 <strong>페이스북, 카카오, 네이버 로그인 및 회원 가입</strong> 기능을 포스팅해보겠습니다. Passport에 대해서 기초지식이 없으시며 앞서 포스티한 주제를 보시는 것을 권장드립니다. 또한 <a href="https://github.com/cheese10yun/node-yun" rel="external nofollow noopener noreferrer" target="_blank">GitHub develop-passport-social-login</a>에 올려져있는 전체 소스를 보는 것을 권장드립니다.</p><h3><span id="developers-등록">Developers 등록</span></h3><p><img src="https://i.imgur.com/2qLERpk.png" alt="EC2 Innound"></p><p>본 포스팅에서는 개발자 등록은 다루지 않겠습니다. 아래의 작업을 하기위해서는 네이버, 카카오, 페이스북 개발자 센터에서 앱설정을 완료해주세요. 본 포스팅은 Passport 로직에 집중하겠습니다.</p><h3><span id="필수-모듈설치-및-require">필수 모듈설치 및 require</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install passport-facebook --save</div><div class="line">npm install passport-kakao --save</div><div class="line">npm install passport-naver --save</div></pre></td></tr></table></figure><p><code>index.js(router)</code>설치한 모듈을 require 시켜줍니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> NaverStrategy = <span class="built_in">require</span>(<span class="string">'passport-naver'</span>).Strategy;</div><div class="line"><span class="keyword">var</span> FacebookStrategy = <span class="built_in">require</span>(<span class="string">'passport-facebook'</span>).Strategy;</div><div class="line"><span class="keyword">var</span> KakaoStrategy = <span class="built_in">require</span>(<span class="string">'passport-kakao'</span>).Strategy;</div></pre></td></tr></table></figure><h3><span id="developers-정보-등록">Developers 정보 등록</span></h3><p>더이상 데이터베이스 정보만 갖고 있지 않아 <code>db_info.js</code> 에서 <code>secret.js</code> 변경했습니다. <code>db_info</code> 로 데이터베이스 접근을 진행하겠습니다. 자세한 내용은 아래에서 다시 설명드리겠습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="string">'secret'</span> :  <span class="string">''</span>,</div><div class="line">  <span class="string">'db_info'</span>: &#123;</div><div class="line">    local: &#123; <span class="comment">// localhost</span></div><div class="line">    ...</div><div class="line">    &#125;,</div><div class="line">    real: &#123; <span class="comment">// real</span></div><div class="line">    ...</div><div class="line">    &#125;,</div><div class="line">    dev: &#123; <span class="comment">// dev</span></div><div class="line">    ...</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="string">'federation'</span> : &#123;</div><div class="line">    <span class="string">'naver'</span> : &#123;</div><div class="line">      <span class="string">'client_id'</span> : <span class="string">''</span>,</div><div class="line">      <span class="string">'secret_id'</span> : <span class="string">''</span>,</div><div class="line">      <span class="string">'callback_url'</span> : <span class="string">'/auth/login/naver/callback'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">'facebook'</span> : &#123;</div><div class="line">      <span class="string">'client_id'</span> : <span class="string">''</span>,</div><div class="line">      <span class="string">'secret_id'</span> : <span class="string">''</span>,</div><div class="line">      <span class="string">'callback_url'</span> : <span class="string">'/auth/login/facebook/callback'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">'kakao'</span> : &#123;</div><div class="line">      <span class="string">'client_id'</span> : <span class="string">''</span>,</div><div class="line">      <span class="string">'callback_url'</span> : <span class="string">'/auth/login/kakao/callback'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p><code>federation</code> 객체에 네이버, 카카오, 페이스북 Developers 정보를 입력합니다.  <code>secret.js</code>  민감한 정보를 갖고있는 파일들은 프로젝트 디렉토리에 포함시키지 않는 것이 바람직합니다. 깃허브에는 소스코드를 공개하기 위해서 업로드하긴 했습니다… <del>안티패턴도 좋은 경험 입니다.</del></p><h3><span id="회원-가입-페이지">회원 가입 페이지</span></h3><p><code>login.hbs &lt;a href&gt;</code> 태그에 로그인 처리를 담당할 URL을 입력합니다. 자세한 로직은 아래에서 설명하겠습니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">name</span>=<span class="string">"frm_login"</span> <span class="attr">id</span>=<span class="string">"frm_login"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>Node JS Passport Login<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">class</span>=<span class="string">"form-control input-lg"</span> <span class="attr">placeholder</span>=<span class="string">"ID"</span> <span class="attr">required</span>=<span class="string">"required"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"errorTxt"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control input-lg"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span> <span class="attr">required</span>=<span class="string">"required"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> /&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"errorTxt"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"btn btn-block btn-lg btn-default btn_login"</span> <span class="attr">value</span>=<span class="string">"Login"</span> /&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/auth/login/facebook"</span> <span class="attr">class</span>=<span class="string">"btn btn-block btn-lg btn-primary btn_login"</span>&gt;</span>FaceBook<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/auth/login/kakao"</span> <span class="attr">class</span>=<span class="string">"btn btn-block btn-lg btn-warning btn_login"</span>&gt;</span>KaKao<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/auth/login/naver"</span> <span class="attr">class</span>=<span class="string">"btn btn-block btn-lg btn-success btn_login"</span>&gt;</span>Naver<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure><h3><span id="passport-로직-구현">Passport 로직 구현</span></h3><p><code>index.js(router)</code><strong>네이버 로그인</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> secret_config = <span class="built_in">require</span>(<span class="string">'../commons/secret'</span>);</div><div class="line"></div><div class="line">passport.use(<span class="keyword">new</span> NaverStrategy(&#123;</div><div class="line">    clientID: secret_config.federation.naver.client_id,</div><div class="line">    clientSecret: secret_config.federation.naver.secret_id,</div><div class="line">    callbackURL: secret_config.federation.naver.callback_url</div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">accessToken, refreshToken, profile, done</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> _profile = profile._json;</div><div class="line"></div><div class="line">    loginByThirdparty(&#123;</div><div class="line">      <span class="string">'auth_type'</span>: <span class="string">'naver'</span>,</div><div class="line">      <span class="string">'auth_id'</span>: _profile.id,</div><div class="line">      <span class="string">'auth_name'</span>: _profile.nickname,</div><div class="line">      <span class="string">'auth_email'</span>: _profile.email</div><div class="line">    &#125;, done);</div><div class="line">  &#125;</div><div class="line">));</div></pre></td></tr></table></figure><p><code>index.js(router)</code><strong>카카오 로그인</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">passport.use(<span class="keyword">new</span> KakaoStrategy(&#123;</div><div class="line">    clientID: secret_config.federation.kakao.client_id,</div><div class="line">    callbackURL: secret_config.federation.kakao.callback_url</div><div class="line">  &#125;,</div><div class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">accessToken, refreshToken, profile, done</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> _profile = profile._json;</div><div class="line"></div><div class="line">    loginByThirdparty(&#123;</div><div class="line">      <span class="string">'auth_type'</span>: <span class="string">'kakao'</span>,</div><div class="line">      <span class="string">'auth_id'</span>: _profile.id,</div><div class="line">      <span class="string">'auth_name'</span>: _profile.properties.nickname,</div><div class="line">      <span class="string">'auth_email'</span>: _profile.id</div><div class="line">    &#125;, done);</div><div class="line">  &#125;</div><div class="line">));</div></pre></td></tr></table></figure><p><code>index.js(router)</code> <strong>페이스북 로그인</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">passport.use(<span class="keyword">new</span> FacebookStrategy(&#123;</div><div class="line">    clientID: secret_config.federation.facebook.client_id,</div><div class="line">    clientSecret: secret_config.federation.facebook.secret_id,</div><div class="line">    callbackURL: secret_config.federation.facebook.callback_url,</div><div class="line">    profileFields: [<span class="string">'id'</span>, <span class="string">'email'</span>, <span class="string">'gender'</span>, <span class="string">'link'</span>, <span class="string">'locale'</span>, <span class="string">'name'</span>, <span class="string">'timezone'</span>,</div><div class="line">      <span class="string">'updated_time'</span>, <span class="string">'verified'</span>, <span class="string">'displayName'</span>]</div><div class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">accessToken, refreshToken, profile, done</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> _profile = profile._json;</div><div class="line"></div><div class="line">    loginByThirdparty(&#123;</div><div class="line">      <span class="string">'auth_type'</span>: <span class="string">'facebook'</span>,</div><div class="line">      <span class="string">'auth_id'</span>: _profile.id,</div><div class="line">      <span class="string">'auth_name'</span>: _profile.name,</div><div class="line">      <span class="string">'auth_email'</span>: _profile.id</div><div class="line">    &#125;, done);</div><div class="line">  &#125;</div><div class="line">));</div></pre></td></tr></table></figure><ul><li>accessToken : OAtuh tokken을 이용해서 네이버, 카카오, 페이스북 오픈 API를 호출합니다.</li><li>refreshToken : tokken이 만료되었을 때 재발급을 용청합니다.</li><li>profile : 네이버, 카카오, 페이스북의 사용자의 정보가 들어있습니다. (이걸 얻기위해서…이 많은 소스를…)</li></ul><p>로직은 크게 다르지 않아 한 번에 설명하겠습니다. <code>secret.js</code> <code>federation</code> 객체있는 <code>client_id, secret_id, callback_url</code>를  passport 에 바인딩 시킵니다.  profile 파라미터로 네이버, 카카오, 페이스북 프로필 정보가 각기 다르게 들어오기 때문에 공통이름으로 바인딩 시키고 <code>loginByThirdparty()</code> 메서드에 바인딩 시킨 유저 정보와 done을 넘겨 줍니다. <code>loginByThirdparty()</code> 메서드에서 로그인 처리 및 회원 가입 절차가 진행되게 됩니다. 아래에서 자세하게 설명하겠습니다.</p><p><code>index.js(router)</code>라우처 처리</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// naver 로그인</span></div><div class="line">router.get(<span class="string">'/auth/login/naver'</span>,</div><div class="line">  passport.authenticate(<span class="string">'naver'</span>)</div><div class="line">);</div><div class="line"><span class="comment">// naver 로그인 연동 콜백</span></div><div class="line">router.get(<span class="string">'/auth/login/naver/callback'</span>,</div><div class="line">  passport.authenticate(<span class="string">'naver'</span>, &#123;</div><div class="line">    successRedirect: <span class="string">'/'</span>,</div><div class="line">    failureRedirect: <span class="string">'/login'</span></div><div class="line">  &#125;)</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// kakao 로그인</span></div><div class="line">router.get(<span class="string">'/auth/login/kakao'</span>,</div><div class="line">  passport.authenticate(<span class="string">'kakao'</span>)</div><div class="line">);</div><div class="line"><span class="comment">// kakao 로그인 연동 콜백</span></div><div class="line">router.get(<span class="string">'/auth/login/kakao/callback'</span>,</div><div class="line">  passport.authenticate(<span class="string">'kakao'</span>, &#123;</div><div class="line">    successRedirect: <span class="string">'/'</span>,</div><div class="line">    failureRedirect: <span class="string">'/login'</span></div><div class="line">  &#125;)</div><div class="line">);</div><div class="line"></div><div class="line"><span class="comment">// facebook 로그인</span></div><div class="line">router.get(<span class="string">'/auth/login/facebook'</span>,</div><div class="line">  passport.authenticate(<span class="string">'facebook'</span>)</div><div class="line">);</div><div class="line"><span class="comment">// facebook 로그인 연동 콜백</span></div><div class="line">router.get(<span class="string">'/auth/login/facebook/callback'</span>,</div><div class="line">  passport.authenticate(<span class="string">'facebook'</span>, &#123;</div><div class="line">    successRedirect: <span class="string">'/'</span>,</div><div class="line">    failureRedirect: <span class="string">'/login'</span></div><div class="line">  &#125;)</div><div class="line">);</div></pre></td></tr></table></figure><p>반복적인 소스라 대표적으로 <strong>Naver</strong> 기준으로 통합해서 설명하겠습니다. <code>login.hbs</code> 에서 네이버 로그인을 클릭했을 경우 <code>router.get('/auth/login/naver'...)</code> 으로 요청이들어고 아래의 <code>NaverStrategy</code> 모듈로 다시 전달됩니다.</p><p><code>passport.use(new NaverStrategy(...)</code> 여기에서는 OAuth 요청을 만들어서 네이버 로그인 처리를 진행하고 요청결과를 아래의 라우터로 리다이렉트를 시켜줍니다.</p><p><code>router.get('/auth/login/naver/callback'...)</code> 해당 라우터는 로그인이 성공할 경우 인덱스 페이지로 리다이렉트 시켜주고 실패할 경우에는 다시 <code>'/login'</code> 다시 로그인 페이지로 리다이렉트 시켜줍니다.</p><h3><span id="로그인-및-회원-가입-로직">로그인 및 회원 가입 로직</span></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loginByThirdparty</span>(<span class="params">info, done</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'process : '</span> + info.auth_type);</div><div class="line">  <span class="keyword">var</span> stmt_duplicated = <span class="string">'select *from `user` where `user_id` = ?'</span>;</div><div class="line"></div><div class="line">  connection.query(stmt_duplicated, info.auth_id, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      <span class="keyword">return</span> done(err);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">if</span> (result.length === <span class="number">0</span>) &#123;</div><div class="line">        <span class="comment">// 신규 유저는 회원 가입 이후 로그인 처리</span></div><div class="line">        <span class="keyword">var</span> stmt_thridparty_signup = <span class="string">'insert into `user` set `user_id`= ?, `nickname`= ?'</span>;</div><div class="line">        connection.query(stmt_thridparty_signup, [info.auth_id, info.auth_name], <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">          <span class="keyword">if</span>(err)&#123;</div><div class="line">            <span class="keyword">return</span> done(err);</div><div class="line">          &#125;<span class="keyword">else</span>&#123;</div><div class="line">            done(<span class="literal">null</span>, &#123;</div><div class="line">              <span class="string">'user_id'</span>: info.auth_id,</div><div class="line">              <span class="string">'nickname'</span>: info.auth_name</div><div class="line">            &#125;);</div><div class="line">          &#125;</div><div class="line">        &#125;);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="comment">//기존유저 로그인 처리</span></div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'Old User'</span>);</div><div class="line">        done(<span class="literal">null</span>, &#123;</div><div class="line">          <span class="string">'user_id'</span>: result[<span class="number">0</span>].user_id,</div><div class="line">          <span class="string">'nickname'</span>: result[<span class="number">0</span>].nickname</div><div class="line">        &#125;);</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>auth.id</code> 기반으로 신규 회원인지 기존 회원인지 판단합니다. 신규 회원일 경우에는 <code>user</code> 테이블에 회원 정보를 저장 시키고 로그인 처리를 진행하고, 기존 유저일 경우에는 쿼리로 조회한 회원정보를 기반으로 로그인 처리를 진행합니다.<br>간단하게 말씀드리면 신규회원이든 기존 회원이든 원클릭으로 회원 가입 절차를 진행하게 할 수 있습니다.</p><p>사실 위의 예제는 좀 과격?한 부분이 좀있습니다. <code>auth.id</code> 는 중복될 일이 거의 없을 거 같긴 하지만  <code>auth.nickname</code> 같은 경우는 중복의 여지가 상당합니다. 사실 위의 예제는 중복의 여지가 있으니 추후 로직은 각자 알아서…<del>안티패턴도 좋은 경험 입니다.</del></p><p>저희 서비스에는 타 게임회사의 계정과 연동해야 하기 때문에 소셜 회원가입을 진행한 사용자에 대해서는 게임 로그인 진행 전에 아이디, 패스워드, 닉네임값을 한 번 더 입력 더 받고 있습니다.</p><p>교보문고 사이트 경우에도 네이버 아이디로 회원가입을 진행하고 교보문고 계정에 대해서 아이디, 패스워드를 한 번 더 입력받는 시스템입니다. <del>우리만 그런게 아니야…</del></p><h3><span id="마무리">마무리</span></h3><p>위의 예제는 깃허브에 있는 전체 코드를 보시는 것을 권장해 드립니다. 생각보다 예제소스가 길어서 설명하는 게 매끄럽지 못한 거 같습니다. 로그인 및 회원 가입 로직은 각자 환경에 맞게 설계해야 할 거 같아 최대한 단순하게 로직 처리를 진행하게 됐습니다. 긴글 읽어주셔서 감사합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/dJDKGrn.png&quot; alt=&quot;EC2 Innound&quot;&gt;&lt;/p&gt;
&lt;p&gt;이전에 &lt;a href=&quot;https://cheese10yun.github.io/2017/01/01/Passport-part1
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="Login" scheme="https://cheese10yun.github.io/tags/Login/"/>
    
      <category term="Passport" scheme="https://cheese10yun.github.io/tags/Passport/"/>
    
      <category term="Kakao" scheme="https://cheese10yun.github.io/tags/Kakao/"/>
    
      <category term="Naver" scheme="https://cheese10yun.github.io/tags/Naver/"/>
    
      <category term="Facebook" scheme="https://cheese10yun.github.io/tags/Facebook/"/>
    
  </entry>
  
  <entry>
    <title>Crontab을 이용한 노드 API 호출</title>
    <link href="https://cheese10yun.github.io/crontab-api/"/>
    <id>https://cheese10yun.github.io/crontab-api/</id>
    <published>2017-01-10T15:00:00.000Z</published>
    <updated>2017-10-12T20:22:35.229Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 스타트업에서 근무하고 있는 신입 개발자입니다. 이번에 포스팅할 주제는 Crontab을 이용해서 특정 시점에Node API를 호출하는 내용입니다. <a href="https://github.com/cheese10yun/node-yun" rel="external nofollow noopener noreferrer" target="_blank">GitHub Brnacb develop-crontab-api</a>에 소스코드 참고해주세요</p><h3><span id="crontab-간단-설명">Crontab 간단 설명</span></h3><p>Crontab은 스케줄링을 관리해주는 프로그램으로 특정 시간에 사용자가 직성한 스크립트나 명령어을 간단하게 실행시킬수 있습니다. 시간 설정이 매우 간단하고 직관적이라서 쉽게 사용 가능한게 가장큰 장점입니다.</p><pre><code>*    *    *    *    *  수행할 명령어┬   ┬   ┬   ┬   ┬│   │   │   │   ││   │   │   │   ││   │   │   │   └───────── 요일 (0 - 6) (0 =일요일)│   │   │   └────────── 월 (1 - 12)│   │   └─────────── 일 (1 - 31)│   └──────────── 시 (0 - 23)└───────────── 분 (0 - 59)</code></pre><h3><span id="crontab-등록">Crontab 등록</span></h3><p>Crontab 설치는 여기서 다루지 않고 진행하겠습니다. 등록하기 전에 crontab에서 실행될 쉘스크립트 파일을 생성합니다. 해당 스크립트 작성은 Crontab등록이후 진행하겠습니다. 저 같은 경우는 crontab.sh로 생성했습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">crontab -e</div><div class="line">5 0 * * * /path/../crontab.sh</div></pre></td></tr></table></figure><p>crontab -e 명령어를 입력하게 되면 VI 모드로 반복될 시간 설정과 해당 스크립프 파일 경로를 설정합니다. 위에서 설명 했다 싶이 매일 12시간 05분에 crontab.sh를 호출하게 설정하였습니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">crontab -l</div></pre></td></tr></table></figure><p>위의 명령어로 crontab 등록을 확인합니다.</p><p><code>crontab.sh</code> 스크립트 파일 작성</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">'start delete table info...'</span>;</div><div class="line"></div><div class="line">curl -H <span class="string">"Content-Type: application/json"</span> -X DELETE -d <span class="string">'</span></div><div class="line"><span class="string">  &#123;"sql":"delete from `user` where  `user_id` is not null;"&#125;</span></div><div class="line"><span class="string">  '</span> http://localhost:3500/api/v1/crontab</div><div class="line"></div><div class="line"><span class="built_in">echo</span> <span class="string">'success...'</span>;</div></pre></td></tr></table></figure><p>사실 게임데이터는 레디스에 저장하고 있어 셈플 예제로는 다소 복잡해서 이전에 설명했던 예제로 간단한 user 테이블의 모든 항목의 user 칼럼을 지우는 예제로 대체 하겠습니다. &quot;DELETE&quot;을 PUT, POST로 변경하셔도 그대로 작성 가능합니다</p><h3><span id="node-api-설정">Node API 설정</span></h3><p><code>api.js</code> <a href="https://cheese10yun.github.io/2017/01/05/passport-mysql/">api.js 설정</a> 은 이전 블로그 포스팅 내용을 참고해주세요.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">router.delete(<span class="string">'/crontab'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> sql = req.body.sql;</div><div class="line">  connection.query(sql, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      res.json(&#123;</div><div class="line">        success: <span class="literal">false</span>,</div><div class="line">        err: err</div><div class="line">      &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      res.json(&#123;</div><div class="line">        success: <span class="literal">true</span>,</div><div class="line">        msg: <span class="string">'Delete Success'</span></div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;)</div></pre></td></tr></table></figure><p>req.body.sql 객체로 쿼리문을 받고 해당 쿼리문을 실행하는 간단한 예제입니다.</p><h3><span id="crontab-실행-확인">Crontab 실행 확인</span></h3><p><img src="https://i.imgur.com/BFB2EKG.png" alt="EC2 Innound"></p><p>위의 예제는 12시 05분에 실행되니 그 시간까지 기다릴 수는 없죠…. 그래도 1분에 한 번 실행되는 crontab 설정으로 실행이 되나 테스트를 진행하는 것도 권장합니다. 또한, 스크립트 파일을 명령어로 직접 실행시켜 일단 스크립트 파일이 제대로 작성되었나부터 확인하시는 것이 더욱 더 권장합니다.</p><h3><span id="마무리">마무리…</span></h3><p>브런치를 사용하다가 소스코드 올리는 것이 너무 불편해서 티스토리로 블로그를 이전했습니다. 앞으로는 티스토리에서 계속 찾아뵙겠습니다. 긴글 읽어주셔서 감사합니다.<br>하지만… 깃허브 페이지로 또 옮겼네요… 3 번째 이사…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;안녕하세요 스타트업에서 근무하고 있는 신입 개발자입니다. 이번에 포스팅할 주제는 Crontab을 이용해서 특정 시점에Node API를 호출하는 내용입니다. &lt;a href=&quot;https://github.com/cheese10yun/node-yun&quot; 
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="Crontab" scheme="https://cheese10yun.github.io/tags/Crontab/"/>
    
      <category term="Scheduler" scheme="https://cheese10yun.github.io/tags/Scheduler/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap Modal 입력값 초기화</title>
    <link href="https://cheese10yun.github.io/bootstrap-modall/"/>
    <id>https://cheese10yun.github.io/bootstrap-modall/</id>
    <published>2017-01-09T15:00:00.000Z</published>
    <updated>2017-10-12T20:22:35.236Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/SHu3JYX.png" alt="EC2 Innound"></p><p>부트스트랩 모달에서 값을 입력하고 모달을 닫으면 이전 입력값은 초기화 되지 않고 남아 있습니다. 이 입력값을 모달을 닫을때 같이 초기화 시켜주는 예제 및 활용법 에대해서 포스팅을 진행하겠습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'.modal'</span>).on(<span class="string">'hidden.bs.modal'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'modal close'</span>);</div><div class="line">  $(<span class="keyword">this</span>).find(<span class="string">'form'</span>)[<span class="number">0</span>].reset()</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3><span id="활용방법">활용방법</span></h3><p>해당 로직은 공통으로 사용될 로직이니 공통적으로 사용되는 로직체 추가하는 것이 좋습니다.</p><p>생각 보다 내용이 없네요…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/SHu3JYX.png&quot; alt=&quot;EC2 Innound&quot;&gt;&lt;/p&gt;
&lt;p&gt;부트스트랩 모달에서 값을 입력하고 모달을 닫으면 이전 입력값은 초기화 되지 않고 남아 있습니다. 이 입력값을 모달을 닫을때
      
    
    </summary>
    
    
      <category term="Bootstrap" scheme="https://cheese10yun.github.io/tags/Bootstrap/"/>
    
      <category term="Modal" scheme="https://cheese10yun.github.io/tags/Modal/"/>
    
  </entry>
  
  <entry>
    <title>Node Passport를 이용한 Login + Mysql</title>
    <link href="https://cheese10yun.github.io/passport-mysql/"/>
    <id>https://cheese10yun.github.io/passport-mysql/</id>
    <published>2017-01-06T15:00:00.000Z</published>
    <updated>2017-10-12T20:24:19.597Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 스타트업에서 근무하고 있는 신입 개발자입니다. 이전 포스팅에서는 데이터베이스 연결 없이 가단 한 문자열로 비교로 Passport를 이용해서 사용자 인증 절차를 진행했었습니다.</p><p>이전에 간략하게 데이터베이스 연동도 포스팅했고, 이제 단순 문자열 비교가 아닌 데이터베이스를 활용하여 Passport Login 포스팅을 진행하겠습니다.</p><p>블로그를 보고 이해가 안 가시면 <a href="https://github.com/cheese10yun/node-yun" rel="external nofollow noopener noreferrer" target="_blank">GitHub Branch develop-passport-mysql</a>를 통해 전체 소스를 보시는 것과 이전 포스팅을 참고하시길 바랍니다.</p><p><strong>이번 포스팅에서 다룰 주제는 다음과 같습니다.</strong></p><ul><li>Login API 설정</li><li>bcrypt를 통한 패스워드 비교</li><li>JQuery Validate를 통한 Valdation 검사</li><li>Passport Login 데이터베이스 비교 로직 추가</li></ul><h3><span id="필수-모듈-설치">필수 모듈 설치</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install jquery-validation --save</div><div class="line">npm install bcrypt --save</div></pre></td></tr></table></figure><h3><span id="api-라우터-설정">API 라우터 설정</span></h3><p><code>app.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> api = <span class="built_in">require</span>(<span class="string">'./routes/api'</span>);</div><div class="line">...</div><div class="line">app.use(express.static(path.join(__dirname, <span class="string">'node_modules'</span>)));</div><div class="line">...</div><div class="line">app.use(<span class="string">'/api/v1'</span>, api);</div></pre></td></tr></table></figure><p>새로 생성한  <code>api.js</code>를 라우터에 추가하는 작업을 진행합니다. 해당 파일을 require 시키고 라우터에 대한 URL를 지정합니다. <code>app.use('/api/v1', api);</code>  이런 식으로 라우터 설정을 진행하게 되면 <code>/ap/v1 URL</code>로 들어오는 클라이언트의 요청은 이곳으로 들어오게 됩니다.</p><p>다시 말하면<br><strong>/ap/v1/login</strong><br><strong>/ap/v1/user</strong><br><strong>/ap/v1/…</strong></p><p>위와 같은 클라이언트의 요청은 모두 api.js 라우터에서 처리하게 됩니다.</p><h3><span id="필수-모듈-require">필수 모듈 require</span></h3><p><code>app.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</div><div class="line"><span class="keyword">var</span> router = express.Router();</div><div class="line"><span class="keyword">var</span> mysql_dbc = <span class="built_in">require</span>(<span class="string">'../db/db_con'</span>)();</div><div class="line"><span class="keyword">var</span> connection = mysql_dbc.init();</div><div class="line"><span class="keyword">var</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcrypt'</span>);</div></pre></td></tr></table></figure><p>필요한 모듈을 require 시킵니다. bcrypt 모듈을 통해서 데이터베이스에 암호와 돼있는 패스워드와 로그인 시 입력한 패스워드를 비교 작업을 진행합니다. bcrypts는 다음 포스팅에서 다루겠습니다. 이번 포스팅에서는 정말 간단하게 설명하고 지나가겠습니다.</p><h3><span id="api-login-로직">API Login 로직</span></h3><p><code>api.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">router.post(<span class="string">'/login'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span></div><div class="line">    user_id = req.body.username,</div><div class="line">    password =   req.body.password;</div><div class="line"></div><div class="line">  connection.query(<span class="string">'select *from `user` where `user_id` = ?'</span>, user_id, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'err :'</span> + err);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">if</span> (result.length === <span class="number">0</span>) &#123;</div><div class="line">        res.json(&#123;<span class="attr">success</span>: <span class="literal">false</span>, <span class="attr">msg</span>: <span class="string">'해당 유저가 존재하지 않습니다.'</span>&#125;)</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (!bcrypt.compareSync(password, result[<span class="number">0</span>].password)) &#123;</div><div class="line">          res.json(&#123;<span class="attr">success</span>: <span class="literal">false</span>, <span class="attr">msg</span>: <span class="string">'비밀번호가 일치하지 않습니다.'</span>&#125;)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          res.json(&#123;<span class="attr">success</span>: <span class="literal">true</span>&#125;)</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">module</span>.exports = router;</div></pre></td></tr></table></figure><p>라우터의 URL 경로를 보시면 /login으로 돼있습니다. 이미 app.js에서 /api/v1 URL로 지정했으니 /api/v1는 생략하시고 나머지 URL 경로를 입력하시면 됩니다. 즉 위의 UR 경로는 /api/v1/login입니다.</p><p>위의 로직은 간단합니다. 로그인폼에서 넘어온 유저의 값으로 쿼리를 보내 해당 값을  result에 가져옵니다. result의length 값이  0이면 해당 유저가 존재하지 않으니 json 타입으로 해당 메시지와 로그인에 결과를 반환시킵니다.</p><p>bcrypt의 compareSync 메서드를 통해서 로그인 폼에서 넘어온 패스워드와 데이터베이스의 패스워드가 일치하는지 여부를  판단합니다. 패스워드가 일치하지 않으면 json 타입으로 해당 메시지와 로그인 결과를 반환시킵니다.</p><p>참고로 bcrypt 통해서 패스워드 &quot;qwer1234&quot;를 암호화시켰고 그 암호화된 값은 “$2a$10$gpZRmDYkWIfrKkPDfzPGEO.SB39f6qeFQ036yiZ0rdsQQgWeDudBO” 입니다. compareSync메서드는 위에서 말한 두 개의 문자열 값을 비교합니다. bcrypt에 대한 설명은 다음번에 다루겠습니다.</p><p>마지막으로 위의 로직인 해당 유저가 존재하고, 패스워드가 맞을 경우 json 타입으로 success에 true를 반환시켜줍니다.</p><p>이제 백엔드 작업을 어느 정도 마무리했으니 프런트 엔드 쪽으로 설명하겠습니다.</p><h4><span id="이전-포스팅에서-작성한-loginhbs-하단에-아래코드를-붙여넣습니다">이전 포스팅에서 작성한 login.hbs 하단에 아래코드를 붙여넣습니다.</span></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-validation/dist/jquery.validate.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"javascripts/login.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure><p>이전 예제에서 설정한 login.hbs 파일에 해당 js를 포함시켜줍니다. validation.js는 npm 모듈로 설치한 validation을 담당해주는 모듈이고 logis.js는 validation를 이용해서 위에서 만든 api.js에게 로그인폼 정보를 넘겨주는 것을 담당합니다.</p><p>해당 뷰 파일과 자바스크립트 파일 이름을 동일하게 하는 것이 관리하기 편해서 같은 네임을 갖는 것을 권장드립니다. 참고로 저런 식으로 npm으로 설치한 모듈에 대한 접근을 하시려면 app.js 파일에 아래의 소스를 반드시 작성해야합니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app.use(express.static(path.join(__dirname, <span class="string">'node_modules'</span>)));</div></pre></td></tr></table></figure><p><code>login.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#frm_login'</span>).validate(&#123;</div><div class="line">  onkeyup: <span class="literal">false</span>,</div><div class="line">  submitHandler: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;,</div><div class="line">  rules: &#123;</div><div class="line">    username: &#123;</div><div class="line">      required: <span class="literal">true</span>,</div><div class="line">      minlength: <span class="number">6</span></div><div class="line">    &#125;,</div><div class="line">    password: &#123;</div><div class="line">      required: <span class="literal">true</span>,</div><div class="line">      minlength: <span class="number">8</span>,</div><div class="line">      remote: &#123;</div><div class="line">        url: <span class="string">'/api/v1/login'</span>,</div><div class="line">        type: <span class="string">'post'</span>,</div><div class="line">        data: &#123;</div><div class="line">          username: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> $(<span class="string">'#username'</span>).val();</div><div class="line">          &#125;</div><div class="line">        &#125;,</div><div class="line">        dataFilter: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">          <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(data);</div><div class="line">          <span class="keyword">if</span> (data.success) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"\""</span> + data.msg + <span class="string">"\""</span>;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>jQuery validate는 많이들 사용하실 거 같으니 간략하게 설명하겠습니다. 사용자의 입력값에 대한 유효성 검사는 반드시 해야 할 작업이지만 상당히 귀찮은 작업입니다. 그런 것을 도와주는 라이브러리라고 생각하시면 됩니다.</p><p>사용법은 간단합니다. rules 객체에 해당  html input name값으로 객체를 만들고 필요한 설정을 이어 나가면 됩니다.</p><p>위에 설정은 username필드는 반드시 입력되어야 하고 최소 길이가 6 이상 이여야 한다는 조건이 설정돼있습니다. 방금 설명한 조건을 만족시키지 않을 경우는 <code>/api/v1/login</code>을 호출하지 않습니다. 이로서 서버는 불필요한 요청을 받지 않아도 되고 클라이언트도 불필요하게 서버에게 요청하지 않고 자신의 username 필드에 제대로 입력하지 않았다는 것을 확인할 수 있습니다.</p><p><img src="https://i.imgur.com/2V9a6TK.png" alt=""><br><img src="https://i.imgur.com/XKKtAdc.png" alt=""></p><p>해당 validation에 통화하지 않으면 각각에 맞는 메시지를 화면에 표시합니다. messsage 객체를 통해서 에러 메시지를 설정할 수도 있습니다. 아무것도 설정하지 않으면 영어로 해당  rules에 맞게 에러 메시지가 출력됩니다</p><h4><span id="loginjs-jqeury-validate-remove">login.js jQeury validate remove</span></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">remote: &#123;</div><div class="line">  url: <span class="string">'/api/v1/login'</span>,</div><div class="line">  type: <span class="string">'post'</span>,</div><div class="line">  data: &#123;</div><div class="line">    username: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> $(<span class="string">'#username'</span>).val();</div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  dataFilter: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(data);</div><div class="line">    <span class="keyword">if</span> (data.success) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="string">"\""</span> + data.msg + <span class="string">"\""</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>password의 객체에 remote가 중요합니다. 위의 소스 중에 remote 부분만 따로 설명드리겠습니다.</p><p>패스워드 필드의 rules조건이 충족되면 위에서 만든 api.js의 /api/v1/login URL로 요청을 보내게 됩니다. password 객체에 remote 객체가 있기 때문에 password 값은 자동으로 넘어가게 되고 유저네임의 값은 username 메서드를 통해서 전해지게 됩니다.</p><p>즉 위에서 작성한 router.post(’/login’, function (req, res, next) {…} 라우터로 username, password가 전달됩니다. 전달받은 값을 기준으로 로그인 성공 여부와 그에 따른 메시지를 반환시켜줍니다.</p><p>dataFilter 메서드는 위에서 반환시켜주는 값을 data 파마미터를 통해서 받습니다. JSON.parse 메서드를 통해서 Object로 변환시켜줍니다.</p><p><img src="https://i.imgur.com/MCCndzb.png" alt=""><br><img src="https://i.imgur.com/ZtlY3cK.png" alt=""></p><p>로그인 성공 여부를 판단하고 로그인 실패 시 login api에서 반환시키는 메시지를 출력시킵니다. 로그인이 성공할 경우는 login.hbs의  form action 값인 /login으로 전송이 이루어집니다.<br><code>index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">passport.use(<span class="keyword">new</span> LocalStrategy(&#123;</div><div class="line">  usernameField: <span class="string">'username'</span>,</div><div class="line">  passwordField: <span class="string">'password'</span>,</div><div class="line">  passReqToCallback: <span class="literal">true</span> <span class="comment">//인증을 수행하는 인증 함수로 HTTP request를 그대로  전달할지 여부를 결정한다</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">req, username, password, done</span>) </span>&#123;</div><div class="line">  connection.query(<span class="string">'select *from `user` where `user_id` = ?'</span>, username, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (err) &#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="string">'err :'</span> + err);</div><div class="line">      <span class="keyword">return</span> done(<span class="literal">false</span>, <span class="literal">null</span>);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">if</span> (result.length === <span class="number">0</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'해당 유저가 없습니다'</span>);</div><div class="line">        <span class="keyword">return</span> done(<span class="literal">false</span>, <span class="literal">null</span>);</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> (!bcrypt.compareSync(password, result[<span class="number">0</span>].password)) &#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'패스워드가 일치하지 않습니다'</span>);</div><div class="line">          <span class="keyword">return</span> done(<span class="literal">false</span>, <span class="literal">null</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="built_in">console</span>.log(<span class="string">'로그인 성공'</span>);</div><div class="line">          <span class="keyword">return</span> done(<span class="literal">null</span>, &#123;</div><div class="line">            user_id: result[<span class="number">0</span>].user_id,</div><div class="line">            nickname: result[<span class="number">0</span>].nickname</div><div class="line">          &#125;);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;)</div><div class="line">&#125;));</div></pre></td></tr></table></figure><p>이전 포스팅에서는 문자열 비교로 passport 인증 부분을 데이터베이스를 통한 인증으로 수정하였습니다. 위에서 설명해드렸던 api login 로직과 크게 다르지 않으며 로그인 성공 시에 user_id, nickname을 세션에 저장시킵니다. 이 전에 포스팅했던 passport 로직이 index에 있어 이 곳에서 동일한 작업을 진행하였습니다.</p><p><img src="https://i.imgur.com/E3Q7px1.png" alt=""></p><h3><span id="정리하며">정리하며…</span></h3><p>이번 포스팅은 상대적으로 소스 내용이 길어 다들 이해하셨을지 모르겠습니다. 이해가 안 되시면 깃허브에 있는 전체 소스를 보는 것을 추천드립니다. 깃허브에 있는 프로젝트에 해당 branch 마다 기능을 정리하는 방식으로 조금씩 조금씩 기능을 추가할 계획입니다. 기능은 딱히 통일성은 없고 많이 사용하고, 사내에서 만든 기능들을 추가할 거 같습니다. AWS S3 업로드, Passport 소셜 로그인, Redis 등 다소 통일성은 없으나 어디서나 쓸 수 있는 것들을 간단하게 정리해 나아가겠습니다.</p><p>긴 글 읽어주셔서 감사드립니다. 다들 올해도 재미있게 개발할 수 있는 한 해가 되셨으면 합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;안녕하세요 스타트업에서 근무하고 있는 신입 개발자입니다. 이전 포스팅에서는 데이터베이스 연결 없이 가단 한 문자열로 비교로 Passport를 이용해서 사용자 인증 절차를 진행했었습니다.&lt;/p&gt;
&lt;p&gt;이전에 간략하게 데이터베이스 연동도 포스팅했고,
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="Login" scheme="https://cheese10yun.github.io/tags/Login/"/>
    
      <category term="Passport" scheme="https://cheese10yun.github.io/tags/Passport/"/>
    
      <category term="Mysql" scheme="https://cheese10yun.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Node.JS + Mysql 연동</title>
    <link href="https://cheese10yun.github.io/mysql-node/"/>
    <id>https://cheese10yun.github.io/mysql-node/</id>
    <published>2017-01-04T15:00:00.000Z</published>
    <updated>2017-10-12T20:22:35.232Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 스타트업에서 근무하고 있는 신입 개발자입니다. 이번에 정리할 내용은 Node + Mysql 연동입니다. 이미 수많은 예제가 있으나 앞으로 포스팅할 내용들이 데이터베이스가 필수적으로 필요하니 간단 정리 및 간단하게 팁?을 소개하여드리겠습니다.</p><p>저희 회사 개발 환경은 각자 로컬에서 개발을 진행하고, 어느 정도 개발이 완료되면 테스트 서버에서 QA를 진행하고 실제 서버에 반영시키는 방식으로 진행하고 있습니다.</p><p>그래서 데이터 베이스도 로컬, 데브 서버, 리얼서버 이렇게 3개의 정보를 갖고 있어야 합니다. 또 개발 중간중간에 실서버의 데이터 베이스의 접근이 필요할 경우도 더러 있습니다. 이러한 경우에 간단하게 프로퍼티를 이용해서 데이터베이스 정보를 변경할 수 있는  팁을 알려드리겠습니다. 아래에 링크도 있으니 이해가 안 되시면 참조하시길 바랍니다.</p><p><a href="https://github.com/cheese10yun/node-yun" rel="external nofollow noopener noreferrer" target="_blank">Branch develop-mysql</a></p><h3><span id="mysql-모듈설치">mysql 모듈설치</span></h3><p><em>우선 필요 모듈부터 설치를 진행합니다. 데이터베이스 설치 및 설정은 다른 블로그에서 많이 다루고 있으니 생략하겠습니다.</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install mysql --save</div></pre></td></tr></table></figure><p><code>db_info.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    local: &#123; <span class="comment">// localhost</span></div><div class="line">      host: <span class="string">'localhost'</span>,</div><div class="line">      port: <span class="string">'3306'</span>,</div><div class="line">      user: <span class="string">'root'</span>,</div><div class="line">      password: <span class="string">''</span>,</div><div class="line">      database: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">    real: &#123; <span class="comment">// real server db info</span></div><div class="line">      host: <span class="string">''</span>,</div><div class="line">      port: <span class="string">''</span>,</div><div class="line">      user: <span class="string">''</span>,</div><div class="line">      password: <span class="string">'!'</span>,</div><div class="line">      database: <span class="string">''</span></div><div class="line">    &#125;,</div><div class="line">    dev: &#123; <span class="comment">// dev server db info</span></div><div class="line">      host: <span class="string">''</span>,</div><div class="line">      port: <span class="string">''</span>,</div><div class="line">      user: <span class="string">''</span>,</div><div class="line">      password: <span class="string">''</span>,</div><div class="line">      database: <span class="string">''</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure><p>데이터베이스의 정보가 저장돼있는 곳입니다. 로컬 환경, 실제 서버 환경, 테스트 서버 환경에 필요한 정보를 입력해주세요.</p><p><code>db_con.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>);</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../db/db_info'</span>).local;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    init: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> mysql.createConnection(&#123;</div><div class="line">        host: config.host,</div><div class="line">        port: config.port,</div><div class="line">        user: config.user,</div><div class="line">        password: config.password,</div><div class="line">        database: config.database</div><div class="line">      &#125;)</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    test_open: <span class="function"><span class="keyword">function</span> (<span class="params">con</span>) </span>&#123;</div><div class="line">      con.connect(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (err) &#123;</div><div class="line">          <span class="built_in">console</span>.error(<span class="string">'mysql connection error :'</span> + err);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="built_in">console</span>.info(<span class="string">'mysql is connected successfully.'</span>);</div><div class="line">        &#125;</div><div class="line">      &#125;)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>데이터베이에 커넥트 하는 부분을 담당합니다. config 변수를 보시면 local 프로퍼티를 이용해서 db_info.js에 있는 local 객체를 config 변수에 바인딩시킵니다.</p><p>init 메서드를 보시면 방금 바인딩시킨 config 값의 기반으로  mysql connection을 생성이 가능합니다. 또 <code>var config = require('../db/db_info').(XXX)</code> 이런 형태로 <code>db_info.js</code>에 저장돼있는 데이터베이스의 정보를 손쉽게 변경이 가능합니다.</p><p><strong>router에서 사용하기 (1)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mysql_dbc = <span class="built_in">require</span>(<span class="string">'../db/db_con'</span>)();</div><div class="line"><span class="keyword">var</span> connection = mysql_dbc.init();</div><div class="line">mysql_dbc.test_open(connection);</div></pre></td></tr></table></figure><p>mysql_dbc 변수에  db_con의 값을 require을 시키고, 위에서 설명한 init 메서드를 통해서 생성된 Mysql Connnection을 변수 connection에 저장시킵니다</p><p><strong>router에서 사용하기 (2)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">router.get(<span class="string">'/mysql/test'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> stmt = <span class="string">'select *from ....'</span>;</div><div class="line">  connection.query(stmt, <span class="function"><span class="keyword">function</span> (<span class="params">err, result</span>) </span>&#123;</div><div class="line">    .....</div><div class="line">  &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>위에서 설명한 connection 객체를 이용해서 쿼리 작업을 진행하시면 됩니다.</p><p><img src="https://i.imgur.com/yloTaE9.png" alt="EC2 Innound"></p><p>서버를 실행시키면 입력된 데이터베이스와 연결이 되고 <code>test_open</code> 메서드를 통해서 데이터베이스의 컨넥션이 제대로 생성이 됐나 간단한 로그로 출력됩니다. 이처럼 서버를 실행시켰을 때 데이터베이스와 제대로 연결되었는지 정보를 출력하시는 것을 권장합니다.</p><h3><span id="마무리">마무리</span></h3><p>이번 포스팅 내용은 짧긴 짧았지만 생각을 정리하고, 코드를 작성하고 또 그것을 문서로 다시 작성하는 것은 상당히 시간이 거리는 작업인 거 같습니다.  그래도 점점 익숙해지고 있기도 하고, 블로그를 포스팅한 날은 조회수를 보는 재미도 있습니다. 그런 의미로 좋아요, 공유하기 좀 부탁드리겠습니다…</p><p>포스팅하다 보면 “아 이 내용이 먼저 나와야 이걸 설명하기가 편할 거 같아” 이런 생각이 계속 들어 제가 하고 싶은 포스팅하고 싶은 내용보다는 좀 더 앞부분을 계속 설명해드렸던 거 같습니다. 그래도 제가 전하고 싶은 기술 천천히, 꾸준하게 포스팅해 나아가겠습니다.</p><p>긴글 읽어주셔서 감사합니다. 조만간에 찾아 뵙겠습니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;안녕하세요 스타트업에서 근무하고 있는 신입 개발자입니다. 이번에 정리할 내용은 Node + Mysql 연동입니다. 이미 수많은 예제가 있으나 앞으로 포스팅할 내용들이 데이터베이스가 필수적으로 필요하니 간단 정리 및 간단하게 팁?을 소개하여드리겠습
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="Mysql" scheme="https://cheese10yun.github.io/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Passport를 이용한 Login</title>
    <link href="https://cheese10yun.github.io/Passport-part1/"/>
    <id>https://cheese10yun.github.io/Passport-part1/</id>
    <published>2016-12-31T15:00:00.000Z</published>
    <updated>2017-10-12T20:24:19.603Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://i.imgur.com/MlUddzo.png" alt="EC2 Innound"></p><p>안녕하세요 스타트업에서 근무 중인 신입 개발자입니다. 포스팅 주제는 Passport Login입니다. 사실 passport는 다른 블로그에서도 더 깊고 잘 정리한 글들이 많아서 정리하지 않으려고 했습니다. 하지만 앞으로 passport를 이용한 소셜 로그인, rest api login 처리, 데이터베이스 연동 등을 정리할 예정이라 비교적 간단하게 설명해드리겠습니다. 어려운 기능들은 아니지만 그래도 팁이 될만한 것은 하나 이상은 준비해 오겠습니다.</p><p>본 프로젝트는 <a href="https://github.com/cheese10yun/node-yun" rel="external nofollow noopener noreferrer" target="_blank">Branch develop-passport</a> 를 참조하시면 됩니다. 직접 돌려보시면서 이해하시는 것을 추천드립니다.</p><h3><span id="필수-모듈-설치">필수 모듈 설치</span></h3><p>npm 모듈로 모듈을 설치합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">npm install cookieSession --save</div><div class="line">npm install connect-flash --save</div><div class="line">npm install passport --save</div><div class="line">npm install passport-local --save</div></pre></td></tr></table></figure><h3><span id="passport-설정">Passport 설정</span></h3><p><strong>환경설정은 저의 프로젝트 환경에서 설명드려 다소 차이가 있을 수 있습니다.</strong></p><p><code>app.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>) <span class="comment">//passport module add</span></div><div class="line">  , LocalStrategy = <span class="built_in">require</span>(<span class="string">'passport-local'</span>).Strategy;</div><div class="line"><span class="keyword">var</span> cookieSession = <span class="built_in">require</span>(<span class="string">'cookie-session'</span>);</div><div class="line"><span class="keyword">var</span> flash = <span class="built_in">require</span>(<span class="string">'connect-flash'</span>);</div><div class="line"></div><div class="line">app.use(cookieSession(&#123;</div><div class="line">  keys: [<span class="string">'node_yun'</span>],</div><div class="line">  cookie: &#123;</div><div class="line">    maxAge: <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> <span class="comment">// 유효기간 1시간</span></div><div class="line">  &#125;</div><div class="line">&#125;));</div><div class="line">app.use(flash());</div><div class="line">app.use(passport.initialize());</div><div class="line">app.use(passport.session());</div></pre></td></tr></table></figure><p>passport.initialize(), passport.session() 통해서 passport를 미들뒈어로 등록시킵니다. cookieSession을 Request 객체를 통해 Session을 핸들링할 수 있게 설정합니다. 만료기간 및 쿠키 키 값은 각자의 프로젝트에 맞게 설정하시면 됩니다.</p><p><code>login.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">name</span>=<span class="string">"frm_login"</span> <span class="attr">id</span>=<span class="string">"frm_login"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>  <span class="attr">value</span>=<span class="string">"Login"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure><p><strong>여기서 name 값이 유저 아이디 필드는 username, 패스워드 필드는 password로 되어있습니다.</strong></p><p>Router설정은 <code>index.js</code>를 통해서 진행하겠습니다.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>)</div><div class="line">  , LocalStrategy = <span class="built_in">require</span>(<span class="string">'passport-local'</span>).Strategy;</div><div class="line"></div><div class="line">router.post(<span class="string">'/login'</span>, passport.authenticate(<span class="string">'local'</span>, &#123;<span class="attr">failureRedirect</span>: <span class="string">'/login'</span>, <span class="attr">failureFlash</span>: <span class="literal">true</span>&#125;), <span class="comment">// 인증 실패 시 401 리턴, &#123;&#125; -&gt; 인증 스트레티지</span></div><div class="line">  <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    res.redirect(<span class="string">'/home'</span>);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure><p>login.html에서 post로 전송되면 이쪽에서 캐치하고 다음 작업을 진행하게 됩니다. passport.authenticate를 local strategy로 호출합니다.  이 호출은 아래에서 설명하겠습니다. failureRedirect를 통해서 로그인 실패 시 어디로 리다이렉트 할 것인지를 설정하고, 만약 로그인을 성공하게 되면 res.redirect를 통해 home으로 리다이렉트 시킵니다.</p><p><code>LocalStrategy</code> 로그인 인증로직</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">passport.use(<span class="keyword">new</span> LocalStrategy(&#123;</div><div class="line">  usernameField: <span class="string">'username'</span>,</div><div class="line">  passwordField: <span class="string">'password'</span>,</div><div class="line">  passReqToCallback: <span class="literal">true</span> <span class="comment">//인증을 수행하는 인증 함수로 HTTP request를 그대로  전달할지 여부를 결정한다</span></div><div class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">req, username, password, done</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(username === <span class="string">'user001'</span> &amp;&amp; password === <span class="string">'password'</span>)&#123;</div><div class="line">    <span class="keyword">return</span> done(<span class="literal">null</span>, &#123;</div><div class="line">      <span class="string">'user_id'</span>: username,</div><div class="line">    &#125;);</div><div class="line">  &#125;<span class="keyword">else</span>&#123;</div><div class="line">    <span class="keyword">return</span> done(<span class="literal">false</span>, <span class="literal">null</span>)</div><div class="line">  &#125;</div><div class="line">&#125;));</div></pre></td></tr></table></figure><p>위의 로그인 처리 부분에서 passport.authenticate의 내부 메커니즘을 통해서 LocalStrategy 이쪽으로 인증 처리를 위임? 시킵니다.</p><p>usernameField, passwordField의 value는 login.html의 name 값이랑 동일해야 합니다. 이 값으로 데이터베이스의 값과 비교해서 인증 절차를 진행하게 됩니다. 만약 인증이 실패 한경우 done(false, null) 성공한 경우는  done(null, 유저 정보 객체)를 serializeUser을 넘기게 됩니다.</p><p>본 예제는 간단하게 문자열로 유저 아이디가 user001, 패스워드가 password 일 경우  유저 아이디를 done callback를 통해서 serializeUser 메서드로 넘기게 됩니다. 인증이 실패한 경우는 done(false, null)를 처리합니다.</p><p><code>serializeUser</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">passport.serializeUser(<span class="function"><span class="keyword">function</span> (<span class="params">user, done</span>) </span>&#123;</div><div class="line">  done(<span class="literal">null</span>, user)</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>로그인에 성공할 시 serializeUser 메서드를 통해서 사용자 정보를 Session에 저장하게 됩니다. 본 예제에는 “‘user_id’: username” 의값이 user에 들어가고 이 값을  Session에 저장하게 됩니다.</p><p><code>deserializeUse</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">passport.deserializeUser(<span class="function"><span class="keyword">function</span> (<span class="params">user, done</span>) </span>&#123;</div><div class="line">  done(<span class="literal">null</span>, user);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>로그인에 성공하게 되면 Session정보를 저장을 완료했기에 이제 페이시 접근 시마다 사용자 정보를 갖게 Session에 갖게 됩니다. 인증이 완료되고 페이지 이동시 deserializeUser 메서드가 호출되는 것을 로그를 찍어 보시면 확인할 수 있습니다.</p><h4><span id="session-정보-확인">Session 정보 확인</span></h4><p><img src="https://i.imgur.com/titCnYZ.png" alt="EC2 Innound"></p><h3><span id="로그인-유저-판단">로그인 유저 판단</span></h3><p><code>isAuthenticated()</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> isAuthenticated = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (req.isAuthenticated())</div><div class="line">    <span class="keyword">return</span> next();</div><div class="line">  res.redirect(<span class="string">'/login'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>Connect 미들웨어를 이용해서 isAuthenticated 메서드를 호출하여 로그인 판단 여부를 확인할 수 있습니다. 로그인한 유저는 req.isAuthenticated는 true를 반환해서 next()를 호출해서 다음 작업을 진행하게 되고 로그인하지 않은 유저는 자연스럽게 login 페이지로 리다이렉트 시켜 로그인을 자연스럽게 유도할 수 있게 합니다.</p><p><code>isAuthenticated</code> 사용법</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">router.get(<span class="string">'/myinfo'</span>, isAuthenticated, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  res.render(<span class="string">'myinfo'</span>,&#123;</div><div class="line">    title: <span class="string">'My Info'</span>,</div><div class="line">    user_info: req.user</div><div class="line">  &#125;)</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>위에 설명한 isAuthenticated 메서드를 통해서 해당 접속자가 로그인하지 않은 유저일 경우는 login 페이지로 리다이렉트 시킬 것이고, 로그인한 접속자일 경우는 myinfo 페이지에 접속할 수 있게 합니다. 이 메서드를 사용하면 편리하게 접속자의 인증 여부와 그에 따른 추가 작업을 진행시키기 용이합니다.</p><p><code>Lgout</code> 사용법</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">router.get(<span class="string">'/logout'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">  req.logout();</div><div class="line">  res.redirect(<span class="string">'/'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h3><span id="정리하며">정리하며…</span></h3><p>저희 회사에서도 passport를 이용해서 로그인 처리를 진행하고 있어 생각보다 어렵지 않게 정리할 수 있겠군 아 라는 생각을 했었습니다. 하지만 위의 기능을 하나하나 설명하려고 하니 그냥 전체적은 흐름만 대강 알지 각각의 기능들이 무엇을 의미하는지는 전혀 모르고 있었습니다. 그래서 초기에 생각했던 내용보다는 다소 길어졌고 다른 블로그에서도 이미 자세히 설명한 부분들이라 도음이 되셨을지는 모르겠습니다.</p><p>긴 글읽어주셔서 감사합니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://i.imgur.com/MlUddzo.png&quot; alt=&quot;EC2 Innound&quot;&gt;&lt;/p&gt;
&lt;p&gt;안녕하세요 스타트업에서 근무 중인 신입 개발자입니다. 포스팅 주제는 Passport Login입니다. 사실 passport
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="Login" scheme="https://cheese10yun.github.io/tags/Login/"/>
    
      <category term="Passport" scheme="https://cheese10yun.github.io/tags/Passport/"/>
    
  </entry>
  
  <entry>
    <title>PM2 이용한 Node 프로세스 관리</title>
    <link href="https://cheese10yun.github.io/PM2/"/>
    <id>https://cheese10yun.github.io/PM2/</id>
    <published>2016-12-19T15:00:00.000Z</published>
    <updated>2017-10-12T20:24:38.663Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 스타트업에서 근무하고 있는 신입 개발자입니다. 저희는 Node 프로세스 관리를 PM2 모듈을 이용해서 관리하고 있습니다. PM2에 대한 기초지식이 있으신 분들은 3번 항목만 보셔도 좋습니다.</p><ol><li>PM2 소개 및 설치</li><li>PM2 명령어</li><li>쉘 스크립트 PM2 제어</li></ol><h2><span id="1-pm2-소개-및-설치">1. PM2 소개 및 설치</span></h2><p>개발 중에 에러를 만나면 노드  서버가 강제로 죽어 버리는 경우를 빈번하게 맞이하게 됩니다. 이럴 때 앱을 재실행해주는 기능도 담당하고 있어 실제 노드 서버에서는 필수적인 패키지이라고 할 수 있습니다. 물론 이밖에 다양한 기능들을 재공해 주고 있습니다. 기능을 크게 정리하면 다음과 같습니다.</p><ul><li>앱에서 충돌이 발생할 경우 앱을 자동으로 다시 시작</li><li>런타임 성능 및 자원 소비에 대한 통찰력을 획득</li><li>성능 향상을 위해 설정을 동적으로 수정</li><li>클러스터링을 제어</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[sudo] npm install pm2 -g</div></pre></td></tr></table></figure><h2><span id="2-pm2-간단-명령어">2. PM2 간단 명령어</span></h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 start  &lt;실행시킬 서버. js&gt; -- name &lt;AppName&gt;</div></pre></td></tr></table></figure><p><img src="https://i.imgur.com/HPbXbRg.png" alt=""></p><p>제 환경에서는 www 파일로 노드 서버를 시행시키고 있어 위 그림과 같은 명령어로 PM2를 실행합니다. App Name을 설정하는 것을 권장해 드립니다. 아래 소개하여드릴 명령어를 App Name으로 쉽게 제어할 수 있어집니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 list</div></pre></td></tr></table></figure><p>pm2 리스트를 보여주는 명령어입니다. 설정하신 App Name 값으로 실행되신 걸 확인하실 수 있습니다.</p><p><img src="https://i.imgur.com/SgojMzT.png" alt=""></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">pm2 stop &lt;app_name&gt;</div><div class="line">pm2 restart &lt;app_name&gt;</div><div class="line">pm2 delete &lt;app_name&gt;</div></pre></td></tr></table></figure><p>간단한 명령어이므로 설명은 생략하겠습니다. 명령어 뜻 그대로 해석하시면 됩니다. 위에서 설명했던 것처럼 App_name으로 편리하게 pm2 명령어를 제어할 수 있습니다</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 show &lt;app_name&gt;</div></pre></td></tr></table></figure><p><img src="https://i.imgur.com/HTe0f4I.png" alt=""></p><p>pm2 정보뿐만이 아니라 노드 버전, 로그 위치, 기타 등등 다양한 정보를 확인하실 수 있습니다. 또 git을 사용하신다면 branch 정보 등 간략한 정보도 출력됩니다.</p><h2><span id="3-쉘-스크립트-pm2-제어">3. 쉘 스크립트 PM2 제어</span></h2><p>사실 이 내용을 포스팅하기 위해서 시작했습니다. 이 부분만 따로 올리기에는 포스팅 내용이 너무 짧아서 조금씩 넣다 보니 이렇게 길어… 졌습니다.</p><p>서버를 시작, 정지, 재시작하는 경우는 정말 빈번하게 발생합니다. 그래서 저희는 <a href="http://start.sh" rel="external nofollow noopener noreferrer" target="_blank">start.sh</a>, <a href="http://restart.sh" rel="external nofollow noopener noreferrer" target="_blank">restart.sh</a>, <a href="http://stop.sh" rel="external nofollow noopener noreferrer" target="_blank">stop.sh</a> 쉘 스크립트를 통해서 start, restart, stop 작업을 진행시킵니다.항상 그렇듯 반복되는 귀찮은 작업은 간략화시키는 것이 좋습니다.</p><p><code>start.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">pm2 reload node_yun;</div><div class="line"><span class="built_in">echo</span> <span class="string">'Reload pm2 demon...'</span>;</div><div class="line">sleep 1;</div><div class="line">sudo service nginx restart;</div><div class="line"><span class="built_in">echo</span> <span class="string">'Restart nginx server...'</span>;</div><div class="line"><span class="built_in">echo</span> <span class="string">'All Done!'</span></div><div class="line"><span class="built_in">exit</span>;</div></pre></td></tr></table></figure><p><code>stop.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">pm2 stop node_yun;</div><div class="line"><span class="built_in">echo</span> <span class="string">'Stop node_yun by pm2'</span>;</div><div class="line">sleep 1;</div><div class="line">sudo service nginx stop;</div><div class="line"><span class="built_in">echo</span> <span class="string">'Stop nginx server...'</span>;</div><div class="line"><span class="built_in">echo</span> <span class="string">'All Done!'</span>;</div><div class="line"><span class="built_in">exit</span>;</div></pre></td></tr></table></figure><p><code>restart.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line">pm2 delete node_yun;</div><div class="line">pm2 start /home/ec2-user/node-yun/bin/www -i 0 --name node_yun;</div><div class="line"><span class="built_in">echo</span> <span class="string">'start node_yun by pm2'</span>;</div><div class="line">sleep 1;</div><div class="line">sudo service nginx start;</div><div class="line"><span class="built_in">echo</span> <span class="string">'Start nginx server...'</span>;</div><div class="line"><span class="built_in">echo</span> <span class="string">'All Done!'</span>;</div><div class="line"><span class="built_in">exit</span>;</div></pre></td></tr></table></figure><h3><span id="클러스터-모드">클러스터 모드</span></h3><p>pm2를 실행시킬 때 -i 옵션을 사용하면 클러스터 모드로 실행이 됩니다. -i 뒤에 0을 지정하면 사용 가능한 CPU가 모두 실행이 됩니다. 간단하게 클러스터 모드를 실행시킬 수 있습니다.</p><p><img src="https://i.imgur.com/vLBjZd5.png" alt=""></p><p><strong>pm2 list 명령어로 현재 실행 중인 인스턴스 개수를 확인할 수 있습니다</strong></p><p><code>restart.sh 실행화면</code></p><p><img src="https://i.imgur.com/Jre6Yql.gif" alt=""></p><h3><span id="정리">정리</span></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;안녕하세요 스타트업에서 근무하고 있는 신입 개발자입니다. 저희는 Node 프로세스 관리를 PM2 모듈을 이용해서 관리하고 있습니다. PM2에 대한 기초지식이 있으신 분들은 3번 항목만 보셔도 좋습니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;PM2 소개 및 설치
      
    
    </summary>
    
    
      <category term="Node" scheme="https://cheese10yun.github.io/tags/Node/"/>
    
      <category term="PM2" scheme="https://cheese10yun.github.io/tags/PM2/"/>
    
      <category term="Process Management" scheme="https://cheese10yun.github.io/tags/Process-Management/"/>
    
  </entry>
  
  <entry>
    <title>WebStorm 어디까지 써봤니? part 1</title>
    <link href="https://cheese10yun.github.io/webStrom-part1/"/>
    <id>https://cheese10yun.github.io/webStrom-part1/</id>
    <published>2016-12-17T15:00:00.000Z</published>
    <updated>2017-10-12T20:24:38.660Z</updated>
    
    <content type="html"><![CDATA[<p>안녕하세요 스타트업에서 근무하고 있는 신입 개발자입니다. 회사 내의 기술 스펙이 거의 자바스크립트를 기반으로 두고 있어 기존에 사용해왔던 IntelliJ에서 WebStrom으로 변경하게 되었습니다. 그래서 이번 기회에 Webstrom에 좀 더 친숙해지고 사용법을 읽힐 겸 간단하게 정리해봅니다.<br>물론 WebStrom 뿐만 아니라 JetBrains사의 IDE에서 공통적으로 사용이 가능합니다.</p><p>단축키는 Mac OS 기반으로 알려드리겠습니다.</p><h3><span id="동일-문자열-변경">동일 문자열 변경</span></h3><p><img src="https://i.imgur.com/fAMA6Or.gif" alt="⌘ + ⌃ + g" title="⌘ + ⌃ + g"><br><strong><em>⌘ + ⌃ + g</em></strong></p><p>코드를 작성하다가 동일한 문자열을 변경해야 하는 경우는 빈번하게 발생합니다. 위 그림과 같이 특정 변수를 모두 변경해야 하는 경우가 대표적인 예입니다. 변수가 2~3이면 귀찮지 않은데 위 와 같은 경우에는 크게 귀찮아집니다. 이럴 때 유용하게 사용하는 기능입니다.</p><p>변경하고 싶은 문자열을 드래그 이후 <strong><em>command + control + g</em></strong>  단축키를 입력하면 동일 문자열을 한 번에 변경이 가능합니다.</p><h3><span id="동일한-위치-문자열-변경">동일한 위치 문자열 변경</span></h3><p><img src="https://i.imgur.com/Z5IYg6w.gif" alt="⌥  + dra" title="⌥  + drag"><br><strong><em>⌥  + drag</em></strong></p><p>동일 문자열과 비슷한 기능입니다. 만약 변경 대상이 동일한 문자열이 아닐 경우도 위와 같이 발생할 수 있습니다. 이러한 경우에 <strong><em>Alt + 마우스 드래그</em></strong>를 통해서 한 번에 변경하실 수 있습니다. 이 기능 익숙해지면 다양하게 사용할 수 있습니다.</p><h3><span id="복사-리스트">복사 리스트</span></h3><p><img src="https://i.imgur.com/6ClfGhw.gif" alt="⌘  + ⇧ + v "></p><p>개발을 하면서 우리는 수없이 정말 수없이 복사 붙여 넣기를 합니다… 이럴 때 가장 불편한 점 중에 하나는 새로 복사할 때마다 이전 복사한 내용들이 없어진다는 점이죠.</p><p>이러한 경우에 <strong><em>command + shift + v</em></strong>를 사용하시면 간단하게 해결됩니다. 단축키를 입력하시면 복사한 리스트들 출력되고 해당 리스트에서 엔터키를 입력하면 됩니다</p><h3><span id="live-template">Live Template</span></h3><p><img src="https://i.imgur.com/ojSSHaC.gif" alt="console.log()"><br><img src="https://i.imgur.com/SPMRe1P.gif" alt="console.log()"></p><p>코드를 작성하다 보면 중간중간 결과 값을 확인하기 위해서 <code>console.log('')</code>를 사용해서 확인 작업을 수없이 진행하게 됩니다. 이러한 반복적인 코드와 예약 어를 정의하고 예약 어를 통해서 코드를 불러오는 기능이 Live Template입니다.</p><p>저 같은 경우에는 예약어 clog로 <code>console.log('')</code>를 간단하게 작성합니다. 물론 이러한 간단한 코드는 그때그때 작성해도 크게 불 펴하지는 않지만 코드량이 길어지면 점점 귀찮아지기 시작합니다.</p><p>api를 호출하는 ajax 같은 코드도 빈번하게 작성되는 코드다 보니 위 그림과 같이 ajg 예약어로  ajax get 코드를 간단하게 작성하실 수 있습니다.</p><p>하지만 저 같은 신입의 경우 해당 코드를 어느 정도 숙지가 완료되었을 때 Live Template에 추가하는 것을 권장드립니다. 코드를 숙지하지 않고 IDE기능을 통해서만 작성하는 것은 좋은 습관은 아니라고 생각합니다.</p><h3><span id="live-template-등록-방법">Live Template 등록 방법</span></h3><p><img src="https://i.imgur.com/SPMRe1P.gif" alt="Live Template"></p><p><strong>⌘ + ,단축키</strong>를 통해서 설정에 들어가시면 Live Template 항목에서 해당 언어의 Template을 설정할 수 있습니다. 자바스크립트뿐만 아니라 다양하 언어의 Template 지정할 수 있습니다. <strong><em>반드시 하단에 Define을 클릭하시고 해당 언어를 다시 한번 정의해주셔야 됩니다.</em></strong></p><p>이번에 소개해드린 기능들은 제가 가장 많이 사용하고, 유용하게 사용하는 기능들입니다. 앞으로는 좀 더 막강한 기능들을 공부해서 소개하여드리도록 하겠습니다.</p><p>조금이나마 도움이 되셨기를 바랍니다. 긴 글 읽어주셔서 감사드립니다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;안녕하세요 스타트업에서 근무하고 있는 신입 개발자입니다. 회사 내의 기술 스펙이 거의 자바스크립트를 기반으로 두고 있어 기존에 사용해왔던 IntelliJ에서 WebStrom으로 변경하게 되었습니다. 그래서 이번 기회에 Webstrom에 좀 더 친
      
    
    </summary>
    
    
      <category term="WebStorm" scheme="https://cheese10yun.github.io/tags/WebStorm/"/>
    
  </entry>
  
  <entry>
    <title>신입 개발자 취업도전기</title>
    <link href="https://cheese10yun.github.io/new-Developer-work-challenge/"/>
    <id>https://cheese10yun.github.io/new-Developer-work-challenge/</id>
    <published>2016-12-12T15:00:00.000Z</published>
    <updated>2017-10-12T19:21:42.808Z</updated>
    
    <content type="html"><![CDATA[<iframe src="//www.slideshare.net/slideshow/embed_code/key/viQSK55PAfHjGE" width="595" height="485" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC; border-width:1px; margin-bottom:5px; max-width: 100%;" allowfullscreen> </iframe> <div style="margin-bottom:5px"> <strong> <a href="//www.slideshare.net/ssuser565d51/ss-61448739" title="신입 개발자 취업도전기" target="_blank">신입 개발자 취업도전기</a> </strong> from <strong><a target="_blank" href="//www.slideshare.net/ssuser565d51">남윤 김</a></strong> </div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;iframe src=&quot;//www.slideshare.net/slideshow/embed_code/key/viQSK55PAfHjGE&quot; width=&quot;595&quot; height=&quot;485&quot; frameborder=&quot;0&quot; marginwidth=&quot;0&quot; marginhe
      
    
    </summary>
    
    
  </entry>
  
</feed>
